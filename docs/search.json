[{"path":"index.html","id":"welcome","chapter":"1 Welcome","heading":"1 Welcome","text":"","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"1 Welcome","heading":"1.1 About this handbook","text":"ObjectiveA free open-access digital R reference book catered epidemiologists public health practitioners usable offline addresses common epidemiological tasks via clear text explanations, step--step instructions, best practice R code examplesEpis using R must often Google search read dozens forum pages complete common data manipulation visualization epi tasks. However, field epidemiologists often work low internet-connectivity environments limited technical support. handbook aims fill gap.read handbook:HTML file can viewed offline, best viewed Google Chrome.HTML file can viewed offline, best viewed Google Chrome.Search via search box Table Contents. Ctrl+f search across current page.Search via search box Table Contents. Ctrl+f search across current page.Click “clipboard” icon upper-right code chunk copy .Click “clipboard” icon upper-right code chunk copy .Version\r\nlatest version handbook can found github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"1 Welcome","heading":"1.2 Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"1 Welcome","heading":"1.2.1 Contributors","text":"Editor--Chief: Neale Batra (neale.batra@gmail.com)Editorial core team: …Authors: …Reviewers: …Advisers …","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"1 Welcome","heading":"1.2.2 Funding and programmatic support","text":"TEPHINET\r\nEAN","code":""},{"path":"index.html","id":"data-sources","chapter":"1 Welcome","heading":"1.2.3 Data sources","text":"outbreaks R package","code":""},{"path":"index.html","id":"inspiration-and-templates","chapter":"1 Welcome","heading":"1.2.4 Inspiration and templates","text":"R4Epis\r\nRECON packages\r\nR4DS book (Hadley)\r\nBookdown book (Yihui)\r\nRmarkdown book (Yihui)","code":""},{"path":"index.html","id":"image-credits","chapter":"1 Welcome","heading":"1.2.5 Image credits","text":"Logo: CDC Public Image gallery; R Graph Gallery","code":""},{"path":"style-and-editorial-notes.html","id":"style-and-editorial-notes","chapter":"2 Style and editorial notes","heading":"2 Style and editorial notes","text":"","code":""},{"path":"style-and-editorial-notes.html","id":"style","chapter":"2 Style and editorial notes","heading":"2.1 Style","text":"","code":""},{"path":"style-and-editorial-notes.html","id":"text-style","chapter":"2 Style and editorial notes","heading":"2.1.1 Text style","text":"Package function namesPackage names written bold (e.g. dplyr) functions written like : mutate(). Packages referenced either text within code like : dplyr::mutate()Types notesNOTE: noteTIP: tip.CAUTION: cautionary note.DANGER: warning.","code":""},{"path":"style-and-editorial-notes.html","id":"tidyverse","chapter":"2 Style and editorial notes","heading":"2.1.2 tidyverse","text":"handbook generally uses tidyverse R coding style. Read ","code":""},{"path":"style-and-editorial-notes.html","id":"code-readability","chapter":"2 Style and editorial notes","heading":"2.1.3 Code readability","text":"chose frequently write code new lines, order offer understandable comments. result, code written like :…often written like :","code":"\nobs %>% \n  group_by(name) %>%                    # group the rows by 'name'\n  slice_max(date, n = 1, with_ties = F) # if there's a tie (of date), take the first row\nobs %>% \n  group_by(name) %>%   # group the rows by 'name'\n  slice_max(\n    date,              # keep row per group with maximum date value \n    n = 1,             # keep only the single highest row \n    with_ties = F)     # if there's a tie (of date), take the first row"},{"path":"style-and-editorial-notes.html","id":"editorial-decisions","chapter":"2 Style and editorial notes","heading":"2.2 Editorial decisions","text":", track significant editorial decisions around package function choice. disagree want offer new tool, please join/start conversation Github page.Table package, function, editorial decisions","code":""},{"path":"datasets-used.html","id":"datasets-used","chapter":"3 Datasets used","heading":"3 Datasets used","text":"datasets used handbook described downloadableLinelist (…)Aggregated case counts (…)GIS shapefile (…)modeling dataset? (…)","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"4 R Basics","heading":"4 R Basics","text":"","code":""},{"path":"r-basics.html","id":"overview","chapter":"4 R Basics","heading":"4.1 Overview","text":"section meant comprehensive “learn basic R” tutorial. However, cover fundamentals can useful reference refreshing memory.See tab recommended training comprehensive tutorials.","code":""},{"path":"r-basics.html","id":"why-use-r","chapter":"4 R Basics","heading":"4.2 Why use R?","text":"stated R project website, R programming language environment statistical computing graphics. highly versatile, extensible, community-driven.CostR free use! strong ethic community free open-source material.ReproducibilityConducting data management analysis programming language (compared Excel primarily manual tool) enhances reproducibility, makes error-detection easier, eases workload.CommunityThe broad R community enormous collaborative. New packages tools developed daily, vetted community. Perhaps largest organization R users R-Ladies, likely chapter near .","code":""},{"path":"r-basics.html","id":"packages","chapter":"4 R Basics","heading":"4.3 Packages","text":"R package shareable bundle code documentation contains pre-defined functions. Users R community develop share packages time, chances likely solution exists ! install use hundreds packages use R.CRANCRAN (Comprehensive R Archive Network) public warehouse R packages published R community members. often, R users download packages CRAN.Install vs. LoadTo use package, 2 steps must implemented:package must installed (), andThe package must loaded (R session)basic function installing package install.packages(), name package provided quotes. can also accomplished point--click going RStudio “Packages” pane clicking “Install”.basic function load package use (installed) library(), name package quotes.Using pacmanThis handbook uses package pacman (abbreviation “package manager”), offers useful function p_load(). function combines two steps one - installs /loads packages, depending needed. package yet installed, attempt install CRAN, load ., load packages used R basics page:function p_isinstalled() test whether packages installed already.Install githubSometimes, need install development version package, github repository. can use p_load_gh() pacman (function wrapper around install_github() devtools).Read pacman hereInstall ZIP TARYou get package URL:download computer zipped file:Option 1:Option 2:Delete packagesUse p_delete() pacman, remove.packages() base R. Alternatively, go find folder contains library manually delete folder.DependenciesPackages often depend packages work. called dependencies. dependency fails install, package depending may also fail install.See dependencies package p_depends(), see packages depend p_depends_reverse()Masked functionsIt uncommon two packages contain function name. example, package dplyr filter() function, package stats. default filter() function depends order packages first loaded R session - later one default command filter().can check order Environment pane R Studio - click drop-“Global Environment” see order packages. Functions higher packages mask name lower packages. first loading package, R warn console masking occurring, easy miss.ways can fix masking:Specify package name command. example, use dplyr::filter()Re-arrange order packages loaded (e.g. within library() p_load()), re-start Rdetach() desired package re-attach , thus making highest/default version.Installing older versions packagesSee guide","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\npacman::p_load(tidyverse, rio, here)\n# install development version of package from github repository\np_install_gh(\"reconhub/epicontacts\")\n\n# load development version of package which you had downloaded from github repository\np_load_gh(\"reconhub/epicontacts\")\npackageurl <- \"https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz\"\ninstall.packages(packageurl, repos=NULL, type=\"source\")\nlibrary(devtools)\ninstall_local(\"~/Downloads/dplyr-master.zip\")\ninstall.packages(path_to_source, repos = NULL, type=\"source\")\n\ninstall.packages(\"~/Downloads/dplyr-master.zip\", repos=NULL, type=\"source\")"},{"path":"r-basics.html","id":"install","chapter":"4 R Basics","heading":"4.4 Installation","text":"install RVisit website https://www.r-project.org/ download latest version R suitable computer.install R StudioVisit website https://rstudio.com/products/rstudio/download/ download latest free Desktop version RStudio suitable computer.update R RStudioOther things may need install:TinyTeX (compiling RMarkdown document PDF)Pandoc (compiling RMarkdown documents)RTools (building packages R)","code":""},{"path":"r-basics.html","id":"tinytex","chapter":"4 R Basics","heading":"4.4.1 TinyTex","text":"See https://yihui.org/tinytex/install R:","code":"\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n# to uninstall TinyTeX, run tinytex::uninstall_tinytex()"},{"path":"r-basics.html","id":"pandoc","chapter":"4 R Basics","heading":"4.4.2 Pandoc","text":"Pandoc document converter, separate software R. comes bundled RStudio. helps process converting Rmarkdown documents formats like .pdf adding complex functionality.","code":""},{"path":"r-basics.html","id":"rtools","chapter":"4 R Basics","heading":"4.4.3 RTools","text":"RTools collection software building packages RInstall website: https://cran.r-project.org/bin/windows/Rtools/","code":""},{"path":"r-basics.html","id":"rstudio","chapter":"4 R Basics","heading":"4.5 RStudio","text":"","code":""},{"path":"r-basics.html","id":"rstudio-orientation","chapter":"4 R Basics","heading":"4.5.1 RStudio Orientation","text":"First, open RStudio. icons can look similar, sure opening RStudio R.RStudio function must also R installed computer (see section installation instructions).RStudio interface (GUI) easier use R. can think R engine vehicle, crucial work, RStudio body vehicle (seats, accessories, etc.) helps actually use engine move forward!default RStudio displays four rectangle panes.TIP: RStudio displays one left pane scripts open yet.R Console PaneThe R Console, default left lower-left pane R Studio, home R “engine”. commands actually run non-graphic outputs error/warning messages appear. can directly enter run commands R Console, realize commands saved running commands script.familiar Stata, R Console like Command Window also Results Window.Source Pane\r\npane, default upper-left, space edit run scripts. pane can also display datasets (data frames) viewing.Stata users, pane similar -file Data Editor windows.Environment Pane\r\npane, default upper-right, often used see brief summaries objects R Environment current session. objects include imported, modified, created datasets, parameters defined (e.g. specific epi week analysis), vectors lists defined analysis (e.g. names regions). Click arrow next dataframe name see variables.Stata, similar Variables Manager window.Plots, Packages, Help Pane\r\nlower-right pane includes several tabs including plots (display graphics including maps), help, file library, available R packages (including installation/update options).pane contains Stata equivalents Plots Manager Project Manager windows.","code":""},{"path":"r-basics.html","id":"rstudio-settings","chapter":"4 R Basics","heading":"4.5.2 RStudio settings","text":"Change RStudio settings appearance Tools drop-menu, selecting Global Options. can change default settings, including appearance/background color.","code":""},{"path":"r-basics.html","id":"scripts","chapter":"4 R Basics","heading":"4.6 Scripts","text":"Scripts fundamental part programming. Storing code script (vs. typing console) many advantages:ReproducibilityVersion controlCommenting","code":""},{"path":"r-basics.html","id":"rmd","chapter":"4 R Basics","heading":"4.6.1 Rmarkdown","text":"Rmarkdown type script script becomes document (PDF, Word, HTML, Powerpoint, etc.). See handbook page Rmarkdown documents.","code":""},{"path":"r-basics.html","id":"rnotebooks","chapter":"4 R Basics","heading":"4.6.2 R notebooks","text":"difference writing Rmarkdown vs R notebook. However execution document differs slightly. See site details.","code":""},{"path":"r-basics.html","id":"shinyscripts","chapter":"4 R Basics","heading":"4.6.3 R Shiny","text":"Shiny apps contained within one script, must named app.R. file three components:user interface (ui)server functionA call shinyApp functionSee handbook page Shiny basics, online tutorial: Shiny tutorialIn older versions, file split two files (ui.R server.R)","code":""},{"path":"r-basics.html","id":"workingdirectory","chapter":"4 R Basics","heading":"4.7 Working directory","text":"tabs cover use R working directories, changes working within R project.\r\nworking directory root file location used R work.\r\ndefault, save new files outputs location, look files import (e.g. datasets) well.","code":"NOTE: If using an [R project](#rproject), the working directory will default to the R project root folder **IF** you open RStudio by clicking open the R project (the file with .rproj extension))\r\n"},{"path":"r-basics.html","id":"set-by-command","chapter":"4 R Basics","heading":"4.7.1 Set by command","text":"Use command setwd() filepath quotations, example: setwd(\"C:/Documents/R Files\")CAUTION: using RMarkdown script aware following:R Markdown script, default working directory folder Rmarkdown file (.Rmd) saved . want change , can use setwd() , know change apply specific code chunk.change working directory code chunks R markdown, edit setup chunk add root.dir = parameter, :","code":"\nknitr::opts_knit$set(root.dir = 'desired/filepath/here')"},{"path":"r-basics.html","id":"set-manually","chapter":"4 R Basics","heading":"4.7.2 Set Manually","text":"Setting working directory manually (point--click)RStudio click: Session / Set Working Directory / Choose Directory (time open RStudio)","code":""},{"path":"r-basics.html","id":"in-an-r-project","chapter":"4 R Basics","heading":"4.7.3 In an R project","text":"working R project, working directory default root folder. convenient maximize package (LINK).","code":""},{"path":"r-basics.html","id":"objects","chapter":"4 R Basics","heading":"4.8 Objects","text":"Everything R object. sections explain:create objects (<-)Types objects (e.g. data frames, vectors..)access subparts objects (e.g. variables dataset)Classes objects (e.g. numeric, character, factor)","code":""},{"path":"r-basics.html","id":"everything-is-an-object","chapter":"4 R Basics","heading":"4.8.1 Everything is an object","text":"Everything store R - datasets, variables, list village names, total population number, even outputs graphs - objects assigned name can referenced later commands.object exists assigned value (see assignment section ). assigned value, object appears Environment (see upper right pane RStudio). can operated upon, manipulated, changed, re-defined.","code":""},{"path":"r-basics.html","id":"defining-objects--","chapter":"4 R Basics","heading":"4.8.2 Defining objects (<-)","text":"Create objects assigning value <- operator.\r\ncan think assignment operator <- words “defined ”. Assignment commands generally follow standard order:object_name <- value (process/calculation produce value)EXAMPLE: may want record current epidemiological reporting week object reference later code. example, object reporting_week created assigned character value \"2018-W10\" (quote marks make character value).\r\nobject reporting_week appear RStudio Environment pane (upper-right) can referenced later commands.See R commands output boxes .NOTE: Note [1] R console output simply indicating viewing first item outputCAUTION: object’s value can -written time running assignment command re-define value. Thus, order commands run important.following command re-define value reporting_week:Datasets also objects must assigned names imported.code , object linelist created assigned value CSV file imported rio package.can read importing exporting datasets section importing data.CAUTION: quick note naming objects:Object names must contain spaces, use underscore (_) period (.) instead space.Object names case-sensitive (meaning Dataset_A different dataset_A).Object names must begin letter (begin number like 1, 2 3).","code":"\nreporting_week <- \"2018-W10\"   # this command creates the object reporting_week by assigning it a value\nreporting_week                 # this command prints the current value of reporting_week object in the console## [1] \"2018-W10\"\nreporting_week <- \"2018-W51\"   # assigns a NEW value to the object reporting_week\nreporting_week                 # prints the current value of reporting_week in the console## [1] \"2018-W51\"\n# linelist is created and assigned the value of the imported CSV file\nlinelist <- rio::import(\"my_linelist.csv\")"},{"path":"r-basics.html","id":"objectstructure","chapter":"4 R Basics","heading":"4.8.3 Object structure","text":"Objects can single piece data (e.g. my_number <- 24), can consist structured data.graphic , sourced online R tutorial shows common data structures names. included image spatial data, discussed GIS section.epidemiology (particularly field epidemiology), commonly encounter data frames vectors:Note create vector “stands alone”, part data frame (list location names), function c() often used:list_of_names <- c(\"Ruhengeri\", \"Gisenyi\", \"Kigali\", \"Butare\")","code":""},{"path":"r-basics.html","id":"objectclasses","chapter":"4 R Basics","heading":"4.8.4 Object classes","text":"objects stored R class tells R handle object. many possible classes, common ones include:can test class object feeding function class(). Note: can reference specific column within dataset using $ notation separate name dataset name column.Often, need convert objects variables another class.online material classes data structures R.","code":"\nclass(linelist$age)     # class should be numeric## [1] \"numeric\"\nclass(linelist$gender)  # class should be character## [1] \"character\""},{"path":"r-basics.html","id":"dollarsign","chapter":"4 R Basics","heading":"4.8.5 Columns/Variables ($)","text":"Vectors within data frame (variables dataset) can called, referenced, created using $ symbol. $ symbol connects name column name data frame. $ symbol must used, otherwise R know look create column.handbook, use word “column” instead “variable”.typing name data frame followed $ also see list variables data frame. can scroll using arrow key, select one Enter key, avoid spelling mistakes!ADVANCED TIP: complex objects (e.g. epicontacts object may multiple levels can accessed multiple dollar signs. example epicontacts$linelist$date_onset) .","code":"\n# Retrieve the length of the vector age_years\nlength(linelist$age) # (age is a variable in the linelist data frame)\nknitr::include_graphics(here::here(\"images\", \"Calling_Names.gif\"))"},{"path":"r-basics.html","id":"brackets","chapter":"4 R Basics","heading":"4.8.6 Access with brackets ([])","text":"may need view parts objects, often done using square brackets [ ].view specific rows columns dataset, can using syntax dataframe[rows, columns]:square brackets also work call specific parts object, output summary() function, vector:","code":"\n# View a specific row (2) from dataset, with all columns\nlinelist[2,]\n\n# View all rows, but just one column\nlinelist[, \"date_onset\"]\n\n# View values from row 2 and columns 5 through 10\nlinelist[2, 5:10] \n\n# View values from row 2 and columns 5 through 10 and 18\nlinelist[2, c(5:10, 18)] \n\n# View rows 2 through 20, and specific columns\nlinelist[2:20, c(\"date_onset\", \"outcome\", \"age\")]\n\n# View rows and columns based on criteria\n# *** Note the dataframe must still be names in the criteria!\nlinelist[linelist$age > 25 , c(\"date_onset\", \"date_birth\", \"age\")]\n\n# Use View() to see the outputs in the RStudio Viewer pane (easier to read) \n# *** Note the capital \"V\" in View() function\nView(linelist[2:20, \"date_onset\"])\n\n# Save as a new object\nnew_table <- linelist[2:20, c(\"date_onset\")] \n# All of the summary\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##    0.00    6.00   13.00   15.09   22.00   67.00      88\n#Just one part\nsummary(linelist$age)[2]  ## 1st Qu. \r\n##       6\nmy_vector <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")  # define the vector\nmy_vector[5]                                  # print the 5th element## [1] \"e\""},{"path":"r-basics.html","id":"functions","chapter":"4 R Basics","heading":"4.9 Functions and packages","text":"section functions explains:function workWhat arguments areWhat packages areHow get help understanding function","code":""},{"path":"r-basics.html","id":"simple-functions","chapter":"4 R Basics","heading":"4.9.1 Simple functions","text":"function like machine receives inputs, action inputs, produces output.\r\noutput depends function.Functions typically operate upon object placed within function’s parentheses.\r\nexample, function sqrt() calculates square root number:Functions can also applied variables dataset. example, function summary() applied numeric variable age dataset linelist (’s $ symbol?), output summary variable’s numeric missing values.NOTE: Behind scenes, function represents complex additional code wrapped user one easy command.","code":"\nsqrt(49)## [1] 7\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##    0.00    6.00   13.00   15.09   22.00   67.00      88"},{"path":"r-basics.html","id":"functions-with-multiple-arguments","chapter":"4 R Basics","heading":"4.9.2 Functions with multiple arguments","text":"Functions often ask several inputs, called arguments, located within parentheses function, usually separated commas.arguments required function work correctly, others optional.Optional arguments default settings specified.Arguments can take character, numeric, logical (TRUE/FALSE), inputs.example, age_pyramid() command produces age pyramid graphic based defined age groups binary split variable, gender. function given three arguments within parentheses, separated commas. values supplied arguments establish linelist data frame use, age_group variable count, gender binary variable use splitting pyramid color.NOTE: example, background created new variable called “age_group”. learn create new variable see section handbook first half argument assignment (e.g. data =) need specified arguments written specific order (specified function’s documentation). code produces exact pyramid , function expects argument order: data frame, age_group variable, split_by variable.complex age_pyramid() command might include optional arguments :Show proportions instead counts (set proportional = TRUE default FALSE)Specify two colors use (pal = short “palette” supplied vector two color names. See objects page function c() makes vector)NOTE: arguments specified equals symbol (e.g. coltotals = ...), order among arguments important (must still within parentheses separated commas).","code":"\n# Creates an age pyramid by specifying the dataframe, age group variable, and a variable to split the pyramid\napyramid::age_pyramid(data = linelist, age_group = \"age_group\", split_by = \"gender\")\n# This command will produce the exact same graphic as above\napyramid::age_pyramid(linelist, \"age_group\", \"gender\")\nage_pyramid(linelist, \"age_group\", \"gender\", proportional = TRUE, pal = c(\"orange\", \"purple\"))"},{"path":"r-basics.html","id":"packages","chapter":"4 R Basics","heading":"4.9.3 Packages","text":"Packages contain functions.installation, R contains “base” functions perform common elementary tasks. many R users create specialized functions, verified R community can download package use.One challenging aspects R often many functions packages choose complete given task.Functions contained within packages can downloaded (“installed”) computer internet. package downloaded, access functions loading package library() command beginning R session.NOTE: install package , must load beginning every R session using library() command, alternative like pacman’s p_load() function.Think R personal library: download package library gains book functions, time want use function book, must borrow book library.clarity handbook, functions usually preceeded name package using :: symbol following way:package_name::function_name()package loaded session, explicit style necessary. One can just use function_name(). However giving package name useful function name common may exist multiple packages (e.g. plot()).\r\nUsing package name also load package already loaded.Dependencies\r\nPackages often depend packages, called “dependencies”. package installed CRAN, typically also install dependenices.","code":"\n# this loads the package \"tidyverse\" for use in the current R session\nlibrary(tidyverse)\n# This command uses the package \"rio\" and its function \"import()\" to import a dataset\nlinelist <- rio::import(\"linelist.xlsx\", which = \"Sheet1\")"},{"path":"r-basics.html","id":"function-help","chapter":"4 R Basics","heading":"4.9.4 Function help","text":"read function, can try searching online resources search Help tab lower-right RStudio pane.","code":""},{"path":"r-basics.html","id":"piping","chapter":"4 R Basics","heading":"4.10 Piping (%>%)","text":"Two general approaches working objects :Tidyverse/piping - sends object function function - emphasizes action, objectDefine intermediate objects - emphasis object, re-defined ","code":""},{"path":"r-basics.html","id":"pipes","chapter":"4 R Basics","heading":"4.10.1 Pipes","text":"Simply explained, pipe operator (%>%) passes intermediate output one function next.\r\ncan think saying “”. Many functions can linked together %>%.Piping emphasizes sequence actions, object actions performed onPiping emphasizes sequence actions, object actions performed onBest sequence actions must performed one objectBest sequence actions must performed one objectFrom magrittr. Included dplyr tidyverseFrom magrittr. Included dplyr tidyverseMakes code clean easier read, intuitiveMakes code clean easier read, intuitiveExpress sequence operationsExpress sequence operationsThe object altered passed next functionThe object altered passed next functionRead approach tidyverse style guideExample:https://cfss.uchicago.edu/notes/pipes/#:~:text=Pipes%20are%20an%20extremely%20useful,code%20and%20combine%20multiple%20operations.Piping base function. use piping, dplyr package must installed loaded. Near top every template script code chunk installs loads necessary packages, including dplyr. can read piping documentation.CAUTION: Remember even using piping link functions, assignment operator (<-) present, object left still -written (re-defined) right side.%<>%\r\n“assignment pipe” magritter package, pipes object forward also re-defines object. must first pipe operator chain. shorthand, object %<>% function() %>% function() object <- object %>% function() %>% function().","code":"\n# A fake example of how to bake a care using piping syntax\n\ncake <- flour %>%       # to define cake, start with flour, and then...\n  left_join(eggs) %>%   # add eggs\n  left_join(oil) %>%    # add oil\n  left_join(water) %>%  # add water\n  mix_together(utensil = spoon, minutes = 2) %>%                # mix together\n  bake(degrees = 350, system = \"fahrenheit\", minutes = 35) %>%  # bake\n  let_cool()            # let it cool down"},{"path":"r-basics.html","id":"define-intermediate-objects","chapter":"4 R Basics","heading":"4.10.2 Define intermediate objects","text":"approach changing objects/dataframes may better :need manipulate multiple objectsThere intermediate steps meaningful deserve separate object namesRisks:Creating new objects step means creating lots objects. use wrong one might realize !\r\n*Naming objects can confusingErrors may easily detectableEither name intermediate object, overwrite original, combine functions together. come risks.examples:Combine functions together - also difficult read","code":"\n# a fake example of how to bake a cake using this method (defining intermediate objects)\nbatter_1 <- left_join(flour, eggs)\nbatter_2 <- left_join(batter_1, oil)\nbatter_3 <- left_join(batter_2, water)\n\nbatter_4 <- mix_together(object = batter_3, utensil = spoon, minutes = 2)\n\ncake <- bake(batter_4, degrees = 350, system = \"fahrenheit\", minutes = 35)\n\ncake <- let_cool(cake)\n# an example of combining/nesting mutliple functions together - difficult to read\ncake <- let_cool(bake(mix_together(batter_3, utensil = spoon, minutes = 2), degrees = 350, system = \"fahrenheit\", minutes = 35))"},{"path":"r-basics.html","id":"operators","chapter":"4 R Basics","heading":"4.11 Key operators and functions","text":"section details operators R, :Definitional operatorsRelational operators (less , equal ..)Logical operators (, …)Handling missing valuesMathematical operators functions (+/-, >, sum(), median(), …)%% operator","code":""},{"path":"r-basics.html","id":"assignment-operators","chapter":"4 R Basics","heading":"4.11.1 Assignment operators","text":"<-basic assignment operator R <-. object_name <- value (see R Basics tab “Defining Object”).\r\nassignment operator can also written =. advise use <- general R use.\r\nalso advise surrounding operators spaces, readability.<<-writing functions (LINK PAGE), using R interactive way sourced scripts (LINK PAGE), may need use assignment operator <<- (base R). operator used define object higher ‘parent’ R Environment (LINK tab R environments). Also see online reference.%<>%“assignment pipe” magritter package, pipes object forward also re-defines object. must first pipe operator chain. shorthand, object %<>% function() %>% function() object <- object %>% function() %>% function().%<+%Used add data phylogenetic trees ggtree package. See (LINK PAGE) online resource book.","code":""},{"path":"r-basics.html","id":"relational-and-logical-operators","chapter":"4 R Basics","heading":"4.11.2 Relational and logical operators","text":"Relational operators compare values often used defining new variables subsets datasets. common relational operators R:Logical operators, , often used connect relational operators create complicated criteria. Complex statements might require parentheses ( ) grouping order application.example, , linelist two variables want use create case definition, hep_e_rdt, test result other_cases_in_hh, tell us cases household. command uses function case_when() create new variable case_def :Note R case-sensitive, “Positive” different “positive”…","code":"\nlinelist_cleaned <- linelist_cleaned %>%\n  mutate(case_def = case_when(\n    is.na(hep_e_rdt) & is.na(other_cases_in_hh)           ~ NA_character_,\n    hep_e_rdt == \"Positive\"                               ~ \"Confirmed\",\n    hep_e_rdt != \"Positive\" & other_cases_in_hh == \"Yes\"  ~ \"Probable\",\n    TRUE                                                  ~ \"Suspected\"\n  ))"},{"path":"r-basics.html","id":"missing-values","chapter":"4 R Basics","heading":"4.11.3 Missing values","text":"R, missing values represented special value NA (“reserved” value) (capital letters N - quotation marks). import data records missing data another way (e.g. 99, “Missing”, .), may want re-code values NA.test whether value NA, use special function .na(), returns TRUE FALSE.R documentation missing valuesVariations NANA actually logical value length 1. may also encounter NA_character_, NA_real_, NA_complex_, NA_integer_, correspond specific classes.prominent application one variants common epidemiology work using case_when(). Right-Hand Side (RHS) values must class. Thus, character outcomes RHS like “Confirmed”, “Suspect”, “Probable” NA - get error. Instead NA must NA_character_. Likewise integers, use NA_integer_.NULLNULL null object R, often used represent list 0 length. Use .null() evaluate status.detail difference NA NULL ","code":"\nrdt_result <- c(\"Positive\", \"Suspected\", \"Positive\", NA)   # two positive cases, one suspected, and one unknown\nis.na(rdt_result)  # Tests whether the value of rdt_result is NA## [1] FALSE FALSE FALSE  TRUE"},{"path":"r-basics.html","id":"mathematics-and-statistics","chapter":"4 R Basics","heading":"4.11.4 Mathematics and statistics","text":"operators functions page automatically available using base R.","code":""},{"path":"r-basics.html","id":"mathematical-operators","chapter":"4 R Basics","heading":"4.11.4.1 Mathematical operators","text":"often used perform addition, division, create new columns, etc. common mathematical operators R. Whether put spaces around operators important.","code":""},{"path":"r-basics.html","id":"mathematical-functions","chapter":"4 R Basics","heading":"4.11.4.2 Mathematical functions","text":"DANGER: round() uses “banker’s rounding” rounds .5 upper number even. Use round_half_up() janitor consistently round halves nearest whole number. See ","code":"\n# use the appropriate rounding function for your work\nround(c(2.5, 3.5))## [1] 2 4\njanitor::round_half_up(c(2.5, 3.5))## [1] 3 4"},{"path":"r-basics.html","id":"statistical-functions","chapter":"4 R Basics","heading":"4.11.4.3 Statistical functions:","text":"CAUTION: functions default include missing values calculations. Missing values result output NA, unless argument na.rm=TRUE specifiedDANGER: providing vector numbers one functions, sure wrap numbers within c() .quantile(): x numeric vector examine, probs numeric vector probabilities within 0 1.0, e.g c(0.5, 0.8, 0.85)\r\n** summary(): gives summary numeric vector including mean, median, common percentiles","code":"\n# If supplying raw numbers to a function, wrap them in c()\nmean(1, 6, 12, 10, 5, 0)    # !!! INCORRECT !!!  ## [1] 1\nmean(c(1, 6, 12, 10, 5, 0)) # CORRECT## [1] 5.666667"},{"path":"r-basics.html","id":"other-useful-functions","chapter":"4 R Basics","heading":"4.11.4.4 Other useful functions:","text":"","code":""},{"path":"r-basics.html","id":"in","chapter":"4 R Basics","heading":"4.11.5 %in%","text":"useful operator matching values, quickly assessing value within vector dataframe.ask value %%, put exclamation mark (!) front logic statement:%% useful using dplyr function case_when() recode values column. example:","code":"\nmy_vector <- c(\"a\", \"b\", \"c\", \"d\")\n\n\"a\" %in% my_vector## [1] TRUE\n\"h\" %in% my_vector## [1] FALSE\n# to negate, put an exclamation in front\n!\"a\" %in% my_vector## [1] FALSE\n!\"h\" %in% my_vector## [1] TRUE\nlinelist <- linelist %>% \n  mutate(hospital = case_when(\n    hospital %in% c(\"St. Fr.\", \"Saint Francis\") ~ \"St. Francis\")) # convert to correct spelling"},{"path":"r-basics.html","id":"loading-packages","chapter":"4 R Basics","heading":"4.12 Loading Packages","text":"section describes several ways install package:Via online package repository (CRAN)ZIP fileFrom Github","code":""},{"path":"r-basics.html","id":"cran","chapter":"4 R Basics","heading":"4.12.1 CRAN","text":"CRAN online repository packages","code":""},{"path":"r-basics.html","id":"zip-files","chapter":"4 R Basics","heading":"4.12.2 ZIP files","text":"Download ZIP file package, unpack , save .","code":""},{"path":"r-basics.html","id":"github","chapter":"4 R Basics","heading":"4.12.3 Github","text":"Download package development Github repositoryremotes package","code":""},{"path":"r-basics.html","id":"errors-warnings","chapter":"4 R Basics","heading":"4.13 Errors & Warnings","text":"section explains:General syntax writing R codeCode assiststhe difference errors warningsCommon errors warnings solutions can found X section (TODO).\r\nSee handbook page common errors warnings.","code":""},{"path":"r-basics.html","id":"error-versus-warning","chapter":"4 R Basics","heading":"4.13.1 Error versus Warning","text":"command run, R Console may show warning error messages red text.warning means R completed command, take additional steps produced unusual output aware .warning means R completed command, take additional steps produced unusual output aware .error means R able complete command.error means R able complete command.Look clues:error/warning message often include line number problem.error/warning message often include line number problem.object “unknown” “found”, perhaps spelled incorrectly, forgot call package library(), forgot re-run script making changes.object “unknown” “found”, perhaps spelled incorrectly, forgot call package library(), forgot re-run script making changes.else fails, copy error message Google along key terms - chances someone else worked already!","code":""},{"path":"r-basics.html","id":"general-syntax-tips","chapter":"4 R Basics","heading":"4.13.2 General syntax tips","text":"things remember writing commands R, avoid errors warnings:Always close parentheses - tip: count number opening “(” closing parentheses “)” code chunkAvoid spaces column object names. Use underscore ( _ ) periods ( . ) insteadKeep track remember separate function’s arguments commasR case-sensitive, meaning Variable_A different variable_A","code":""},{"path":"r-basics.html","id":"code-assists","chapter":"4 R Basics","heading":"4.13.3 Code assists","text":"script (RMarkdown otherwise) give clues made mistake. example, forgot write comma needed, close parentheses, RStudio raise flag line, right side script, warn .(/images/Warnings_and_Errors.png)","code":""},{"path":"r-basics.html","id":"recommended-training","chapter":"4 R Basics","heading":"4.14 Recommended training","text":"","code":""},{"path":"r-basics.html","id":"cheatsheets","chapter":"4 R Basics","heading":"4.14.1 Cheatsheets","text":"online R resource specifically Excel users","code":""},{"path":"r-basics.html","id":"courses","chapter":"4 R Basics","heading":"4.14.2 Courses","text":"","code":""},{"path":"importing-data.html","id":"importing-data","chapter":"5 Importing data","heading":"5 Importing data","text":"","code":""},{"path":"importing-data.html","id":"overview-1","chapter":"5 Importing data","heading":"5.1 Overview","text":"Introduction importing data","code":""},{"path":"importing-data.html","id":"packages-1","chapter":"5 Importing data","heading":"5.2 Packages","text":"key package recommend importing data : rio. rio offers useful function import() can import many types files R.alternative using rio use functions several packages specific type file (e.g. read.csv(), read.xlsx(), etc.). alternatives can difficult remember, always using rio::import() relatively easy.Optionally, package can used conjunction rio. locates files computer via relative pathways, usually within context R project. Relative pathways relative designated folder location, pathways listed R code break script run different computer.code chunk shows loading packages importing data.","code":"\n# Checks if package is installed, installs if necessary, and loads package for current session\npacman::p_load(rio, here)"},{"path":"importing-data.html","id":"import","chapter":"5 Importing data","heading":"5.3 import()","text":"import dataset, following:Creating new, named data frame object R environmentDefining new object imported datasetThe function import() package rio makes easy import many types data files.import() uses file’s extension (e.g. .xlsx, .csv, .dta, etc.) appropriately import file. optional arguments specific filetype can supplied well.can read rio package online vignettehttps://cran.r-project.org/web/packages/rio/readme/README.htmlCAUTION: example , datasets assumed located working directory, folder script.DOimport specific range cells\r\nskip rows, excel csv\r\nrio table functions used import/export/convert\r\nhttps://cran.r-project.org/web/packages/rio/vignettes/rio.html\r\nuseful function know backup\r\nEpiInfo\r\nSAS\r\nSTATA\r\nGoogle Spreadsheets\r\nR files","code":"\n# An example:\n#############\nlibrary(rio)                                                     # ensure package rio is loaded for use\n\n# New object is defined as the imported data\nmy_csv_data <- import(\"linelist.csv\")                            # importing a csv file\n\nmy_Excel_data <- import(\"observations.xlsx\", which = \"February\") # import an Excel file"},{"path":"importing-data.html","id":"import-from-filepath","chapter":"5 Importing data","heading":"5.4 Import from filepath","text":"filepath can provided full () relative filepath (see next tab). Providing full filepath can fast may best referencing files shared/network drive).function import() (package rio) accepts filepath quotes. things note:Slashes must forward slashes, code shown. default Windows filepaths.Filepaths begin double slashes (e.g. “//…”) likely recognized R produce error. Consider moving files “named” “lettered” drive begins letter (e.g. “J:” “C:”). See section using Network Drive details issue.","code":"\n# A demonstration showing how to import a specific Excel sheet\nmy_data <- rio::import(\"C:/Users/Neale/Documents/my_excel_file.xlsx\")"},{"path":"importing-data.html","id":"excel-sheet","chapter":"5 Importing data","heading":"5.5 Excel sheet","text":"importing specific sheet Excel file, include sheet name = argument import(). example:using () method provide relative pathway import(), can still indicate specific sheet adding = argument closing parenthese () function.","code":"\n# A demonstration showing how to import a specific Excel sheet\nmy_data <- rio::import(\"my_excel_file.xlsx\", which = \"Sheetname\")# Demonstration: importing a specific Excel sheet when using relative pathways with the 'here' package\r\nlinelist_raw <- import(here(\"data\", \"linelists\", \"linelist.xlsx\"), which = \"Sheet1\")`  "},{"path":"importing-data.html","id":"select-file-manually","chapter":"5 Importing data","heading":"5.6 Select file manually","text":"can import data manually via one methods:Environment RStudio Pane, click “Import Dataset”, select type dataClick File / Import Dataset / (select type data)hard-code manual selection, use base R command file.choose() (leaving parentheses empty) trigger appearance pop-window allows user manually select file computer. example:TIP: pop-window may appear BEHIND RStudio window.","code":"\n# A demonstration showing manual selection of a file. When this command is run, a POP-UP window should appear. \n# The filepath of the selected file will be supplied to the import() command.\n\nmy_data <- rio::import(file.choose())"},{"path":"importing-data.html","id":"here","chapter":"5 Importing data","heading":"5.7 Relative filepaths (here())","text":"Relative filepaths differ static filepaths relative R project root directory. example:static filepath: import(\"C:/Users/nsbatra/Documents/R files/epiproject/data/linelists/ebola_linelist.xlsx\")\r\nSpecific fixed path\r\nUseful multiple users running script hosted network drive\r\nSpecific fixed pathUseful multiple users running script hosted network driveA relative filepath: import((\"data\", \"linelists\", \"ebola_linelist.xlsx\"))\r\nPath given relation root directory (typically root folder R project)\r\nBest working within R project, planning zip share entire project others\r\nPath given relation root directory (typically root folder R project)Best working within R project, planning zip share entire project othersThe package ’s function () facilitate relative pathways.() works best within R projects. package first loaded (library()), automatically considers top-level folder R project “” - benchmark files project.Thus, script, want import reference file saved R project’s folders, use function () tell R file relation benchmark.unsure “” set , run function () empty brackets:example importing file “fluH7N9_China_2013.csv” located benchmark “” folder. provide name file quotes (appropriate ending).file within subfolder - let’s say “data” folder - write folder names quotes, separated commas, :Using () command produces character filepath, can processed import() function.NOTE: can still import specific sheet excel file noted Excel tab. () command supplies filepath.","code":"\n# This command tells you the folder path that \"here\" is set to \nhere::here()\nlinelist <- import(here(\"fluH7N9_China_2013.csv\"))\nlinelist <- import(here(\"data\", \"fluH7N9_China_2013.csv\"))\n# the filepath\nhere(\"data\", \"fluH7N9_China_2013.csv\")\n\n# the filepath is given to the import() function\nlinelist <- import(here(\"data\", \"fluH7N9_China_2013.csv\"))"},{"path":"importing-data.html","id":"google-sheets","chapter":"5 Importing data","heading":"5.8 Google sheets","text":"can import data online Google spreadsheet googlesheet4 package authenticating access spreadsheet., demo Google sheet imported saved. command may prompt confirmation authentification Google account. Follow prompts pop-ups internet browser grant Tidyverse API packages permissions edit, create, delete spreadsheets Google Drive.sheet “viewable anyone link” can try import .sheet can also imported using sheet ID, shorter part URL:Another package, googledrive offers useful functions writing, editing, deleting Google sheets. example, using gs4_create() sheet_write() functions found package.helpful online tutorials: basic importing tutorial detail interaction two packages","code":"\npacman::p_load(\"googlesheets4\")\nGsheets_demo <- read_sheet(\"https://docs.google.com/spreadsheets/d/1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY/edit#gid=0\")\nGsheets_demo <- read_sheet(\"1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY\")"},{"path":"importing-data.html","id":"websites","chapter":"5 Importing data","heading":"5.9 Websites","text":"Scraping data website - TBD","code":""},{"path":"importing-data.html","id":"skip-rows","chapter":"5 Importing data","heading":"5.10 Skip rows","text":"Sometimes, may want avoid importing row data (e.g. column names, row 1).\r\ncan argument skip = using import() rio package .xlsx .csv file. Provide number rows want skip.Unfortunately skip = accepts one integer value, range (e.g. “2:10”). skip import specific rows consecutive top, consider importing multiple times using bind_rows() dplyr. See example skipping row 2.","code":"\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 1)  # does not import header row"},{"path":"importing-data.html","id":"removing-a-second-header-row","chapter":"5 Importing data","heading":"5.10.1 Removing a second header row","text":"data may second row data, example “data dictionary” row (see example ).situation can problematic can result columns imported class “character”. solve , likely need import data twice.Import data order store correct column namesImport data , skipping first two rows (header second rows)Bind correct names onto reduced dataframeThe exact arguments used bind correct column names depends type data file (.csv, .tsv, .xlsx, etc.). using rio’s import() function, understand function rio uses import data, give appropriate argument skip lines /designate column names. See handbook page importing data (LINK) details rio.Excel files:CSV files:Backup option - changing column names separate commandBonus! second row data dictionary, can easily create proper data dictionary using gather() command tidyr package.\r\nsource: https://alison.rbind.io/post/2018-02-23-read-multiple-header-rows/","code":"\n# For excel files (remove 2nd row)\nlinelist_raw_names <- import(\"linelist_raw.xlsx\") %>% names()  # save true column names\n\n# import, skip row 2, assign to col_names =\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 2, col_names = linelist_raw_names) \n# For csv files\nlinelist_raw_names <- import(\"linelist_raw.csv\") %>% names() # save true column names\n\n# note argument is 'col.names ='\nlinelist_raw <- import(\"linelist_raw.csv\", skip = 2, col.names = linelist_raw_names) \n# assign/overwrite headers using the base 'colnames()' function\ncolnames(linelist_raw) <- linelist_raw_names\nlibrary(tidyr)\nstickers_dict <- import(\"linelist_raw.xlsx\") %>% \n  clean_names() %>% \n  gather(variable_name, variable_description)\nstickers_dict"},{"path":"importing-data.html","id":"manual-data-entry","chapter":"5 Importing data","heading":"5.11 Manual data entry","text":"","code":""},{"path":"importing-data.html","id":"entry-by-columns","chapter":"5 Importing data","heading":"5.11.1 Entry by columns","text":"Since data frame combination vertical vectors (columns), R default expects manual entry data also vertical vectors (columns).CAUTION: vectors must length (number values).vectors can bound together using function data.frame():now display new dataset:","code":"\n# define each vector (vertical column) separately, each with its own name\nPatientID <- c(235, 452, 778, 111)\nTreatment <- c(\"Yes\", \"No\", \"Yes\", \"Yes\")\nDeath     <- c(1, 0, 1, 0)\n# combine the columns into a data frame, by referencing the vector names\nmanual_entry_cols <- data.frame(PatientID, Treatment, Death)\n# display the new dataset\nDT::datatable(manual_entry_cols)"},{"path":"importing-data.html","id":"entry-by-rows","chapter":"5 Importing data","heading":"5.11.2 Entry by rows","text":"Use tribble function tibble package tidverse (onlinetibble reference).Note column headers start tilde (~). Also note column must contain one class data (character, numeric, etc.).\r\ncan use tabs, spacing, new rows make data entry intuitive readable. example:now display new dataset:ADD ROWS dplyr ","code":"\n# create the dataset manually by row\nmanual_entry_rows <- tibble::tribble(\n                        ~colA, ~colB,\n                        \"a\",   1,\n                        \"b\",   2,\n                        \"c\",   3\n                      )\n# display the new dataset\nDT::datatable(manual_entry_rows)"},{"path":"importing-data.html","id":"pasting-from-clipboard","chapter":"5 Importing data","heading":"5.11.3 Pasting from clipboard","text":"copy data elsewhere clipboard, can try following command convert data R data frame:","code":"\nmanual_entry_clipboard <- read.table(file = \"clipboard\",\n                                     sep = \"t\",           # separator could be tab, or commas, etc.\n                                     header=TRUE)         # if there is a header row"},{"path":"r-projects.html","id":"r-projects","chapter":"6 R projects","heading":"6 R projects","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"r-projects.html","id":"overview-2","chapter":"6 R projects","heading":"6.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"r-projects.html","id":"preparation","chapter":"6 R projects","heading":"6.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"r-projects.html","id":"sub-tab-1","chapter":"6 R projects","heading":"6.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"r-projects.html","id":"sub-tab-2","chapter":"6 R projects","heading":"6.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"r-projects.html","id":"option-1","chapter":"6 R projects","heading":"6.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"r-projects.html","id":"option-1-sub-tab","chapter":"6 R projects","heading":"6.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"r-projects.html","id":"option-2","chapter":"6 R projects","heading":"6.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"r-projects.html","id":"option-2-sub-tab","chapter":"6 R projects","heading":"6.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"r-projects.html","id":"resources","chapter":"6 R projects","heading":"6.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"errors-warnings-1.html","id":"errors-warnings-1","chapter":"7 Errors & Warnings","heading":"7 Errors & Warnings","text":"","code":""},{"path":"errors-warnings-1.html","id":"overview-3","chapter":"7 Errors & Warnings","heading":"7.1 Overview","text":"Troubleshooting common errors warningsKeep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"errors-warnings-1.html","id":"preparation-1","chapter":"7 Errors & Warnings","heading":"7.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"errors-warnings-1.html","id":"sub-tab-1-1","chapter":"7 Errors & Warnings","heading":"7.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name neededError: Insufficient values manual scale. 3 needed 2 provided.\r\nggplot() scale_fill_manual() values = c(“orange”, “purple”) … insufficient number factor levels … consider whether NA now factor level…see “unexpected symbol” check missing commasWrong slashes\r\nsee error like try export import:Make sure used / within filepath, \\.","code":"#Tried to add a value (\"Missing\") to a factor (with replace_na operating on a factor)\r\nProblem with `mutate()` input `age_cat`.\r\ni invalid factor level, NA generated\r\ni Input `age_cat` is `replace_na(age_cat, \"Missing\")`.invalid factor level, NA generated# ran recode without re-stating the x variable in mutate(x = recode(x, OLD = NEW)\r\nError: Problem with `mutate()` input `hospital`.\r\nx argument \".x\" is missing, with no default\r\ni Input `hospital` is `recode(...)`.Error: unexpected symbol in:\r\n\"  geom_histogram(stat = \"identity\")+\r\n  tidyquant::geom_ma(n=7, size = 2, color = \"red\" lty\"No such file or directory:"},{"path":"errors-warnings-1.html","id":"sub-tab-2-1","chapter":"7 Errors & Warnings","heading":"7.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"errors-warnings-1.html","id":"option-1-1","chapter":"7 Errors & Warnings","heading":"7.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"errors-warnings-1.html","id":"option-1-sub-tab-1","chapter":"7 Errors & Warnings","heading":"7.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"errors-warnings-1.html","id":"option-2-1","chapter":"7 Errors & Warnings","heading":"7.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"errors-warnings-1.html","id":"option-2-sub-tab-1","chapter":"7 Errors & Warnings","heading":"7.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"errors-warnings-1.html","id":"resources-1","chapter":"7 Errors & Warnings","heading":"7.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"cleaning-data.html","id":"cleaning-data","chapter":"8 Cleaning data","heading":"8 Cleaning data","text":"","code":""},{"path":"cleaning-data.html","id":"overview-4","chapter":"8 Cleaning data","heading":"8.1 Overview","text":"page demonstrates common steps necessary clean dataset. uses simulated Ebola case linelist, used throughout handbook.Dealing character case (upper, lower, title, etc.)Factor columnsreplace missing \r\ndealing cases (lower, etc)\r\ncase_when()\r\nfactors","code":""},{"path":"cleaning-data.html","id":"preparation-2","chapter":"8 Cleaning data","heading":"8.2 Preparation","text":"","code":""},{"path":"cleaning-data.html","id":"load-packages","chapter":"8 Cleaning data","heading":"8.2.1 Load packages","text":"","code":"\npacman::p_load(tidyverse,  # data manipulation and visualization\n               janitor,    # data cleaning\n               rio,        # importing data\n               epikit)     # age_categories() function  "},{"path":"cleaning-data.html","id":"load-data","chapter":"8 Cleaning data","heading":"8.2.2 Load data","text":"Import raw dataset using import() function package rio. (LINK IMPORT PAGE)can view first 50 rows original “raw” dataset :","code":"## New names:\r\n## * `` -> ...28\nlinelist_raw <- import(\"linelist_raw.xlsx\")"},{"path":"cleaning-data.html","id":"cleaning-pipeline","chapter":"8 Cleaning data","heading":"8.3 Cleaning pipeline","text":"epidemiological analysis data processing, cleaning steps often performed together sequentially. R often manifests cleaning “pipeline”, raw dataset passed “piped” one cleaning step another. chain utilizes dplyr verbs magrittr pipe operator (see handbook page dplyr tidyverse coding style (LINK ). pipe begins “raw” data (linelist_raw) ends “clean” dataset (linelist).cleaning pipeline order steps important. Cleaning steps might include:Importing dataColumn names cleaned changedRows filtered, added, de-duplicatedColumns selected, added, transformed, re-orderedValues re-coded, cleaned, grouped","code":""},{"path":"cleaning-data.html","id":"column-names","chapter":"8 Cleaning data","heading":"8.4 Column names","text":"Column names used often need “clean” syntax. suggest following:Short namesNo spaces (replaced underscores (_),unusual characters (&, #…)Similar style nomenclature (e.g. date columns named like date_onset, date_report, date_death…)columns names linelist_raw . can see spaces. also different naming patterns dates (‘date onset’ ‘infection date’).Also note raw data, two final columns names two merged cells one name. import() function used name first two columns, assigned second column name “…23” empty (referring 23rd column).","code":"\nnames(linelist_raw)##  [1] \"row_num\"         \"case_id\"         \"generation\"      \"infection date\"  \"date onset\"      \"hosp date\"       \"date_of_outcome\"\r\n##  [8] \"outcome\"         \"gender\"          \"hospital\"        \"lon\"             \"lat\"             \"infector\"        \"source\"         \r\n## [15] \"age\"             \"wt_kg\"           \"ht_cm\"           \"ct_blood\"        \"age_unit\"        \"fever\"           \"chills\"         \r\n## [22] \"cough\"           \"aches\"           \"vomit\"           \"temp\"            \"time_admission\"  \"merged_header\"   \"...28\"Note: For a column name that include spaces, surround the name with back-ticks, for example: linelist$`infection date`. On a keyboard, the back-tick (`) is different from the single quotation mark ('), and is sometimes on the same key as the tilde (~)."},{"path":"cleaning-data.html","id":"automatic-colummn-name-cleaning","chapter":"8 Cleaning data","heading":"8.4.1 Automatic colummn name cleaning","text":"function clean_names() package janitor standardizes column names makes unique following:Converts names consist underscores, numbers, lettersAccented characters transliterated ASCII (e.g. german o umlaut becomes “o”, spanish “enye” becomes “n”)Capitalization preference can specified using case = argument (“snake” default, alternatives include “sentence”, “title”, “small_camel”…)can designate specific name replacements replace = argument (e.g. replace = c(onset = “date_of_onset”))online vignetteBelow, cleaning pipeline begins using clean_names() raw linelist.NOTE: column name “…28” changed “x28”.","code":"\n# send the dataset through the function clean_names()\nlinelist <- linelist_raw %>% \n  janitor::clean_names()\n\n# see the new names\nnames(linelist)##  [1] \"row_num\"         \"case_id\"         \"generation\"      \"infection_date\"  \"date_onset\"      \"hosp_date\"       \"date_of_outcome\"\r\n##  [8] \"outcome\"         \"gender\"          \"hospital\"        \"lon\"             \"lat\"             \"infector\"        \"source\"         \r\n## [15] \"age\"             \"wt_kg\"           \"ht_cm\"           \"ct_blood\"        \"age_unit\"        \"fever\"           \"chills\"         \r\n## [22] \"cough\"           \"aches\"           \"vomit\"           \"temp\"            \"time_admission\"  \"merged_header\"   \"x28\""},{"path":"cleaning-data.html","id":"manual-column-name-cleaning","chapter":"8 Cleaning data","heading":"8.4.2 Manual column name cleaning","text":"Re-naming columns manually often necessary. , re-naming performed using rename() function dplyr package, part pipe chain. rename() uses style “NEW = OLD”, new column name given old column name., re-name command added cleaning pipeline:Now can see columns names changed:","code":"\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome)"},{"path":"cleaning-data.html","id":"rename-by-column-position","chapter":"8 Cleaning data","heading":"8.4.2.1 Rename by column position","text":"can also rename column position, instead column name, example:","code":"\nrename(newNameForFirstColumn = 1,\n       newNameForSecondColumn = 2)"},{"path":"cleaning-data.html","id":"empty-excel-column-names","chapter":"8 Cleaning data","heading":"8.4.2.2 Empty Excel column names","text":"importing Excel sheet missing column name, depending import function used, R likely create column name value like “…1” “…2”. can clean names manually referencing position number (see ), name (linelist_raw$...1).","code":""},{"path":"cleaning-data.html","id":"merged-excel-column-names","chapter":"8 Cleaning data","heading":"8.4.3 Merged Excel column names","text":"Merged cells Excel file common occurrence receiving data field level. Merged cells can nice human reading data, cause many problems machine reading data. R accommodate merged cells.Remind people data entry human-readable data machine-readable data. Strive train users princiles tidy data. possible, try change procedures data arrive tidy format without merged cells.variable must column.observation must row.value must cell.using rio’s import() function, value merged cell assigned first cell subsequent cells empty.One solution deal merged cells import data function readWorkbook() package openxlsx. Set argument fillMergedCells = TRUE. gives value merged cell cells within merge range.DANGER: column names merged, end duplicate column names, need fix manually - R work well duplicate column names! can re-name referencing position (e.g. column 5), explained section manual column name cleaning..","code":"\nlinelist_raw <- openxlsx::readWorkbook(\"linelist_raw.xlsx\", fillMergedCells = TRUE)"},{"path":"cleaning-data.html","id":"skip-import-of-rows","chapter":"8 Cleaning data","heading":"8.4.4 Skip import of rows","text":"Sometimes, may want avoid importing row data (e.g. column names, row 1).\r\ncan argument skip = using import() rio package .xlsx .csv file. Provide number rows want skip.Unfortunately skip = accepts one integer value, range (e.g. “2:10”). skip import specific rows consecutive top, consider importing multiple times using bind_rows() dplyr. See example skipping row 2.","code":"\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 1)  # does not import header row"},{"path":"cleaning-data.html","id":"removing-a-second-header-row-1","chapter":"8 Cleaning data","heading":"8.4.4.1 Removing a second header row","text":"data may second row data, example “data dictionary” row (see example ).situation can problematic can result columns imported class “character”. solve , likely need import data twice.Import data order store correct column namesImport data , skipping first two rows (header second rows)Bind correct names onto reduced dataframeThe exact arguments used bind correct column names depends type data file (.csv, .tsv, .xlsx, etc.). using rio’s import() function, understand function rio uses import data, give appropriate argument skip lines /designate column names. See handbook page importing data (LINK) details rio.Excel files:CSV files:Backup option - changing column names separate commandBonus! second row data dictionary, can easily create proper data dictionary using gather() command tidyr package.\r\nsource: https://alison.rbind.io/post/2018-02-23-read-multiple-header-rows/","code":"\n# For excel files (remove 2nd row)\nlinelist_raw_names <- import(\"linelist_raw.xlsx\") %>% names()  # save true column names\n\n# import, skip row 2, assign to col_names =\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 2, col_names = linelist_raw_names) \n# For csv files\nlinelist_raw_names <- import(\"linelist_raw.csv\") %>% names() # save true column names\n\n# note argument is 'col.names ='\nlinelist_raw <- import(\"linelist_raw.csv\", skip = 2, col.names = linelist_raw_names) \n# assign/overwrite headers using the base 'colnames()' function\ncolnames(linelist_raw) <- linelist_raw_names\nlibrary(tidyr)\nstickers_dict <- import(\"linelist_raw.xlsx\") %>% \n  clean_names() %>% \n  gather(variable_name, variable_description)\nstickers_dict"},{"path":"cleaning-data.html","id":"combine-two-header-rows","chapter":"8 Cleaning data","heading":"8.4.5 Combine two header rows","text":"cases, may want combine two header rows one. command define column names combination (pasting together) existing column names value underneath first row. Replace “df” name dataset.","code":"\nnames(df) <- paste(names(df), df[1, ], sep = \"_\")"},{"path":"cleaning-data.html","id":"select-or-re-order-columns","chapter":"8 Cleaning data","heading":"8.5 Select or re-order columns","text":"CAUTION: tab may follow previous tabs.Often first step cleaning data selecting columns want work , set order dataframe. dplyr chain verbs, done select(). Note examples modify linelist select(), assign/overwrite. just display resulting new column names, purpose example.CAUTION: examples , linelist modified select() -written. New column names displayed purpose example.column names linelist:","code":"\nnames(linelist)##  [1] \"row_num\"              \"case_id\"              \"generation\"           \"date_infection\"       \"date_onset\"          \r\n##  [6] \"date_hospitalisation\" \"date_outcome\"         \"outcome\"              \"gender\"               \"hospital\"            \r\n## [11] \"lon\"                  \"lat\"                  \"infector\"             \"source\"               \"age\"                 \r\n## [16] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"             \"age_unit\"             \"fever\"               \r\n## [21] \"chills\"               \"cough\"                \"aches\"                \"vomit\"                \"temp\"                \r\n## [26] \"time_admission\"       \"merged_header\"        \"x28\""},{"path":"cleaning-data.html","id":"select-re-order","chapter":"8 Cleaning data","heading":"8.5.1 Select & re-order","text":"Select columns want remain, order appearanceIndicate columns remove placing minus symbol “-” front column name (e.g. select(-outcome)), vector column names (). columns retained. Inside select() can use normal operators c() list several columns, : consecutive columns, ! opposite, & , | .Re-order columns - use everything() signify columns specified select() command:well everything() several special functions work within select(), namely:everything() - columns mentionedlast_col() - last columnwhere() - applies function columns selects TRUEstarts_with() - matches specified prefix. Example: select(starts_with(\"date\"))ends_with() - matches specified suffix. Example: select(ends_with(\"_end\"))contains() - columns containing character string. Example: select(contains(\"time\"))matches() - apply regular expression (regex). Example: select(contains(\"[pt]al\"))num_range() -any_of() - matches column named. Useful name might exist. Example: select(any_of(date_onset, date_death, cardiac_arrest))example using ():","code":"\n# linelist dataset is piped through select() command, and names() prints just the column names\nlinelist %>% \n  select(case_id, date_onset, date_hospitalisation, fever) %>% \n  names() # display the column names## [1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\" \"fever\"\nlinelist %>% \n  select(-c(date_onset, fever:vomit)) %>% # remove onset and all symptom columns\n  names()##  [1] \"row_num\"              \"case_id\"              \"generation\"           \"date_infection\"       \"date_hospitalisation\"\r\n##  [6] \"date_outcome\"         \"outcome\"              \"gender\"               \"hospital\"             \"lon\"                 \r\n## [11] \"lat\"                  \"infector\"             \"source\"               \"age\"                  \"wt_kg\"               \r\n## [16] \"ht_cm\"                \"ct_blood\"             \"age_unit\"             \"temp\"                 \"time_admission\"      \r\n## [21] \"merged_header\"        \"x28\"\n# move case_id, date_onset, date_hospitalisation, and gender to beginning\nlinelist %>% \n  select(case_id, date_onset, date_hospitalisation, gender, everything()) %>% \n  names()##  [1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\" \"gender\"               \"row_num\"             \r\n##  [6] \"generation\"           \"date_infection\"       \"date_outcome\"         \"outcome\"              \"hospital\"            \r\n## [11] \"lon\"                  \"lat\"                  \"infector\"             \"source\"               \"age\"                 \r\n## [16] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"             \"age_unit\"             \"fever\"               \r\n## [21] \"chills\"               \"cough\"                \"aches\"                \"vomit\"                \"temp\"                \r\n## [26] \"time_admission\"       \"merged_header\"        \"x28\"\n# select columns containing certain characters\nlinelist %>% \n  select(contains(\"date\")) %>% \n  names()## [1] \"date_infection\"       \"date_onset\"           \"date_hospitalisation\" \"date_outcome\"\n# searched for multiple character matches\nlinelist %>% \n  select(matches(\"onset|hosp|fev\")) %>%   # note the OR symbol \"|\"\n  names()## [1] \"date_onset\"           \"date_hospitalisation\" \"hospital\"             \"fever\""},{"path":"cleaning-data.html","id":"select-as-a-stand-alone-command","chapter":"8 Cleaning data","heading":"8.5.2 select() as a stand-alone command","text":"Select can also used independent command (pipe chain). case, first argument original dataframe operated upon.","code":"\n# Create a new linelist with id and age-related columns\nlinelist_age <- select(linelist, case_id, contains(\"age\"))\n\n# display the column names\nnames(linelist_age)## [1] \"case_id\"  \"age\"      \"age_unit\""},{"path":"cleaning-data.html","id":"add-to-the-pipe-chain","chapter":"8 Cleaning data","heading":"8.5.3 Add to the pipe chain","text":"linelist, columns need: row_num, merged_header, x28. Remove adding select() command cleaning pipe chain:","code":"\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n    \n    # remove column\n    select(-c(row_num, merged_header, x28))"},{"path":"cleaning-data.html","id":"Classes","chapter":"8 Cleaning data","heading":"8.6 Modify class","text":"CAUTION: tab may follow previous tabs.See section object classesOften need set correct class column. common approach use mutate() define column , different class. Generally, looks like :","code":"\n# Examples of modifying class\nlinelist <- linelist %>% \n  mutate(date_var      = as.Date(date_var, format = \"MM/DD/YYYY\"),  # format should be the format of the raw data\n         numeric_var   = as.numeric(numeric_var),\n         character_var = as.character(character_var),\n         factor_var    = factor(factor_var, levels = c(), labels = c())\n         )"},{"path":"cleaning-data.html","id":"pre-checks-and-errors","chapter":"8 Cleaning data","heading":"8.6.1 Pre-checks and errors","text":"First run checks classes important columns.class “age” column character. perform analysis, need numbers recognized numeric!class “date_onset” column also character! perform analysis, dates must recognized dates!However, try classify date_onset column date, get error. Use table() sort another method examine values identify different one. example dataset see see one date_onset value entered different format (15th April 2014) values!can classify “date_onset” date, value must fixed format others. can fix date source data, , can cleaning pipeline via mutate() recode(). must done commands convert class Date. (LINK DATE SECTION).mutate() line can read : “mutate date_onset equal date_onset recoded OLD VALUE changed NEW VALUE”. Note pattern (OLD = NEW) recode() opposite R patterns (new = old). R development community working revising recoding.Especially converting class date, check data visually table() confirm converted correctly! .Date(), format = argument often source errors.","code":"\nclass(linelist$age)## [1] \"character\"\nclass(linelist$date_onset)## [1] \"character\"## \r\n## 15th April 2014      2012-04-21      2012-05-09      2012-05-14      2012-05-27      2012-06-22 \r\n##               1               1               1               1               2               1\n# fix incorrect values                 # old value       # new value\nmutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\"))"},{"path":"cleaning-data.html","id":"modify-multiple-columns","chapter":"8 Cleaning data","heading":"8.6.2 Modify multiple columns","text":"can use dplyr function across() mutate() convert several columns new class. across() allows specify columns want function apply . , want mutate columns .POSIXct() (type date/time class shows unnecessary timestamps) TRUE, apply function .Date() , order convert class “date”.Note within across() also use function ().Note .POSIXct package lubridate. similar functions (.character(), .numeric(), .logical()) base RNote functions across() written without empty parentheses (), described cleaning steps added pipe chain.","code":"\nlinelist <- linelist %>% \n  mutate(across(where(lubridate::is.POSIXct), as.Date))\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n  \n    # remove column\n    select(-c(row_num, merged_header, x28)) %>% \n\n  \n# ABOVE ARE UPSTREAM CLEANING STEPS ALREADY DISCUSSED\n  ###################################################\n\n    # fix incorrect values                 # old value       # new value\n    mutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\")) %>% \n  \n    # correct the class of the columns\n    mutate(across(contains(\"date\"), as.Date), \n           generation = as.numeric(generation),\n           age        = as.numeric(age)) "},{"path":"cleaning-data.html","id":"add-columns-and-rows","chapter":"8 Cleaning data","heading":"8.7 Add columns and rows","text":"See tabs add columns rows","code":""},{"path":"cleaning-data.html","id":"add-columns","chapter":"8 Cleaning data","heading":"8.7.1 Add columns","text":"","code":""},{"path":"cleaning-data.html","id":"mutate","chapter":"8 Cleaning data","heading":"8.7.1.1 mutate()","text":"advise creating new columns dplyr functions part chain verb functions (e.g. filter, mutate, etc.)\r\nneed stand-alone command, can use mutate() base R style create new column (see ).verb mutate() used add new column, modify existing one. example creating new columns mutate(). syntax : new_column_name = value function.best practice separate new column comma new line. , practice columns created:Scroll right see new columns (first 50 rows):TIP: verb transmute() adds new columns just like mutate() also drops/removes columns mention.","code":"\nlinelist <- linelist %>% \n  mutate(days_onset_hosp = as.numeric(date_hospitalisation - date_onset))\nlinelist <- linelist %>%                       # creating new, or modifying old dataset\n  mutate(new_var_dup    = case_id,             # new column = duplicate/copy another column\n         new_var_static = 7,                   # new column = all values the same\n         new_var_static = new_var_static + 5,  # you can overwrite a column, and it can be a calculation using other variables\n         new_var_paste  = stringr::str_glue(\"{hospital} on ({date_hospitalisation})\") # new column = pasting together values from other columns\n         ) "},{"path":"cleaning-data.html","id":"new-columns-using-base-r","chapter":"8 Cleaning data","heading":"8.7.1.2 New columns using base R","text":"define new column (re-define column) using base R, just use assignment operator .\r\nRemember using base R must specify dataframe writing column name (e.g. dataframe$column). two dummy examples:","code":"\nlinelist$old_var <- linelist$old_var + 7\nlinelist$new_var <- linelist$old_var + linelist$age"},{"path":"cleaning-data.html","id":"add-rows","chapter":"8 Cleaning data","heading":"8.7.2 Add rows","text":"DORemember column must contain values one class (either character, numeric, logical, etc.). adding row requires nuance maintain .use ... .= 3 put 3rd row. Default add end. columns specified let empty.\r\nnew row number may look strange (“…23”) row numbers changed. using command twice examine/test carefully.class see error like : Error: Can’t combine ..1$infection date  ..2$infection date .\r\n(date value remember wrap date functionas.Date() like .Date(\"2020-10-10\"))","code":"\nlinelist <- linelist %>% \n  add_row(row_num = 666, case_id = \"abc\", generation = 4, `infection date` = as.Date(\"2020-10-10\"), .before = 2)"},{"path":"cleaning-data.html","id":"new-columns-using-grouped-values","chapter":"8 Cleaning data","heading":"8.7.3 New columns using grouped values","text":"CAUTION: tab may follow previous tabs.Using mutate GROUPED dataframes\r\nhttps://dplyr.tidyverse.org/reference/mutate.htmlTaken website :","code":"#Because mutating expressions are computed within groups, they may yield different results on grouped tibbles. This will be the case as #soon as an aggregating, lagging, or ranking function is involved. Compare this ungrouped mutate:\r\n\r\nstarwars %>%\r\n  select(name, mass, species) %>%\r\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\r\nWith the grouped equivalent:\r\n\r\nstarwars %>%\r\n  select(name, mass, species) %>%\r\n  group_by(species) %>%\r\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\r\nThe former normalises mass by the global average whereas the latter normalises by the averages within species levels."},{"path":"cleaning-data.html","id":"add-to-pipe-chain","chapter":"8 Cleaning data","heading":"8.7.4 Add to pipe chain","text":"","code":"\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n  \n    # remove column\n    select(-c(row_num, merged_header, x28)) %>% \n\n    # fix incorrect values                 # old value       # new value\n    mutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\")) %>% \n    \n    # correct the class of the columns\n    mutate(across(contains(\"date\"), as.Date), \n           generation = as.numeric(generation),\n           age        = as.numeric(age)) %>% \n\n  # ABOVE ARE UPSTREAM CLEANING STEPS ALREADY DISCUSSED\n  ###################################################\n\n  # create column: delay to hospitalisation\n  mutate(days_onset_hosp = as.numeric(date_hospitalisation - date_onset))"},{"path":"cleaning-data.html","id":"recode","chapter":"8 Cleaning data","heading":"8.8 Recoding values","text":"example, linelist values column “hospital” must cleaned. several different spellings (often word “Hospital” missing “s” written “Hopital”), many missing values.","code":"\ntable(linelist$hospital, useNA = \"always\")## \r\n##                      Central Hopital                     Central Hospital                           Hospital A \r\n##                                   11                                  454                                  289 \r\n##                           Hospital B                     Military Hopital                    Military Hospital \r\n##                                  289                                   31                                  802 \r\n##                     Mitylira Hopital                    Mitylira Hospital                                Other \r\n##                                    1                                   82                                  902 \r\n##                         Port Hopital                        Port Hospital St. Mark's Maternity Hospital (SMMH) \r\n##                                   47                                 1760                                  426 \r\n##   St. Marks Maternity Hopital (SMMH)                                 <NA> \r\n##                                   11                                 1504"},{"path":"cleaning-data.html","id":"manual-recoding","chapter":"8 Cleaning data","heading":"8.8.1 Manual recoding","text":"tabs demonstrate re-coding values manually b providing specific spellings corrected:Using replace() specific rowsUsing recode() entire columnsUsing base R","code":""},{"path":"cleaning-data.html","id":"replace","chapter":"8 Cleaning data","heading":"8.8.1.1 replace()","text":"manually change values specific rows within dataframe (within pipe chain), use replace() within mutate().\r\nUse logic condition specify rows, example ID value one row. general syntax :mutate(col_to_change = replace(col_to_change, criteria rows, new value)).first example , gender value, row id “2195”, changed “Female”.","code":"# Example: change gender of one specific observation to \"Female\" \r\nmutate(gender = replace(gender, id == \"2195\", \"Female\")\r\n\r\n# Example: chance gender of one specific observation to NA \r\nmutate(gender = replace(gender, id == \"2195\", NA)"},{"path":"cleaning-data.html","id":"recode-1","chapter":"8 Cleaning data","heading":"8.8.1.2 recode()","text":"change spellings manually, one--one, can use recode() function *within mutate() function. code saying column “hospital” defined current column “hospital”, certain changes (syntax OLD = NEW). Don’t forget commas!Now see values hospital column corrected:TIP: number spaces equals sign matter. Make code easier read aligning = rows. Also, consider adding hashed comment row clarify future readers side OLD side NEW. TIP: Sometimes blank character value exists dataset (recognized R’s value missing - NA). can reference value two quotation marks space inbetween (\"\").","code":"\nlinelist <- linelist %>% \n  mutate(hospital = recode(hospital,\n                      # OLD = NEW\n                      \"Mitylira Hopital\"  = \"Military Hospital\",\n                      \"Mitylira Hospital\" = \"Military Hospital\",\n                      \"Military Hopital\"  = \"Military Hospital\",\n                      \"Port Hopital\"      = \"Port Hospital\",\n                      \"Central Hopital\"   = \"Central Hospital\",\n                      \"other\"             = \"Other\",\n                      \"St. Marks Maternity Hopital (SMMH)\" = \"St. Mark's Maternity Hospital (SMMH)\"\n                      ))\ntable(linelist$hospital, useNA = \"always\")## \r\n##                     Central Hospital                           Hospital A                           Hospital B \r\n##                                  465                                  289                                  289 \r\n##                    Military Hospital                                Other                        Port Hospital \r\n##                                  916                                  902                                 1807 \r\n## St. Mark's Maternity Hospital (SMMH)                                 <NA> \r\n##                                  437                                 1504"},{"path":"cleaning-data.html","id":"base-r","chapter":"8 Cleaning data","heading":"8.8.1.3 base R","text":"necessary, make manual changes specific value dataframe referencing row number case ID. remember better can make changes permanently underlying data!fake example. reads “Change value dataframe linelist‘s column onset_date (row linelist’s column case_id value ’9d4019’) .Date(\"2020-10-24\")”.","code":"\nlinelist$date_onset[linelist$case_id == \"9d4019\"] <- as.Date(\"2020-10-24\")"},{"path":"cleaning-data.html","id":"recoding-by-logic","chapter":"8 Cleaning data","heading":"8.8.2 Recoding by logic","text":"tabs demonstrate re-coding values column using logic conditions:Using case_when()Using ifelse() if_else()Using special dplyr recoding functions like:\r\nreplace_na()\r\nna_if()\r\ncoalesnce()\r\nreplace_na()na_if()coalesnce()","code":""},{"path":"cleaning-data.html","id":"case_when","chapter":"8 Cleaning data","heading":"8.8.2.1 case_when()","text":"need use logic statements recode values, want use operators like %%, use dplyr’s case_when() instead. use case_when() please read thorough explanation LINK, important differences recode() syntax logic order!Note Right-hand side (RHS) inputs must class (e.g. character, numeric, logical). Notice use special value NA_real_ instead just NA.","code":"\nlinelist <- linelist %>% \n  dplyr::mutate(age_years = case_when(\n            age_unit == \"years\"  ~ age,       # if age is given in years\n            age_unit == \"months\" ~ age/12,    # if age is given in months\n            is.na(age_unit)      ~ age,       # if age unit is missing, assume years\n            TRUE                 ~ NA_real_)) # Any other circumstance"},{"path":"cleaning-data.html","id":"ifelse-and-if_else","chapter":"8 Cleaning data","heading":"8.8.2.2 ifelse() and if_else()","text":"simple uses logical re-coding new variable creationgyou can use ifelse() if_else(). Though cases better use case_when().commands simplified versions else statement. general syntax ifelse(condition, value condition evaluates TRUE, value condition evaluates FALSE). used mutate(), row evaluated. if_else() special version dplyr handles dates condition.can tempting string together many ifelse commands… resist use case_when() instead! much simple, easier read, easier identify errors.IMAGE ifelse string X across .can reference columns ifelse() function within mutate():Example ifelse():Example if_else() (using dates):\r\nNote ‘true’ value date, ‘false’ value must also qualify date, hence using special character NA_real_ instead just NA.Note: want alternate value used code based circumstances, consider using switch() base R. example … . See section using switch() page R interactive console.","code":"\nlinelist <- linelist %>% \n  mutate(source_known = ifelse(!is.na(source), \"known\", \"unknown\"))\nlinelist <- linelist %>% \n  mutate(date_death = if_else(outcome == \"Death\", date_outcome, NA_real_))"},{"path":"cleaning-data.html","id":"recoding-using-special-dplyr-functions","chapter":"8 Cleaning data","heading":"8.8.3 Recoding using special dplyr functions","text":"","code":""},{"path":"cleaning-data.html","id":"using-replace_na","chapter":"8 Cleaning data","heading":"8.8.3.1 Using replace_na()","text":"change missing values (NA) specific character value, “Missing”, use function replace_na() within mutate(). Note used manner recode - name variable must repeated within replace_na().","code":"\nlinelist <- linelist %>% \n  mutate(hospital = replace_na(hospital, \"Missing\"))"},{"path":"cleaning-data.html","id":"using-na_if","chapter":"8 Cleaning data","heading":"8.8.3.2 Using na_if()","text":"Likewise can quickly convert specific character value NA using na_if(). command opposite one . converts values “Missing” NA.","code":"\nlinelist <- linelist %>% \n  mutate(hospital = na_if(hospital, \"Missing\"))"},{"path":"cleaning-data.html","id":"using-coalesce","chapter":"8 Cleaning data","heading":"8.8.3.3 Using coalesce()","text":"dplyr function finds first non-missing value position. , provide columns row fill value first non-missing value columns provided.example, might use thiscoalesce()` create “location” variable hypothetical variables “patient_residence” “reporting_jurisdiction”, prioritize patient residence information, exists.\r\nlead(), lag()\r\ncumsum(), cummean(), cummin(), cummax(), cumany(), cumall(),","code":"\nlinelist <- linelist %>% \n  mutate(location = coalesce(patient_residence, reporting_jurisdiction))"},{"path":"cleaning-data.html","id":"recoding-using-cleaning-dictionaries","chapter":"8 Cleaning data","heading":"8.8.4 Recoding using cleaning dictionaries","text":"CAUTION: tab may follow previous tabs.","code":"\n## load cleaning rules and only keep columns in mll\nmll_cleaning_rules <- import(here(\"dictionaries/mll_cleaning_rules.xlsx\")) %>%\n  filter(column %in% c(names(mll_raw), \".global\"))\n\n## define columns that are not cleand\nunchanged <- c(\n  \"epilink_relationship\",\n  \"narratives\",\n  \"epilink_relationship_detail\"\n)\n\nmll_clean <- mll_raw %>%\n  ## convert to tibble\n  as_tibble() %>%\n  ## clean columns using cleaning rules\n  clean_data(\n    wordlists = mll_cleaning_rules,\n    protect = names(.) %in% unchanged\n  )"},{"path":"cleaning-data.html","id":"add-to-pipe-chain-1","chapter":"8 Cleaning data","heading":"8.8.5 Add to pipe chain","text":"add described cleaning steps pipe chain.","code":"\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n  \n    # remove column\n    select(-c(row_num, merged_header, x28)) %>% \n\n    # fix incorrect values                 # old value       # new value\n    mutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\")) %>% \n    \n    # correct the class of the columns\n    mutate(across(contains(\"date\"), as.Date), \n           generation = as.numeric(generation),\n           age        = as.numeric(age)) %>% \n  \n    # create column: delay to hospitalisation\n  mutate(days_onset_hosp = as.numeric(date_hospitalisation - date_onset)) %>% \n\n# ABOVE ARE UPSTREAM CLEANING STEPS ALREADY DISCUSSED\n  ###################################################\n\n    # clean values of hospital column\n    mutate(hospital = recode(hospital,\n                      # OLD = NEW\n                      \"Mitylira Hopital\"  = \"Military Hospital\",\n                      \"Mitylira Hospital\" = \"Military Hospital\",\n                      \"Military Hopital\"  = \"Military Hospital\",\n                      \"Port Hopital\"      = \"Port Hospital\",\n                      \"Central Hopital\"   = \"Central Hospital\",\n                      \"other\"             = \"Other\",\n                      \"St. Marks Maternity Hopital (SMMH)\" = \"St. Mark's Maternity Hospital (SMMH)\"\n                      )) %>% \n    \n    mutate(hospital = replace_na(hospital, \"Missing\")) %>% \n\n    # create age_years column (from age and age_unit)\n    mutate(age_years = case_when(\n          age_unit == \"years\" ~ age,\n          age_unit == \"months\" ~ age/12,\n          is.na(age_unit) ~ age,\n          TRUE ~ NA_real_))"},{"path":"cleaning-data.html","id":"filter-rows","chapter":"8 Cleaning data","heading":"8.9 Filter rows","text":"CAUTION: tab may follow previous tabs.typical early cleaning step filter dataframe specific rows using dplyr verb filter(). Within filter(), give logic must TRUE row dataset kept.tabs show filter rows based simple complex logical conditions, filter/subset rows stand-alone command base R","code":""},{"path":"cleaning-data.html","id":"a-simple-filter","chapter":"8 Cleaning data","heading":"8.9.1 A simple filter()","text":"simple example re-defines dataframe linelist , filtered rows meet logical condition. rows logical statement within parentheses TRUE kept.case, logical statement !.na(case_id), asking whether value column case_id missing (NA). Thus, rows case_id missing kept.filter applied, number rows linelist 6609.filter applied, number rows linelist 6605.","code":"\nlinelist <- linelist %>% \n  filter(!is.na(case_id))  # keep only rows where case_id is not missing"},{"path":"cleaning-data.html","id":"a-complex-filter","chapter":"8 Cleaning data","heading":"8.9.2 A complex filter()","text":"complex example using filter():","code":""},{"path":"cleaning-data.html","id":"examine-the-data","chapter":"8 Cleaning data","heading":"8.9.2.1 Examine the data","text":"simple one-line command create histogram onset dates. See second smaller outbreak 2012-2013 also included dataset. analyses, want remove entries earlier outbreak.","code":"\nhist(linelist$date_onset, breaks = 50)"},{"path":"cleaning-data.html","id":"how-filters-handle-missing-numeric-and-date-values","chapter":"8 Cleaning data","heading":"8.9.2.2 How filters handle missing numeric and date values","text":"Can just filter date_onset rows June 2013? Caution! Applying code filter(date_onset > .Date(\"2013-06-01\"))) accidentally remove rows later epidemic missing date onset!DANGER: Filtering greater (>) less (<) date number can remove rows missing values (NA)! NA treated infinitely large small.","code":""},{"path":"cleaning-data.html","id":"design-the-filter","chapter":"8 Cleaning data","heading":"8.9.2.3 Design the filter","text":"Examine cross-tabulation make sure exclude correct rows:criteria can filter remove first outbreak dataset? see :first epidemic occurred Hospital , Hospital B, also 10 cases Port Hospital.Hospitals & B cases second epidemic, Port Hospital .want exclude:586 rows onset 2012 2013 either hospital , B, Port:\r\nExclude 549 rows onset 2012 2013\r\nExclude 37 rows Hospitals & B missing onset dates\r\nexclude 252 rows missing onset dates.\r\nExclude 549 rows onset 2012 2013Exclude 37 rows Hospitals & B missing onset datesDo exclude 252 rows missing onset dates.start linelist nrow(linelist). filter statement:re-make cross-tabulation, see Hospitals & B removed completely, 10 Port Hospital cases 2012 & 2013 removed, values - just wanted.Multiple statements can included within one filter command (separated commas), can always pipe separate filter() command clarity.Note: readers may notice easier just filter date_hospitalisation 100% complete. true. pdate_onset used purposes complex filter example.","code":"\ntable(Hospital  = linelist$hospital,                     # hospital name\n      YearOnset = lubridate::year(linelist$date_onset),  # year of date_onset\n      useNA     = \"always\")                              # show missing values##                                       YearOnset\r\n## Hospital                               2012 2013 2014 2015 <NA>\r\n##   Central Hospital                        0    0  351   99   15\r\n##   Hospital A                            231   41    0    0   16\r\n##   Hospital B                            228   40    0    0   21\r\n##   Military Hospital                       0    0  679  204   33\r\n##   Missing                                 0    0 1119  322   60\r\n##   Other                                   0    0  685  173   44\r\n##   Port Hospital                           7    2 1368  344   86\r\n##   St. Mark's Maternity Hospital (SMMH)    0    0  330   93   14\r\n##   <NA>                                    0    0    0    0    0\nlinelist <- linelist %>% \n  # keep rows where onset is after 1 June 2013 OR where onset is missing and it was a hospital OTHER than Hospital A or B\n  filter(date_onset > as.Date(\"2013-06-01\") | (is.na(date_onset) & !hospital %in% c(\"Hospital A\", \"Hospital B\")))\n\nnrow(linelist)## [1] 6019\ntable(Hospital  = linelist$hospital,                     # hospital name\n      YearOnset = lubridate::year(linelist$date_onset),  # year of date_onset\n      useNA     = \"always\")                              # show missing values##                                       YearOnset\r\n## Hospital                               2014 2015 <NA>\r\n##   Central Hospital                      351   99   15\r\n##   Military Hospital                     679  204   33\r\n##   Missing                              1119  322   60\r\n##   Other                                 685  173   44\r\n##   Port Hospital                        1368  344   86\r\n##   St. Mark's Maternity Hospital (SMMH)  330   93   14\r\n##   <NA>                                    0    0    0"},{"path":"cleaning-data.html","id":"filter-as-a-stand-alone-command","chapter":"8 Cleaning data","heading":"8.9.3 Filter as a stand-alone command","text":"Filtering can also done stand-alone command (part pipe chain). Like dplyr verbs, case first argument must dataset .can also use base R subset using square brackets reflect [rows, columns] want retain.TIP: Use bracket-subset syntax View() quickly review records.","code":"\n# dataframe <- filter(dataframe, condition(s) for rows to keep)\n\nlinelist <- filter(linelist, !is.na(case_id))\n# dataframe <- dataframe[row conditions, column conditions] (blank means keep all)\n\nlinelist <- linelist[!is.na(case_id), ]"},{"path":"cleaning-data.html","id":"filtering-to-quickly-review-data","chapter":"8 Cleaning data","heading":"8.9.4 Filtering to quickly review data","text":"base R syntax can handy want quickly view subset rows columns. Use base R View() command (note capital “V”) around [] subset want see. result appear dataframe RStudio viewer panel. example, want review onset hospitalization dates 3 specific cases:View linelist viewer panel:View specific data three cases:Note: command can also written dplyr verbs filter() select() :","code":"\nView(linelist)\nView(linelist[linelist$case_id %in% c(\"11f8ea\", \"76b97a\", \"47a5f5\"), c(\"date_onset\", \"date_hospitalisation\")])\nView(linelist %>%\n       filter(case_id %in% c(\"11f8ea\", \"76b97a\", \"47a5f5\")) %>%\n       select(date_onset, date_hospitalisation))"},{"path":"cleaning-data.html","id":"add-to-pipe-chain-2","chapter":"8 Cleaning data","heading":"8.9.5 Add to pipe chain","text":"","code":"\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n  \n    # remove column\n        select(-c(row_num, merged_header, x28)) %>% \n\n    # fix incorrect values                 # old value       # new value\n    mutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\")) %>% \n    \n    # correct the class of the columns\n    mutate(across(contains(\"date\"), as.Date), \n           generation = as.numeric(generation),\n           age        = as.numeric(age)) %>% \n  \n    \n    # create column: delay to hospitalisation\n    mutate(days_onset_hosp = as.numeric(date_hospitalisation - date_onset)) %>% \n    \n    # clean values of hospital column\n    mutate(hospital = recode(hospital,\n                      # OLD = NEW\n                      \"Mitylira Hopital\"  = \"Military Hospital\",\n                      \"Mitylira Hospital\" = \"Military Hospital\",\n                      \"Military Hopital\"  = \"Military Hospital\",\n                      \"Port Hopital\"      = \"Port Hospital\",\n                      \"Central Hopital\"   = \"Central Hospital\",\n                      \"other\"             = \"Other\",\n                      \"St. Marks Maternity Hopital (SMMH)\" = \"St. Mark's Maternity Hospital (SMMH)\"\n                      )) %>% \n\n    mutate(hospital = replace_na(hospital, \"Missing\")) %>% \n\n    # create age_years column (from age and age_unit)\n    mutate(age_years = case_when(\n          age_unit == \"years\"  ~ age,\n          age_unit == \"months\" ~ age/12,\n          is.na(age_unit)      ~ age,\n          TRUE                 ~ NA_real_)) %>% \n    \n  # ABOVE ARE UPSTREAM CLEANING STEPS ALREADY DISCUSSED\n    ###################################################\n    filter(\n          # keep only rows where case_id is not missing\n          !is.na(case_id),  \n          \n          # also filter to keep only the second outbreak\n          date_onset > as.Date(\"2013-06-01\") | (is.na(date_onset) & !hospital %in% c(\"Hospital A\", \"Hospital B\")))"},{"path":"cleaning-data.html","id":"num_cats","chapter":"8 Cleaning data","heading":"8.10 Numeric categories","text":"CAUTION: tab may follow previous tabs.Special approaches creating numeric categoriesCommon examples include age categories, groups lab values, etc.several ways create categories numeric column age. discuss:age_categories(), epikit packagecut(), base Rusing percentiles break numbersnatural break points… ? DOcase_when()Sometimes, numeric variables import class “character”. occurs non-numeric characters values, example entry “2 months” age, (depending R locale settings) comma used decimals place (e.g. “4,5” mean four one half years).example create age_cat column using age_years column.","code":"\n#check the class of the linelist variable age\nclass(linelist$age_years)## [1] \"numeric\""},{"path":"cleaning-data.html","id":"age_categories","chapter":"8 Cleaning data","heading":"8.10.1 age_categories()**","text":"epikit package, can use age_categories() function easily categorize label numeric columns (note: can applied non-age numeric variables ). output ordered factor.break values specified included higher group, groups open lower/left side. shown , can add 1 break value achieve groups open top/right.optional arguments:lower = Default 0). lowest number want considered.upper = highest number want considered.= number years groups.separator = Default “-”. Character ages labels.ceiling = Default FALSE. TRUE, highest break value ceiling category “XX+” included. values highest break upper (defined) categorized NA.See function’s Help page details (enter ?age_categories R console).","code":"\nlibrary(epikit)\n\n# Simple example\n################\nlinelist <- linelist %>% \n  mutate(age_cat = age_categories(age_years,\n                                  breakers = c(0, 5, 10, 15, 20, 30, 50, 70)))\n# show table\ntable(linelist$age_cat, useNA = \"always\")## \r\n##   0-4   5-9 10-14 15-19 20-29 30-49 50-69   70+  <NA> \r\n##  1097  1177  1006   855  1108   639    46     0    91\n# With ceiling set to TRUE\n##########################\nlinelist <- linelist %>% \n  mutate(age_cat = age_categories(age_years, \n                                  breakers = c(0, 5, 10, 15, 20, 30, 50, 70),\n                                  upper = max(linelist$age_years, na.rm=T),\n                                  ceiling = TRUE)) # 70 is the ceiling\n# show table\ntable(linelist$age_cat, useNA = \"always\")## \r\n##   0-4   5-9 10-14 15-19 20-29 30-49 50-70  <NA> \r\n##  1097  1177  1006   855  1108   639    46    91\n# Include upper ends for the same categories\n############################################\nlinelist <- linelist %>% \n  mutate(age_cat = age_categories(age_years, \n                                  upper = max(linelist$age_years, na.rm=T),\n                                  breakers = c(0, 6, 11, 16, 21, 31, 51, 71, 76)))\n# show table\ntable(linelist$age_cat, useNA = \"always\")## \r\n##   0-5  6-10 11-15 16-20 21-30 31-50 51-70 71-75   76+  <NA> \r\n##  1338  1160   976   809  1029   579    37     0     0    91"},{"path":"cleaning-data.html","id":"cut","chapter":"8 Cleaning data","heading":"8.10.2 cut()","text":"can use base R function cut(), creates categories numeric variable. differences age_categories() :need install/load another packageYou can specify whether groups open/closed right/leftYou must provide labels (ensure accurate groups)want 0 included lowest group must specify thisThe basic syntax within cut() first provide numeric variable cut (age_years), breaks argument, numeric vector (c()) break points. Using cut(), resulting column ordered factor.used within mutate() (dplyr verb) necessary specify dataframe column name (e.g. linelist$age_years).","code":""},{"path":"cleaning-data.html","id":"simple-cut-example","chapter":"8 Cleaning data","heading":"8.10.2.1 Simple cut() example","text":"Create new column age categories (age_cat) cutting numeric age_year column specified break points. example replicates first age_categories() example.Specify numeric vector break points c(0, 5, 10, 15, ...)Default behavior cut() lower break values excluded category, upper break values included. opposite behavior age_categories() function.Include 0 lowest category adding include.lowest = TRUEAdd vector customized labels using labels = argumentCheck work cross-tabulation numeric category columns - aware missing values","code":"\nlinelist <- linelist %>% \n  mutate(age_cat = cut(age_years,                                       # numeric column\n                        breaks = c(0, 5, 10, 15, 20, 30, 50, 70,        # break points...\n                                   max(linelist$age_years, na.rm=T)),   # ... with dynamic last break as column max value\n                        right = TRUE,                                   # lower breaks included and upper excluded [a,b)\n                        include.lowest = TRUE,                          # 0 included in lowest category\n                        labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\",      # manual labels - be careful!\n                                   \"20-29\", \"30-49\", \"50-69\", \"70+\")))       \n\ntable(linelist$age_cat, useNA = \"always\")## \r\n##   0-4   5-9 10-14 15-19 20-29 30-49 50-69   70+  <NA> \r\n##  1338  1160   976   809  1029   579    37     0    91"},{"path":"cleaning-data.html","id":"cut-details","chapter":"8 Cleaning data","heading":"8.10.2.2 cut() details","text":"detailed description behavior using cut() make age_cat column. Key points:Inclusion/exclusion behavior break pointsCustom category labelsHandling missing valuesCheck work!simple command cut() applied age_years make new variable age_cat :default, categorization occurs right/upper side “open” inclusive (left/lower side “closed” exclusive). default labels use notation “(, B]”, means group include (lower break value), includes B (upper break value). Reverse behavior providing right = TRUE argument.default, categorization occurs right/upper side “open” inclusive (left/lower side “closed” exclusive). default labels use notation “(, B]”, means group include (lower break value), includes B (upper break value). Reverse behavior providing right = TRUE argument.Thus, default “0” values excluded lowest group, categorized NA. “0” values infants coded age 0. change add argument include.lowest = TRUE. , “0” values included lowest group. automatically-generated label lowest category change “(0,B]” “[0,B]”, signifies 0 values included.Thus, default “0” values excluded lowest group, categorized NA. “0” values infants coded age 0. change add argument include.lowest = TRUE. , “0” values included lowest group. automatically-generated label lowest category change “(0,B]” “[0,B]”, signifies 0 values included.Check work!!! Verify age value assigned correct category cross-tabulating numeric category columns. Examine assignment boundary values (e.g. 15, neighboring categories 10-15 15-20).Check work!!! Verify age value assigned correct category cross-tabulating numeric category columns. Examine assignment boundary values (e.g. 15, neighboring categories 10-15 15-20).Read cut() Help page entering ?cut R console.Reversing break inclusion behavior cut()Lower break values included category (upper break values excluded) argument right = included set TRUE. applied - note values shifted among categories.NOTE: include include.lowest = TRUE argument right = TRUE, include.lowest now apply highest break point value category, lowest.Re-labeling NA values cut()cut() automatically label NA values, may want assign label “Missing”. requires extra steps cut() automatically classified new column age_cat Factor (rigid column class specific value labels).First, convert age_cut Factor Character class, flexibility add new character values (e.g. “Missing”). Otherwise encounter error. , use dplyr verb replace_na() replace NA values character value like “Missing”. steps can combined one step, shown .Note Missing added, order categories now wrong (alphabetical).fix , re-convert age_cat factor, define order levels correctly.want fast way make breaks labels, can use something like (adjust specific situation). See page using seq() rep() c() ","code":"\n# Create new variable, by cutting the numeric age variable\n# by default, upper break is excluded and lower break excluded from each category\nlinelist <- linelist %>% \n  mutate(age_cat = cut(age_years, breaks = c(0, 5, 10, 15, 20, 30, 50, 70, 100)))\n\n# tabulate the number of observations per group\ntable(linelist$age_cat, useNA = \"always\")## \r\n##    (0,5]   (5,10]  (10,15]  (15,20]  (20,30]  (30,50]  (50,70] (70,100]     <NA> \r\n##     1223     1160      976      809     1029      579       37        0      206\n# Cross tabulation of the numeric and category columns. \ntable(\"Numeric Values\" = linelist$age_years,   # names specified in table for clarity.\n      \"Categories\"     = linelist$age_cat,\n      useNA = \"always\")                        # don't forget to examine NA values##                     Categories\r\n## Numeric Values       (0,5] (5,10] (10,15] (15,20] (20,30] (30,50] (50,70] (70,100] <NA>\r\n##   0                      0      0       0       0       0       0       0        0  115\r\n##   0.0833333333333333     1      0       0       0       0       0       0        0    0\r\n##   0.166666666666667      1      0       0       0       0       0       0        0    0\r\n##   0.333333333333333      3      0       0       0       0       0       0        0    0\r\n##   0.416666666666667      1      0       0       0       0       0       0        0    0\r\n##   0.5                    2      0       0       0       0       0       0        0    0\r\n##   0.583333333333333      2      0       0       0       0       0       0        0    0\r\n##   0.666666666666667      6      0       0       0       0       0       0        0    0\r\n##   0.75                   1      0       0       0       0       0       0        0    0\r\n##   0.833333333333333      2      0       0       0       0       0       0        0    0\r\n##   1                    259      0       0       0       0       0       0        0    0\r\n##   1.5                    3      0       0       0       0       0       0        0    0\r\n##   2                    250      0       0       0       0       0       0        0    0\r\n##   3                    229      0       0       0       0       0       0        0    0\r\n##   4                    222      0       0       0       0       0       0        0    0\r\n##   5                    241      0       0       0       0       0       0        0    0\r\n##   6                      0    228       0       0       0       0       0        0    0\r\n##   7                      0    231       0       0       0       0       0        0    0\r\n##   8                      0    231       0       0       0       0       0        0    0\r\n##   9                      0    246       0       0       0       0       0        0    0\r\n##   10                     0    224       0       0       0       0       0        0    0\r\n##   11                     0      0     208       0       0       0       0        0    0\r\n##   12                     0      0     209       0       0       0       0        0    0\r\n##   13                     0      0     191       0       0       0       0        0    0\r\n##   14                     0      0     174       0       0       0       0        0    0\r\n##   15                     0      0     194       0       0       0       0        0    0\r\n##   16                     0      0       0     198       0       0       0        0    0\r\n##   17                     0      0       0     179       0       0       0        0    0\r\n##   18                     0      0       0     141       0       0       0        0    0\r\n##   19                     0      0       0     143       0       0       0        0    0\r\n##   20                     0      0       0     148       0       0       0        0    0\r\n##   21                     0      0       0       0     137       0       0        0    0\r\n##   22                     0      0       0       0     129       0       0        0    0\r\n##   23                     0      0       0       0      99       0       0        0    0\r\n##   24                     0      0       0       0     101       0       0        0    0\r\n##   25                     0      0       0       0     108       0       0        0    0\r\n##   26                     0      0       0       0     111       0       0        0    0\r\n##   27                     0      0       0       0      95       0       0        0    0\r\n##   28                     0      0       0       0      97       0       0        0    0\r\n##   29                     0      0       0       0      83       0       0        0    0\r\n##   30                     0      0       0       0      69       0       0        0    0\r\n##   31                     0      0       0       0       0      57       0        0    0\r\n##   32                     0      0       0       0       0      76       0        0    0\r\n##   33                     0      0       0       0       0      71       0        0    0\r\n##   34                     0      0       0       0       0      28       0        0    0\r\n##   35                     0      0       0       0       0      43       0        0    0\r\n##   36                     0      0       0       0       0      46       0        0    0\r\n##   37                     0      0       0       0       0      44       0        0    0\r\n##   38                     0      0       0       0       0      30       0        0    0\r\n##   39                     0      0       0       0       0      20       0        0    0\r\n##   40                     0      0       0       0       0      16       0        0    0\r\n##   41                     0      0       0       0       0      24       0        0    0\r\n##   42                     0      0       0       0       0      30       0        0    0\r\n##   43                     0      0       0       0       0      15       0        0    0\r\n##   44                     0      0       0       0       0      16       0        0    0\r\n##   45                     0      0       0       0       0      17       0        0    0\r\n##   46                     0      0       0       0       0      11       0        0    0\r\n##   47                     0      0       0       0       0      11       0        0    0\r\n##   48                     0      0       0       0       0      12       0        0    0\r\n##   49                     0      0       0       0       0       3       0        0    0\r\n##   50                     0      0       0       0       0       9       0        0    0\r\n##   51                     0      0       0       0       0       0       4        0    0\r\n##   52                     0      0       0       0       0       0       6        0    0\r\n##   53                     0      0       0       0       0       0       3        0    0\r\n##   54                     0      0       0       0       0       0       4        0    0\r\n##   55                     0      0       0       0       0       0       4        0    0\r\n##   56                     0      0       0       0       0       0       6        0    0\r\n##   57                     0      0       0       0       0       0       2        0    0\r\n##   58                     0      0       0       0       0       0       2        0    0\r\n##   59                     0      0       0       0       0       0       1        0    0\r\n##   61                     0      0       0       0       0       0       1        0    0\r\n##   63                     0      0       0       0       0       0       1        0    0\r\n##   65                     0      0       0       0       0       0       1        0    0\r\n##   66                     0      0       0       0       0       0       1        0    0\r\n##   67                     0      0       0       0       0       0       1        0    0\r\n##   <NA>                   0      0       0       0       0       0       0        0   91\nlinelist <- linelist %>% \n  mutate(age_cat = cut(age_years,\n                          breaks = c(0, 5, 10, 15, 20, 30, 50, 70, 100),     # same breaks\n                          right = FALSE,                                     # include each *lower* break point            \n                          labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\",\n                                     \"20-29\", \"30-49\", \"50-69\", \"70-100\")))  # now the labels must change\n\ntable(linelist$age_cat, useNA = \"always\")## \r\n##    0-4    5-9  10-14  15-19  20-29  30-49  50-69 70-100   <NA> \r\n##   1097   1177   1006    855   1108    639     46      0     91\nlinelist <- linelist %>% \n  \n  # cut() creates age_cat, automatically of class Factor      \n  mutate(age_cat = cut(age_years,\n                          breaks = c(0, 5, 10, 15, 20, 30, 50, 70, 100),          \n                          right = FALSE,                                                      \n                          labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\",\n                                     \"20-29\", \"30-49\", \"50-69\", \"70-100\")),\n         \n         # convert to class Character, and replace NA with \"Missing\"\n         age_cat = replace_na(as.character(age_cat), \"Missing\"))\n\n\ntable(linelist$age_cat, useNA = \"always\")## \r\n##     0-4   10-14   15-19   20-29   30-49     5-9   50-69 Missing    <NA> \r\n##    1097    1006     855    1108     639    1177      46      91       0\nlinelist <- linelist %>% \n  \n  # cut() creates age_cat, automatically of class Factor      \n  mutate(age_cat = cut(age_years,\n                          breaks = c(0, 5, 10, 15, 20, 30, 50, 70, 100),          \n                          right = FALSE,                                                      \n                          labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\",\n                                     \"20-29\", \"30-49\", \"50-69\", \"70-100\")),\n         \n         # convert to class Character, and replace NA with \"Missing\"\n         age_cat = replace_na(as.character(age_cat), \"Missing\"),\n         \n         # re-classify age_cat as Factor, with correct level order and new \"Missing\" level\n         age_cat = factor(age_cat, levels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-29\",\n                                              \"30-49\", \"50-69\", \"70-100\", \"Missing\")))    \n  \n\ntable(linelist$age_cat, useNA = \"always\")## \r\n##     0-4     5-9   10-14   15-19   20-29   30-49   50-69  70-100 Missing    <NA> \r\n##    1097    1177    1006     855    1108     639      46       0      91       0\n# Make break points from 0 to 90 by 5\nage_seq = seq(from = 0, to = 90, by = 5)\nage_seq\n\n# Make labels for the above categories, assuming default cut() settings\nage_labels = paste0(age_seq+1, \"-\", age_seq + 5)\nage_labels\n\n# check that both vectors are the same length\nlength(age_seq) == length(age_labels)\n\n# # Use them in the cut() command\n# cut(linelist$age, breaks = age_seq, labels = age_labels)"},{"path":"cleaning-data.html","id":"case_when-1","chapter":"8 Cleaning data","heading":"8.10.3 case_when()","text":"dplyr function case_when() can also used create numeric categories.Allows explicit setting break point inclusion/exclusionAllows designation label NA values one stepMore complicated code, arguably prone errorAllow flexibility include variables logicIf using case_when() please review -depth page , logic order assignment important understand avoid errors.CAUTION: case_when() right-hand side values must class. Thus, categories character values (e.g. “20-30 years”) designated outcome NA age values must also character (“Missing”, special NA_character_ instead NA).need designate column factor (wrapping case_when() function factor()) provide ordering factor levels using levels = argument close case_when() function. using cut(), factor ordering levels done automatically.","code":"\nlinelist <- linelist %>% \n  mutate(age_cat = factor(case_when(\n          # provide the case_when logic and outcomes\n          age_years >= 0 & age_years < 5     ~ \"0-4\",          # logic by age_year value\n          age_years >= 5 & age_years < 10    ~ \"5-9\",\n          age_years >= 10 & age_years < 15   ~ \"10-14\",\n          age_years >= 15 & age_years < 20   ~ \"15-19\",\n          age_years >= 20 & age_years < 30   ~ \"20-29\",\n          age_years >= 30 & age_years < 50   ~ \"30-49\",\n          age_years >= 50 & age_years < 70   ~ \"50-69\",\n          age_years >= 45 & age_years <= 100 ~ \"70-100\",\n          is.na(age_years)                   ~ \"Missing\",  # if age_years is missing\n          TRUE                               ~ \"Check value\"   # catch-all alarm to trigger review\n          ), levels = c(\"0-4\",\"5-9\", \"10-14\", \"15-19\", \"20-29\", \"30-49\", \"50-69\", \"70-100\", \"Missing\", \"Check value\"))\n         )\n\n\ntable(linelist$age_cat, useNA = \"always\")## \r\n##         0-4         5-9       10-14       15-19       20-29       30-49       50-69      70-100     Missing Check value        <NA> \r\n##        1097        1177        1006         855        1108         639          46           0          91           0           0"},{"path":"cleaning-data.html","id":"add-to-pipe-chain-3","chapter":"8 Cleaning data","heading":"8.10.4 Add to pipe chain","text":", code create two categorical age columns added cleaning pipe chain:","code":"\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n  \n    # remove column\n        select(-c(row_num, merged_header, x28)) %>% \n\n    # fix incorrect values                 # old value       # new value\n    mutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\")) %>% \n    \n    # correct the class of the columns\n    mutate(across(contains(\"date\"), as.Date), \n           generation = as.numeric(generation),\n           age        = as.numeric(age)) %>% \n  \n    \n    # create column: delay to hospitalisation\n    mutate(days_onset_hosp = as.numeric(date_hospitalisation - date_onset)) %>% \n    \n    # clean values of hospital column\n    mutate(hospital = recode(hospital,\n                      # OLD = NEW\n                      \"Mitylira Hopital\"  = \"Military Hospital\",\n                      \"Mitylira Hospital\" = \"Military Hospital\",\n                      \"Military Hopital\"  = \"Military Hospital\",\n                      \"Port Hopital\"      = \"Port Hospital\",\n                      \"Central Hopital\"   = \"Central Hospital\",\n                      \"other\"             = \"Other\",\n                      \"St. Marks Maternity Hopital (SMMH)\" = \"St. Mark's Maternity Hospital (SMMH)\"\n                      )) %>% \n\n    mutate(hospital = replace_na(hospital, \"Missing\")) %>% \n\n    # create age_years column (from age and age_unit)\n    mutate(age_years = case_when(\n          age_unit == \"years\" ~ age,\n          age_unit == \"months\" ~ age/12,\n          is.na(age_unit) ~ age,\n          TRUE ~ NA_real_)) %>% \n    \n    filter(\n          # keep only rows where case_id is not missing\n          !is.na(case_id),  \n          \n          # also filter to keep only the second outbreak\n          date_onset > as.Date(\"2013-06-01\") | (is.na(date_onset) & !hospital %in% c(\"Hospital A\", \"Hospital B\"))) %>% \n  \n    # ABOVE ARE UPSTREAM CLEANING STEPS ALREADY DISCUSSED\n    ###################################################   \n    mutate(\n          # age categories: custom\n          age_cat = epikit::age_categories(age_years, breakers = c(0, 5, 10, 15, 20, 30, 50, 70)),\n        \n          # age categories: 0 to 85 by 5s\n          age_cat5 = epikit::age_categories(age_years, breakers = seq(0, 85, 5)))"},{"path":"cleaning-data.html","id":"rowwise-dplyr","chapter":"8 Cleaning data","heading":"8.11 rowwise() dplyr()","text":"https://cran.r-project.org/web/packages/dplyr/vignettes/rowwise.html","code":"\nlinelist <- linelist %>%\n  rowwise() %>%\n  mutate(num_symptoms = sum(c(fever, chills, cough, aches, vomit) == \"yes\"))"},{"path":"cleaning-data.html","id":"transforming-multiple-variables-at-once","chapter":"8 Cleaning data","heading":"8.12 Transforming multiple variables at once","text":"CAUTION: tab may follow previous tabs.transformation can applied multiple variables using across() function package dplyr (contained within tidyverse package).across() can used dplyr verb, commonly mutate(), filter(), summarise(). examples get started.Example one change columns character classChange numeric columnsHere online resources using across(): Hadley Wickham’s thoughts/rationale","code":"\n#to change all columns to character class\nlinelist <- linelist %>% \n  mutate(across(everything(), as.character))"},{"path":"cleaning-data.html","id":"deduplication","chapter":"8 Cleaning data","heading":"8.13 Deduplication","text":"CAUTION: tab may follow previous tabs.package dplyr offers distinct() function reduce dataframe unique rows - removing duplicates.\r\ncase just want remove rows complete duplicates, just add simple command distinct().complex deduplications see page deduplicating.begin 6019 rows linelist.deduplication 5889 rows., distinct() command added cleaning pipe chain:","code":"\nlinelist <- linelist %>% \n  distinct()\n# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)\n##################################################################################\n\n# begin cleaning pipe chain\n###########################\nlinelist <- linelist_raw %>%\n    \n    # standardize column name syntax\n    janitor::clean_names() %>% \n    \n    # manually re-name columns\n           # NEW name             # OLD name\n    rename(date_infection       = infection_date,\n           date_hospitalisation = hosp_date,\n           date_outcome         = date_of_outcome) %>% \n  \n    # remove column\n        select(-c(row_num, merged_header, x28)) %>% \n\n    # fix incorrect values                 # old value       # new value\n    mutate(date_onset = recode(date_onset, \"15th April 2014\" = \"2014-04-15\")) %>% \n  \n    # correct the class of the columns\n    mutate(across(contains(\"date\"), as.Date), \n           generation = as.numeric(generation),\n           age        = as.numeric(age)) %>% \n    \n    # create column: delay to hospitalisation\n    mutate(days_onset_hosp = as.numeric(date_hospitalisation - date_onset)) %>% \n    \n    # clean values of hospital column\n    mutate(hospital = recode(hospital,\n                      # OLD = NEW\n                      \"Mitylira Hopital\"  = \"Military Hospital\",\n                      \"Mitylira Hospital\" = \"Military Hospital\",\n                      \"Military Hopital\"  = \"Military Hospital\",\n                      \"Port Hopital\"      = \"Port Hospital\",\n                      \"Central Hopital\"   = \"Central Hospital\",\n                      \"other\"             = \"Other\",\n                      \"St. Marks Maternity Hopital (SMMH)\" = \"St. Mark's Maternity Hospital (SMMH)\"\n                      )) %>% \n\n    mutate(hospital = replace_na(hospital, \"Missing\")) %>% \n\n    # create age_years column (from age and age_unit)\n    mutate(age_years = case_when(\n          age_unit == \"years\" ~ age,\n          age_unit == \"months\" ~ age/12,\n          is.na(age_unit) ~ age,\n          TRUE ~ NA_real_)) %>% \n    \n    filter(\n          # keep only rows where case_id is not missing\n          !is.na(case_id),  \n          \n          # also filter to keep only the second outbreak\n          date_onset > as.Date(\"2013-06-01\") | (is.na(date_onset) & !hospital %in% c(\"Hospital A\", \"Hospital B\"))) %>% \n  \n    mutate(\n          # age categories: custom\n          age_cat = epikit::age_categories(age_years, breakers = c(0, 5, 10, 15, 20, 30, 50, 70)),\n        \n          # age categories: 0 to 85 by 5s\n          age_cat5 = epikit::age_categories(age_years, breakers = seq(0, 85, 5))) %>% \n  \n    distinct()"},{"path":"working-with-dates.html","id":"working-with-dates","chapter":"9 Working with Dates","heading":"9 Working with Dates","text":"","code":""},{"path":"working-with-dates.html","id":"overview-5","chapter":"9 Working with Dates","heading":"9.1 Overview","text":"Working dates R notoriously difficult compared object classes. R often interprets dates character objects - means used general date operations making time series calculating time intervals. make matters difficult, many date formats, can confused formats. Luckily, dates can wrangled easily practice, set helpful packages.Dates R class object - Date class. noted also class stores objects date time. Date time objects formally referred /POSIXt, POSIXct, /POSIXlt classes (difference isn’t important). objects informally referred datetime classes.can get system date system datetime following:important make R recognize variable contains dates.Dates object class can tricky work .present several ways convert date variables Date class.","code":"\n# get the system date - this is a DATE class\nSys.Date()## [1] \"2021-01-31\"\n# get the system time - this is a DATETIME class\nSys.time()## [1] \"2021-01-31 19:10:54 EST\""},{"path":"working-with-dates.html","id":"packages-2","chapter":"9 Working with Dates","heading":"9.2 Packages","text":"following packages recommended working dates:","code":"\n# Checks if package is installed, installs if necessary, and loads package for current session\n\npacman::p_load(aweek,      # flexibly converts dates to weeks, and vis-versa\n               lubridate,  # for conversions to months, years, etc.\n               linelist,   # function to guess messy dates\n               ISOweek)    # another option for creating weeks"},{"path":"working-with-dates.html","id":"converting-objects-to-date-class","chapter":"9 Working with Dates","heading":"9.3 Converting objects to Date class","text":"standard, base R function convert object variable class Date .Date() (note capitalization)..Date() requires user specify existing* format date*, can understand, convert, store element (day, month, year, etc.) correctly. Read online .Date().used variable, .Date() therefore requires character date values format converting. data messy, try cleaning consider using guess_dates() linelist package.can easiest first convert variable character class, convert date class:Turn variable character values using function .character()Convert variable character values date values, using function .Date()\r\n(note capital “D”)Within .Date() function, must use format= argument tell R current format date components - characters refer month, day, year, separated. values already one R’s standard date formats (YYYY-MM-DD YYYY/MM/DD) format= argument necessary.\r\ncodes :\r\n%d = Day # (month e.g. 16, 17, 18…)\r\n%= abbreviated weekday (Mon, Tues, Wed, etc.)\r\n%= full weekday (Monday, Tuesday, etc.)\r\n%m = # month (e.g. 01, 02, 03, 04)\r\n%b = abbreviated month (Jan, Feb, etc.)\r\n%B = Full Month (January, February, etc.)\r\n%y = 2-digit year (e.g. 89)\r\n%Y = 4-digit year (e.g. 1989)\r\nWithin .Date() function, must use format= argument tell R current format date components - characters refer month, day, year, separated. values already one R’s standard date formats (YYYY-MM-DD YYYY/MM/DD) format= argument necessary.codes :\r\n%d = Day # (month e.g. 16, 17, 18…)\r\n%= abbreviated weekday (Mon, Tues, Wed, etc.)\r\n%= full weekday (Monday, Tuesday, etc.)\r\n%m = # month (e.g. 01, 02, 03, 04)\r\n%b = abbreviated month (Jan, Feb, etc.)\r\n%B = Full Month (January, February, etc.)\r\n%y = 2-digit year (e.g. 89)\r\n%Y = 4-digit year (e.g. 1989)example, character dates format DD/MM/YYYY, like “24/04/1968”, command turn values dates . Putting format quotation marks necessary.TIP: format = argument telling R format want dates , rather identify date parts run command.TIP:sure format = argument use date-part separator (e.g. /, -, space) present dates.Conveting character objects dates can made far easier using lubridate package. lubridate package tidyverse package designed make working dates time simple consistent base R. reasons, lubridate often considered gold-standard package dates time, recommended whenever working .lubridate package provides number different helper functions designed convert character objects dates intuitive, lenient way specifying format .Date(). functions specific rough date format, allow variety separators, synonyms dates (e.g. 01 vs Jan vs January) - named abbreviations date formats.using piping tidyverse, converting character column dates might look like :complete, can run command verify class variableOnce values class Date, R default display standard format, YYYY-MM-DD.","code":"\nlinelist_cleaned$date_of_onset <- as.character(linelist_cleaned$date_of_onset)\nlinelist_cleaned$date_of_onset <- as.Date(linelist_cleaned$date_of_onset, format = \"%d/%m/%Y\")\n# load packages \nlibrary(lubridate)\n\n# read date in year-month-day format\nymd(\"2020-10-11\")## [1] \"2020-10-11\"\nymd(\"20201011\")## [1] \"2020-10-11\"\n# read date in month-day-year format\nmdy(\"10/11/2020\")## [1] \"2020-10-11\"\nmdy(\"Oct 11 20\")## [1] \"2020-10-11\"\n# read date in day-month-year format\ndmy(\"11 10 2020\")## [1] \"2020-10-11\"\ndmy(\"11 October 2020\")## [1] \"2020-10-11\"\nlinelist_cleaned <- linelist_cleaned %>%\n  mutate(date_of_onset = lubridate::dmy(date_of_onset))\n# Check the class of the variable\nclass(linelist_cleaned$date_of_onset)  "},{"path":"working-with-dates.html","id":"converting-to-datetime-classes","chapter":"9 Working with Dates","heading":"9.4 Converting to datetime classes","text":"previously mentioned, R also supports datetime class - variable contains date time information. Date class, often need converted character objects datetime objects.standard datetime object formatted date first, followed time component - example 01 Jan 2020, 16:30. dates, many ways can formatted, numerous levels precision (hours, minutes, seconds) can supplied. Luckily, lubridate helper functions also exist help convert strings datetime objects. functions date helper functions, _h (hours supplied), _hm (hours minutes supplied), _hms (hours, minutes, seconds supplied) appended end (e.g. dmy_hms()). can used shown:working linelist, time date columns can combined create datetime column using functions:","code":"\n# convert datetime with only hours to datetime object\nymd_h(\"2020-01-01 16hrs\")## [1] \"2020-01-01 16:00:00 UTC\"\nymd_h(\"2020-01-01 4PM\")## [1] \"2020-01-01 16:00:00 UTC\"\n# convert datetime with hours and minutes to datetime object\ndmy_hm(\"Jan 1st 2020 16:20\")## Warning: All formats failed to parse. No formats found.## [1] NA\n# convert datetime with hours, minutes, and seconds to datetime object\nmdy_hms(\"01 January 20, 16:20:40\")## Warning: All formats failed to parse. No formats found.## [1] NA\n# you can supply time zone but it is ignored\nmdy_hms(\"01 January 20, 16:20:40 PST\")## Warning: All formats failed to parse. No formats found.## [1] NA# time_admission is a variable in hours:minutes\r\nlinelist_cleaned <- linelist_cleaned %>%\r\n  # assume that when time of admission is not given, it the median admission time\r\n  mutate(\r\n    time_admission_clean = ifelse(\r\n      is.na(time_admission),\r\n      median(time_admission),\r\n      time_admission\r\n  ) %>%\r\n  # use paste0 to combine two columns to create a character vector, and use ymd_hm() to convert to datetime\r\n  mutate(\r\n    date_time_of_admission = paste0(\r\n      date_hospitalisation, time_admission_clean, sep = \" \"\r\n    ) %>% ymd_hm()\r\n  )"},{"path":"working-with-dates.html","id":"lubridate","chapter":"9 Working with Dates","heading":"9.5 lubridate","text":"lubridate can also used variety functions, extracting aspects date/datetime, performing date arithmetic, calculating date intervalsThis can brought together work data - example:","code":"\n  # extract the month from this date\n  \n  example_date <- ymd(\"2020-03-01\")\n  \n  # extract the month and year from this date\n  month(example_date)## [1] 3\n  year(example_date)## [1] 2020\n  # get the epiweek of this date (this will be expanded later)\n  epiweek(example_date)## [1] 10\n  # get the day of the week for this date (this will be expanded later)\n  wday(example_date)## [1] 1\n  # add 3 days to this date\n  example_date + days(3)## [1] \"2020-03-04\"\n  # add 7 weeks and subtract two days from this date\n  example_date + weeks(7) - days(2)## [1] \"2020-04-17\"\n  # find the interval between this date and Feb 20 2020 \n  \n  example_date - ymd(\"2020-02-20\")## Time difference of 10 days\nlibrary(lubridate)\n\nlinelist_cleaned <- linelist_cleaned %>%\n    # convert date of onset from character to date objects by specifying dmy format\n    mutate(date_of_onset = dmy(date_of_onset),\n           date_of_hospitalisation = dmy(date_of_hospitalisation)) %>%\n    # filter out all cases without onset in march\n    filter(month(date_of_onset) == 3) %>%\n    # find the difference in days between onset and hospitalisation\n    mutate(onset_to_hosp_days = date_of_hospitalisation - date_of_onset)"},{"path":"working-with-dates.html","id":"guess_dates","chapter":"9 Working with Dates","heading":"9.6 guess_dates()","text":"function guess_dates() attempts read “messy” date variable containing dates many different formats convert dates standard format. can read online guess_dates(), linelist package.example: guess_dates see following dates “03 Jan 2018”, “07/03/1982”, “08/20/85” convert class Date : 2018-01-03, 1982-03-07, 1985-08-20.optional arguments guess_dates() might include :error_tolerance - proportion entries identified dates tolerated (defaults 0.1 10%)last_date - last valid date (defaults current date)first_date - first valid date. Defaults fifty years last_date.","code":"\nlinelist::guess_dates(c(\"03 Jan 2018\", \"07/03/1982\", \"08/20/85\")) # guess_dates() not yet available on CRAN for R 4.0.2\n                                                                  # try install via devtools::install_github(\"reconhub/linelist\")# An example using guess_dates on the variable dtdeath\r\ndata_cleaned <- data %>% \r\n  mutate(\r\n    dtdeath = linelist::guess_dates(\r\n      dtdeath, error_tolerance = 0.1, first_date = \"2016-01-01\"\r\n    )"},{"path":"working-with-dates.html","id":"excel-dates","chapter":"9 Working with Dates","heading":"9.7 Excel Dates","text":"Excel stores dates number days since December 30, 1899. dataset imported Excel shows dates numbers characters like “41369”… use .Date() as_date() function convert, instead supplying format , supply origin date. work excel date read character type, sure ensure date numeric class (convert one)!NOTE: provide origin date R’s default date format (\"YYYY-MM-DD\").","code":"\nlibrary(lubridate)\nlibrary(dplyr)\n\n# An example of providing the Excel 'origin date' when converting Excel number dates\ndata_cleaned <- data %>% \n  mutate(date_of_onset = as_date(as.double(date_of_onset), origin = \"1899-12-30\"))"},{"path":"working-with-dates.html","id":"how-dates-are-displayed","chapter":"9 Working with Dates","heading":"9.8 How dates are displayed","text":"dates correct class, often want display differently (e.g. plot, graph, table). example, display “Monday 05 Jan” instead 2018-01-05. can function format(), works similar way .Date(). Read online tutorial. Remember output format() character type, generally used display purposes !%d = Day # (month e.g. 16, 17, 18…)\r\n%= abbreviated weekday (Mon, Tues, Wed, etc.)\r\n%= full weekday (Monday, Tuesday, etc.)\r\n%m = # month (e.g. 01, 02, 03, 04)\r\n%b = abbreviated month (Jan, Feb, etc.)\r\n%B = Full Month (January, February, etc.)\r\n%y = 2-digit year (e.g. 89)\r\n%Y = 4-digit year (e.g. 1989)\r\n%h = hours (24-hr clock)\r\n%m = minutes\r\n%s = seconds\r\n%z = offset GMT\r\n%Z = Time zone (character)example formatting today’s date:","code":"\n# today's date, with formatting\nformat(Sys.Date(), format = \"%d %B %Y\")## [1] \"31 January 2021\"\n# easy way to get full date and time (no formatting)\ndate()## [1] \"Sun Jan 31 19:10:56 2021\"\n# formatted date, time, and time zone (using paste0() function)\npaste0(\n  format(Sys.Date(), format = \"%A, %b %d '%y, %z  %Z, \"), \n  format(Sys.time(), format = \"%H:%M:%S\")\n)## [1] \"Sunday, Jan 31 '21, +0000  UTC, 19:10:56\""},{"path":"working-with-dates.html","id":"calculating-distance-between-dates","chapter":"9 Working with Dates","heading":"9.9 Calculating distance between dates","text":"difference dates can calculated :Correctly formating date variable class date (see instructions )Creating new variable defined one date variable subtracted otherConverting result numeric class (default class “datediff”). ensures subsequent mathematical calculations can performed.dataframe format (.e. working linelist), either dates missing, operation fail row. result NA instead numeric value. using column calculations, sure set na.rm option TRUE. example:","code":"\n# define variables as date classes\ndate_of_onset <- ymd(\"2020-03-16\")\ndate_lab_confirmation <- ymd(\"2020-03-20\")\n\n# find the delay between onset and lab confirmation\ndays_to_lab_conf <- as.double(date_lab_confirmation - date_of_onset)\ndays_to_lab_conf## [1] 4\n# add a new column\n# calculating the number of days between symptom onset and patient outcome\nlinelist_delay <- linelist_cleaned %>%\n  mutate(\n    days_onset_to_outcome = as.double(date_of_outcome - date_of_onset)\n  )\n\n# calculate the median number of days to outcome for all cases where data are available\nmed_days_outcome <- median(linelist_delay$dats_onset_to_outcome, na.rm = T)\n\n# often this operation might be done only on a subset of data cases, e.g. those who died\n# this is easy to look at and will be explained later in the handbook"},{"path":"working-with-dates.html","id":"converting-datestime-zones","chapter":"9 Working with Dates","heading":"9.10 Converting dates/time zones","text":"data present different time time zones, can often important standardise data unified time zone. can present challenge, time zone component data must coded manually cases.R, datetime object timezone component. default, datetime objects carry local time zone computer used - generally specific location rather named timezone, time zones often change locations due daylight savings time. possible accurately compensate time zones without time component date, event date variable represents attributed specific time, therefore time shifts measured hours reasonably accounted .deal time zones, number helper functions lubridate can used change time zone datetime object local time zone different time zone. Time zones set attributing valid tz database time zone datetime object. list can found - location using data list, nearby large cities time zone available serve purpose.https://en.wikipedia.org/wiki/List_of_tz_database_time_zonesThis may seem largely abstract, often needed user isn’t working across time zones. One simple example implementation :","code":"\n# assign the current time to a variable\ntime_now <- Sys.time()\ntime_now## [1] \"2021-01-31 19:10:56 EST\"\n# use with_tz() to assign a new timezone to the variable, while CHANGING the clock time\ntime_london_real <- with_tz(time_now, \"Europe/London\")\n\n# use force_tz() to assign a new timezone to the variable, while KEEPING the clock time\ntime_london_local <- force_tz(time_now, \"Europe/London\")\n\n\n# note that as long as the computer that was used to run this code is NOT set to London time, there will be a difference in the times (the number of hours difference from the computers time zone to london)\n\ntime_london_real - time_london_local## Time difference of 5 hours\n# TODO add when time variable is here\n# set the time variable to time zone for ebola outbreak \n\n# \"Africa/Lubumbashi\" is the time zone for eastern DRC/Kivu Nord"},{"path":"working-with-dates.html","id":"epidemiological-weeks","chapter":"9 Working with Dates","heading":"9.11 Epidemiological weeks","text":"templates use flexible package aweek set epidemiological weeks. can read RECON website","code":""},{"path":"working-with-dates.html","id":"dates-in-epicurves","chapter":"9 Working with Dates","heading":"9.12 Dates in Epicurves","text":"See section epicurves.","code":""},{"path":"working-with-dates.html","id":"dates-miscellaneous","chapter":"9 Working with Dates","heading":"9.13 Dates miscellaneous","text":"Sys.Date( ) returns current date computerSys.Time() returns current time computerdate() returns current date time.","code":""},{"path":"missing-data.html","id":"missing-data","chapter":"10 Missing data","heading":"10 Missing data","text":"","code":""},{"path":"missing-data.html","id":"overview-6","chapter":"10 Missing data","heading":"10.1 Overview","text":"page cover:Useful functions assessing missingnessAssess missingness dataframePlotting missingness timeHandling NA displayed plotsImputation","code":""},{"path":"missing-data.html","id":"useful-functions","chapter":"10 Missing data","heading":"10.2 Useful functions","text":"following useful functions assessing handling missing values:.na() !.na()identify missing values use .na() opposite (! front). base R.\r\nreturn logical vector (TRUE FALSE). Remember can sum() resulting vector count number TRUE, e.g. sum(.na(linelist$date_outcome)).na.omit()function, applied dataframe, remove rows missing values. also base R.\r\napplied vector, remove NA values vector applied . example:na.rm = TRUEOften mathematical function default include NA calculations, results function returning NA (designed intentionally, make aware missing data).\r\ncan usually avoid removing missing values calculation, including argument na.rm = TRUE (na.rm stands “remove NA”).","code":"\nmy_vector <- c(1, 4, 56, NA, 5, NA, 22)\nis.na(my_vector)## [1] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n!is.na(my_vector)## [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\nsum(na.omit(my_vector))## [1] 88\nmean(my_vector)## [1] NA\nmean(my_vector, na.rm = TRUE)## [1] 17.6"},{"path":"missing-data.html","id":"assess-a-dataframe","chapter":"10 Missing data","heading":"10.3 Assess a dataframe","text":"","code":""},{"path":"missing-data.html","id":"missingness-over-time","chapter":"10 Missing data","heading":"10.4 Missingness over time","text":"Change percent weekly observations missing X column.plot proportion missing line, week","code":"\noutcome_missing <- linelist %>%\n  mutate(week = lubridate::floor_date(date_onset, \"week\")) %>% \n  group_by(week) %>% \n  summarize(n_obs = n(),\n            outcome_missing = sum(is.na(outcome) | outcome == \"\"), # include \"\" because this is character\n            outcome_p_miss = outcome_missing / n_obs) %>%\n  reshape2::melt(id.vars = c(\"week\")) %>%\n  filter(grepl(\"_p_\", variable))\nggplot(data = outcome_missing)+\n    geom_line(aes(x = week, y = value, group = variable, color = variable), size = 2, stat = \"identity\")+\n    labs(title = \"Weekly missingness in 'Outcome'\",\n         x = \"Week\",\n         y = \"Proportion missing\") + \n    scale_color_discrete(name = \"\", labels = c(\"Weekly proportion of missing outcomes\"))+\n    scale_y_continuous(breaks = c(seq(0,1,0.1)))+\n  theme_minimal()+\n  theme(\n    legend.position = \"bottom\"\n  )## Warning: Removed 1 row(s) containing missing values (geom_path)."},{"path":"missing-data.html","id":"na-in-plots","chapter":"10 Missing data","heading":"10.5 NA in plots","text":"","code":""},{"path":"missing-data.html","id":"imputation","chapter":"10 Missing data","heading":"10.6 Imputation","text":"","code":""},{"path":"missing-data.html","id":"resources-2","chapter":"10 Missing data","heading":"10.7 Resources","text":"","code":""},{"path":"groupingaggregating-data.html","id":"groupingaggregating-data","chapter":"11 Grouping/aggregating data","heading":"11 Grouping/aggregating data","text":"page reviews group aggregate data descriptive analysis. makes use tidyverse packages common easy--use functions.","code":""},{"path":"groupingaggregating-data.html","id":"overview-7","chapter":"11 Grouping/aggregating data","heading":"11.1 Overview","text":"descriptive analyses, almost always necessary first group data summarize across groups (whether time period, place, relevant categorical variable) since often summary statistics across groups meaningful. Luckily, tidyverse makes really easy group_by function.page perform grouping operationsFast & easy using group_by() command dplyr orBase R aggregate() command.drop=F group_by() command","code":""},{"path":"groupingaggregating-data.html","id":"preparation-3","chapter":"11 Grouping/aggregating data","heading":"11.2 Preparation","text":"tab use linelist dataset cleaned Cleaning tab.Load packagesEnsure tidyverse installed, includes dplyr group_byLoad data","code":"\npacman::p_load(rio,       # to import data\n               here,      # to locate files\n               tidyverse  # to clean, handle, and plot the data (includes dplyr!)\n)\nlinelist <- rio::import(here(\"data\", \"linelist_cleaned.xlsx\"))"},{"path":"groupingaggregating-data.html","id":"group_by","chapter":"11 Grouping/aggregating data","heading":"11.3 group_by()","text":"can perform different operations first grouping one variable, say, outcome. provides instruction calculations performed within context grouped columns. can group 1 columns.First, let’s convert outcome factor make resulting plots easier work .walk examples group_by functionalities:tally() gives simple count rows across category.see 2 633 deaths, 2 026 recoveries, 1 348 outcome recorded.can easily produce summary tables range different descirptive statistics. summarise() group_by allows carefully specify summary statistic operation performed. find average age across outcome group.Remember use na.rm = TRUE exclude NA values calculation mean age.see average age roughly stable across outcomes, recovering slightly lower 14.7 years.can also group 1 variable. can either specify variables, use group_by_at group_by_if use specified criteria choose grouping parameteres.instance, can find number cases, gender month onset…also take initial records group, instance, can handy used conjunction sorting. can sort date_of_onset find first case hospitalYou can perform summary function grouped data; see Cheat Sheet info:\r\nhttps://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf","code":"\nlinelist <- linelist %>%\n  mutate(outcome = as.factor(outcome))\ncount_by_outcome <- linelist %>%\n  group_by(outcome) %>%\n  tally()\navg_age_by_outcome <- linelist %>%\n  group_by(outcome) %>%\n  summarise(avg_age = mean(age, na.rm=TRUE ))\ncount_gender_by_month_of_onset <- linelist %>%\n  mutate(month_of_onset = format(date_onset,\"%B\")) %>%\n  group_by(month_of_onset, gender) %>%\n  tally()\nfirst_record_per_hosp <- linelist %>%\n  arrange(date_onset) %>%\n  group_by(hospital) %>%\n  slice(1)"},{"path":"groupingaggregating-data.html","id":"mutate-with-grouped-data","chapter":"11 Grouping/aggregating data","heading":"11.4 mutate with grouped data","text":"retain columns just add new variable average age, can use mutate instead summarize. perhaps useful additional descriptive statistics wanted variables still intact.","code":"\navg_age_by_outcome_2 <- linelist %>%\n  group_by(outcome) %>%\n  mutate(avg_age = mean(age, na.rm=TRUE ))"},{"path":"groupingaggregating-data.html","id":"aggregate","chapter":"11 Grouping/aggregating data","heading":"11.5 aggregate()","text":"","code":""},{"path":"groupingaggregating-data.html","id":"resources-3","chapter":"11 Grouping/aggregating data","heading":"11.6 Resources","text":"useful resources information:\r\nhttps://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf\r\nhttps://datacarpentry.org/R-genomics/04-dplyr.html\r\nhttps://dplyr.tidyverse.org/reference/group_by.html\r\nhttps://itsalocke.com/files/DataManipulationinR.pdf","code":""},{"path":"joining-matching-datasets.html","id":"joining-matching-datasets","chapter":"12 Joining & matching datasets","heading":"12 Joining & matching datasets","text":"","code":""},{"path":"joining-matching-datasets.html","id":"overview-8","chapter":"12 Joining & matching datasets","heading":"12.1 Overview","text":"page describes common “joins” also probabilistic matching dataframes.","code":""},{"path":"joining-matching-datasets.html","id":"preparation-4","chapter":"12 Joining & matching datasets","heading":"12.2 Preparation","text":"traditional joins (non-probabilistic) can specific, requiring exact string matches, may need cleaning datasets prior join (e.g. change spellings, change case lower upper).","code":""},{"path":"joining-matching-datasets.html","id":"datasets","chapter":"12 Joining & matching datasets","heading":"12.2.1 Datasets","text":"joining examples, ’ll use following datasets:“miniature” version linelist, containing columns case_id, date_onset, hospital, first 10 rowsA separate dataframe named hosp_info, contains details hospital“miniature” linelistBelow miniature linelist used demonstration purposes:Hospital Information dataframeBelow separate dataframe additional information hospital.","code":"\nlinelist_mini <- linelist %>%                 # start with original linelist\n  select(case_id, date_onset, hospital) %>%   # select columns\n  head(10)                                    # keep only the first 10 rows"},{"path":"joining-matching-datasets.html","id":"pre-cleaning","chapter":"12 Joining & matching datasets","heading":"12.2.2 Pre-cleaning","text":"traditional (non-probabilistic) joins case-sensitive require exact string matches, clean-hosp_info dataset prior joins.Identify differencesWe need values hosp_name column hosp_info dataframe match values hospital column linelist dataframe.values linelist_mini:values hosp_info:Align matching valuesWe begin cleaning values hosp_name. use logic code values new column using case_when() (LINK). correct hospital names exist dataframes, leave others (see TRUE ~ hosp_name).CAUTION: Typically, one create new column (e.g. hosp_name_clean), ease demonstration show modification old columnWe now see hospital names appear dataframe aligned. hospitals hosp_info present linelist - deal later, join.need convert values UPPER lower case, use functions stringr, shown page characters/strings (LINK).str_to_upper()str_to_upper()str_to_title()","code":"\nunique(linelist_mini$hospital)## [1] \"Central Hospital\"                     \"Port Hospital\"                        \"Other\"                               \r\n## [4] \"Missing\"                              \"St. Mark's Maternity Hospital (SMMH)\" \"Military Hospital\"\nunique(hosp_info$hosp_name)## [1] \"central hospital\" \"military\"         \"port\"             \"St. Mark's\"       \"ignace\"           \"sisters\"\nhosp_info <- hosp_info %>% \n  mutate(\n    hosp_name = case_when(\n      hosp_name == \"military\"          ~ \"Military Hospital\",\n      hosp_name == \"port\"              ~ \"Port Hospital\",\n      hosp_name == \"St. Mark's\"        ~ \"St. Mark's Maternity Hospital (SMMH)\",\n      hosp_name == \"central hospital\"  ~ \"Central Hospital\",\n      TRUE                             ~ hosp_name\n      )\n    )\nunique(hosp_info$hosp_name)## [1] \"Central Hospital\"                     \"Military Hospital\"                    \"Port Hospital\"                       \r\n## [4] \"St. Mark's Maternity Hospital (SMMH)\" \"ignace\"                               \"sisters\""},{"path":"joining-matching-datasets.html","id":"joins","chapter":"12 Joining & matching datasets","heading":"12.3 Joins","text":"dplyr offers several different joins. described, simple use cases. Many thanks https://github.com/gadenbuie moving images!","code":""},{"path":"joining-matching-datasets.html","id":"general-syntax","chapter":"12 Joining & matching datasets","heading":"12.3.1 General syntax","text":"General function structureAny join commands can run independently, like .object created, re-defined: dataframe 2 joined dataframe 1, basis matches “ID” column df1 “identifier” column df2. example uses left_join(), rows df2 match df1 dropped.join commands can also run within pipe chain. first dataframe df1 known dataframe passed pipes. example shown , context additional non-important mutate() filter() commands join.Join columns (=)must specify columns dataset values must match, using arguemnt =. options:Specify one column name (= \"ID\") - works exact column name present dataframes!Specify different names (= c(\"ID\" = \"Identifier\") - use column names different 2 dataframesSpecify multiple columns match (= c(\"ID\" = \"Identifier\", \"date_onset\" = \"Date_of_Onset\")) - require exact matches multiple columns rows join.CAUTION: Joins case-specific! Therefore useful convert values lowercase uppercase prior joining. See page characters/strings.","code":"\nobject <- left_join(df1, df2, by = c(\"ID\" = \"identifier\"))\nobject <- df1 %>%\n  filter(var1 == 2) %>%        # for demonstration only\n  mutate(lag = day + 7) %>%    # for demonstration only\n  left_join(df1, by = c(\"ID\" = \"identifier\"))  # join df2 to df1"},{"path":"joining-matching-datasets.html","id":"left-right-joins","chapter":"12 Joining & matching datasets","heading":"12.3.2 Left & right joins","text":"left right join commonly used add information dataframe - new information added rows already exist baseline dataframe.common joins epidemiological work - used add information one dataset another.order dataframes important.left join, first (left) dataframe listed baselineIn right join, second (right) dataframe listed baselineAll rows baseline dataframe kept. Information secondary dataframe joined baseline dataframe match via identifier column(s). addition:\r\n* Rows secondary dataframe match dropped.\r\n* many baseline rows match one row secondary dataframe (many--one), baseline information added matching baseline row.\r\n* baseline row matches multiple rows secondary dataframe (one--many), combinations given, meaning new rows may added returned dataframe!ExampleBelow output left_join() hosp_info (secondary dataframe) linelist_mini (baseline dataframe). Note following:original rows baseline dataframe linelist_mini keptOne original row linelist_mini duplicated (“Military Hospital”) matched two rows secondary dataframe, combinations returnedThe join identifier column secondary dataset (hosp_name) disappeared redundant identifier column primary dataset (hospital)baseline row match secondary row (e.g. hospital “” “Missing”), NA fills columns secondary dataframeRows secondary dataframe match baseline dataframe (“sisters” “ignace”) dropped“use right join, left join?”\r\nimportant ask “dataframe retain rows?” - use one baseline.two commands achieve output - 10 rows hosp_info joined linelist_mini baseline. However, column order differ based whether hosp_info arrives right (left join) arrives left (right join). order rows may also shift consequently.Also consider whether use-case within pipe chain (%>%). dataset pipes baseline, likely use left join add data .","code":"\nlinelist_mini %>% \n  left_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n# The two commands below achieve the same data, but with differently ordered rows and columns\nleft_join(linelist_mini, hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nright_join(hosp_info, linelist_mini, by = c(\"hosp_name\" = \"hospital\"))"},{"path":"joining-matching-datasets.html","id":"full-join","chapter":"12 Joining & matching datasets","heading":"12.3.3 Full join","text":"full join inclusive joins - returns rows dataframes.rows present one (match found), dataframe become wider NA values added fill-. Watch number columns rows carefully troubleshoot case-sensitivity exact string matches.Adjustment “baseline” (first) dataframe impact records returned, impact column order, row order, identifier column retained.ExampleBelow output full_join() hosp_info linelist_mini. Note following:baseline rows (linelist_mini) keptOne baseline row duplicated (“Military Hospital”) matched two secondary rows combinations returnedOnly identifier column baseline kept (hospital)NA fills baseline rows match secondary rows (hospital “” “Missing”), opposite (hosp_name “ignace” “sisters”)","code":"\nlinelist_mini %>% \n  full_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))"},{"path":"joining-matching-datasets.html","id":"inner-join","chapter":"12 Joining & matching datasets","heading":"12.3.4 Inner join","text":"inner join restrictive joins - returns rows matches across dataframes.\r\nmeans original dataset may reduce number rows. Adjustment “baseline” (first) dataframe impact records returned, impact column order, row order, identifier column retained.ExampleBelow output inner_join() linelist_mini (baseline) hosp_info (secondary). Note following:baseline rows kept (rows hospital “Missing” “” removed match secondary dataframeLikewise, secondary rows hosp_name “sisters” “ignace” removed match baseline dataframeOnly identifier column baseline kept (hospital)","code":"\nlinelist_mini %>% \n  inner_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nhosp_info %>% \n  inner_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))"},{"path":"joining-matching-datasets.html","id":"anti-join","chapter":"12 Joining & matching datasets","heading":"12.3.5 Anti join","text":"anti join returns rows dataframe 1 match dataframe 2.Common scenarios anti-join include identifying records present another dataframe, troubleshooting spelling join (catching records matched), examining records excluded another join.right_join() left_join(), baseline dataframe (listed first) important. returned rows . Notice gif row non-baseline dataframe (purple 4) returned even though match.Simple exampleFor example, let’s find hosp_info hospitals cases present linelist_mini. list hosp_info first, baseline dataframe. two hospitals present linelist_mini returned.Example 2For another example, let us say ran inner_join() linelist_mini hosp_info. returns 8 original 11 linelist_mini records.review 3 linelist_mini records excluded inner join, can run anti-join linelist_mini baseline dataframe.see hosp_info records excluded inner join, also run anti-join hosp_info baseline dataframe.","code":"\nhosp_info %>% \n  anti_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))\nlinelist_mini %>% \n  inner_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nlinelist_mini %>% \n  anti_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))"},{"path":"joining-matching-datasets.html","id":"probabalistic-matching","chapter":"12 Joining & matching datasets","heading":"12.4 Probabalistic matching","text":"rowmatcher\r\noptions (finlay?)","code":""},{"path":"joining-matching-datasets.html","id":"option-2-sub-tab-2","chapter":"12 Joining & matching datasets","heading":"12.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"joining-matching-datasets.html","id":"resources-4","chapter":"12 Joining & matching datasets","heading":"12.5 Resources","text":"dplyr page joins","code":""},{"path":"charactersstrings.html","id":"charactersstrings","chapter":"13 Characters/strings","heading":"13 Characters/strings","text":"","code":""},{"path":"charactersstrings.html","id":"overview-9","chapter":"13 Characters/strings","heading":"13.1 Overview","text":"tab demonstrates use stringr package evaluate manage character (strings).Evaluate subset/extract - str_length(), str_sub(), word()Combine, order, arrange - str_c(), str_glue(), str_order()Modify replace - str_sub(), str_replace_all()Adjust length - str_pad(), str_trunc(), str_wrap()Change case - str_to_upper(), str_to_title(), str_to_lower(), str_to_sentence()Search patterns - str_detect(), str_subset(), str_match()ease display examples shown acting short defined character vector, however can easily applied/adapted column within dataset.Much page adapted online vignette","code":""},{"path":"charactersstrings.html","id":"preparation-5","chapter":"13 Characters/strings","heading":"13.2 Preparation","text":"Install load stringr package.reference sheet stringr functions can found ","code":"\n# install or load the stringr package\npacman::p_load(stringr,   # many functions for handling strings\n               tidyverse,  # for optional data manipulation\n               tools      # alternative for converting to title case\n               )"},{"path":"charactersstrings.html","id":"evaluate-and-subset","chapter":"13 Characters/strings","heading":"13.3 Evaluate and subset","text":"Evaluate length stringAlternatively, use nchar() base RSubset/extract string positionUse str_sub() return part string. function takes three main arguments:character vector(s)start positionend positionA notes position numbers:position number positive, position counted starting left end string.position number negative, counted starting right end string.Position numbers inclusive.Positions extending beyond string truncated (removed).examples applied string “pneumonia”:Subset string word positionTo extract nth ‘word’, use word(), also stringr. Provide string(s), first word position extract, last word position extract.default, separator ‘words’ assumed space, unless otherwise indicated sep = (e.g. sep = \"_\" words separated underscores.","code":"\nstr_length(\"abc\")## [1] 3\n# third from left\nstr_sub(\"pneumonia\", 3, 3)## [1] \"e\"\n# 0 is not present\nstr_sub(\"pneumonia\", 0, 0)## [1] \"\"\n# 6th from right, to the first from right\nstr_sub(\"pneumonia\", 6, -1)## [1] \"onia\"\n# fifth from right, to the first from right\nstr_sub(\"pneumonia\", -5, -1)## [1] \"monia\"\n# positions outside the string\nstr_sub(\"pneumonia\", 4, 15)## [1] \"umonia\"\n# strings to evaluate\nchief_complaints <- c(\"I just got out of the hospital 2 days ago, but still can barely breathe.\",\n                      \"My stomach hurts\",\n                      \"Severe ear pain\")\n\n# extract 1st-3rd words of each string\nword(chief_complaints, start = 1, end = 3, sep = \" \")## [1] \"I just got\"       \"My stomach hurts\" \"Severe ear pain\""},{"path":"charactersstrings.html","id":"combine-order-and-arrange","chapter":"13 Characters/strings","heading":"13.4 Combine, order, and arrange","text":"section covers using str_c(), str_glue(), str_order(), combine, arrange, paste together strings.","code":""},{"path":"charactersstrings.html","id":"combine-strings","chapter":"13 Characters/strings","heading":"13.4.1 Combine strings","text":"common see base R functions paste() paste0(), concatenate vectors converting parts character. act similarly str_c() syntax differs - parts (either text code/pre-defined objects) separated commas, example: paste(\"Regional hospital needs\", n_beds, \"beds \", n_masks, \"masks.\"). sep collapse arguments can adjusted. default sep space, unless using paste0() space parts.combine multiple strings one string, can use str_c(), stringr version c() (concatenate).argument sep = inserts characters input vectors (e.g. comma newline \"\\n\")argument collapse = relevant producing multiple elements. example shows combination first last names. sep value goes first last name, collapse value goes people.","code":"\nstr_c(\"String1\", \"String2\", \"String3\")## [1] \"String1String2String3\"\nstr_c(\"String1\", \"String2\", \"String3\", sep = \", \")## [1] \"String1, String2, String3\"\nfirst_names <- c(\"abdul\", \"fahruk\", \"janice\") \nlast_names  <- c(\"hussein\", \"akinleye\", \"musa\")\n\n# sep is between the respective strings, while collapse is between the elements produced\nstr_c(first_names, last_names, sep = \" \", collapse = \";  \")## [1] \"abdul hussein;  fahruk akinleye;  janice musa\"\n# For newlines to print correctly, the phrase may need to be wrapped in cat()\ncat(str_c(first_names, last_names, sep = \" \", collapse = \";\\n\"))## abdul hussein;\r\n## fahruk akinleye;\r\n## janice musa"},{"path":"charactersstrings.html","id":"glueing-strings-and-other-values","chapter":"13 Characters/strings","heading":"13.4.2 Glueing strings and other values","text":"str_glue()can also combine strings pre-defined values characters str_glue(). useful function creating dynamic plot captions, demonstrated .content goes quotation marks (\"\").dynamic code calls pre-defined objects must within curly brackets {}. can many curly brackets.Within outer quotation marks, use single quotes necessary (e.g. providing date format)can provide newlines (\\n), use format() display dates, use Sys.Date() display current date.using %>% pipe operator, ensure tidyverse package loaded.simple example:alternative format use placeholders within brackets define code separate arguments end str_glue() function, . can improve code readability codes long.Sometimes, useful pull data dataframe pasted together sequence. example using dataset make summary output jurisdictions new total cases:Use str_c() dataframe column names (example first & last names). Provide sep collapse arguments.add text “New Cases:” beginning summary using wrapping separate str_c(). “New Cases” added within original str_c(), appear multiple times.can achieve similar result str_glue(), newlines added automatically:use str_glue() control (e.g. use double newlines), wrap within str_c() adjust collapse value. may need print using cat() correctly print newlines.","code":"\nstr_glue(\"The linelist is current to {format(Sys.Date(), '%d %b %Y')} and includes {nrow(linelist)} cases.\")## The linelist is current to 31 Jan 2021 and includes 5889 cases.\nstr_glue(\"Data source is the confirmed case linelist as of {current_date}.\\nThe last case was reported hospitalized on {last_hospital}.\\n{n_missing_onset} cases are missing date of onset and not shown\",\n         current_date = format(Sys.Date(), '%d %b %Y'),\n         last_hospital = format(as.Date(max(linelist$date_hospitalisation, na.rm=T)), '%d %b %Y'),\n         n_missing_onset = nrow(linelist %>% filter(is.na(date_onset)))\n         )## Data source is the confirmed case linelist as of 31 Jan 2021.\r\n## The last case was reported hospitalized on 30 Apr 2015.\r\n## 248 cases are missing date of onset and not shown\nDT::datatable(case_table, rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T) )\nstr_c(case_table$zone, case_table$new_cases, sep = \" = \", collapse = \";  \")## [1] \"Zone 1 = 3;  Zone 2 = 0;  Zone 3 = 7;  Zone 4 = 0;  Zone 5 = 15\"\nstr_c(\"New Cases: \", str_c(case_table$zone, case_table$new_cases, sep = \" = \", collapse = \";  \"))## [1] \"New Cases: Zone 1 = 3;  Zone 2 = 0;  Zone 3 = 7;  Zone 4 = 0;  Zone 5 = 15\"\nstr_glue(\"{case_table$zone}: {case_table$new_cases} new cases ({case_table$total_cases} total cases)\")## Zone 1: 3 new cases (40 total cases)\r\n## Zone 2: 0 new cases (4 total cases)\r\n## Zone 3: 7 new cases (25 total cases)\r\n## Zone 4: 0 new cases (10 total cases)\r\n## Zone 5: 15 new cases (103 total cases)\ncase_summary <- str_c(str_glue(\"{case_table$zone}: {case_table$new_cases} new cases ({case_table$total_cases} total cases)\"), collapse = \"\\n\\n\")\n\ncat(case_summary) # print## Zone 1: 3 new cases (40 total cases)\r\n## \r\n## Zone 2: 0 new cases (4 total cases)\r\n## \r\n## Zone 3: 7 new cases (25 total cases)\r\n## \r\n## Zone 4: 0 new cases (10 total cases)\r\n## \r\n## Zone 5: 15 new cases (103 total cases)"},{"path":"charactersstrings.html","id":"sorting","chapter":"13 Characters/strings","heading":"13.4.3 Sorting","text":"Several strings can sorted alphabetical order. str_order() returns order, str_sort() returns strings order.use different alphabet, add argument locale =. See full list locales entering stringi::stri_locale_list() R console.","code":"\n# strings\nhealth_zones <- c(\"Alba\", \"Takota\", \"Delta\")\n\n# return the alphabetical order\nstr_order(health_zones)## [1] 1 3 2\n# return the strings in alphabetical order\nstr_sort(health_zones)## [1] \"Alba\"   \"Delta\"  \"Takota\""},{"path":"charactersstrings.html","id":"base-r-functions","chapter":"13 Characters/strings","heading":"13.4.4 base R functions","text":"common see base R functions paste() paste0(), concatenate vectors converting parts character. act similarly str_c() syntax differs - parts (either text code/pre-defined objects) separated commas, example: paste(\"Regional hospital needs\", n_beds, \"beds \", n_masks, \"masks.\"). sep collapse arguments can adjusted. default sep space, unless using paste0() space parts.","code":""},{"path":"charactersstrings.html","id":"modify-and-replace","chapter":"13 Characters/strings","heading":"13.5 Modify and replace","text":"Replace specific character positionsstr_sub() paired assignment operator (<-) can used modify part string:example applied multiple strings (e.g. column). Note expansion length “HIV”.Replace patternsUse str_replace_all() “find replace” tool. First, provide strings evaluated, pattern replaced, replacement value. example replaces instances “dead” “deceased”. Note, case sensitive.replace pattern NA, use str_replace_na(). function str_replace() replaces first instance pattern within evaluated string.","code":"\nword <- \"pneumonia\"\n\n# convert the third and fourth characters to X \nstr_sub(word, 3, 4) <- \"XX\"\n\nword## [1] \"pnXXmonia\"\nwords <- c(\"pneumonia\", \"tubercolosis\", \"HIV\")\n\n# convert the third and fourth characters to X \nstr_sub(words, 3, 4) <- \"XX\"\n\nwords## [1] \"pnXXmonia\"    \"tuXXrcolosis\" \"HIXX\"\noutcome <- c(\"Karl: dead\",\n            \"Samantha: dead\",\n            \"Marco: not dead\")\n\nstr_replace_all(outcome, \"dead\", \"deceased\")## [1] \"Karl: deceased\"      \"Samantha: deceased\"  \"Marco: not deceased\""},{"path":"charactersstrings.html","id":"adjust-length","chapter":"13 Characters/strings","heading":"13.6 Adjust length","text":"Increase minimum length (pad)Use str_pad() add characters string, minimum length.default spaces added, can also pad characters using pad = argument.example, pad numbers leading zeros (hours minutes), can pad number minimum length 2 pad = \"0\".Truncate/shortenstr_trunc() sets maximum length string. string exceeds length, truncated (shortened) ellipsis (…) included indicate string previously longer. Note ellipsis counted length. ellipsis characters can changed argument ellipsis =. optional side = argument specifies ellipsis appear within truncated string (“left”, “right”, “center”).ensure value lengthUse str_trunc() set maximum length, use str_pad() expand short strings truncated length. example , 6 set maximum length (one value truncated), short value padded achieve length 6.Remove leading/trailing whitespaceUse str_trim() remove spaces, newlines (\\n) tabs (\\t) sides string input.\r\nAdd \"right\" \"left\", \"\" command specify side trim (e.g. str_trim(x, \"right\").Remove repeated whitespace within stringsUse str_squish() remove repeated spaces appear inside string. example, convert double spaces single spaces. also removes spaces, newlines, tabs outside string like str_trim().Enter ?str_trim, ?str_pad R console see details.Wrap lines paragraphsUse str_wrap() wrap long unstructured text structured paragraph fixed line length. Provide ideal character length line, applies algorithm insert newlines (\\n) within paragraph, seen example .base function cat() can wrapped around command order print output, displaying new lines added.","code":"\n# ICD codes of differing length\nICD_codes <- c(\"R10.13\",\n               \"R10.819\",\n               \"R17\")\n\n# ICD codes padded to 7 characters on the right side\nstr_pad(ICD_codes, 7, \"right\")## [1] \"R10.13 \" \"R10.819\" \"R17    \"\n# Pad with periods instead of spaces\nstr_pad(ICD_codes, 7, \"right\", pad = \".\")## [1] \"R10.13.\" \"R10.819\" \"R17....\"\n# Add leading zeros to two digits (e.g. for times minutes/hours)\nstr_pad(\"4\", 2, pad = \"0\") ## [1] \"04\"\n# example using a numeric column named \"hours\"\n# hours <- str_pad(hours, 2, pad = \"0\")\noriginal <- \"Symptom onset on 4/3/2020 with vomiting\"\nstr_trunc(original, 10, \"center\")## [1] \"Symp...ing\"\n# ICD codes of differing length\nICD_codes   <- c(\"R10.13\",\n                 \"R10.819\",\n                 \"R17\")\n\n# truncate to maximum length of 6\nICD_codes_2 <- str_trunc(ICD_codes, 6)\nICD_codes_2## [1] \"R10.13\" \"R10...\" \"R17\"\n# expand to minimum length of 6\nICD_codes_3 <- str_pad(ICD_codes_2, 6, \"right\")\nICD_codes_3## [1] \"R10.13\" \"R10...\" \"R17   \"\n# ID numbers with excess spaces on right\nIDs <- c(\"provA_1852  \", # two excess spaces\n         \"provA_2345\",   # zero excess spaces\n         \"provA_9460 \")  # one excess space\n\n# IDs trimmed to remove excess spaces on right side only\nstr_trim(IDs)## [1] \"provA_1852\" \"provA_2345\" \"provA_9460\"\n# original contains excess spaces within string\nstr_squish(\"  Pt requires   IV saline\\n\") ## [1] \"Pt requires IV saline\"\npt_course <- \"Symptom onset 1/4/2020 vomiting chills fever. Pt saw traditional healer in home village on 2/4/2020. On 5/4/2020 pt symptoms worsened and was admitted to Lumta clinic. Sample was taken and pt was transported to regional hospital on 6/4/2020. Pt died at regional hospital on 7/4/2020.\"\n\nstr_wrap(pt_course, 40)## [1] \"Symptom onset 1/4/2020 vomiting chills\\nfever. Pt saw traditional healer in\\nhome village on 2/4/2020. On 5/4/2020\\npt symptoms worsened and was admitted\\nto Lumta clinic. Sample was taken and pt\\nwas transported to regional hospital on\\n6/4/2020. Pt died at regional hospital\\non 7/4/2020.\"\ncat(str_wrap(pt_course, 40))## Symptom onset 1/4/2020 vomiting chills\r\n## fever. Pt saw traditional healer in\r\n## home village on 2/4/2020. On 5/4/2020\r\n## pt symptoms worsened and was admitted\r\n## to Lumta clinic. Sample was taken and pt\r\n## was transported to regional hospital on\r\n## 6/4/2020. Pt died at regional hospital\r\n## on 7/4/2020."},{"path":"charactersstrings.html","id":"change-case","chapter":"13 Characters/strings","heading":"13.7 Change case","text":"Often one must alter case/capitalization string value, example names jursidictions. Use str_to_upper(), str_to_upper(), str_to_title(), shown :Using *base** R, can also achieved toupper(), tolower().Title case\r\nTransforming string word capitalized can achieved str_to_title():Use toTitleCase() tools package achieve nuanced capitalization (words like “”, “”, “” capitalized).can also use str_to_sentence(), capitalizes first letter string.","code":"\nstr_to_upper(\"California\")## [1] \"CALIFORNIA\"\nstr_to_lower(\"California\")## [1] \"california\"\nstr_to_title(\"go to the US state of california \")## [1] \"Go To The Us State Of California \"\ntools::toTitleCase(\"This is the US state of california\")## [1] \"This is the US State of California\"\nstr_to_sentence(\"the patient must be transported\")## [1] \"The patient must be transported\""},{"path":"charactersstrings.html","id":"patterns","chapter":"13 Characters/strings","heading":"13.8 Patterns","text":"Many stringr functions work detect, locate, extract, match, replace, split based specified pattern.","code":""},{"path":"charactersstrings.html","id":"detect-presenceabsence-of-a-pattern","chapter":"13 Characters/strings","heading":"13.8.1 Detect presence/absence of a pattern","text":"Use str_detect() . Note default search case sensitive!argument negate = can included set TRUE want know pattern present.ignore case/capitalization, wrap pattern within regex() within regex() add argument ignore_case = T.str_detect() applied character vector/column, return TRUE/FALSE values vector.need count , apply sum() output. counts number TRUE.search inclusive multiple terms, include separated bars (|) within pattern, shown :need make long list search terms, can combine using str_c() sep = |, define character object, reference later succinctly. example includes possible occupation search terms frontline medical providers.command returns number occupations contain one search terms front-line medical providers (occupation_med_frontline):Base R string search functionsThe base function grepl() works similarly str_detect(), searches matches pattern returns logical vector. basic syntax grepl(pattern, strings_to_search, ignore.case = FALSE, ...). One advantage ignore.case argument easier write (need involve regex() function).Likewise, base functions sub() gsub() act similarly str_replace(). basic syntax : gsub(pattern, replacement, strings_to_search, ignore.case = FALSE). sub() replace first instance pattern, whereas gsub() replace instances pattern.","code":"\nstr_detect(\"primary school teacher\", \"teach\")## [1] TRUE\nstr_detect(\"primary school teacher\", \"teach\", negate = TRUE)## [1] FALSE\nstr_detect(\"Teacher\", regex(\"teach\", ignore_case = T))## [1] TRUE\n# a vector/column of occupations \noccupations <- c(\"field laborer\",\n                 \"university professor\",\n                 \"primary school teacher & tutor\",\n                 \"tutor\",\n                 \"nurse at regional hospital\",\n                 \"lineworker at Amberdeen Fish Factory\",\n                 \"physican\",\n                 \"cardiologist\",\n                 \"office worker\",\n                 \"food service\")\n\n# Detect presence of pattern \"teach\" in each string - output is vector of TRUE/FALSE\nstr_detect(occupations, \"teach\")##  [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nsum(str_detect(occupations, \"teach\"))## [1] 1\nsum(str_detect(occupations, \"teach|professor|tutor\"))## [1] 3\n# search terms\noccupation_med_frontline <- str_c(\"medical\", \"medicine\", \"hcw\", \"healthcare\", \"home care\", \"home health\",\n                                \"surgeon\", \"doctor\", \"doc\", \"physician\", \"surgery\", \"peds\", \"pediatrician\",\n                               \"intensivist\", \"cardiologist\", \"coroner\", \"nurse\", \"nursing\", \"rn\", \"lpn\",\n                               \"cna\", \"pa\", \"physician assistant\", \"mental health\",\n                               \"emergency department technician\", \"resp therapist\", \"respiratory\",\n                                \"phlebotomist\", \"pharmacy\", \"pharmacist\", \"hospital\", \"snf\", \"rehabilitation\",\n                               \"rehab\", \"activity\", \"elderly\", \"subacute\", \"sub acute\",\n                                \"clinic\", \"post acute\", \"therapist\", \"extended care\",\n                                \"dental\", \"dential\", \"dentist\", sep = \"|\")\n\noccupation_med_frontline## [1] \"medical|medicine|hcw|healthcare|home care|home health|surgeon|doctor|doc|physician|surgery|peds|pediatrician|intensivist|cardiologist|coroner|nurse|nursing|rn|lpn|cna|pa|physician assistant|mental health|emergency department technician|resp therapist|respiratory|phlebotomist|pharmacy|pharmacist|hospital|snf|rehabilitation|rehab|activity|elderly|subacute|sub acute|clinic|post acute|therapist|extended care|dental|dential|dentist\"\nsum(str_detect(occupations, occupation_med_frontline))## [1] 2"},{"path":"charactersstrings.html","id":"detects-patterns-in-conditional-logic","chapter":"13 Characters/strings","heading":"13.8.2 Detects patterns in conditional logic","text":"Within case_when()str_detect() often used within case_when() (dplyr). Let’s say occupations column linelist called occupations. mutate() creates new column called is_educator using conditional logic via case_when(). See page data cleaning learn case_when().reminder, may important add exclusion criteria conditional logic (negate = F):","code":"\ndf <- df %>% \n  mutate(is_educator = case_when(\n    # term search within occupation, not case sensitive\n    str_detect(occupations,\n               regex(\"teach|prof|tutor|university\",\n                     ignore_case = TRUE))              ~ \"Educator\",\n    # all others\n    TRUE                                               ~ \"Not an educator\"))df <- df %>% \r\n  # value in new column is_educator is based on conditional logic\r\n  mutate(is_educator = case_when(\r\n    \r\n    # occupation column must meet 2 criteria to be assigned \"Educator\":\r\n    # it must have a search term AND NOT any exclusion term\r\n    \r\n    # Must have a search term AND\r\n    str_detect(occupations,\r\n               regex(\"teach|prof|tutor|university\", ignore_case = T)) &              \r\n    # Must NOT have an exclusion term\r\n    str_detect(occupations,\r\n               regex(\"admin\", ignore_case = T),\r\n               negate = T)                          ~ \"Educator\"\r\n    \r\n    # All rows not meeting above criteria\r\n    TRUE                                            ~ \"Not an educator\"))"},{"path":"charactersstrings.html","id":"locate-pattern-position","chapter":"13 Characters/strings","heading":"13.8.3 Locate pattern position","text":"locate first position pattern, use str_locate(). outputs start end position.Like str functions, \"_all\" version (str_locate_all()) return positions instances pattern within string. outputs list.","code":"\nstr_locate(\"I wish\", \"sh\")##      start end\r\n## [1,]     5   6\nphrases <- c(\"I wish\", \"I hope\", \"he hopes\", \"He hopes\")\n\nstr_locate(phrases, \"h\" )     # position of *first* instance of the pattern##      start end\r\n## [1,]     6   6\r\n## [2,]     3   3\r\n## [3,]     1   1\r\n## [4,]     4   4\nstr_locate_all(phrases, \"h\" ) # position of *every* instance of the pattern## [[1]]\r\n##      start end\r\n## [1,]     6   6\r\n## \r\n## [[2]]\r\n##      start end\r\n## [1,]     3   3\r\n## \r\n## [[3]]\r\n##      start end\r\n## [1,]     1   1\r\n## [2,]     4   4\r\n## \r\n## [[4]]\r\n##      start end\r\n## [1,]     4   4"},{"path":"charactersstrings.html","id":"extract-a-match","chapter":"13 Characters/strings","heading":"13.8.4 Extract a match","text":"str_extract_all() returns matching patterns , useful offered several patterns via “” conditions. example, looking string vector occupations (see previous tab) either “teach”, “prof”, “tutor”.str_extract_all() returns list contains matches evaluated string. See occupation 3 two pattern matches within .str_extract() extracts first match evaluated string, producing character vector one element evaluated string. returns NA match. NAs can removed wrapping returned vector na.exclude(). Note second occupation 3’s matches shown.","code":"\nstr_extract_all(occupations, \"teach|prof|tutor\")## [[1]]\r\n## character(0)\r\n## \r\n## [[2]]\r\n## [1] \"prof\"\r\n## \r\n## [[3]]\r\n## [1] \"teach\" \"tutor\"\r\n## \r\n## [[4]]\r\n## [1] \"tutor\"\r\n## \r\n## [[5]]\r\n## character(0)\r\n## \r\n## [[6]]\r\n## character(0)\r\n## \r\n## [[7]]\r\n## character(0)\r\n## \r\n## [[8]]\r\n## character(0)\r\n## \r\n## [[9]]\r\n## character(0)\r\n## \r\n## [[10]]\r\n## character(0)\nstr_extract(occupations, \"teach|prof|tutor\")##  [1] NA      \"prof\"  \"teach\" \"tutor\" NA      NA      NA      NA      NA      NA"},{"path":"charactersstrings.html","id":"subset-and-count","chapter":"13 Characters/strings","heading":"13.8.5 Subset and Count","text":"Subset, CountAligned functions include str_subset() str_count().str_subset() returns actual values contained pattern:`str_count() returns vector numbers: number times search term appears evaluated value.","code":"\nstr_subset(occupations, \"teach|prof|tutor\")## [1] \"university professor\"           \"primary school teacher & tutor\" \"tutor\"\nstr_count(occupations, regex(\"teach|prof|tutor\", ignore_case = TRUE))##  [1] 0 1 2 1 0 0 0 0 0 0"},{"path":"charactersstrings.html","id":"splitting","chapter":"13 Characters/strings","heading":"13.8.6 Splitting","text":"split string based pattern, use str_split(). evaluates strings returns list character vectors consisting newly-split values.simple example evaluates one string, produces list one element - character vector three values:can assign named object, access nth symptom:multiple strings evaluated, one element returned list.access specific symptom can use syntax like : the_split_return_object[[2]][1], access first symptom second evaluated string (“chills”). See R basics page detail accessing elements.return “character matrix” instead, may useful creating dataframe columns, set argument simplify = TRUE shown :can also adjust number splits create n = argument. example, restricts number splits (left side) 2 splits. commas remain within second split.Note - outputs can achieved str_split_fixed(), * give simplify argument, must instead designate number columns (n).*Splitting column within dataframeWithin dataframe, split one character column columns use use separate() dplyr.simple dataframe df consisting case ID column, one character column symptoms, one outcome column:First provide column separated, provide vector (c()) new columns names argument =, shown . argument sep = can character, number (interpreted character position split ).Optional arguments include remove = (FALSE default, removes input column) convert = (FALSE default, cause string “NA”s become NA).extra = control happens many values created separation new columns named. Setting extra equal \"warn\" means R return warning proceed drop values (default). \"drop\" means values dropped warning.Setting extra = \"merge\" split number new columns listed - setting preserve data.CAUTION: provide enough values new columns, data may truncated.One solution automatically make many columns needed :unite()Within dataframe, bringing together multiple columns (opposite separate()) can achieved unite() tidyr.Provide name new united column. provide names columns wish unite. default separator used united column \"_\", can changed sep argument. optional arguments include remove = (TRUE default, removes input columns data frame), na.rm = (FALSE default, removes missing values uniting)., re-unite dataframe separated .","code":"\nstr_split(\"jaundice, fever, chills\", \",\", simplify = T)##      [,1]       [,2]     [,3]     \r\n## [1,] \"jaundice\" \" fever\" \" chills\"\npt1_symptoms <- str_split(\"jaundice, fever, chills\", \",\", simplify = T)\n\npt1_symptoms[2]## [1] \" fever\"\nsymptoms <- c(\"jaundice, fever, chills\",     # patient 1\n              \"chills, aches, pains\",        # patient 2 \n              \"fever\",                       # patient 3\n              \"vomiting, diarrhoea\",         # patient 4\n              \"bleeding from gums, fever\",   # patient 5\n              \"rapid pulse, headache\")       # patient 6\n\nstr_split(symptoms, \",\")                     # split each patient's symptoms## [[1]]\r\n## [1] \"jaundice\" \" fever\"   \" chills\" \r\n## \r\n## [[2]]\r\n## [1] \"chills\" \" aches\" \" pains\"\r\n## \r\n## [[3]]\r\n## [1] \"fever\"\r\n## \r\n## [[4]]\r\n## [1] \"vomiting\"   \" diarrhoea\"\r\n## \r\n## [[5]]\r\n## [1] \"bleeding from gums\" \" fever\"            \r\n## \r\n## [[6]]\r\n## [1] \"rapid pulse\" \" headache\"\nstr_split(symptoms, \",\", simplify = T)##      [,1]                 [,2]         [,3]     \r\n## [1,] \"jaundice\"           \" fever\"     \" chills\"\r\n## [2,] \"chills\"             \" aches\"     \" pains\" \r\n## [3,] \"fever\"              \"\"           \"\"       \r\n## [4,] \"vomiting\"           \" diarrhoea\" \"\"       \r\n## [5,] \"bleeding from gums\" \" fever\"     \"\"       \r\n## [6,] \"rapid pulse\"        \" headache\"  \"\"\nstr_split(symptoms, \",\", simplify = T, n = 2)##      [,1]                 [,2]            \r\n## [1,] \"jaundice\"           \" fever, chills\"\r\n## [2,] \"chills\"             \" aches, pains\" \r\n## [3,] \"fever\"              \"\"              \r\n## [4,] \"vomiting\"           \" diarrhoea\"    \r\n## [5,] \"bleeding from gums\" \" fever\"        \r\n## [6,] \"rapid pulse\"        \" headache\"\nstr_split_fixed(symptoms, \",\", n = 2)\n# third symptoms combined into second new column\ndf %>% \n  separate(symptoms, into = c(\"sym_1\", \"sym_2\"), sep=\",\", extra = \"merge\")## Warning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [3].##   case_ID              sym_1          sym_2 outcome\r\n## 1       1           jaundice  fever, chills Success\r\n## 2       2             chills   aches, pains Failure\r\n## 3       3              fever           <NA> Failure\r\n## 4       4           vomiting      diarrhoea Success\r\n## 5       5 bleeding from gums          fever Success\r\n## 6       6        rapid pulse       headache Success\n# third symptoms are lost\ndf %>% \n  separate(symptoms, into = c(\"sym_1\", \"sym_2\", \"sym_3\"), sep=\",\")## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 4 rows [3, 4, 5, 6].##   case_ID              sym_1      sym_2   sym_3 outcome\r\n## 1       1           jaundice      fever  chills Success\r\n## 2       2             chills      aches   pains Failure\r\n## 3       3              fever       <NA>    <NA> Failure\r\n## 4       4           vomiting  diarrhoea    <NA> Success\r\n## 5       5 bleeding from gums      fever    <NA> Success\r\n## 6       6        rapid pulse   headache    <NA> Success\n# third symptoms given their own column\nseparated <- df %>% \n  separate(symptoms, into = c(\"sym_1\", \"sym_2\", \"sym_3\"), sep=\",\")## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 4 rows [3, 4, 5, 6].\nseparated##   case_ID              sym_1      sym_2   sym_3 outcome\r\n## 1       1           jaundice      fever  chills Success\r\n## 2       2             chills      aches   pains Failure\r\n## 3       3              fever       <NA>    <NA> Failure\r\n## 4       4           vomiting  diarrhoea    <NA> Success\r\n## 5       5 bleeding from gums      fever    <NA> Success\r\n## 6       6        rapid pulse   headache    <NA> Success\nseparated %>% \n  unite(\n    col = \"all_symptoms\",         # name of the new united column\n    c(\"sym_1\", \"sym_2\", \"sym_3\"), # columns to unite\n    sep = \", \",                   # separator to use in united column\n    remove = TRUE,                # if TRUE, removes input cols from the data frame\n    na.rm = TRUE                  # if TRUE, missing values are removed before uniting\n  )##   case_ID               all_symptoms outcome\r\n## 1       1  jaundice,  fever,  chills Success\r\n## 2       2     chills,  aches,  pains Failure\r\n## 3       3                      fever Failure\r\n## 4       4       vomiting,  diarrhoea Success\r\n## 5       5 bleeding from gums,  fever Success\r\n## 6       6     rapid pulse,  headache Success"},{"path":"charactersstrings.html","id":"regex-groups","chapter":"13 Characters/strings","heading":"13.8.7 Regex groups","text":"Groups within stringsstr_match() TBD","code":""},{"path":"charactersstrings.html","id":"regex-and-special-characters","chapter":"13 Characters/strings","heading":"13.9 Regex and special characters","text":"Regular expressions, “regex”, concise language describing patterns strings.Much tab adapted tutorial cheatsheet","code":""},{"path":"charactersstrings.html","id":"special-characters","chapter":"13 Characters/strings","heading":"13.9.1 Special characters","text":"Backslash \\ escapeThe backslash \\ used “escape” meaning next character. way, backslash can used quote mark display within quote marks (\\\") - middle quote mark “break” surrounding quote marks.Note - thus, want display backslash, must escape ’s meaning *another backslash. must write two backslashes \\\\ display one.Special charactersRun ?\"'\" R Console display complete list special characters (appear RStudio Help pane).","code":""},{"path":"charactersstrings.html","id":"regular-expressions-regex","chapter":"13 Characters/strings","heading":"13.9.2 Regular expressions (regex)","text":"familiar , regular expression can look like alien language:regular expression applied extract specific patterns unstructured text - example medical notes, chief complaint, matient history, free text columns dataset.four basic tools one can use create basic regular expression:Character setsMeta charactersQuantifiersGroupsCharacter setsCharacter sets, way expressing listing options character match, within brackets. match triggered characters within brackets found string. example, look vowels one use character set: “[aeiou]”. common character sets :Character sets can combined within one bracket (spaces!), \"[-Za-z]\" (upper lowercase letter), another example \"[t-z0-5]\" (lowercase t z number 0 5).Meta charactersMeta characters shorthand character sets. important ones listed :QuantifiersTypically want search match one character. Quantifiers allow designate length letters/numbers allow match.Quantifiers numbers written within curly brackets { } character quantifying, example,\"{2}\" return instances two capital letters.\"{2,4}\" return instances two four capital letters (put spaces!).\"{2,}\" return instances two capital letters.\"+\" return instances one capital letters (group extended different character encountered).Precede * asterisk return zero matches (useful sure pattern present)Using + plus symbol quantifier, match occur different character encountered. example, expression return words (alpha characters: \"[-Za-z]+\"quantifier {2} used, pairs consecutive ’s returned. Two pairs identified within AAAA.quantifier {2,4} used, groups consecutive ’s two four length returned.quantifier +, groups one returned:Relative positionThese express requirements precedes follows pattern. example, extract sentences, “two numbers followed period” (\"\"). (?<=\\.)\\s(?=[-Z])GroupsCapturing groups regular expression way organized output upon extraction.Regex examplesBelow free text examples. try extract useful information using regular expression search term.expression matches words (character hitting non-character space):expression \"[0-9]{1,2}\" matches consecutive numbers 1 2 digits length. also written \"\\\\d{1,2}\", \"[:digit:]{1,2}\".expression extract sentences (assuming first letter capitalized, sentence ends period). pattern reads English : \"capital letter followed lowercase letters, space, letters, space,can view useful list regex expressions tips page 2 cheatsheetAlso see tutorial.","code":"\n# test string for quantifiers\ntest <- \"A-AA-AAA-AAAA\"\nstr_extract_all(test, \"A{2}\")## [[1]]\r\n## [1] \"AA\" \"AA\" \"AA\" \"AA\"\nstr_extract_all(test, \"A{2,4}\")## [[1]]\r\n## [1] \"AA\"   \"AAA\"  \"AAAA\"\nstr_extract_all(test, \"A+\")## [[1]]\r\n## [1] \"A\"    \"AA\"   \"AAA\"  \"AAAA\"\nstr_extract_all(test, \"\")## [[1]]\r\n##  [1] \"A\" \"-\" \"A\" \"A\" \"-\" \"A\" \"A\" \"A\" \"-\" \"A\" \"A\" \"A\" \"A\"\npt_note <- \"Patient arrived at Broward Hospital emergency ward at 18:00 on 6/12/2005. Patient presented with radiating abdominal pain from LR quadrant. Patient skin was pale, cool, and clammy. Patient temperature was 99.8 degrees farinheit. Patient pulse rate was 100 bpm and thready. Respiratory rate was 29 per minute.\"\nstr_extract_all(pt_note, \"[A-Za-z]+\")## [[1]]\r\n##  [1] \"Patient\"     \"arrived\"     \"at\"          \"Broward\"     \"Hospital\"    \"emergency\"   \"ward\"        \"at\"          \"on\"         \r\n## [10] \"Patient\"     \"presented\"   \"with\"        \"radiating\"   \"abdominal\"   \"pain\"        \"from\"        \"LR\"          \"quadrant\"   \r\n## [19] \"Patient\"     \"skin\"        \"was\"         \"pale\"        \"cool\"        \"and\"         \"clammy\"      \"Patient\"     \"temperature\"\r\n## [28] \"was\"         \"degrees\"     \"farinheit\"   \"Patient\"     \"pulse\"       \"rate\"        \"was\"         \"bpm\"         \"and\"        \r\n## [37] \"thready\"     \"Respiratory\" \"rate\"        \"was\"         \"per\"         \"minute\"\nstr_extract_all(pt_note, \"[0-9]{1,2}\")## [[1]]\r\n##  [1] \"18\" \"00\" \"6\"  \"12\" \"20\" \"05\" \"99\" \"8\"  \"10\" \"0\"  \"29\"\nstr_split(pt_note, \".\")## [[1]]\r\n##   [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n##  [44] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n##  [87] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n## [130] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n## [173] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n## [216] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n## [259] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\r\n## [302] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nstr_extract_all(pt_note, \"[A-Z][a-z]+\\\\s\\\\w+\\\\s\\\\d{1,2}\\\\s\\\\w+\\\\s*\\\\w*\")## [[1]]\r\n## character(0)"},{"path":"charactersstrings.html","id":"resources-5","chapter":"13 Characters/strings","heading":"13.10 Resources","text":"reference sheet stringr functions can found hereA vignette stringr can found ","code":""},{"path":"de-duplication.html","id":"de-duplication","chapter":"14 De-duplication","heading":"14 De-duplication","text":"","code":""},{"path":"de-duplication.html","id":"overview-10","chapter":"14 De-duplication","heading":"14.1 Overview","text":"page covers following subjects:Identifying removing duplicate rows“Slicing” keeping certain rows (min, max, random…), also group“Rolling-”, combining values multiple rows one","code":""},{"path":"de-duplication.html","id":"preparation-6","chapter":"14 De-duplication","heading":"14.2 Preparation","text":"Load packagesExample datasetFor demonstration, use fake dataset . record COVID-19 phone encounters, including contacts cases.first two records 100% complete duplicates including duplicate recordID (computer glitch)second two rows duplicates, columns except recordIDSeveral people multiple phone encounters, various dates/times contacts casesAt encounter, person asked ever symptoms, information missing.","code":"\npacman::p_load(tidyverse,   # deduplication, grouping, and slicing functions\n               janitor,     # function for reviewing duplicates\n               stringr      # for string searches, can be used in \"rolling-up\" values\n               )     "},{"path":"de-duplication.html","id":"deduplication-1","chapter":"14 De-duplication","heading":"14.3 Deduplication","text":"tab uses dataset Preparation tab describe review remove duplicate rows dataframe. also show handle duplicate elements vector.","code":""},{"path":"de-duplication.html","id":"examine-duplicate-rows","chapter":"14 De-duplication","heading":"14.3.1 Examine duplicate rows","text":"quickly review rows duplicates, can use get_dupes() janitor package. default, columns considered duplicates evaluated - rows returned 100% duplicates considering values columns.obs dataframe, first two rows 100% duplicates - value every column (including recordID column, supposed unique - must computer glitch). returned dataframe automatically includes new column dupe_count, showing number rows combination duplicate values.However, choose ignore recordID, 3rd 4th rows rows also duplicates. , values columns except recordID. can specify specific columns ignored function using - minus symbol.can also positively specify columns consider. , rows values name purpose columns returned. Notice “amrish” now dupe_count equal 3 reflect three “contact” encounters.*Scroll left rows**See ?get_dupes details, see online reference","code":"\n# 100% duplicates across all columns\nobs %>% \n  janitor::get_dupes()\n# Duplicates when column recordID is not considered\nobs %>% \n  janitor::get_dupes(-recordID)         # if multiple columns, wrap them in c()\n# duplicates based on name and purpose columns ONLY\nobs %>% \n  janitor::get_dupes(name, purpose)"},{"path":"de-duplication.html","id":"keep-only-unique-rows","chapter":"14 De-duplication","heading":"14.3.2 Keep only unique rows","text":"keep unique rows dataframe, use distinct() dplyr. Rows duplicates removed first rows kept. default, “first” means highest rownumber (order rows top--bottom). unique rows kept. example , one duplicate row (first row, “adam”) removed (n now 18, 19 rows).Scroll left see entire dataframeCAUTION: using distinct() grouped data, function apply group.Deduplicate based specific columnsYou can also specify columns basis de-duplication. way, de-duplication applies rows duplicates within specified columns. Unless specified .keep_all = TRUE, columns mentioned dropped.example , de-duplication applies rows identical values name purpose columns. Thus, “brian” 2 rows instead 3 - first “contact” encounter “case” encounter. adjust brian’s latest encounter purpose kept, see tab Slicing within groups.Scroll left see entire dataframe","code":"\n# added to a chain of pipes (e.g. data cleaning)\nobs %>% \n  distinct(across(-recordID), # reduces dataframe to only unique rows (keeps first one of any duplicates)\n           .keep_all = TRUE) \n\n# if outside pipes, include the data as first argument \n# distinct(obs)\n# added to a chain of pipes (e.g. data cleaning)\nobs %>% \n  distinct(name, purpose, .keep_all = TRUE) %>%  # keep rows unique by name and purpose, retain all columns\n  arrange(name)                                  # arrange for easier viewing"},{"path":"de-duplication.html","id":"duplicate-elements-in-a-vector","chapter":"14 De-duplication","heading":"14.3.3 Duplicate elements in a vector","text":"function duplicated() base R evaluate vector (column) return logical vector length (TRUE/FALSE). first time value appears, return FALSE (duplicate), subsequent times value appears return TRUE. Note NA treated value.return duplicated elements, can use brackets subset original vector:return unique elements, use unique() base R. remove NAs output, nest na.omit() within unique().","code":"\nx <- c(1, 1, 2, NA, NA, 4, 5, 4, 4, 1, 2)\nduplicated(x)##  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\nx[duplicated(x)]## [1]  1 NA  4  4  1  2\nunique(x)           # alternatively, use x[!duplicated(x)]## [1]  1  2 NA  4  5\nunique(na.omit(x))  # remove NAs ## [1] 1 2 4 5"},{"path":"de-duplication.html","id":"with-base-r","chapter":"14 De-duplication","heading":"14.3.4 with base R","text":"return duplicate rowsIn base R, can also see rows 100% duplicates dataframe df command duplicated(df) (returns logical vector rows).Thus, can also use base subset [ ] dataframe see duplicated rows df[duplicated(df),] (don’t forget comma, meaning want see columns!).return unique rowsSee notes . see unique rows add logical negator ! front duplicated() function:df[!duplicated(df),]return rows duplicates certain columnsSubset df within duplicated() parentheses, function operate certain columns df.specify columns, provide column numbers names comma (remember, within duplicated() function).sure keep comma , outside duplicated() function well!example, evaluate columns 2 5 duplicates: df[!duplicated(df[, 2:5]),]\r\nevaluate columns name purpose duplicates: df[!duplicated(df[, c(\"name\", \"purpose)]),]","code":""},{"path":"de-duplication.html","id":"slicing","chapter":"14 De-duplication","heading":"14.4 Slicing","text":"“slice” dataframe useful de-duplication multiple rows per functional group (e.g. per “person”) want analyze one . Think slicing filter rows, row number/position.basic slice() function accepts number n. positive, nth row returned. negative, rows except nth returned.Variations include:slice_min() slice_max() - keep row minimium maximum value specified column. Also worked ordered factors.slice_head() slice_tail - keep first last rowslice_sample() - keep random sample rowsUse arguments n = prop = specify number proportion rows keep. using function pipe chain, provide data argument first (e.g. slice(df, n = 2)). See ?slice information.arguments:.order_by = - used slice_min() slice_max() column order slicing.with_ties = - TRUE default, meaning ties kept..preserve = - FALSE default. TRUE grouping structure re-calculated slicing.weight_by = - Optional, numeric column weight (bigger number likely get sampled). Also replace = whether sampling done /without replacement.TIP: using slice_max() slice_min(), sure specify/write n = (e.g. n = 2, just 2). Otherwise may get error Error:…empty. NOTE: may encounter function top_n(), superseded slice functions., basic slice() function used keep 4th row:","code":"\nobs %>% \n  slice(4)  # keeps the 4th row only"},{"path":"de-duplication.html","id":"slice-with-groups","chapter":"14 De-duplication","heading":"14.4.1 Slice with groups","text":"slice_*() functions can useful applied grouped dataframe, slice operation performed group separately. Use function group_by() conjunction slice() group data take slice group.\r\nhelpful de-duplication multiple rows per person want keep one . first use group_by() key columns , use slice function column differ among grouped rows.example , keep latest encounter per person, group rows name use slice_max() n = 1 date column. aware! apply function like slice_max() dates, date column must class Date.default, “ties” (e.g. date scenario) kept, still get multiple rows people (e.g. adam). avoid set with_ties = FALSE. get back one row per person.CAUTION: using arrange(), specify .by_group = TRUE data arranged within group.DANGER: with_ties = FALSE, first row tie kept. may deceptive. See Mariah, two encounters latest date (6 Jan) first (earliest) one kept. Likely, want keep later encounter day. See “break” ties next example. Breaking “ties”Multiple slice statements can run “break ties”. case, person multiple encounters latest date, encounter latest time kept (lubridate::hm() used convert character times sortable time class).\r\nNote now, one row kept “Mariah” 6 Jan encounter 3 08:32, encounter 2 07:25.example , also possible slice encounter number, showed slice date time example purposes.TIP: use slice_max() slice_min() “character” column, mutate ordered factor class!","code":"\nobs %>% \n  group_by(name) %>%       # group the rows by 'name'\n  slice_max(date,          # keep row per group with maximum date value \n            n = 1,         # keep only the single highest row \n            with_ties = F) # if there's a tie (of date), take the first row\n# Example of multiple slice statements to \"break ties\"\nobs %>%\n  group_by(name) %>%\n  \n  # FIRST - slice by latest date\n  slice_max(date, n = 1, with_ties = TRUE) %>% \n  \n  # SECOND - if there is a tie, select row with latest time; ties prohibited\n  slice_max(lubridate::hm(time), n = 1, with_ties = FALSE)"},{"path":"de-duplication.html","id":"keep-all-but-mark-them","chapter":"14 De-duplication","heading":"14.4.2 Keep all but mark them","text":"want keep records mark analysis, consider two-step approach utilizing unique recordID/encounter number:Reduce/slice orginal dataframe rows analysis. Save/retain reduced dataframe.original dataframe, mark rows appropriate case_when(), based whether record unique identifier (recordID example) present reduced dataframe.","code":"\n# 1. Define dataframe of rows to keep for analysis\nobs_keep <- obs %>%\n  group_by(name) %>%\n  slice_max(encounter, n = 1, with_ties = FALSE) # keep only latest encounter per person\n\n\n# 2. Mark original dataframe\nobs_marked <- obs %>%\n\n  # make new dup_record column\n  mutate(dup_record = case_when(\n    \n    # if record is in obs_keep dataframe\n    recordID %in% obs_keep$recordID ~ \"For analysis\", \n    \n    # all else marked as \"Ignore\" for analysis purposes\n    TRUE                            ~ \"Ignore\"))\n\n# print\nobs_marked"},{"path":"de-duplication.html","id":"calculate-row-completeness","chapter":"14 De-duplication","heading":"14.4.3 Calculate row completeness","text":"Create column contains metric row’s completeness (non-missingness). helpful deciding rows prioritize others de-duplicating/slicing.example, “key” columns want measure completeness saved vector column names.new column key_completeness created mutate(). new value row defined calculated fraction: number non-missing values row among key columns, divided number key columns.involves function rowSums() base R. Also used ., within piping refers dataframe point pipe (case, subset brackets []).*Scroll right see rows**","code":"\n# create a \"key variable completeness\" column\n# this is a *proportion* of the columns designated as \"key_vars\" that have non-missing values\n\nkey_cols = c(\"personID\", \"name\", \"symptoms_ever\")\n\nobs %>% \n  mutate(key_completeness = rowSums(!is.na(.[,key_cols]))/length(key_cols)) "},{"path":"de-duplication.html","id":"roll-up-values","chapter":"14 De-duplication","heading":"14.5 Roll-up values","text":"tab describes:“roll-” values multiple rows just one row, variationsOnce “rolled-” values, overwrite/prioritize values cellThis tab uses example dataset Preparation tab.","code":""},{"path":"de-duplication.html","id":"roll-up-values-into-one-row","chapter":"14 De-duplication","heading":"14.5.1 Roll-up values into one row","text":"code example uses group_by() summarise() group rows person, paste together unique values within grouped rows. Thus, get one summary row per person. notes:suffix appended new columns (\"_roll\" example)want show unique values per cell, wrap na.omit() unique()na.omit() removes NA values, desired can removed paste0(.x)…Scroll left see rowsThe result one row per group (ID), entries arranged date pasted together.variation shows unique values :variation appends suffix column.\r\ncase \"_roll\" signify rolled:","code":"\n# \"Roll-up\" values into one row per group (per \"personID\") \ncases_rolled <- obs %>% \n  \n  # create groups by name\n  group_by(personID) %>% \n  \n  # order the rows within each group (e.g. by date)\n  arrange(date, .by_group = TRUE) %>% \n  \n  # For each column, paste together all values within the grouped rows, separated by \";\"\n  summarise(\n    across(everything(),                           # apply to all columns\n           ~paste0(na.omit(.x), collapse = \"; \"))) # function is defined which combines non-NA values\n# Variation - show unique values only \ncases_rolled <- obs %>% \n  group_by(personID) %>% \n  arrange(date, .by_group = TRUE) %>% \n  summarise(\n    across(everything(),                                   # apply to all columns\n           ~paste0(unique(na.omit(.x)), collapse = \"; \"))) # function is defined which combines unique non-NA values\n# Variation - suffix added to column names \ncases_rolled <- obs %>% \n  group_by(personID) %>% \n  arrange(date, .by_group = TRUE) %>% \n  summarise(\n    across(everything(),                \n           list(roll = ~paste0(na.omit(.x), collapse = \"; \")))) # _roll is appended to column names"},{"path":"de-duplication.html","id":"overwrite-valueshierarchy","chapter":"14 De-duplication","heading":"14.5.2 Overwrite values/hierarchy","text":"want evaluate rolled values, keep specific value (e.g. “best” “maximum” value), can use mutate() across desired columns, implement case_when(), uses str_detect() stringr package sequentially look string patterns overwrite cell content.Now can see column symptoms_ever person EVER said “Yes” symptoms, “Yes” displayed.","code":"\n# CLEAN CASES\n#############\ncases_clean <- cases_rolled %>% \n    \n    # clean Yes-No-Unknown vars: replace text with \"highest\" value present in the string\n    mutate(across(c(contains(\"symptoms_ever\")),                     # operates on specified columns (Y/N/U)\n             list(mod = ~case_when(                                 # adds suffix \"_mod\" to new cols; implements case_when()\n               \n               str_detect(.x, \"Yes\")       ~ \"Yes\",                 # if \"Yes\" is detected, then cell value converts to yes\n               str_detect(.x, \"No\")        ~ \"No\",                  # then, if \"No\" is detected, then cell value converts to no\n               str_detect(.x, \"Unknown\")   ~ \"Unknown\",             # then, if \"Unknown\" is detected, then cell value converts to Unknown\n               TRUE                        ~ as.character(.x)))),   # then, if anything else if it kept as is\n      .keep = \"unused\")                                             # old columns removed, leaving only _mod columns"},{"path":"de-duplication.html","id":"resources-6","chapter":"14 De-duplication","heading":"14.6 Resources","text":"Much information page adapted resources vignettes online:datanoviadplyr tidyverse referencecran janitor vignette","code":""},{"path":"ifelse-for-loops.html","id":"ifelse-for-loops","chapter":"15 if/else & ‘for’ loops","heading":"15 if/else & ‘for’ loops","text":"","code":""},{"path":"ifelse-for-loops.html","id":"overview-11","chapter":"15 if/else & ‘for’ loops","heading":"15.1 Overview","text":"","code":""},{"path":"ifelse-for-loops.html","id":"preparation-7","chapter":"15 if/else & ‘for’ loops","heading":"15.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"ifelse-for-loops.html","id":"if-else","chapter":"15 if/else & ‘for’ loops","heading":"15.3 if-else","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"ifelse-for-loops.html","id":"for-loops","chapter":"15 if/else & ‘for’ loops","heading":"15.4 ‘for’ loops","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"ifelse-for-loops.html","id":"tracking-progress","chapter":"15 if/else & ‘for’ loops","heading":"15.4.1 Tracking progress","text":"","code":"for (row_origin in 1:nrow(ct_metrics)){\r\n  # print progress\r\n  if(row_origin %% 100==0){\r\n    print(row_origin)\r\n  }\r\n  "},{"path":"ifelse-for-loops.html","id":"resources-7","chapter":"15 if/else & ‘for’ loops","heading":"15.5 Resources","text":"","code":""},{"path":"apply-functions.html","id":"apply-functions","chapter":"16 apply functions","heading":"16 apply functions","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"apply-functions.html","id":"overview-12","chapter":"16 apply functions","heading":"16.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"apply-functions.html","id":"preparation-8","chapter":"16 apply functions","heading":"16.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"apply-functions.html","id":"sub-tab-1-2","chapter":"16 apply functions","heading":"16.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"apply-functions.html","id":"sub-tab-2-2","chapter":"16 apply functions","heading":"16.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"apply-functions.html","id":"option-1-2","chapter":"16 apply functions","heading":"16.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"apply-functions.html","id":"option-1-sub-tab-2","chapter":"16 apply functions","heading":"16.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"apply-functions.html","id":"option-2-2","chapter":"16 apply functions","heading":"16.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"apply-functions.html","id":"option-2-sub-tab-3","chapter":"16 apply functions","heading":"16.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"apply-functions.html","id":"resources-8","chapter":"16 apply functions","heading":"16.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"cat-analysis.html","id":"cat-analysis","chapter":"17 Analysis","heading":"17 Analysis","text":"pages data analysis!","code":""},{"path":"descriptive-analysis.html","id":"descriptive-analysis","chapter":"18 Descriptive analysis","heading":"18 Descriptive analysis","text":"","code":""},{"path":"descriptive-analysis.html","id":"overview-13","chapter":"18 Descriptive analysis","heading":"18.1 Overview","text":"tab demonstrates use gtsummary dplyr produce descriptive statistics.Browse data: get quick overview dataset using skimr packageBrowse data: get quick overview dataset using skimr packageSummary statistics: mean, median, range, standard deviations, percentilesSummary statistics: mean, median, range, standard deviations, percentilesFrequency / cross-tabs: counts proportionsFrequency / cross-tabs: counts proportionsStatistical tests: t-tests, wilcoxon rank sum, kruskal-wallis chi-squaresStatistical tests: t-tests, wilcoxon rank sum, kruskal-wallis chi-squaresCorrelationsCorrelations","code":""},{"path":"descriptive-analysis.html","id":"preparation-9","chapter":"18 Descriptive analysis","heading":"18.2 Preparation","text":"Preparation","code":""},{"path":"descriptive-analysis.html","id":"packages-3","chapter":"18 Descriptive analysis","heading":"18.2.1 Packages","text":"code chunk shows loading packages required analyses.","code":"\npacman::p_load(rio,          # File import\n               here,         # File locator\n               skimr,        # get overview of data\n               tidyverse,    # data management + ggplot2 graphics, \n               gtsummary,    # summary statistics and tests \n               corrr         # correlation analayis for numeric variables\n               )"},{"path":"descriptive-analysis.html","id":"load-data-1","chapter":"18 Descriptive analysis","heading":"18.2.2 Load data","text":"example dataset used section:Linelist individual cases simulated epidemicThe dataset imported using import() function rio package. See page importing data various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"descriptive-analysis.html","id":"clean-data","chapter":"18 Descriptive analysis","heading":"18.2.3 Clean data","text":"","code":"\n## make sure that age variable is numeric \nlinelist <- linelist %>% \n  mutate(age = as.numeric(age))"},{"path":"descriptive-analysis.html","id":"browse-data","chapter":"18 Descriptive analysis","heading":"18.3 Browse data","text":"Browse data","code":""},{"path":"descriptive-analysis.html","id":"base-r-1","chapter":"18 Descriptive analysis","heading":"18.3.1 Base R","text":"can use summary function get information variables data sets.numeric variable give minimum, median, mean max well 1st quartile (= 25th percentile) 3rd quartile (= 75th percentile)can also get overview variable whole dataset.","code":"\n## get information about a numeric variable \nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##    0.00    6.00   13.00   15.09   22.00   67.00      88\n## get information about each variable in a dataset \nsummary(linelist)##    case_id            generation    date_infection         date_onset         date_hospitalisation  date_outcome       \r\n##  Length:5889        Min.   : 0.00   Min.   :2012-09-16   Min.   :2014-04-07   Min.   :2012-09-20   Min.   :2012-10-23  \r\n##  Class :character   1st Qu.:13.00   1st Qu.:2014-09-06   1st Qu.:2014-09-16   1st Qu.:2014-09-19   1st Qu.:2014-09-26  \r\n##  Mode  :character   Median :16.00   Median :2014-10-11   Median :2014-10-23   Median :2014-10-23   Median :2014-11-01  \r\n##                     Mean   :16.56   Mean   :2014-10-22   Mean   :2014-11-02   Mean   :2014-11-03   Mean   :2014-11-12  \r\n##                     3rd Qu.:20.00   3rd Qu.:2014-12-05   3rd Qu.:2014-12-19   3rd Qu.:2014-12-17   3rd Qu.:2014-12-28  \r\n##                     Max.   :37.00   Max.   :2015-04-27   Max.   :2015-04-30   Max.   :2015-04-30   Max.   :2015-06-04  \r\n##                                     NA's   :2087         NA's   :248                               NA's   :936         \r\n##    outcome             gender               age          age_unit           age_years        age_cat        age_cat5   \r\n##  Length:5889        Length:5889        Min.   : 0.00   Length:5889        Min.   : 0.00   5-9    :1148   5-9    :1148  \r\n##  Class :character   Class :character   1st Qu.: 6.00   Class :character   1st Qu.: 6.00   20-29  :1091   0-4    :1081  \r\n##  Mode  :character   Mode  :character   Median :13.00   Mode  :character   Median :13.00   0-4    :1081   10-14  : 971  \r\n##                                        Mean   :15.09                      Mean   :15.04   10-14  : 971   15-19  : 837  \r\n##                                        3rd Qu.:22.00                      3rd Qu.:22.00   15-19  : 837   20-24  : 600  \r\n##                                        Max.   :67.00                      Max.   :67.00   (Other): 673   (Other):1164  \r\n##                                        NA's   :88                         NA's   :88      NA's   :  88   NA's   :  88  \r\n##    hospital              lon              lat          infector            source              wt_kg            ht_cm        \r\n##  Length:5889        Min.   :-13.27   Min.   :8.446   Length:5889        Length:5889        Min.   :-15.97   Min.   :  6.783  \r\n##  Class :character   1st Qu.:-13.25   1st Qu.:8.461   Class :character   Class :character   1st Qu.: 41.30   1st Qu.: 90.673  \r\n##  Mode  :character   Median :-13.23   Median :8.469   Mode  :character   Mode  :character   Median : 54.37   Median :127.664  \r\n##                     Mean   :-13.23   Mean   :8.470                                         Mean   : 52.75   Mean   :123.980  \r\n##                     3rd Qu.:-13.22   3rd Qu.:8.480                                         3rd Qu.: 65.73   3rd Qu.:156.981  \r\n##                     Max.   :-13.21   Max.   :8.492                                         Max.   :109.51   Max.   :282.197  \r\n##                                                                                                                              \r\n##     ct_blood        fever              chills             cough              aches              vomit                temp      \r\n##  Min.   :16.00   Length:5889        Length:5889        Length:5889        Length:5889        Length:5889        Min.   :35.28  \r\n##  1st Qu.:20.00   Class :character   Class :character   Class :character   Class :character   Class :character   1st Qu.:38.17  \r\n##  Median :22.00   Mode  :character   Mode  :character   Mode  :character   Mode  :character   Mode  :character   Median :38.83  \r\n##  Mean   :21.19                                                                                                  Mean   :38.56  \r\n##  3rd Qu.:22.00                                                                                                  3rd Qu.:39.24  \r\n##  Max.   :25.00                                                                                                  Max.   :40.76  \r\n##                                                                                                                 NA's   :137    \r\n##  time_admission     days_onset_hosp\r\n##  Length:5889        Min.   : 0.00  \r\n##  Class :character   1st Qu.: 1.00  \r\n##  Mode  :character   Median : 1.00  \r\n##                     Mean   : 2.06  \r\n##                     3rd Qu.: 3.00  \r\n##                     Max.   :22.00  \r\n##                     NA's   :248"},{"path":"descriptive-analysis.html","id":"skimr-package","chapter":"18 Descriptive analysis","heading":"18.3.2 skimr package","text":"Using skimr package can get detailed overview variables dataset.(#tab:descriptive_browse_skimr)Data summaryVariable type: characterVariable type: DateVariable type: factorVariable type: numeric","code":"\n## get information about each variable in a dataset \nskim(linelist)"},{"path":"descriptive-analysis.html","id":"summarystats","chapter":"18 Descriptive analysis","heading":"18.4 Summary Statistics","text":"","code":""},{"path":"descriptive-analysis.html","id":"gtsummary-package","chapter":"18 Descriptive analysis","heading":"18.4.1 gtsummary package","text":"Using gtsummary can create table different summary statistics, example mean, median, range, standard deviation percentiles. can also show one table.","code":""},{"path":"descriptive-analysis.html","id":"mean","chapter":"18 Descriptive analysis","heading":"18.4.1.1 Mean","text":"Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column.\r\n          1\r\n          \r\n           \r\n          Mean\r\n          ","code":"\nlinelist %>% \n  ## only keep variable of interest\n  select(age) %>% \n  ## create summary table with mean\n  tbl_summary(statistic = age ~ \"{mean}\")## Warning: The `.dots` argument of `group_by()` is deprecated as of dplyr 1.0.0.\r\n## This warning is displayed once every 8 hours.\r\n## Call `lifecycle::last_warnings()` to see where this warning was generated."},{"path":"descriptive-analysis.html","id":"median","chapter":"18 Descriptive analysis","heading":"18.4.1.2 Median","text":"Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).\r\n          1\r\n          \r\n           \r\n          Median\r\n          ","code":"\nlinelist %>% \n  ## only keep variable of interest\n  select(age) %>% \n  ## create summary table with median\n  tbl_summary(statistic = age ~ \"{median}\")"},{"path":"descriptive-analysis.html","id":"range","chapter":"18 Descriptive analysis","heading":"18.4.1.3 Range","text":"range minimum maximum values variable. (see percentiles interquartile range) Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).\r\n          1\r\n          \r\n           \r\n          Range\r\n          ","code":"\nlinelist %>% \n  ## only keep variable of interest\n  select(age) %>% \n  ## create summary table with range \n  tbl_summary(statistic = age ~ \"{min}, {max}\")"},{"path":"descriptive-analysis.html","id":"standard-deviation","chapter":"18 Descriptive analysis","heading":"18.4.1.4 Standard deviation","text":"Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).\r\n          1\r\n          \r\n           \r\n          SD\r\n          ","code":"\nlinelist %>% \n  ## only keep variable of interest\n  select(age) %>% \n  ## create summary table with standard deviation\n  tbl_summary(statistic = age ~ \"{sd}\")"},{"path":"descriptive-analysis.html","id":"percentile","chapter":"18 Descriptive analysis","heading":"18.4.1.5 Percentile","text":"return percentiles can type one value like, can type multiple (e.g. return interquartile range).Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).\r\n          1\r\n          \r\n           \r\n          IQR\r\n          ","code":"\nlinelist %>% \n  ## only keep variable of interest\n  select(age) %>% \n  ## create summary table with interquartile range \n  tbl_summary(statistic = age ~ \"{p25}, {p75}\")"},{"path":"descriptive-analysis.html","id":"combined-table","chapter":"18 Descriptive analysis","heading":"18.4.1.6 Combined table","text":"can combine previously shown elements one table choosing statistics want show. need tell function want get table back entering type “continuous2”.Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).","code":"\nlinelist %>% \n  ## only keep variable of interest\n  select(age) %>% \n  ## create summary table with interquartile range \n  tbl_summary(\n    ## tell the function you want to get multiple statistics back \n    type = age ~ \"continuous2\",\n    ## define which statistics you want to get back \n    statistic = age ~ c(\n    \"{mean} ({sd})\", \n    \"{median} ({p25}, {p75})\",\n    \"{min}, {max}\")\n    )"},{"path":"descriptive-analysis.html","id":"dplyr-package","chapter":"18 Descriptive analysis","heading":"18.4.2 dplyr package","text":"can also use dplyr create table different summary statistics, example mean, median, range, standard deviation percentiles. can also show one table. difference using dplyr output automatically formatted nicely gtsummary","code":""},{"path":"descriptive-analysis.html","id":"mean-1","chapter":"18 Descriptive analysis","heading":"18.4.2.1 Mean","text":"Note argument na.rm = TRUE, removes missing values calculation.\r\nmissing values excluded, returned value NA (missing).","code":"\nlinelist %>% \n  ## get the mean value of age while excluding missings\n  summarise(mean = mean(age, na.rm = TRUE))##       mean\r\n## 1 15.09205"},{"path":"descriptive-analysis.html","id":"median-1","chapter":"18 Descriptive analysis","heading":"18.4.2.2 Median","text":"Note argument na.rm = TRUE, removes missing values calculation.\r\nmissing values excluded, returned value NA (missing).","code":"\nlinelist %>% \n  ## get the median value of age while excluding missings\n  summarise(median = median(age, na.rm = TRUE))##   median\r\n## 1     13"},{"path":"descriptive-analysis.html","id":"range-1","chapter":"18 Descriptive analysis","heading":"18.4.2.3 Range","text":"Note argument na.rm = TRUE, removes missing values calculation.\r\nmissing values excluded, returned value NA (missing).","code":"\nlinelist %>% \n  ## get the range value of age while excluding missings\n  summarise(range = range(age, na.rm = TRUE))##   range\r\n## 1     0\r\n## 2    67"},{"path":"descriptive-analysis.html","id":"standard-deviation-1","chapter":"18 Descriptive analysis","heading":"18.4.2.4 Standard Deviation","text":"Note argument na.rm = TRUE, removes missing values calculation.\r\nmissing values excluded, returned value NA (missing).","code":"\nlinelist %>% \n  ## get the range value of age while excluding missings\n  summarise(sd = sd(age, na.rm = TRUE))##         sd\r\n## 1 11.23393"},{"path":"descriptive-analysis.html","id":"percentile-1","chapter":"18 Descriptive analysis","heading":"18.4.2.5 Percentile","text":"return percentiles can type one value like, can type multiple (e.g. return interquartile range).Note argument na.rm = TRUE, removes missing values calculation.\r\nmissing values excluded, returned value NA (missing).","code":"\nlinelist %>% \n  ## get the default percentile values of age while excluding missings \n  ## these are 0%,  25%,  50%,  75%, 100%\n  summarise(percentiles = quantile(age, na.rm = TRUE))##   percentiles\r\n## 1           0\r\n## 2           6\r\n## 3          13\r\n## 4          22\r\n## 5          67\nlinelist %>% \n  ## get specified percentile values of age while excluding missings \n  ## these are 0%, 50%,  75%, 98%\n  summarise(percentiles = quantile(age,\n                                   probs = c(.05, 0.5, 0.75, 0.98), \n                                   na.rm=TRUE))##   percentiles\r\n## 1           1\r\n## 2          13\r\n## 3          22\r\n## 4          43"},{"path":"descriptive-analysis.html","id":"combined-table-1","chapter":"18 Descriptive analysis","heading":"18.4.2.6 Combined table","text":"can combine previously shown elements one table choosing\r\nstatistics want show. dplyr need use str_c\r\nfunction stringr combine outputs IQR range one\r\ncell, separated comma.Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).","code":"\nlinelist %>% \n  summarise(\n    ## get the mean \n    mean = mean(age, na.rm = TRUE),\n    ## get the standard deviation\n    SD = sd(age, na.rm = TRUE),\n    ## get the median \n    median = median(age, na.rm = TRUE), \n    ## collapse the IQR separated by a comma\n    IQR = str_c(\n      quantile(age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      ), \n    ## collapse the range separated by a comma\n    Range = str_c(\n      range(age, na.rm = TRUE), \n      collapse = \", \"\n    )\n  )##       mean       SD median   IQR Range\r\n## 1 15.09205 11.23393     13 6, 22 0, 67"},{"path":"descriptive-analysis.html","id":"frequencycross-tabs","chapter":"18 Descriptive analysis","heading":"18.5 Frequency/cross-tabs","text":"","code":""},{"path":"descriptive-analysis.html","id":"gtsummary-package-1","chapter":"18 Descriptive analysis","heading":"18.5.1 gtsummary package","text":"TODO: Note percentages calculated without missingsUsing gtsummary can create table different counts proportions\r\nvariables two categories, well grouping another variable.","code":""},{"path":"descriptive-analysis.html","id":"one-way-table","chapter":"18 Descriptive analysis","heading":"18.5.1.1 One way table","text":"produce counts single variable can use tbl_summary function.\r\nNote , fever variable yes/(dichotomous) tbl_summary\r\nautomatically presents “yes” row.\r\nshow levels use type argument choose categorical,\r\ne.g. tbl_summary(type = fever ~ \"categorical\").\r\n          1\r\n          \r\n           \r\n          n (%)\r\n          ","code":"\nlinelist %>% \n  ## only keep the variable interested in\n  select(fever) %>% \n  ## produce summary table\n  tbl_summary()"},{"path":"descriptive-analysis.html","id":"multiple-variable-one-way-table","chapter":"18 Descriptive analysis","heading":"18.5.1.2 Multiple variable one way table","text":"can also show multiple variables simply adding \r\nselect.\r\n          1\r\n          \r\n           \r\n          n (%)\r\n          ","code":"\nlinelist %>% \n  ## only keep the variable interested in\n  select(fever, gender) %>% \n  ## produce summary table\n  tbl_summary()"},{"path":"descriptive-analysis.html","id":"two-way-table","chapter":"18 Descriptive analysis","heading":"18.5.1.3 Two way table","text":"two options produce two--two table (.e. comparing two variables).\r\nOne option use tbl_cross, however function accepts two variables\r\n. option tbl_summary allows variables.\r\n          1\r\n          \r\n           \r\n          n (%)\r\n          ","code":"\nlinelist %>% \n  ## only keep the variable interested in\n  select(fever, outcome, gender) %>% \n  ## produce summary table stratified by gender\n  tbl_summary(by = gender) %>% \n  ## add a column for the totals\n  add_overall()## 283 observations missing `gender` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `gender` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"three-way-table","chapter":"18 Descriptive analysis","heading":"18.5.1.4 Three way table","text":"Producing counts based three variables (adding stratifier).","code":"\n## TODO: add stratified tables when available \n\n# table_3vars <- table(linelist$fever, linelist$gender, linelist$outcome)\n# \n# ftable(table_3vars)"},{"path":"descriptive-analysis.html","id":"dplyr-package-1","chapter":"18 Descriptive analysis","heading":"18.5.2 dplyr package","text":"Creating cross tabulations dplyr less straightforward, \r\nfit within tidyverse dataset structure. still useful demonstrate\r\nthough data produced can used plotting reference ggplot section.\r\nAnother option use janitor package tabyl function.","code":""},{"path":"descriptive-analysis.html","id":"one-way-table-1","chapter":"18 Descriptive analysis","heading":"18.5.2.1 One way table","text":"Producing counts proportions single variable.\r\nsee multiple variables - reference -loop section.","code":"\nlinelist %>% \n  ## count the variable of interest\n  count(fever) %>% \n  ## calculate proportion \n  mutate(percentage = n / sum(n) * 100)##   fever    n percentage\r\n## 1    no 1135  19.273221\r\n## 2   yes 4517  76.702326\r\n## 3  <NA>  237   4.024452"},{"path":"descriptive-analysis.html","id":"two-way-table-1","chapter":"18 Descriptive analysis","heading":"18.5.2.2 Two way table","text":"Producing counts proportions based grouping variable. use \r\ndplyr group_by function, information see \r\nreference grouping aggregating section.\r\ncan calculate percentages total using ungroup() count(...).Note possible change bellow table wide format, making \r\nlike two--two (cross tabulation), using tidyr pivot_wider function.\r\ndone adding end code blow:\r\npivot_wider(names_from = gender, values_from = c(n, percentage))\r\ninformation see reference pivot section.","code":"\nlinelist %>% \n  ## do everything by gender \n  group_by(gender) %>% \n  ## count the variable of interest\n  count(fever) %>% \n  ## calculate proportion \n  ## note that the denominator here is the sum of each gender\n  mutate(percentage = n / sum(n) * 100)## # A tibble: 9 x 4\r\n## # Groups:   gender [3]\r\n##   gender fever     n percentage\r\n##   <chr>  <chr> <int>      <dbl>\r\n## 1 f      no      553      19.7 \r\n## 2 f      yes    2145      76.5 \r\n## 3 f      <NA>    107       3.81\r\n## 4 m      no      531      19.0 \r\n## 5 m      yes    2148      76.7 \r\n## 6 m      <NA>    122       4.36\r\n## 7 <NA>   no       51      18.0 \r\n## 8 <NA>   yes     224      79.2 \r\n## 9 <NA>   <NA>      8       2.83"},{"path":"descriptive-analysis.html","id":"three-way-table-1","chapter":"18 Descriptive analysis","heading":"18.5.2.3 Three way table","text":"Producing counts based three variables (adding stratifier).","code":"\nlinelist %>% \n  ## do everything by gender and outcome \n  group_by(gender, outcome) %>% \n  ## count the variable of interest \n  count(fever) %>% \n  ## calculate the proportion\n  ## note that the denominator here is the sum of each group combination\n  mutate(percentage = n / sum(n) * 100)## # A tibble: 27 x 5\r\n## # Groups:   gender, outcome [9]\r\n##    gender outcome fever     n percentage\r\n##    <chr>  <chr>   <chr> <int>      <dbl>\r\n##  1 f      Death   no      239      19.4 \r\n##  2 f      Death   yes     941      76.3 \r\n##  3 f      Death   <NA>     53       4.30\r\n##  4 f      Recover no      188      19.8 \r\n##  5 f      Recover yes     725      76.4 \r\n##  6 f      Recover <NA>     36       3.79\r\n##  7 f      <NA>    no      126      20.2 \r\n##  8 f      <NA>    yes     479      76.9 \r\n##  9 f      <NA>    <NA>     18       2.89\r\n## 10 m      Death   no      235      19.2 \r\n## # ... with 17 more rows"},{"path":"descriptive-analysis.html","id":"statistical-tests","chapter":"18 Descriptive analysis","heading":"18.6 Statistical tests","text":"","code":""},{"path":"descriptive-analysis.html","id":"gtsummary-package-2","chapter":"18 Descriptive analysis","heading":"18.6.1 gtsummary package","text":"Performing statistical tests comparison tbl_summary done using\r\nadd_p function specifying test use.\r\npossible get p-values corrected multiple testing using \r\nadd_q function.","code":""},{"path":"descriptive-analysis.html","id":"t-tests","chapter":"18 Descriptive analysis","heading":"18.6.1.1 T-tests","text":"Compare difference means continuous variable two groups.\r\nexample compare mean age patient outcome.\r\n          1\r\n          \r\n           \r\n          Mean (SD)\r\n          \r\n          2\r\n          \r\n           \r\n          Welch Two Sample t-test\r\n          ","code":"\nlinelist %>% \n  ## only keep variables of interested\n  select(age, outcome) %>% \n  ## produce summary table\n  tbl_summary(\n    ## specify what statistic want to show\n    statistic = age ~ \"{mean} ({sd})\", \n    ## specify the grouping variable\n    by = outcome) %>% \n  ## specify what test want to perform\n  add_p(age ~ \"t.test\")## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test","chapter":"18 Descriptive analysis","heading":"18.6.1.2 Wilcoxon rank sum test","text":"Compare distribution continuous variable two groups. default\r\nuse Wilcoxon rank sum test median (IQR) comparing two\r\ngroups. However non-normally distributed data comparing multiple groups,\r\nKruskal-wallis test appropriate.\r\n          1\r\n          \r\n           \r\n          Median (IQR)\r\n          \r\n          2\r\n          \r\n           \r\n          Wilcoxon rank sum test\r\n          ","code":"\nlinelist %>% \n  ## only keep variables of interested\n  select(age, outcome) %>% \n  ## produce summary table\n  tbl_summary(\n    ## specify what statistic want to show (default so could remove)\n    statistic = age ~ \"{median} ({p25}, {p75})\", \n    ## specify the grouping variable\n    by = outcome) %>% \n  ## specify what test want to perform (default so could leave brackets empty)\n  add_p(age ~ \"wilcox.test\")## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test","chapter":"18 Descriptive analysis","heading":"18.6.1.3 Kruskal-wallis test","text":"Compare distribution continuous variable two groups,\r\nregardless whether data normally distributed.\r\n          1\r\n          \r\n           \r\n          Median (IQR)\r\n          \r\n          2\r\n          \r\n           \r\n          Kruskal-Wallis rank sum test\r\n          ","code":"\nlinelist %>% \n  ## only keep variables of interested\n  select(age, outcome) %>% \n  ## produce summary table\n  tbl_summary(\n    ## specify what statistic want to show (default so could remove)\n    statistic = age ~ \"{median} ({p25}, {p75})\", \n    ## specify the grouping variable\n    by = outcome) %>% \n  ## specify what test want to perform\n  add_p(age ~ \"kruskal.test\")## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"chi-squared-test","chapter":"18 Descriptive analysis","heading":"18.6.1.4 Chi-squared test","text":"Compare proportions categorical variable two groups. default \r\nperform chi-squared test independence continuity correction, \r\nexpected call count 5 Fisher’s exact test used.\r\n          1\r\n          \r\n           \r\n          n (%)\r\n          \r\n          2\r\n          \r\n           \r\n          Pearson's Chi-squared test\r\n          ","code":"\nlinelist %>% \n  ## only keep variables of interested\n  select(gender, outcome) %>% \n  ## produce summary table\n  tbl_summary(\n    ## specify the grouping variable\n    by = outcome\n  ) %>% \n  ## specify what test want to perform\n  add_p()## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"dplyr-package-2","chapter":"18 Descriptive analysis","heading":"18.6.2 dplyr package","text":"Performing statistical tests dplyr alone dense, \r\nfit within tidy-data framework. requires using purrr create\r\nlist dataframes subgroups want compare.\r\neasier alternative may rstatix package.","code":""},{"path":"descriptive-analysis.html","id":"t-tests-1","chapter":"18 Descriptive analysis","heading":"18.6.2.1 T-tests","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the mean age for the death group\n    Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)),\n    ## calculate the mean age for the recover group\n    Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)),\n    ## using both grouped data sets compare mean age with a t-test\n    ## keep only the p.value\n    t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value)\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_mean Death_sd Recover_mean Recover_sd t_test\r\n##        <dbl>    <dbl>        <dbl>      <dbl>  <dbl>\r\n## 1       15.1     11.3         14.8       11.0  0.445"},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test-1","chapter":"18 Descriptive analysis","heading":"18.6.2.2 Wilcoxon rank sum test","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the median age for the death group\n    Death_median = map(Death, ~median(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_iqr = map(Death, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## calculate the median age for the recover group\n    Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_iqr = map(Recover, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## using both grouped data sets compare age distribution with a wilcox test\n    ## keep only the p.value\n    wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value)\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_median Death_iqr Recover_median Recover_iqr wilcox\r\n##          <dbl> <chr>              <dbl> <chr>        <dbl>\r\n## 1           13 6, 22                 13 6, 21        0.608"},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test-1","chapter":"18 Descriptive analysis","heading":"18.6.2.3 Kruskal-wallis test","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the median age for the death group\n    Death_median = map(Death, ~median(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_iqr = map(Death, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## calculate the median age for the recover group\n    Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_iqr = map(Recover, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## using the original data set compare age distribution with a kruskal test\n    ## keep only the p.value\n    kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_median Death_iqr Recover_median Recover_iqr kruskal\r\n##          <dbl> <chr>              <dbl> <chr>         <dbl>\r\n## 1           13 6, 22                 13 6, 21         0.608"},{"path":"descriptive-analysis.html","id":"chi-squared-test-1","chapter":"18 Descriptive analysis","heading":"18.6.2.4 Chi-squared test","text":"","code":"\nlinelist %>% \n  ## do everything by gender \n  group_by(outcome) %>% \n  ## count the variable of interest\n  count(gender) %>% \n  ## calculate proportion \n  ## note that the denominator here is the sum of each gender\n  mutate(percentage = n / sum(n) * 100) %>% \n  pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>% \n  filter(!is.na(gender)) %>% \n  mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value)## # A tibble: 2 x 8\r\n##   gender n_Death n_Recover  n_NA percentage_Death percentage_Recover percentage_NA  pval\r\n##   <chr>    <int>     <int> <int>            <dbl>              <dbl>         <dbl> <dbl>\r\n## 1 f         1233       949   623             47.8               47.8          47.1 0.920\r\n## 2 m         1227       952   622             47.5               48.0          47.0 0.920"},{"path":"descriptive-analysis.html","id":"base-package","chapter":"18 Descriptive analysis","heading":"18.6.3 base package","text":"can also just use base functions produce results statistical\r\ntests. outputs however usually lists, harder \r\nmanipulate.","code":""},{"path":"descriptive-analysis.html","id":"t-tests-2","chapter":"18 Descriptive analysis","heading":"18.6.3.1 T-tests","text":"","code":"\n## compare mean age by outcome group with a t-test\nt.test(age ~ outcome, data = linelist)## \r\n##  Welch Two Sample t-test\r\n## \r\n## data:  age by outcome\r\n## t = 0.76363, df = 4261.3, p-value = 0.4451\r\n## alternative hypothesis: true difference in means is not equal to 0\r\n## 95 percent confidence interval:\r\n##  -0.4007016  0.9120010\r\n## sample estimates:\r\n##   mean in group Death mean in group Recover \r\n##              15.07732              14.82167"},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test-2","chapter":"18 Descriptive analysis","heading":"18.6.3.2 Wilcoxon rank sum test","text":"","code":"\n## compare age distribution by outcome group with a wilcox test\nwilcox.test(age ~ outcome, data = linelist)## \r\n##  Wilcoxon rank sum test with continuity correction\r\n## \r\n## data:  age by outcome\r\n## W = 2515431, p-value = 0.6075\r\n## alternative hypothesis: true location shift is not equal to 0"},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test-2","chapter":"18 Descriptive analysis","heading":"18.6.3.3 Kruskal-wallis test","text":"","code":"\n## compare age distribution by outcome group with a kruskal-wallis test\nkruskal.test(age ~ outcome, linelist)## \r\n##  Kruskal-Wallis rank sum test\r\n## \r\n## data:  age by outcome\r\n## Kruskal-Wallis chi-squared = 0.26378, df = 1, p-value = 0.6075"},{"path":"descriptive-analysis.html","id":"chi-squared-test-2","chapter":"18 Descriptive analysis","heading":"18.6.3.4 Chi-squared test","text":"","code":"\n## compare the proportions in each group with a chi-squared test\nchisq.test(linelist$gender, linelist$outcome)## \r\n##  Pearson's Chi-squared test with Yates' continuity correction\r\n## \r\n## data:  linelist$gender and linelist$outcome\r\n## X-squared = 0.010203, df = 1, p-value = 0.9195"},{"path":"descriptive-analysis.html","id":"correlations","chapter":"18 Descriptive analysis","heading":"18.7 Correlations","text":"Correlation numeric variables can investigated using tidyverse\r\ncorrr package. allows compute correlations using Pearson, Kendall\r\ntau Spearman rho. package creates table also function \r\nautomatically plot values.","code":"\ncorrelation_tab <- linelist %>% \n  ## pick the numeric variables of interest\n  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>% \n  ## create correlation table (using default pearson)\n  correlate()## \r\n## Correlation method: 'pearson'\r\n## Missing treated using: 'pairwise.complete.obs'\n## remove duplicate entries (the table is mirrored) \ncorrelation_tab <- correlation_tab %>% \n  shave()\n\n\n## view correlation table \ncorrelation_tab## # A tibble: 6 x 7\r\n##   term            generation     age ct_blood days_onset_hosp  wt_kg ht_cm\r\n##   <chr>                <dbl>   <dbl>    <dbl>           <dbl>  <dbl> <dbl>\r\n## 1 generation         NA      NA      NA               NA      NA        NA\r\n## 2 age                -0.0144 NA      NA               NA      NA        NA\r\n## 3 ct_blood            0.184  -0.0108 NA               NA      NA        NA\r\n## 4 days_onset_hosp    -0.289  -0.0147 -0.600           NA      NA        NA\r\n## 5 wt_kg              -0.0153  0.840  -0.00763         -0.0153 NA        NA\r\n## 6 ht_cm              -0.0150  0.882  -0.00907         -0.0121  0.885    NA\n## plot correlations \nrplot(correlation_tab)## Don't know how to automatically pick scale for object of type noquote. Defaulting to continuous."},{"path":"descriptive-analysis.html","id":"resources-9","chapter":"18 Descriptive analysis","heading":"18.8 Resources","text":"Much information page adapted resources vignettes online:gtsummary\r\ndplyr\r\ncorrr\r\nsthda correlation","code":""},{"path":"simple-statistical-tests.html","id":"simple-statistical-tests","chapter":"19 Simple statistical tests","heading":"19 Simple statistical tests","text":"","code":""},{"path":"simple-statistical-tests.html","id":"overview-14","chapter":"19 Simple statistical tests","heading":"19.1 Overview","text":"tab demonstrates use gtstummary regression packages \r\nlook associations variables (e.g. odds ratios, risk ratios hazard\r\nratios)Univariate: two--two tablesStratified: mantel-haenszel estimatesMultivariable: variable selection, model selection, final tableForest plot","code":""},{"path":"simple-statistical-tests.html","id":"preparation-10","chapter":"19 Simple statistical tests","heading":"19.2 Preparation","text":"Preparation","code":""},{"path":"simple-statistical-tests.html","id":"packages-4","chapter":"19 Simple statistical tests","heading":"19.2.1 Packages","text":"code chunk shows loading packages required analyses.","code":"\npacman::p_load(rio,          # File import\n               here,         # File locator\n               tidyverse,    # data management + ggplot2 graphics, \n               stringr,      # manipulate text strings \n               purrr,        # loop over objects in a tidy way\n               gtsummary,    # summary statistics and tests \n               broom,        # tidy up results from regressions\n               parameters,   # alternative to tidy up results from regressions\n               see\n               )"},{"path":"simple-statistical-tests.html","id":"load-data-2","chapter":"19 Simple statistical tests","heading":"19.2.2 Load data","text":"example dataset used section:Linelist individual cases simulated epidemicThe dataset imported using import() function rio package. See page importing data various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"simple-statistical-tests.html","id":"clean-data-1","chapter":"19 Simple statistical tests","heading":"19.2.3 Clean data","text":"","code":"\n## make sure that age variable is numeric \nlinelist <- linelist %>% \n  mutate(age = as.numeric(age))\n\n## define variables of interest \nexplanatory_vars <- c(\"gender\", \"fever\", \"chills\", \"cough\", \"aches\", \"vomit\")\n\n## make dichotomous variables in to 0/1 \nlinelist <- linelist %>% \n  mutate(\n    ## for each of the variables listed\n    across(\n      all_of(c(explanatory_vars, \"outcome\")), \n      ## recode male, yes and death to 1; female, no and recover to 0\n      ## otherwise set to missing\n           ~case_when(\n             . %in% c(\"m\", \"yes\", \"Death\")   ~ 1,\n             . %in% c(\"f\", \"no\",  \"Recover\") ~ 0, \n             TRUE ~ NA_real_\n           ))\n  )\n\n## add in age_category to the explanatory vars \nexplanatory_vars <- c(explanatory_vars, \"age_cat\")\n\n## drop rows with missing information for variables of interest \nlinelist <- linelist %>% \n  drop_na(any_of(c(\"outcome\", explanatory_vars)))"},{"path":"simple-statistical-tests.html","id":"univariate","chapter":"19 Simple statistical tests","heading":"19.3 Univariate","text":"two options univariate analysis.\r\ncan use gtsummary package can use individual regression\r\nfunctions available base together broom package.","code":""},{"path":"simple-statistical-tests.html","id":"gtsummary-package-3","chapter":"19 Simple statistical tests","heading":"19.3.1 gtsummary package","text":"\r\n          1\r\n          \r\n           \r\n          = Odds Ratio, CI = Confidence Interval\r\n          ","code":"\nuniv_tab <- linelist %>% \n  ## select variables of interest\n  select(explanatory_vars, outcome) %>% \n  ## produce univariate table\n  tbl_uvregression(\n    ## define regression want to run (generalised linear model)\n    method = glm, \n    ## define outcome variable\n    y = outcome, \n    ## define what type of glm want to run (logistic)\n    method.args = list(family = binomial), \n    ## exponentiate the outputs to produce odds ratios (rather than log odds)\n    exponentiate = TRUE\n    )## Note: Using an external vector in selections is ambiguous.\r\n## i Use `all_of(explanatory_vars)` instead of `explanatory_vars` to silence this message.\r\n## i See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\r\n## This message is displayed once per session.\n## view univariate results table \nuniv_tab"},{"path":"simple-statistical-tests.html","id":"base","chapter":"19 Simple statistical tests","heading":"19.3.2 base","text":"Using glm function stats package (part base R), can\r\nproduce odds ratios.single exposure variable, pass names glm use tidy \r\nbroom package get exponentiated odds ratio estimates confidence\r\nintervals. demonstrate combine model outputs table \r\ncounts.run several exposure variables produce univariate odds ratios (.e. \r\ncontrolling ), can pass vector variable names \r\nmap function purrr package. loop variables\r\nrunning regressions one.","code":"\nmodel <- glm(\n  ## define the variables of interest\n  outcome ~ age_cat, \n  ## define the type of regression (logistic)\n  family = \"binomial\", \n  ## define your dataset\n  data = linelist) %>% \n  ## clean up the outputs of the regression (exponentiate and produce CIs)\n  tidy(\n      exponentiate = TRUE, \n      conf.int = TRUE)\n\n\nlinelist %>% \n  ## get counts of variable of interest grouped by outcome\n  group_by(outcome) %>% \n  count(age_cat) %>% \n  ## spread to wide format (as in cross-tabulation)\n  pivot_wider(names_from = outcome, values_from = n) %>% \n  ## drop rows with missings\n  filter(!is.na(age_cat)) %>% \n  ## merge with the outputs of the regression \n  bind_cols(., model) %>% \n  ## only keep columns interested in \n  select(term, 2:3, estimate, conf.low, conf.high, p.value)## # A tibble: 7 x 7\r\n##   term           `0`   `1` estimate conf.low conf.high p.value\r\n##   <chr>        <int> <int>    <dbl>    <dbl>     <dbl>   <dbl>\r\n## 1 (Intercept)    354   440     1.24    1.08       1.43 0.00232\r\n## 2 age_cat5-9     357   462     1.04    0.855      1.27 0.688  \r\n## 3 age_cat10-14   306   393     1.03    0.842      1.27 0.754  \r\n## 4 age_cat15-19   259   352     1.09    0.884      1.35 0.411  \r\n## 5 age_cat20-29   346   439     1.02    0.837      1.25 0.839  \r\n## 6 age_cat30-49   189   241     1.03    0.810      1.30 0.832  \r\n## 7 age_cat50-69    12    22     1.47    0.732      3.12 0.288\nmodels <- explanatory_vars %>% \n  ## combine each name of the variables of interest with the name of outcome variable\n  str_c(\"outcome ~ \", .) %>% \n  ## for each string above (outcome ~ \"variable of interest)\n  map(\n    ## run a general linear model \n    ~glm(\n      ## define formula as each of the strings above\n      as.formula(.x), \n      ## define type of glm (logistic)\n      family = \"binomial\", \n      ## define your dataset\n      data = linelist)\n  ) %>% \n  ## for each of the output regressions from above \n  map(\n    ## tidy the output\n    ~tidy(\n      ## each of the regressions \n      .x, \n      ## exponentiate and produce CIs\n      exponentiate = TRUE, \n      conf.int = TRUE)\n  ) %>% \n  ## collapse the list of regressions outputs in to one data frame\n  bind_rows()\n\n\n\n## for each explanatory variable\nuniv_tab_base <- map(explanatory_vars, \n      ~{linelist %>% \n          ## group data set by outcome\n          group_by(outcome) %>% \n          ## produce counts for variable of interest\n          count(.data[[.x]]) %>% \n          ## spread to wide format (as in cross-tabulation)\n          pivot_wider(names_from = outcome, values_from = n) %>% \n          ## drop rows with missings\n          filter(!is.na(.data[[.x]])) %>% \n          ## change the variable of interest column to be called \"variable\"\n          rename(\"variable\" = .x) %>% \n          ## change the variable of interest column to be a character \n          ## otherwise non-dichotomous (categorical) variables come out as factor and cant be merged\n          mutate(variable = as.character(variable))\n                 }\n      ) %>% \n  ## collapse the list of count outputs in to one data frame\n  bind_rows() %>% \n  ## merge with the outputs of the regression \n  bind_cols(., models) %>% \n  ## only keep columns interested in \n  select(term, 2:3, estimate, conf.low, conf.high, p.value)## Note: Using an external vector in selections is ambiguous.\r\n## i Use `all_of(.x)` instead of `.x` to silence this message.\r\n## i See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\r\n## This message is displayed once per session."},{"path":"simple-statistical-tests.html","id":"stratified","chapter":"19 Simple statistical tests","heading":"19.4 Stratified","text":"Stratified analysis currently still worked gtsummary,\r\npage updated due course.","code":""},{"path":"simple-statistical-tests.html","id":"gtsummary-package-4","chapter":"19 Simple statistical tests","heading":"19.4.1 gtsummary package","text":"TODO","code":""},{"path":"simple-statistical-tests.html","id":"base-1","chapter":"19 Simple statistical tests","heading":"19.4.2 base","text":"TODO","code":""},{"path":"simple-statistical-tests.html","id":"multivariable","chapter":"19 Simple statistical tests","heading":"19.5 Multivariable","text":"multivariable analysis can use combination much difference\r\nusing gtsummary broom present data.\r\nworkflow , , last step pulling \r\ntable together different.","code":"\n## run a regression with all variables of interest \nmv_reg <- explanatory_vars %>% \n  ## combine all names of the variables of interest separated by a plus\n  str_c(collapse = \"+\") %>% \n  ## combined the names of variables of interest with outcome in formula style\n  str_c(\"outcome ~ \", .) %>% \n  glm(## define type of glm (logistic)\n      family = \"binomial\", \n      ## define your dataset\n      data = linelist) \n\n## choose a model using forward selection based on AIC\n## you can also do \"backward\" or \"both\" by adjusting the direction\nfinal_mv_reg <- mv_reg %>%\n  step(direction = \"forward\", trace = FALSE)"},{"path":"simple-statistical-tests.html","id":"gtsummary-package-5","chapter":"19 Simple statistical tests","heading":"19.5.1 gtsummary package","text":"gtsummary package provides tbl_regression function, \r\ntake outputs regression (glm case) produce easy\r\nsummary table.\r\ncan also combine several different output tables produced gtsummary \r\ntbl_mege function.\r\n          1\r\n          \r\n           \r\n          = Odds Ratio, CI = Confidence Interval\r\n          ","code":"\n## show results table of final regression \nmv_tab <- tbl_regression(final_mv_reg, exponentiate = TRUE)\n\n## combine with univariate results \ntbl_merge(\n  tbls = list(univ_tab, mv_tab), \n  tab_spanner = c(\"**Univariate**\", \"**Multivariable**\"))"},{"path":"simple-statistical-tests.html","id":"base-2","chapter":"19 Simple statistical tests","heading":"19.5.2 base","text":"","code":"\nmv_tab_base <- final_mv_reg %>% \n  ## get a tidy dataframe of estimates \n  broom::tidy(exponentiate = TRUE, conf.int = TRUE)\n\n## combine univariate and multivariable tables \nleft_join(univ_tab_base, mv_tab_base, by = \"term\") %>% \n  ## choose columns and rename them\n  select(\n    \"characteristic\" = term, \n    \"recovered\"      = \"0\", \n    \"dead\"           = \"1\", \n    \"univ_or\"        = estimate.x, \n    \"univ_ci_low\"    = conf.low.x, \n    \"univ_ci_high\"   = conf.high.x,\n    \"univ_pval\"      = p.value.x, \n    \"mv_or\"          = estimate.y, \n    \"mvv_ci_low\"     = conf.low.y, \n    \"mv_ci_high\"     = conf.high.y,\n    \"mv_pval\"        = p.value.y \n  )## # A tibble: 19 x 11\r\n##    characteristic recovered  dead univ_or univ_ci_low univ_ci_high univ_pval mv_or mvv_ci_low mv_ci_high mv_pval\r\n##    <chr>              <int> <int>   <dbl>       <dbl>        <dbl>     <dbl> <dbl>      <dbl>      <dbl>   <dbl>\r\n##  1 (Intercept)          913  1180   1.29        1.19          1.41  5.88e- 9 1.22       0.946       1.58   0.125\r\n##  2 gender               910  1169   0.994       0.879         1.12  9.22e- 1 0.989      0.872       1.12   0.864\r\n##  3 (Intercept)          377   474   1.26        1.10          1.44  9.07e- 4 1.22       0.946       1.58   0.125\r\n##  4 fever               1446  1875   1.03        0.886         1.20  6.90e- 1 1.03       0.888       1.20   0.667\r\n##  5 (Intercept)         1469  1885   1.28        1.20          1.37  7.80e-13 1.22       0.946       1.58   0.125\r\n##  6 chills               354   464   1.02        0.876         1.19  7.87e- 1 1.02       0.877       1.19   0.767\r\n##  7 (Intercept)          263   337   1.28        1.09          1.51  2.58e- 3 1.22       0.946       1.58   0.125\r\n##  8 cough               1560  2012   1.01        0.845         1.20  9.42e- 1 1.01       0.848       1.20   0.910\r\n##  9 (Intercept)         1629  2125   1.30        1.22          1.39  6.93e-16 1.22       0.946       1.58   0.125\r\n## 10 aches                194   224   0.885       0.723         1.08  2.38e- 1 0.885      0.722       1.08   0.238\r\n## 11 (Intercept)          927  1202   1.30        1.19          1.41  2.79e- 9 1.22       0.946       1.58   0.125\r\n## 12 vomit                896  1147   0.987       0.874         1.12  8.37e- 1 0.985      0.871       1.11   0.806\r\n## 13 (Intercept)          354   440   1.24        1.08          1.43  2.32e- 3 1.22       0.946       1.58   0.125\r\n## 14 age_cat5-9           357   462   1.04        0.855         1.27  6.88e- 1 1.05       0.859       1.27   0.656\r\n## 15 age_cat10-14         306   393   1.03        0.842         1.27  7.54e- 1 1.04       0.844       1.27   0.730\r\n## 16 age_cat15-19         259   352   1.09        0.884         1.35  4.11e- 1 1.10       0.886       1.36   0.398\r\n## 17 age_cat20-29         346   439   1.02        0.837         1.25  8.39e- 1 1.02       0.838       1.25   0.818\r\n## 18 age_cat30-49         189   241   1.03        0.810         1.30  8.32e- 1 1.03       0.809       1.31   0.819\r\n## 19 age_cat50-69          12    22   1.47        0.732         3.12  2.88e- 1 1.48       0.733       3.14   0.285"},{"path":"simple-statistical-tests.html","id":"forest-plot","chapter":"19 Simple statistical tests","heading":"19.6 Forest plot","text":"section shows produce plot outputs regression.\r\ntwo options, can build plot using ggplot2 use \r\npackage called","code":""},{"path":"simple-statistical-tests.html","id":"ggplot2-package","chapter":"19 Simple statistical tests","heading":"19.6.1 ggplot2 package","text":"","code":"\n## remove the intercept term from your multivariable results\nmv_tab_base %>% \n  filter(term != \"(Intercept)\") %>% \n  ## plot with variable on the y axis and estimate (OR) on the x axis\n  ggplot(aes(x = estimate, y = term)) +\n  ## show the estimate as a point\n  geom_point() + \n  ## add in an error bar for the confidence intervals\n  geom_errorbar(aes(xmin = conf.low, xmax = conf.high)) + \n  ## show where OR = 1 is for reference as a dashed line\n  geom_vline(xintercept = 1, linetype = \"dashed\")"},{"path":"simple-statistical-tests.html","id":"easytats-packages","chapter":"19 Simple statistical tests","heading":"19.6.2 easytats packages","text":"alternative want decide different things required\r\nggplot, use combination easystats packages.\r\ncase paramaters package function model_paramets equivalent\r\nbroom package function tidy. see package accepts outputs\r\ncreates default forest plot ggplot object.","code":"\n## remove the intercept term from your multivariable results\nfinal_mv_reg %>% \n  model_parameters(exponentiate = TRUE) %>% \n  plot()"},{"path":"simple-statistical-tests.html","id":"resources-10","chapter":"19 Simple statistical tests","heading":"19.7 Resources","text":"Much information page adapted resources vignettes online:gtsummarysthda stepwise regression","code":""},{"path":"moving-averages.html","id":"moving-averages","chapter":"20 Moving averages","heading":"20 Moving averages","text":"","code":""},{"path":"moving-averages.html","id":"overview-15","chapter":"20 Moving averages","heading":"20.1 Overview","text":"page cover methods calculate visualize moving averages, :see moving average epicurve, see page epicurves (LINK)","code":""},{"path":"moving-averages.html","id":"preparation-11","chapter":"20 Moving averages","heading":"20.2 Preparation","text":"Load packages","code":"\npacman::p_load(\n  tidyverse,      # for data management and viz\n  slider,         # for calculating moving averages\n  tidyquant,      # for calculating moving averages on-the-fly in ggplot\n)## \r\n## Your package installed## Warning in pacman::p_load(tidyverse, slider, tidyquant, ): Failed to install/load:"},{"path":"moving-averages.html","id":"calculate-then-display","chapter":"20 Moving averages","heading":"20.3 Calculate-then-display","text":"Using package slider calculate moving average dataframe, prior plotting.approach, moving average calculated dataset prior plotting:Within mutate(), new column created hold average. slide_index() slider package used shown .ggplot(), geom_line() added histogram, reflecting moving average.See helpful online vignette slider packageCan assign .= Inf achieve cumulative averages first rowUse slide() simple casesUse slide_index() designate date column index, dates appear dataframe still included window\r\n., .TODO\r\n.complete TODO\r\n\r\n., .TODO.complete TODOFirst count number cases reported day. Note count() appropriate data linelist format (one row per case) - starting aggregated counts need follow different approach (e.g. summarize() - see page Summarizing data).new dataset now looks like :Next, create new column 7-day average. using function slide_index() slider specifically recognize missing days dataframe, must accounted . , set “index” (.argument) columndate_onset. Sincedate_onsetis column class Date, function recognizes calculating counts days appear dataframe. use another **slider** function likeslide()`, indexing occur.Also 7-day window, example, achieved argument .= 6. way window day 6 days preceding. want window different (centered following) use .conjunction.Step 2 plotting 7-day average, case shown top underlying daily data.","code":"\n# make dataset of daily counts and 7-day moving average\n#######################################################\nll_counts_7day <- linelist %>% \n  count(date_onset, name = \"new_cases\") %>%    # count cases by date, new column is named \"new_cases\"\n  filter(!is.na(date_onset))\nDT::datatable(ll_counts_7day, rownames = FALSE, options = list(pageLength = 6, scrollX=T) )\n## calculate the average number of cases in the preceding 7 days\nll_counts_7day <- ll_counts_7day %>% \n  mutate(\n    avg_7day = slider::slide_index_dbl(    # create new column\n        new_cases,                       # calculate avg based on value in new_cases column\n        .i = date_onset,                 # index column is date_onset, so non-present dates are included in 7day window \n        .f = ~mean(.x, na.rm = TRUE),    # function is mean() with missing values removed\n        .before = 6,                     # window is the day and 6-days before\n        .complete = TRUE))               # fills in first days with NA\nggplot(data = ll_counts_7day, aes(x = date_onset)) +\n    geom_histogram(aes(y = new_cases), fill=\"#92a8d1\", stat = \"identity\", position = \"stack\", colour = \"#92a8d1\")+ \n    geom_line(aes(y = avg_7day), color=\"red\", size = 1) + \n    scale_x_date(\n      date_breaks = \"1 month\",\n      date_labels = '%d/%m',\n      expand = c(0,0)) +\n    scale_y_continuous(expand = c(0,0), limits = c(0, NA)) + \n    labs(x=\"\", y =\"Number of confirmed cases\")+ \n    theme_minimal() ## Warning: Ignoring unknown parameters: binwidth, bins, pad## Warning: Removed 1 row(s) containing missing values (geom_path)."},{"path":"moving-averages.html","id":"calculate-on-the-fly","chapter":"20 Moving averages","heading":"20.4 Calculate on-the-fly","text":"TBD - tidyquant","code":"\nper_pos_plot_county <- ggplot(data = filter(tests_per_county),\n       aes(x = DtSpecimenCollect_Final, y = prop_pos))+\n  geom_line(size = 1, alpha = 0.2)+  # plot raw values\n  tidyquant::geom_ma(n=7, size = 2)+ # plot moving average\n  theme_minimal_hgrid()+\n  coord_cartesian(xlim = c(as.Date(\"2020-03-15\"), Sys.Date()), ylim = c(0, 15))+\n  labs(title    = \"COUNTY-WIDE TESTING PERCENT POSITIVE\",\n       subtitle = \"Daily and 7-day moving average\",\n       y        = \"Percent Positive\",\n       x        = \"Date Specimen Collected\")+\n  theme_text_size+\n  theme(axis.text = element_text(face = \"bold\", size = 14),\n        panel.background = element_rect(fill = \"khaki\")\n        )"},{"path":"moving-averages.html","id":"resources-11","chapter":"20 Moving averages","heading":"20.5 Resources","text":"See helpful online vignette slider packageIf use case requires “skip ” weekends even holidays, might like almanac package.","code":""},{"path":"outbreak-detection.html","id":"outbreak-detection","chapter":"21 Outbreak detection","heading":"21 Outbreak detection","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"outbreak-detection.html","id":"overview-16","chapter":"21 Outbreak detection","heading":"21.1 Overview","text":"Endemic corridor analysis\r\nDetecting spikes syndromic/routine surveillanceKeep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"outbreak-detection.html","id":"preparation-12","chapter":"21 Outbreak detection","heading":"21.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"outbreak-detection.html","id":"sub-tab-1-3","chapter":"21 Outbreak detection","heading":"21.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"outbreak-detection.html","id":"sub-tab-2-3","chapter":"21 Outbreak detection","heading":"21.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"outbreak-detection.html","id":"option-1-3","chapter":"21 Outbreak detection","heading":"21.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"outbreak-detection.html","id":"option-1-sub-tab-3","chapter":"21 Outbreak detection","heading":"21.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"outbreak-detection.html","id":"option-2-3","chapter":"21 Outbreak detection","heading":"21.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"outbreak-detection.html","id":"option-2-sub-tab-4","chapter":"21 Outbreak detection","heading":"21.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"outbreak-detection.html","id":"resources-12","chapter":"21 Outbreak detection","heading":"21.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"time-series-analysis.html","id":"time-series-analysis","chapter":"22 Time series analysis","heading":"22 Time series analysis","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"time-series-analysis.html","id":"overview-17","chapter":"22 Time series analysis","heading":"22.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"time-series-analysis.html","id":"preparation-13","chapter":"22 Time series analysis","heading":"22.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"time-series-analysis.html","id":"sub-tab-1-4","chapter":"22 Time series analysis","heading":"22.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"time-series-analysis.html","id":"sub-tab-2-4","chapter":"22 Time series analysis","heading":"22.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"time-series-analysis.html","id":"option-1-4","chapter":"22 Time series analysis","heading":"22.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"time-series-analysis.html","id":"option-1-sub-tab-4","chapter":"22 Time series analysis","heading":"22.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"time-series-analysis.html","id":"option-2-4","chapter":"22 Time series analysis","heading":"22.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"time-series-analysis.html","id":"option-2-sub-tab-5","chapter":"22 Time series analysis","heading":"22.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"time-series-analysis.html","id":"resources-13","chapter":"22 Time series analysis","heading":"22.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"epidemicmodels.html","id":"epidemicmodels","chapter":"23 Epidemic modeling","heading":"23 Epidemic modeling","text":"","code":""},{"path":"epidemicmodels.html","id":"overview-18","chapter":"23 Epidemic modeling","heading":"23.1 Overview","text":"R(t) estimations\r\nDoubling times\r\nProjectionsKeep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"epidemicmodels.html","id":"preparation-14","chapter":"23 Epidemic modeling","heading":"23.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"epidemicmodels.html","id":"sub-tab-1-5","chapter":"23 Epidemic modeling","heading":"23.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"epidemicmodels.html","id":"sub-tab-2-5","chapter":"23 Epidemic modeling","heading":"23.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"epidemicmodels.html","id":"option-1-5","chapter":"23 Epidemic modeling","heading":"23.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"epidemicmodels.html","id":"option-1-sub-tab-5","chapter":"23 Epidemic modeling","heading":"23.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"epidemicmodels.html","id":"option-2-5","chapter":"23 Epidemic modeling","heading":"23.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"epidemicmodels.html","id":"option-2-sub-tab-6","chapter":"23 Epidemic modeling","heading":"23.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"epidemicmodels.html","id":"resources-14","chapter":"23 Epidemic modeling","heading":"23.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"modeling.html","id":"modeling","chapter":"24 Modeling","heading":"24 Modeling","text":"","code":""},{"path":"modeling.html","id":"overview-19","chapter":"24 Modeling","heading":"24.1 Overview","text":"CONSTRUCTION","code":""},{"path":"modeling.html","id":"preparation-15","chapter":"24 Modeling","heading":"24.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"modeling.html","id":"overview-20","chapter":"24 Modeling","heading":"24.3 Overview","text":"Tidymodels","code":""},{"path":"modeling.html","id":"logistic-regression","chapter":"24 Modeling","heading":"24.4 Logistic Regression","text":"","code":""},{"path":"modeling.html","id":"multi-level-modeling-regression","chapter":"24 Modeling","heading":"24.5 Multi-level modeling Regression","text":"","code":""},{"path":"modeling.html","id":"survival-analysis","chapter":"24 Modeling","heading":"24.6 Survival analysis","text":"","code":""},{"path":"modeling.html","id":"multi-stage-markov-models","chapter":"24 Modeling","heading":"24.7 Multi-stage Markov models","text":"Liza Coyer TODO ? logitudinal data","code":""},{"path":"modeling.html","id":"tables-of-model-results","chapter":"24 Modeling","heading":"24.8 Tables of model results","text":"","code":""},{"path":"modeling.html","id":"causal-diagrams","chapter":"24 Modeling","heading":"24.9 Causal diagrams","text":"","code":""},{"path":"survey-analysis.html","id":"survey-analysis","chapter":"25 Survey analysis","heading":"25 Survey analysis","text":"CONSTRUCTION","code":""},{"path":"survey-analysis.html","id":"overview-21","chapter":"25 Survey analysis","heading":"25.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"survey-analysis.html","id":"preparation-16","chapter":"25 Survey analysis","heading":"25.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"survey-analysis.html","id":"sub-tab-1-6","chapter":"25 Survey analysis","heading":"25.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"survey-analysis.html","id":"sub-tab-2-6","chapter":"25 Survey analysis","heading":"25.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"survey-analysis.html","id":"from-data-frame","chapter":"25 Survey analysis","heading":"25.3 From data frame","text":"","code":""},{"path":"survey-analysis.html","id":"overview-22","chapter":"25 Survey analysis","heading":"25.4 Overview","text":"","code":""},{"path":"survey-analysis.html","id":"weighting","chapter":"25 Survey analysis","heading":"25.5 Weighting","text":"","code":""},{"path":"survey-analysis.html","id":"random-selection","chapter":"25 Survey analysis","heading":"25.6 Random selection","text":"","code":""},{"path":"survey-analysis.html","id":"resources-15","chapter":"25 Survey analysis","heading":"25.7 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"survival-analysis-1.html","id":"survival-analysis-1","chapter":"26 Survival analysis","heading":"26 Survival analysis","text":"CONSTRUCTIONThe Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"survival-analysis-1.html","id":"overview-23","chapter":"26 Survival analysis","heading":"26.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"survival-analysis-1.html","id":"preparation-17","chapter":"26 Survival analysis","heading":"26.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"survival-analysis-1.html","id":"option-1-6","chapter":"26 Survival analysis","heading":"26.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"survival-analysis-1.html","id":"option-1-sub-tab-6","chapter":"26 Survival analysis","heading":"26.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"survival-analysis-1.html","id":"option-2-6","chapter":"26 Survival analysis","heading":"26.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"survival-analysis-1.html","id":"option-2-sub-tab-7","chapter":"26 Survival analysis","heading":"26.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"survival-analysis-1.html","id":"resources-16","chapter":"26 Survival analysis","heading":"26.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"gis-basics.html","id":"gis-basics","chapter":"27 GIS basics","heading":"27 GIS basics","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"gis-basics.html","id":"overview-24","chapter":"27 GIS basics","heading":"27.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"gis-basics.html","id":"preparation-18","chapter":"27 GIS basics","heading":"27.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"gis-basics.html","id":"sub-tab-1-7","chapter":"27 GIS basics","heading":"27.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"gis-basics.html","id":"sub-tab-2-7","chapter":"27 GIS basics","heading":"27.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"gis-basics.html","id":"plotting-coordinates","chapter":"27 GIS basics","heading":"27.3 Plotting coordinates","text":"","code":""},{"path":"gis-basics.html","id":"polygons-and-shapefiles","chapter":"27 GIS basics","heading":"27.4 polygons and shapefiles","text":"","code":""},{"path":"gis-basics.html","id":"simple-analyses","chapter":"27 GIS basics","heading":"27.5 Simple analyses","text":"","code":""},{"path":"gis-basics.html","id":"distance-to-nearest-x-hcf","chapter":"27 GIS basics","heading":"27.6 Distance to nearest X (HCF)","text":"","code":""},{"path":"gis-basics.html","id":"resources-17","chapter":"27 GIS basics","heading":"27.7 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"ggplot-tips.html","id":"ggplot-tips","chapter":"28 ggplot tips","heading":"28 ggplot tips","text":"CONSTRUCTIONhttps://www.tidyverse.org/blog/2018/07/ggplot2-3-0-0/","code":""},{"path":"ggplot-tips.html","id":"overview-25","chapter":"28 ggplot tips","heading":"28.1 Overview","text":"Embed ggplot cheatsheet","code":""},{"path":"ggplot-tips.html","id":"preparation-19","chapter":"28 ggplot tips","heading":"28.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"ggplot-tips.html","id":"sub-tab-1-8","chapter":"28 ggplot tips","heading":"28.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"ggplot-tips.html","id":"sub-tab-2-8","chapter":"28 ggplot tips","heading":"28.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"ggplot-tips.html","id":"highlighting","chapter":"28 ggplot tips","heading":"28.3 Highlighting","text":"highlighting one line among many etc\r\ngghighlight","code":""},{"path":"ggplot-tips.html","id":"dual-axes","chapter":"28 ggplot tips","heading":"28.4 Dual axes","text":"Cowplot\r\nComplicated method (% 100 * …)","code":""},{"path":"ggplot-tips.html","id":"smart-labeling","chapter":"28 ggplot tips","heading":"28.5 Smart Labeling","text":"ggrepel","code":""},{"path":"ggplot-tips.html","id":"time-axes","chapter":"28 ggplot tips","heading":"28.6 Time axes","text":"","code":""},{"path":"ggplot-tips.html","id":"dual-axes-1","chapter":"28 ggplot tips","heading":"28.7 Dual axes","text":"","code":""},{"path":"ggplot-tips.html","id":"adding-shapes","chapter":"28 ggplot tips","heading":"28.8 Adding shapes","text":"","code":""},{"path":"ggplot-tips.html","id":"animations","chapter":"28 ggplot tips","heading":"28.9 Animations","text":"","code":""},{"path":"epidemic-curves.html","id":"epidemic-curves","chapter":"29 Epidemic curves","heading":"29 Epidemic curves","text":"","code":""},{"path":"epidemic-curves.html","id":"overview-26","chapter":"29 Epidemic curves","heading":"29.1 Overview","text":"","code":"## 15 missing observations were removed.## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"preparation-20","chapter":"29 Epidemic curves","heading":"29.2 Preparation","text":"","code":""},{"path":"epidemic-curves.html","id":"packages-5","chapter":"29 Epidemic curves","heading":"29.2.1 Packages","text":"code chunk shows loading packages required analyses.","code":"\npacman::p_load(rio,          # File import\n               here,         # File locator\n               tidyverse,    # data management + ggplot2 graphics\n               lubridate,    # working with  dates    \n               aweek,        # alternative package for working with dates\n               incidence,    # an option for epicurves of linelist data\n               stringr,      # Search and manipulate character strings\n               forcats,      # working with factors\n               RColorBrewer) # Color palettes from colorbrewer2.org"},{"path":"epidemic-curves.html","id":"load-data-3","chapter":"29 Epidemic curves","heading":"29.2.2 Load data","text":"Two example datasets used section:Linelist individual cases simulated epidemicAggregated counts hospital simulated epidemicThe dataset imported using import() function rio package. See page importing data various ways import data. linelist aggregated versions data displayed .document, linelist dataset used. aggregated counts dataset used end.Review two datasets notice differencesCase linelistThe first 50 rows displayedCase counts aggregated hospitalThe first 50 rows displayed","code":"## `summarise()` has grouped output by 'hospital'. You can override using the `.groups` argument.\n# import the linelist\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"epidemic-curves.html","id":"set-parameters","chapter":"29 Epidemic curves","heading":"29.2.3 Set parameters","text":"may want set certain parameters production report, date data current (“data date”).\r\ncan reference data_date code applying filters captions auto-update.","code":"\n## set the report date for the report\n## note: can be set to Sys.Date() for the current date\ndata_date <- as.Date(\"2015-05-15\")"},{"path":"epidemic-curves.html","id":"verify-dates","chapter":"29 Epidemic curves","heading":"29.2.4 Verify dates","text":"Verify relevant date column class Date appropriate range values. loop prints histogram column.","code":"\n# create character vector of column names \nDateCols <- as.character(tidyselect::vars_select(names(linelist), matches(\"date|Date|dt\")))\n\n# Produce histogram of each date column\nfor (Col in DateCols) {     # open loop. iterate for each name in vector DateCols\n  hist(linelist[, Col],     # print histogram of the column in linelist dataframe\n       breaks = 50,         # number of breaks for the histogram\n       xlab = Col)          # x-axis label is the name of the column\n  }                         # close the loop"},{"path":"epidemic-curves.html","id":"incidence-package","chapter":"29 Epidemic curves","heading":"29.3 incidence package","text":"tabs making quick epicurves using incidence packageCAUTION: Epicontacts expects data “linelist” format one row per case (aggregated). data aggregated counts, look ggplot epicurves tab.TIP: documentation plotting incidence object can accessed entering ?plot.incidence R console.https://cran.r-project.org/web/packages/incidence/vignettes/customize_plot.html#example-data-simulated-ebola-outbreak","code":""},{"path":"epidemic-curves.html","id":"intro","chapter":"29 Epidemic curves","heading":"29.3.1 Intro","text":"2 steps requires plot epicurve incidence package:Create incidence object (using function incidence())\r\nProvide case linelist\r\nSpecify time interval cases aggregated (daily, weekly, monthly..)\r\nSpecify sub-groups\r\nProvide case linelistSpecify time interval cases aggregated (daily, weekly, monthly..)Specify sub-groupsPlot incidence object\r\nSpecify labels, aesthetic themes, etc.\r\nSpecify labels, aesthetic themes, etc.simple example - epicurve daily cases:Change time interval case aggregation (bars)interval argument defines observations grouped. Available options include options package aweek, including limited :“week” (Monday start day default)“2 weeks” (3, 4, 5…)“Sunday week”“2 Sunday weeks” (3, 4, 5…)“MMWRweek” (starts Sunday - see US CDC)“month” (1st month)“quarter” (1st month quarter)“2 months” (3, 4, 5…)“year” (1st day calendar year)examples different intervals look applied linelist.\r\nFormat frequency date labels x-axis defaults specified interval.","code":"\n# load incidence package\nlibrary(incidence)\n\n# create the incidence object using data by day\nepi_day   <- incidence(linelist$date_onset,  # the linelist data\n                       interval = \"day\")     # the time interval## 248 missing observations were removed.\n# plot the incidence object\nplot(epi_day)\n# Create the incidence objects (with different intervals)\n##############################\n# Weekly (Monday week by default)\nepi_wk      <- incidence(linelist$date_onset, interval = \"Monday week\")## 248 missing observations were removed.\n# Sunday week\nepi_Sun_wk  <- incidence(linelist$date_onset, interval = \"Sunday week\")## 248 missing observations were removed.\n# Three weeks (Monday weeks by default)\nepi_3wk     <- incidence(linelist$date_onset, interval = \"3 weeks\")## 248 missing observations were removed.\n# Monthly\nepi_month   <- incidence(linelist$date_onset, interval = \"month\")## 248 missing observations were removed.\n# Plot the incidence objects (+ titles for clarity)\n############################\nplot(epi_wk)+     labs(title = \"Monday weeks\")\nplot(epi_Sun_wk)+ labs(title = \"Sunday weeks\")\nplot(epi_3wk)+    labs(title = \"Every 3 Monday weeks\")\nplot(epi_month)+  labs(title = \"Months\")"},{"path":"epidemic-curves.html","id":"modifications","chapter":"29 Epidemic curves","heading":"29.3.2 Modifications","text":"incidence package enables modifications following ways:Arguments plot() (e.g. show_cases, col_pal, alpha…)scale_x_incidence() make_labels()ggplot() additions via + operatorRead details Help files entering ?scale_x_incidence ?plot.incidence R console. Online vignettes listed resources tab.","code":""},{"path":"epidemic-curves.html","id":"plot-modifications","chapter":"29 Epidemic curves","heading":"29.3.2.1 plot() modifications","text":"incidence plot can modified following ways. Type ?plot.incidence R console details.show_cases = TRUE, case shows box. Best smaller outbreaks.color = Color case bars/boxesborder = Color line around boxes, show_cases = TRUEalpha = Transparency case bars/boxes (1 fully opaque, 0 fully transparent)xlab = Title x-axis (axis labels can also applied using labs() ggplot)ylab = Title y-axis; defaults user-defined incidence time intervallabels_week = Logical, indicate whether x-axis labels week date format, absent modificationsn_breaks = Number x-axis label breaks, absent modificationsfirst_date, last_date Dates used trim plotSee examples arguments subsequent tabs.","code":""},{"path":"epidemic-curves.html","id":"filtered-data","chapter":"29 Epidemic curves","heading":"29.3.2.2 Filtered data","text":"plot epicurve subset data:Filter linelist dataFeed subset incidence() commandThe example uses data filtered show cases Central Hospital.","code":"\n# filter the dataset\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\")\n\n# create incidence object using subset of data\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"week\")## 15 missing observations were removed.\n# plot\nplot(central_outbreak) + labs(title = \"Weekly case incidence at Central Hospital\")"},{"path":"epidemic-curves.html","id":"date-axis-labelsgridlines","chapter":"29 Epidemic curves","heading":"29.3.2.3 Date-axis labels/gridlines","text":"TIP: Remember date-axis labels independent aggregation data barsModify bars\r\naggregation data bars occurs set interval = creating incidence object. options interval come package aweek include options like “day”, “Monday week”, “Sunday week”, “month”, “2 weeks”, etc. See incidence intro tab information.Modify date-axis labels (frequency & format)working incidence package, several options make modifications. utilize incidence package functions scale_x_date() make_breaks(), others use ggplot2 function scale_x_date(), others use combination.DANGER: cautious setting y-axis scale breaks (e.g. 0 30 5: seq(0, 30, 5)). Static numbers can cut-data data changes!.","code":""},{"path":"epidemic-curves.html","id":"option-1-scale_x_incidence-only","chapter":"29 Epidemic curves","heading":"29.3.2.3.1 Option 1: scale_x_incidence() only","text":"Add scale_x_incidence() incidence package:\r\nuse approach?\r\nAdvantages: Short code. Auto-adjusts weekly labels interval incidence object (Monday, Sunday weeks, etc.)\r\nDisadvantages: make fine adjustments label format minor vertical gridlines labels\r\n\r\nProvide name incidence object ensure labels align specified interval (e.g. Sundays Mondays)\r\noptional: n_breaks specify number date labels, start interval first case.\r\nbreaks every nth week, use n_breaks = nrow()/n (“” incidence object name “n” number)\r\n\r\noptional: labels_week labels formatted either weeks (YYYY-Www) dates (YYYY-MM-DD)\r\nOne vertical gridline appear per date label\r\nuse approach?\r\nAdvantages: Short code. Auto-adjusts weekly labels interval incidence object (Monday, Sunday weeks, etc.)\r\nDisadvantages: make fine adjustments label format minor vertical gridlines labels\r\nAdvantages: Short code. Auto-adjusts weekly labels interval incidence object (Monday, Sunday weeks, etc.)Disadvantages: make fine adjustments label format minor vertical gridlines labelsProvide name incidence object ensure labels align specified interval (e.g. Sundays Mondays)optional: n_breaks specify number date labels, start interval first case.\r\nbreaks every nth week, use n_breaks = nrow()/n (“” incidence object name “n” number)\r\nbreaks every nth week, use n_breaks = nrow()/n (“” incidence object name “n” number)optional: labels_week labels formatted either weeks (YYYY-Www) dates (YYYY-MM-DD)One vertical gridline appear per date labelOther notes:Type ?scale_x_incidence R console see information.incidence interval “month”, n_breaks labels_week behave differentlyAdding scale_x_date() plot remove labels created scale_x_incidenceNote plot first label 27 April 2014, Sunday first case (May 1), aligning Sunday weeks incidence object.","code":"\n# create weekly incidence object (Sunday weeks)\ni <- incidence(central_data$date_onset, interval = \"Sunday week\")## 15 missing observations were removed.\nplot(i)+\n  scale_x_incidence(i,                    # name of incidence object\n                    labels_week = F,      # show dates instead of weeks\n                    n_breaks = nrow(i)/8) # breaks every 8 weeks from week of first case## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"option-2-scale_x_date-and-make_breaks","chapter":"29 Epidemic curves","heading":"29.3.2.3.2 Option 2: scale_x_date() and make_breaks()","text":"Add scale_x_date() ggplot2, also leverage make_breaks() incidence:\r\nuse approach?\r\nAdvantages: Best worlds: weekly labels auto-aligned incidence interval, can make detailed adjustments label format\r\nDisadvantages: minor gridlines Sunday-week date labels desired, auto-aligned\r\n\r\ncreating incidence object, use make_breaks() define date label breaks\r\nmake_breaks() similar scale_x_incidence() (described ). Provide incidence object name optionally n_breaks described .\r\n\r\nAdd scale_x_date() plot:\r\nbreaks = provide breaks vector created make_breaks(), followed $breaks (see example )\r\ndate_labels = provide format date labels (e.g. “%d %b”) (use “” new line)\r\n\r\nuse approach?\r\nAdvantages: Best worlds: weekly labels auto-aligned incidence interval, can make detailed adjustments label format\r\nDisadvantages: minor gridlines Sunday-week date labels desired, auto-aligned\r\nAdvantages: Best worlds: weekly labels auto-aligned incidence interval, can make detailed adjustments label formatDisadvantages: minor gridlines Sunday-week date labels desired, auto-alignedAfter creating incidence object, use make_breaks() define date label breaks\r\nmake_breaks() similar scale_x_incidence() (described ). Provide incidence object name optionally n_breaks described .\r\nmake_breaks() similar scale_x_incidence() (described ). Provide incidence object name optionally n_breaks described .Add scale_x_date() plot:\r\nbreaks = provide breaks vector created make_breaks(), followed $breaks (see example )\r\ndate_labels = provide format date labels (e.g. “%d %b”) (use “” new line)\r\nbreaks = provide breaks vector created make_breaks(), followed $breaks (see example )date_labels = provide format date labels (e.g. “%d %b”) (use “” new line)","code":"\n# Break modification using scale_x_date() and make_breaks()\n###########################################################\n# make incidence object\ni <- incidence(central_data$date_onset, interval = \"Monday week\")## 15 missing observations were removed.\n# make breaks\ni_labels <-  make_breaks(i, n_breaks = nrow(i)/6) # using interval from i, breaks every 6 weeks\n\n# plot\nplot(i)+\n  scale_x_date(breaks      = i_labels$breaks, # call the breaks\n               date_labels = \"%d\\n%b '%y\",    # date format\n               date_minor_breaks = \"weeks\")   # gridlines each week (aligns with Sundays only)  ## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"option-3-use-scale_x_date-only","chapter":"29 Epidemic curves","heading":"29.3.2.3.3 Option 3: Use scale_x_date() only","text":"Use scale_x_date() \r\nAdvantages: Complete control breaks, labels, gridlines, plot width\r\nDisadvantages: code required, opportunity make mistakes.\r\nincidence intervals days Monday weeks, (easy!):\r\nProvide interval date_breaks = (e.g. “day”, “week”, “2 weeks”, “month”, “year”)\r\nProvide interval date_minor_breaks = vertical lines date labels\r\n\r\nincidence intervals Sunday weeks, complex - see tab Sunday week example\r\nProvide sequence Sunday dates breaks = minor_breaks =\r\n\r\nUse date_labels = formatting (see Dates page tips)\r\nAdd argument expand = c(0,0) start labels first incidence bar. Otherwise, first label shift depending specified label interval.\r\nAdvantages: Complete control breaks, labels, gridlines, plot widthDisadvantages: code required, opportunity make mistakes.incidence intervals days Monday weeks, (easy!):\r\nProvide interval date_breaks = (e.g. “day”, “week”, “2 weeks”, “month”, “year”)\r\nProvide interval date_minor_breaks = vertical lines date labels\r\nProvide interval date_breaks = (e.g. “day”, “week”, “2 weeks”, “month”, “year”)Provide interval date_minor_breaks = vertical lines date labelsIf incidence intervals Sunday weeks, complex - see tab Sunday week example\r\nProvide sequence Sunday dates breaks = minor_breaks =\r\nProvide sequence Sunday dates breaks = minor_breaks =Use date_labels = formatting (see Dates page tips)Add argument expand = c(0,0) start labels first incidence bar. Otherwise, first label shift depending specified label interval.*Note: using aggregated counts (example epiweek x-axis) x-axis may Date class may require use scale_x_discrete() instead scale_x_date() - see ggplot tips page details.","code":"\n# Break modification using scale_x_date() only\n##############################################\n# make incidence object\ni <- incidence(central_data$date_onset, interval = \"Monday week\")## 15 missing observations were removed.\n# plot\nplot(i)+\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n               date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n               date_labels       = \"%d\\n%b\\n'%y\")  # date labels format ## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"a-sunday-week-example","chapter":"29 Epidemic curves","heading":"29.3.2.3.4 A Sunday week example","text":"want plot Sunday weeks also finely-adjusted label formats, might find code example helpful.\r\nexample producing weekly epicurve using incidence Sunday weeks, finely-adjusted date labels scale_x_date():","code":"\n# load packages\npacman::p_load(tidyverse,  # for ggplot\n               incidence,  # for epicurve\n               lubridate)  # for floor_date() and ceiling_date()\n\n# create incidence object (specifying SUNDAY weeks)\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"Sunday week\") # equivalent to \"MMWRweek\" (see US CDC)## 15 missing observations were removed.\n# plot() the incidence object\nplot(central_outbreak)+                  \n  \n  ### ggplot() commands added to the plot\n  # scale modifications \n  scale_x_date(\n    expand = c(0,0),                 # remove excess x-axis space below and after case bars\n    \n    # sequence by 3 weeks, from Sunday before first case to Sunday after last case\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"3 weeks\"),\n    \n    # sequence by week, from Sunday before first case to Sunday after last case\n    minor_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                            to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                            by   = \"7 days\"),\n    # date labels\n    date_labels = \"%d\\n%b'%y\")+       # adjust how dates are displayed\n  \n  scale_y_continuous(\n    expand = c(0,0),                  # remove excess space under x-axis\n    breaks = seq(0, 30, 5))+          # adjust y-axis intervals\n  \n  # Aesthetic themes\n  theme_minimal()+                    # simplify background\n  theme(\n    axis.title = element_text(size = 12, face = \"bold\"),       # axis titles formatting\n    plot.caption = element_text(face = \"italic\", hjust = 0))+  # caption formatting, left-aligned\n  \n  # Plot labels\n  labs(x = \"Week of symptom onset (Sunday weeks)\", \n       y = \"Weekly case incidence\", \n       title = \"Weekly case incidence at Central Hospital\",\n       #subtitle = \"\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"show-individual-cases","chapter":"29 Epidemic curves","heading":"29.3.2.4 Show individual cases","text":"show boxes around individual case, use argument show_cases = TRUE plot() function.Boxes around case can reader-friendly, outbreak small size. Boxes can applied interval days, weeks, time period. code creates weekly epicurve smaller outbreak (cases Central Hospital), boxes around case.epicurve showing individual cases, aesthetic modifications:","code":"\n# create filtered dataset for Central Hospital\ncentral_data  <- linelist %>% \n  filter(hospital == \"Central Hospital\")\n\n# create incidence object (weekly)\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"Monday week\")## 15 missing observations were removed.\n# plot outbreak\nplot(central_outbreak,\n     show_cases = T)                 # show boxes around individual cases\n# add plot() arguments and ggplot() commands\nplot(central_outbreak,\n     show_cases = T,                 # show boxes around each individual case\n     color = \"lightblue\",            # color inside boxes\n     border = \"darkblue\",            # color of border around boxes\n     alpha = 0.5)+                    # transparency\n  \n  ### ggplot() commands added to the plot\n  # scale modifications\n  scale_x_date(\n    expand            = c(0,0),         # remove excess x-axis space below and after case bars\n    date_breaks       = \"4 weeks\",      # labels appear every 4 Monday weeks\n    date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n    date_labels       = \"%d\\n%b'%y\")+   # date labels format \n  \n  scale_y_continuous(\n    expand = c(0,0),              # remove excess space under x-axis\n    breaks = seq(0, 35, 5))+      # adjust y-axis intervals\n  \n  # aesthetic themes\n  theme_minimal()+                                                 # simplify background\n  \n  theme(\n    axis.title = element_text(size = 12, face = \"bold\"),       # axis title format\n    plot.caption = element_text(face = \"italic\", hjust = 0))+  # caption format and left-align\n  \n  # plot labels\n  labs(x = \"Week of symptom onset (Monday weeks)\", \n       y = \"Weekly reported cases\", \n       title = \"Weekly case incidence at Central Hospital\",\n       #subtitle = \"\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"color-by-value","chapter":"29 Epidemic curves","heading":"29.3.2.5 Color by value","text":"color cases value, provide column groups = argument incidence() command. example cases colored age category. Note use incidence() argument na_as_group =. TRUE (default) missing values (NA) form group.Adjusting orderTo adjust order group appearance (plot legend), group column must class Factor. Adjust order adjusting order levels (including NA). example gender groups using data Central Hospital .First, dataset defined gender re-defined factorThe order levels gender defined NA first, appears top barsMore appropriate labels defined factor level - appear legendThe argument exclude = NULL factor() necessary adjust order NA, excluded default.Title legend adjusted using fill = labs()can read factors page (LINK)","code":"\n# Create incidence object, with data grouped by age category\nage_outbreak <- incidence(linelist$date_onset,            # date of onset for x-axis\n                               interval = \"week\",         # weekly aggregation of cases\n                               groups = linelist$age_cat, # color by age_cat value\n                               na_as_group = TRUE)        # missing values assigned their own group## 248 missing observations were removed.\n# plot the epicurve\nplot(age_outbreak) \n# Create incidence object, data grouped by gender\n#################################################\n\n# Classify \"gender\" column as factor\n####################################\n# with specific level order and labels, includin for missing values\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\") %>% \n  mutate(gender = factor(gender,\n                         levels = c(NA, \"f\", \"m\"),\n                         labels = c(\"Missing\", \"Female\", \"Male\"),\n                         exclude = NULL))\n\n# Create incidence object, by gender\n####################################\ngender_outbreak_central <- incidence(central_data$date_onset, \n                                     interval = \"week\", \n                                     groups = central_data$gender,\n                                     na_as_group = TRUE)   # Missing values assigned their own group## 15 missing observations were removed.\n# plot epicurve with modifications\n##################################\nplot(gender_outbreak_central,\n     show_cases = TRUE)+                            # show box around each case\n     \n     ### ggplot commands added to plot\n     # scale modifications\n     scale_x_date(expand = c(0,0),\n                  date_breaks = \"6 weeks\",\n                  date_minor_breaks = \"week\",\n                  date_labels = \"%d %b\\n%Y\")+\n  \n     # aesthetic themes\n     theme_minimal()+                               # simplify plot background\n     theme(\n       legend.title = element_text(size = 14, face = \"bold\"),\n       axis.title = element_text(face = \"bold\"))+   # axis title bold\n     \n      # plot labels\n      labs(fill = \"Gender\",                         # title of legend\n           title = \"Show case boxes, with modifications\",\n           y = \"Weekly case incidence\",\n           x = \"Week of symptom onset\")      ## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale."},{"path":"epidemic-curves.html","id":"change-colors-and-legend","chapter":"29 Epidemic curves","heading":"29.3.2.6 Change colors and legend","text":"change legend\r\nUse ggplot() commands :theme(legend.position = \"top\") (“bottom”, “left”, “right”)theme(legend.direction = \"horizontal\")theme(legend.title = element_blank()) titleSee page ggplot() tips details legends.specify colors manually, provide name color character vector multiple colors argument color =. Note function properly number colors listed must equal number groups (aware missing values group)change color palette\r\nUse argument col_pal plot() change color palette one default base R palettes (put name palette quotes).palettes include add page palette names… ","code":"\n# weekly outbreak by hospital\nhosp_outbreak <- incidence(linelist$date_onset, \n                               interval = \"week\", \n                               groups = linelist$hospital,\n                               na_as_group = FALSE)   # Missing values not assigned their own group## 248 missing observations were removed.\n# default colors\nplot(hosp_outbreak)\n\n# manual colors\nplot(hosp_outbreak, color = c(\"darkgreen\", \"darkblue\", \"purple\", \"grey\", \"yellow\", \"orange\"))\n# Create incidence object, with data grouped by age category\nage_outbreak <- incidence(linelist$date_onset,            # date of onset for x-axis\n                               interval = \"week\",         # weekly aggregation of cases\n                               groups = linelist$age_cat, # color by age_cat value\n                               na_as_group = TRUE)        # missing values assigned their own group## 248 missing observations were removed.\n# plot the epicurve\nplot(age_outbreak)\n\n# plot with different color palette\nplot(age_outbreak, col_pal = rainbow)"},{"path":"epidemic-curves.html","id":"facetssmall-multiples","chapter":"29 Epidemic curves","heading":"29.3.2.7 Facets/small multiples","text":"facet plot variable (make “small multiples”), see tab epicurves ggplot()","code":""},{"path":"epidemic-curves.html","id":"ggplot","chapter":"29 Epidemic curves","heading":"29.4 ggplot()","text":"tabs using ggplot2 package produce epicurves linelist dataset.Unlike using incidence package, must manually control aggregation data (weeks, months, etc) labels date axis. carefully managed, can lead many headaches.tabs use subset linelist dataset - cases Central Hospital.","code":"\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\")"},{"path":"epidemic-curves.html","id":"intro-1","chapter":"29 Epidemic curves","heading":"29.4.1 Intro","text":"produce epicurve ggplot() three main elements:histogram, aggregate linelisted cases “bins” display bars counts per bin (potentially grouped values)Scales axes associated labels (see tab modifications)Aesthetic themes plot, including titles, labels, captions, etc.perhaps simple code produce daily weekly epicurves. Axis scales labels use default options.CAUTION: Using binwidth = 7 starts first bin first case, day week! create specific Monday Sunday weeks, see .create weekly epicurves bins begin specific day week (e.g. Monday, Sunday), specify histogram breaks = manually (binwidth). can done creating sequence dates using seq.Date() base R. can start/end sequence specific date (.Date(\"YYYY-MM-DD\"), write flexible code begin sequence specific day week first case. example creating weekly breaks :achieve “” value (earliest date sequence), minimum value column date_onset fed floor_date() lubridate package, according specified arguments produces start date “week”, given start week Monday (week_start = 1). Likewise, “” value (end date sequence) specified using inverse ceiling_date() function produce Monday last case. “” argument can set length days, weeks, months.code applied create histogram breaks, also breaks date labels. Read date labels Modifications tab. Defining breaks like necessary weekly bins Monday weeks.detailed code produce weekly epicurves Monday Sunday weeks. See tab Modifications (axes) learn nuances date-axis label management.Monday weeksOf note:break points histogram bins specified manually begin Monday (week_start = 1) earliest case end Monday last case (see explanation ).breaks date labels x-axis - bins Monday weeks code uses date_breaks = within scale_x_date(), also uses Monday weeks. Sunday weeks use different method.Minor vertical gridlines date labels made using date_minor_breaks = within scale_x_date(), plot Monday weeks. Sunday weeks use different method.Adding expand = c(0,0) x y scales removes excess space side plot, also ensures labels begin first bar.Color fill defined geom_histogram()Sunday weeksThe code creates histogram rows, using date column x-axis. note:break points histogram bins specified manually begin Sunday (week_start = 7) earliest case end Monday last case (see explanation ).breaks date labels x-axis vertical gridlines - bins Monday weeks, manually specified vectors dates given breaks = minor_breaks = within scale_x_date(). use scale_x_date() arguments date_breaks date_minor_breaks align Monday weeks.Adding expand = c(0,0) x y scales removes excess space side plot, also ensures labels begin first bar.Color fill defined geom_histogram()","code":"\n# daily \nggplot(data = central_data, aes(x = date_onset)) +  # x column must be class Date\n  geom_histogram(binwidth = 1)+                     # date values binned by 1 day \n  labs(title = \"Daily\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# weekly\nggplot(data = central_data, aes(x = date_onset)) +  \n  geom_histogram(binwidth = 7)+                     # date values binned each 7 days (arbitrary 7 days!) \n  labs(title = \"Weekly\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\nseq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n         to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n         by   = \"7 days\")\n# TOTAL MONDAY WEEK ALIGNMENT\n#############################\nggplot(central_data, aes(x = date_onset)) + \n  # make histogram: specify bin break points: starts the Monday before first case, end Monday after last case\n  geom_histogram(\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n                      by   = \"7 days\"), # bins are 7-days\n    color = \"darkblue\",   # color of lines around bars\n    fill = \"lightblue\") + # color of fill within bars\n  \n  # x-axis labels\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n               date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n               date_labels       = \"%d\\n%b\\n'%y\")+ # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+             # remove excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"))+               # axis titles in bold\n  \n  # labels\n  labs(title    = \"Weekly incidence of cases (Monday weeks)\",\n       subtitle = \"Subtitle: Note alignment of bars, vertical lines, and axis labels on Mondays\",\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# TOTAL SUNDAY WEEK ALIGNMENT\n#############################\nggplot(central_data, aes(x = date_onset)) + \n  \n  # For histogram, manually specify bin break points: starts the Sunday before first case, end Sunday after last case\n  geom_histogram(                    \n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"7 days\"), # bins are 7-days\n    color = \"darkblue\",   # color of lines around bars\n    fill = \"lightblue\") + # color of fill within bars\n  \n  # The labels on the x-axis\n  scale_x_date(expand = c(0,0),\n               breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                                 to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                                 by   = \"3 weeks\"),\n               minor_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                                       to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                                       by   = \"7 days\"),\n               date_labels = \"%d\\n%b\\n'%y\")+             # day, above month abbrev., above 2-digit year\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"))+               # axis titles in bold\n  \n  # labels\n  labs(title    = \"Weekly incidence of cases (Sunday weeks)\",\n       subtitle = \"Subtitle: Note alignment of bars, vertical lines, and axis labels on Sundays\",\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Warning: Removed 15 rows containing non-finite values (stat_bin)."},{"path":"epidemic-curves.html","id":"modifications-1","chapter":"29 Epidemic curves","heading":"29.4.2 Modifications","text":"","code":""},{"path":"epidemic-curves.html","id":"modify-axes","chapter":"29 Epidemic curves","heading":"29.4.2.1 Modify axes","text":"TIP: Remember date-axis labels independent aggregation data barsTo modify aggregation data bins/bars, one following:Specify binwidth = within geom_histogram() - column class Date, given number interpreted daysSpecify breaks = sequence bin break-point datesGroup rows aggregated counts (week, month, etc.) feed aggregated counts ggplot(). See tab aggregated counts information.modify date labels, use scale_x_date() one ways:histogram bins days, Monday weeks, months, years:\r\nUse date_breaks = specify label frequency (e.g. “day”, “week”, “3 weeks”, “month”, “year”)\r\nUse date_minor_breaks = specify frequency minor vertical gridlines date labels\r\nAdd expand = c(0,0) begin labels first bar (otherwise, first label shift forward depending specified frequency)\r\nUse date_labels = specify format date labels - see Dates page tips (use \\n new line)\r\nUse date_breaks = specify label frequency (e.g. “day”, “week”, “3 weeks”, “month”, “year”)Use date_minor_breaks = specify frequency minor vertical gridlines date labelsAdd expand = c(0,0) begin labels first bar (otherwise, first label shift forward depending specified frequency)Use date_labels = specify format date labels - see Dates page tips (use \\n new line)histogram bins Sunday weeks:\r\nUse breaks = minor_breaks = providing sequence dates breaks\r\ncan still use date_labels = formatting described \r\nUse breaks = minor_breaks = providing sequence dates breaksYou can still use date_labels = formatting described aboveTo create sequence dates\r\ncan use seq.Date() base R. can start/end sequence specific date (.Date(\"YYYY-MM-DD\"), write flexible code begin sequence specific day week first case. example creating flexible breaks :achieve “” value (earliest date sequence), minimum value column date_onset fed floor_date() lubridate package, according specified arguments produces start date “week”, given start week Monday (week_start = 1). Likewise, “” value (end date sequence) specified using inverse ceiling_date() function produce Monday last case. “” argument can set length days, weeks, months.using aggregated counts (example epiweek x-axis) x-axis may Date class may require use scale_x_discrete() instead scale_x_date() - see ggplot tips page details.Set maximum minimum date values using limits = c() within scale_x_date(). E.g. scale_x_date(limits = c(.Date(\"2014-04-01), NA)) sets minimum leaves maximum open.CAUTION: Caution using limits! remove data outside limits, can impact y-axis max/min, modeling, statistics. Strongly consider instead using limits adding coord_cartesian() plot, acts “zoom” without removing data. DANGER: cautious setting y-axis scale breaks (e.g. 0 30 5: seq(0, 30, 5)). Static numbers can cut-data data changes!.https://rdrr.io/r/base/strptime.html —– see % shortcutsBelow demonstration plots bins plot labels/gridlines aligned aligned:\r\nClick “Code” see code","code":"\nseq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n         to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n         by   = \"7 days\")\n# 7-day binwidth defaults\n#################\nggplot(central_data, aes(x = date_onset)) + # x column must be class Date\n  geom_histogram(\n    binwidth = 7,                       # 7 days per bin (! starts at first case!)\n    color = \"darkblue\",                 # color of lines around bars\n    fill = \"lightblue\") +               # color of bar fill\n  \n  labs(\n    title = \"MISALIGNED\",\n    subtitle = \"!CAUTION: 7-day bars start Thursdays with first case\\ndefault axis labels/ticks not aligned\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# 7-day bins + Monday labels\n#############################\nggplot(central_data, aes(x = date_onset)) +\n  geom_histogram(\n    binwidth = 7,                 # 7-day bins with start at first case\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n  \n  scale_x_date(\n    expand = c(0,0),               # remove excess x-axis space below and after case bars\n    date_breaks = \"3 weeks\",       # Monday every 3 weeks\n    date_minor_breaks = \"week\",    # Monday weeks\n    date_labels = \"%d\\n%b\\n'%y\")+  # label format\n  \n  scale_y_continuous(\n    expand = c(0,0))+              # remove excess space under x-axis, make flush with labels\n  \n  labs(\n    title = \"MISALIGNED\",\n    subtitle = \"!CAUTION: 7-day bars start Thursdays with first case\\nDate labels and gridlines on Mondays\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# 7-day bins + Months\n#####################\nggplot(central_data, aes(x = date_onset)) +\n  geom_histogram(\n    binwidth = 7,\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n  \n  scale_x_date(\n    expand = c(0,0),                 # remove excess x-axis space below and after case bars\n    date_breaks = \"months\",          # 1st of month\n    date_minor_breaks = \"week\",      # Monday weeks\n    date_labels = \"%d\\n%b\\n'%y\")+    # label format\n  \n  scale_y_continuous(\n    expand = c(0,0))+                # remove excess space under x-axis, make flush with labels\n  \n  labs(\n    title = \"MISALIGNED\",\n    subtitle = \"!CAUTION: 7-day bars start Thursdays with first case\\nGridlines at 1st of each month (with labels) and weekly on Mondays\\nLabels on 1st of each month\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# TOTAL MONDAY ALIGNMENT: specify manual bin breaks to be mondays\n#################################################################\nggplot(central_data, aes(x = date_onset)) + \n  geom_histogram(\n    # histogram breaks set to 7 days beginning Monday before first case\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") + \n  \n  scale_x_date(\n    expand = c(0,0),                   # remove excess x-axis space below and after case bars\n    date_breaks = \"3 weeks\",           # Monday every 3 weeks\n    date_minor_breaks = \"week\",        # Monday weeks \n    date_labels = \"%d\\n%b\\n'%y\")+      # label format\n  \n  labs(\n    title = \"ALIGNED Mondays\",\n    subtitle = \"7-day bins manually set to begin Monday before first case (28 Apr)\\nDate labels and gridlines on Mondays as well\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# TOTAL SUNDAY ALIGNMENT: specify manual bin breaks AND labels to be Sundays\n############################################################################\nggplot(central_data, aes(x = date_onset)) + \n  geom_histogram(\n    # histogram breaks set to 7 days beginning Sunday before first case\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") + \n  \n  scale_x_date(\n    expand = c(0,0),\n    # date label breaks set to every 3 weeks beginning Sunday before first case\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"3 weeks\"),\n    # gridlines set to weekly beginning Sunday before first case\n    minor_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                            to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                            by   = \"7 days\"),\n    date_labels = \"%d\\n%b\\n'%y\")+  # label format\n  \n  labs(title = \"ALIGNED Sundays\",\n       subtitle = \"7-day bins manually set to begin Sunday before first case (27 Apr)\\nDate labels and gridlines manually set to Sundays as well\")## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# Check values of bars by creating dataframe of grouped values\n# central_tab <- central_data %>% \n#   mutate(week = aweek::date2week(date_onset, floor_day = TRUE, factor = TRUE)) %>% \n#   group_by(week, .drop=F) %>%\n#   summarize(n = n()) %>% \n#   mutate(groups_3wk = 1:(nrow(central_tab)+1) %/% 3) %>% \n#   group_by(groups_3wk) %>% \n#   summarize(n = n())"},{"path":"epidemic-curves.html","id":"color-by-groups","chapter":"29 Epidemic curves","heading":"29.4.2.2 Color by groups","text":"Designate column containing groupsIn code template (Sunday weeks, Monday weeks), make following changes:Add aesthetics argument aes() within geom_histogram() (don’t forget comma afterward)Within aes(), provide grouping column name group = fill = (quotes needed). group necessary, fill changes color bar.Remove fill = argument outside aes(), override one insideArguments inside aes() apply group, whereas outside apply bars (e.g. may want color = outside, bar color perimeter/border)Adjust colors:manually adjust bar fill color group, use scale_fill_manual() (note scale_color_manual() different!).\r\nUse values = argument apply vector colors.\r\nUse na.value = specify color missing values.\r\n! can use labels = argument scale_fill_manual() change legend text labels - easy accidentally give labels incorrect order incorrect legend! recommended instead convert group column class Factor designate factor labels order, explained .\r\nUse values = argument apply vector colors.Use na.value = specify color missing values.! can use labels = argument scale_fill_manual() change legend text labels - easy accidentally give labels incorrect order incorrect legend! recommended instead convert group column class Factor designate factor labels order, explained .adjust colors via color scale, see page ggplot tipsAdjust stacking order LegendStacking order, labels group legend, best adjusted classifying group column class Factor. can designate levels labels, order (reflected stack order).Step 1: making ggplot, convert group column class Factor using factor() base R.\r\nexample, column “gender” values “m” “f” NA, can put mutate() command :code establishes levels, ordering missing values “first” (appear top). labels show given order. Lastly, exclude statement ensures NA included ordering (default factor() ignores NA).Read factors dedicated handbook page (LINK).Adjusting legendRead legends ggplot tips page. highlights:theme(legend.position = \"top\") (“bottom”, “left”, “right”)theme(legend.direction = \"horizontal\")theme(legend.title = element_blank()) titleSee page ggplot() tips details legends.steps shown example :Click “Code” see codeDisplay bars side--sideSide--side display group bars (opposed stacked) specified within geom_histogram() position = \"dodge\".\r\ntwo value groups, can become difficult read. Consider instead using faceted plot (small multiples) (see tab). improve readability example, missing gender values removed.Click “Code” see code","code":"geom_histogram(\r\n    aes(group = gender, fill = gender))dataset <- dataset %>% \r\n  mutate(gender = factor(gender,\r\n                    levels = c(NA, \"f\", \"m\"),\r\n                    labels = c(\"Missing\", \"Female\", \"Male\"),\r\n                    exclude = NULL))\n########################\n# bin break points for histogram defined here for clarity\n# starts the Monday before first case, end Monday after last case\nbin_breaks = seq.Date(\n  from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n  to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n  by   = \"7 days\") # bins are 7-days\n\n# Set gender as factor and missing values as first level (to show on top)\ncentral_data <- linelist %>%\n  filter(hospital == \"Central Hospital\") %>% \n  mutate(gender = factor(\n    gender,\n    levels = c(NA, \"f\", \"m\"),\n    labels = c(\"Missing\", \"Female\", \"Male\"),\n    exclude = NULL))  \n\n# make plot\n###########\nggplot(central_data, aes(x = date_onset)) + \n  geom_histogram(\n    aes(group = gender, fill = gender),    # arguments inside aes() apply by group\n    color = \"black\",                       # arguments outside aes() apply to all data\n    breaks = bin_breaks)+                  # see breaks defined above\n                      \n  \n  # The labels on the x-axis\n  scale_x_date(\n    expand            = c(0,0),         # remove excess x-axis space below and after case bars\n    date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n    date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n    date_labels       = \"%d\\n%b\\n'%y\")+ # date labels format\n  \n  # y-axis\n  scale_y_continuous(\n    expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  #scale of colors and legend labels\n  scale_fill_manual(\n    values = c(\"grey\", \"orange\", \"purple\"))+ # specify fill colors (\"values\") - attention to order!\n\n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(\n    plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n    axis.title = element_text(face = \"bold\"))+               # axis titles in bold\n  \n  # labels\n  labs(\n    title    = \"Weekly incidence of cases, by gender\",\n    subtitle = \"Subtitle\",\n    fill     = \"Gender\",                                      # provide new title for legend\n    x        = \"Week of symptom onset\",\n    y        = \"Weekly incident cases reported\",\n    caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Warning: Removed 15 rows containing non-finite values (stat_bin).\n########################\n# bin break points for histogram defined here for clarity\n# starts the Monday before first case, end Monday after last case\nbin_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n                      by   = \"7 days\") # bins are 7-days\n\n# New dataset without rows missing gender\ncentral_data_dodge <- linelist %>% \n  filter(hospital == \"Central Hospital\") %>% \n  filter(!is.na(gender)) %>%                            # remove rows missing gender\n  mutate(gender = factor(gender,                        # factor now has only two levels (missing not included)\n                         levels = c(\"f\", \"m\"),\n                         labels = c(\"Female\", \"Male\")))  \n\n# make plot\n###########\nggplot(central_data_dodge, aes(x = date_onset)) + \n    geom_histogram(\n        aes(group = gender, fill = gender),    # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks,\n        position = \"dodge\")+                  # see breaks defined above\n                      \n  \n  # The labels on the x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n               date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n               date_labels       = \"%d\\n%b\\n'%y\")+ # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  #scale of colors and legend labels\n  scale_fill_manual(values = c(\"pink\", \"lightblue\"))+     # specify fill colors (\"values\") - attention to order!\n\n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"))+               # axis titles in bold\n  \n  # labels\n  labs(title    = \"Weekly incidence of cases, by gender\",\n       subtitle = \"Subtitle\",\n       fill     = \"Gender\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Warning: Removed 14 rows containing non-finite values (stat_bin)."},{"path":"epidemic-curves.html","id":"facetingsmall-multiples","chapter":"29 Epidemic curves","heading":"29.4.2.3 Faceting/small-multiples","text":"ggplots, can create facetted plots (“small multiples”) values column. explained ggplot tips page handbook, can use either:facet_wrap()facet_grid()epicurves, facet_wrap() typically easiest likely need facet one column. general syntax facet_wrap(rows ~ cols), left tilde (~) name column spread across “rows” new plot, right tilde name column spread across “columns” new plot.simply, just use one column name, right tilde: facet_wrap(~age_cat).Free axes\r\nneed decide whether scales (scales =) axes facet “fixed” dimensions (default), “free” (meaning change based data within facet). can also specify “free_x” “free_y” release one dimension.Number cols rows\r\ncan specified ncol = nrow = within facet_wrap().Order panels\r\nchange order appearance, change underlying order levels factor column used create facets.Aesthetics\r\nFont size face, strip color, etc. can modified theme() arguments like:strip.text = element_text() (size, colour, face, angle…)strip.background = element_rect() (e.g. element_rect(fill=“red”))position strip can modified strip.position = argument within facet_wrap() (e.g. “bottom”, “top”, “left”, “right”)Strip labels\r\nLabels facet plots can modified “labels” column factor, use “labeller”.Make labeller like , using function as_labeller() ggplot2:example plot\r\nFaceted column age_cat. Click “Code” see code.See link information labellers.Add total epidemic background\r\nAdd separate geom_histogram() command current one. Specify data used data without column used faceting (see select()). , specify color like “grey” degree transparency make appear background.Note y-axis maximum now based height entire epidemic. Click “Code” see code.Create one facet data\r\n, duplicate data (double number rows dataset) faceted column new value (e.g. “”) indicates duplicated rows. helped function enables :Notable changes ggplot command :data used now central_data2 (double rows, new column “facet”)Labeller need updated, usedTo achieve long/thin plot, facet variable moved rows side equation, replaced “.” facet_wrap(facet~.), ncol = 1You may also need adjust width height save plot image (see ggsave()).","code":"\nmy_labels <- as_labeller(c(\n     \"0-4\"   = \"Ages 0-4\",\n     \"5-9\"   = \"Ages 5-9\",\n     \"10-14\" = \"Ages 10-14\",\n     \"15-19\" = \"Ages 15-19\",\n     \"20-29\" = \"Ages 20-29\",\n     \"30-49\" = \"Ages 30-49\",\n     \"50-69\" = \"Ages 50-69\",\n     \"70+\"   = \"Over age 70\"))\n# make plot\n###########\nggplot(central_data, aes(x = date_onset)) + \n  \n  geom_histogram(\n        aes(group = age_cat, fill = age_cat),    # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks)+                  # see breaks defined above\n                      \n    \n  \n  # The labels on the x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"2 months\",     # labels appear every 2 months\n               date_minor_breaks = \"1 month\",      # vertical lines appear every 1 month \n               date_labels       = \"%b\\n'%y\")+     # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\",\n        strip.text = element_text(face = \"bold\", size = 10),\n        strip.background = element_rect(fill = \"grey\"))+               # axis titles in bold\n  \n  # create facets\n  facet_wrap(~age_cat,\n             ncol = 4,\n             strip.position = \"top\",\n             labeller = my_labels)+             \n  \n  # labels\n  labs(title    = \"Weekly incidence of cases, by age category\",\n       subtitle = \"Subtitle\",\n       fill     = \"Age category\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Warning: Removed 15 rows containing non-finite values (stat_bin).geom_histogram(data = select(central_data, -age_cat), color = \"grey\", alpha = 0.5)+\nggplot(central_data, aes(x = date_onset)) + \n  \n  # for background shadow of whole outbreak\n  geom_histogram(data = select(central_data, -age_cat), color = \"grey\", alpha = 0.5)+\n\n  # actual epicurves by group\n  geom_histogram(\n        aes(group = age_cat, fill = age_cat),  # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks)+                  # see breaks defined above\n                      \n  # Labels on x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"2 months\",     # labels appear every 2 months\n               date_minor_breaks = \"1 month\",      # vertical lines appear every 1 month \n               date_labels       = \"%b\\n'%y\")+     # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\",\n        strip.text = element_text(face = \"bold\", size = 10),\n        strip.background = element_rect(fill = \"white\"))+               # axis titles in bold\n  \n  # create facets\n  facet_wrap(~age_cat,                          # each plot is one value of age_cat\n             ncol = 4,                          # number of columns\n             strip.position = \"top\",            # position of the facet title/strip\n             labeller = my_labels)+             # labeller defines above\n  \n  # labels\n  labs(title    = \"Weekly incidence of cases, by age category\",\n       subtitle = \"Subtitle\",\n       fill     = \"Age category\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.## Warning: Removed 105 rows containing non-finite values (stat_bin).## Warning: Removed 15 rows containing non-finite values (stat_bin).\n# Define helper function\nCreateAllFacet <- function(df, col){\n     df$facet <- df[[col]]\n     temp <- df\n     temp$facet <- \"all\"\n     merged <-rbind(temp, df)\n     \n     # ensure the facet value is a factor\n     merged[[col]] <- as.factor(merged[[col]])\n     \n     return(merged)\n}\n\n# Create dataset that is duplicated, to show \"all zones\" as another facet level\ncentral_data2 <- CreateAllFacet(central_data, col = \"age_cat\") %>%\n  mutate(facet = factor(facet,\n                        levels = c(\"all\", \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-29\", \"30-49\", \"50-69\", \"70+\")))\n\n# check\ntable(central_data2$facet, useNA = \"always\")## \r\n##   all   0-4   5-9 10-14 15-19 20-29 30-49 50-69   70+  <NA> \r\n##   454    84    87    77    73    84    37     0     0    12\nggplot(central_data2, aes(x = date_onset)) + \n  \n  # actual epicurves by group\n  geom_histogram(\n        aes(group = age_cat, fill = age_cat),  # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks)+                  # see breaks defined above\n                      \n  # Labels on x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"2 months\",     # labels appear every 2 months\n               date_minor_breaks = \"1 month\",      # vertical lines appear every 1 month \n               date_labels       = \"%b\\n'%y\")+     # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\")+               \n  \n  # create facets\n  facet_wrap(facet~. ,                            # each plot is one value of facet\n             ncol = 1)+            \n\n  # labels\n  labs(title    = \"Weekly incidence of cases, by age category\",\n       subtitle = \"Subtitle\",\n       fill     = \"Age category\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))## Warning: Removed 30 rows containing non-finite values (stat_bin)."},{"path":"epidemic-curves.html","id":"moving-averages-1","chapter":"29 Epidemic curves","heading":"29.4.2.4 Moving averages","text":"Add moving averages ggplot() epicurve one two ways:Plot pre-calculated moving average:\r\nAggregate data necessary (daily, weekly, etc.)\r\nCalculate moving average\r\nAdd moving average ggplot (e.g. geom_line())\r\nAggregate data necessary (daily, weekly, etc.)Calculate moving averageAdd moving average ggplot (e.g. geom_line())Calculate --fly within ggplot() command","code":""},{"path":"epidemic-curves.html","id":"using-slider","chapter":"29 Epidemic curves","heading":"29.4.2.4.1 Using slider","text":"approach, moving average calculated dataset prior plotting:Within mutate(), new column created hold average. slide_index() slider package used shown .ggplot(), geom_line() added histogram, reflecting moving average.See helpful online vignette slider package","code":"\npacman::p_load(slider)  # slider used to calculate rolling averages\n\n# make dataset of daily counts and 7-day moving average\n#######################################################\nll_counts_7day <- linelist %>% \n  ## count cases by date\n  count(date_onset,\n        name = \"new_cases\") %>%   # name of new column\n  filter(!is.na(date_onset)) %>%  # remove cases with missing date_onset\n  \n  ## calculate the average number of cases in the preceding 7 days\n  mutate(\n    avg_7day = slider::slide_index(    # create new column\n      new_cases,                       # calculate based on value in new_cases column\n      .i = date_onset,                 # index is date_onset col, so non-present dates are included in window \n      .f = ~mean(.x, na.rm = TRUE),    # function is mean() with missing values removed\n      .before = 6,                     # window is the day and 6-days before\n      .complete = FALSE),              # must be FALSE for unlist() to work in next step\n    avg_7day = unlist(avg_7day))\n\n\n# plot\n######\nggplot(data = ll_counts_7day, aes(x = date_onset)) +\n    geom_histogram(aes(y = new_cases),\n                   fill=\"#92a8d1\",\n                   stat = \"identity\",\n                   position = \"stack\",\n                   colour = \"#92a8d1\")+ \n    geom_line(aes(y = avg_7day, lty = \"7-day \\nrolling avg\"),\n              color=\"red\",\n              size = 1) + \n    scale_x_date(date_breaks = \"1 month\",\n                 date_labels = '%d/%m',\n                 expand = c(0,0)) +\n    scale_y_continuous(expand = c(0,0),\n                       limits = c(0, NA)) + \n    labs(x=\"\",\n         y =\"Number of confirmed cases\",\n         fill = \"Legend\")+ \n    theme_minimal()+\n    theme(legend.title = element_blank())  # removes title of legend## Warning: Ignoring unknown parameters: binwidth, bins, pad"},{"path":"epidemic-curves.html","id":"using-tidyquant","chapter":"29 Epidemic curves","heading":"29.4.2.4.2 Using tidyquant","text":"Using tidyquant package calculate moving average --fly (within ggplot()).option difficult modify pre-calculating moving average. default,geom_ma() uses Simple Moving Average (SMA) (TRR::SMA()). See documentation entering ?SMA R console. Calculates arithmatic mean past n observations. Also note moving average begin early previous example.","code":"\nlibrary(tidyquant)\n\n# make daily count data\n#######################\nll_counts_7day <- linelist %>% \n  count(date_onset, name = \"daily_cases\")\n\n\n# plot\n######\nggplot(data = ll_counts_7day,   # use daily count data\n       aes(x = date_onset,      # date x-axis\n           y = daily_cases))+   # counts\n  \n  # histogram in the background\n  geom_histogram(stat = \"identity\",    # height = value in the cell, not number of rows\n                 color = \"#92a8d1\",    # color of lines within histogram\n                 fill = \"#92a8d1\")+    # color of histogram\n  \n  # moving average line\n  tidyquant::geom_ma(n = 7,            # window width\n                     size = 2,         # line size\n                     color = \"black\",  # line color\n                     lty = \"solid\"     # line type ()\n                     )+\n     \n  # labels for x-axis\n  scale_x_date(date_breaks = \"2 months\",      # labels every 2 months \n               date_minor_breaks = \"1 month\", # gridlines every month\n               date_labels = '%b\\n%Y')+       #labeled by month with year below\n     \n  # Choose color palette (uses RColorBrewer package)\n  scale_fill_brewer(palette = \"Pastel2\")+ \n  \n  theme_minimal()+\n  \n  labs(x = \"Date of onset\", \n       y = \"Daily case incidence\",\n       title = \"Daily case incidence, with 7-day moving average\")## Warning: Ignoring unknown parameters: binwidth, bins, pad## Warning: Removed 1 rows containing missing values (position_stack)."},{"path":"epidemic-curves.html","id":"tentative-data","chapter":"29 Epidemic curves","heading":"29.4.2.5 Tentative data","text":"recent data shown epicurves often marked tentative, subject reporting delays. can done adding vertical line /rectangle specified number days. two options:Use annotate():Pros: Transparency rectangle easy. Cons: Items appear legend.line use annotate(geom = \"segment\"). Provide x, xend, y, yend. Adjust size, linetype (lty), color.rectangle use annotate(geom = \"rect\"). Provide xmin/xmax/ymin/ymax. Adjust color alpha.Use geom_segment() geom_rect():Pros: Items can easily appear legend. Cons: Difficult achieve semi-transparency rectangle.Provide x/y arguments noted annotate()CAUTION: can use geom_rect() draw rectangle, adjusting transparency (alpha) work linelist context. function overlays rectangle observation/row!. Try low alpha (e.g. 0.01), use annotate(geom = \"rect\") shown. ","code":""},{"path":"epidemic-curves.html","id":"using-annotate","chapter":"29 Epidemic curves","heading":"29.4.2.5.1 Using annotate()","text":"Within annotate(geom = \"rect\"), xmin xmax arguments must given inputs class Date.Note data aggregated weekly bars, last bar extends Monday last data point, shaded region may appear cover 4 weeksannotate() online exampleThe black vertical line can achieved code , using geom_vline() lose ability control height:","code":"\nggplot(central_data, aes(x = date_onset)) + \n  \n  # histogram\n  geom_histogram(\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n\n  # scales\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_date(\n    expand = c(0,0),                   # remove excess x-axis space below and after case bars\n    date_breaks = \"1 month\",           # 1st of month\n    date_minor_breaks = \"1 month\",     # 1st of month\n    date_labels = \"%b\\n'%y\")+          # label format\n  \n  # labels and theme\n  labs(title = \"Using annotate()\\nRectangle and line showing that data from last 21-days are tentative\",\n    x = \"Week of symptom onset\",\n    y = \"Weekly case indicence\")+ \n  theme_minimal()+\n  \n  # add semi-transparent red rectangle to tentative data\n  annotate(\"rect\",\n           xmin  = as.Date(max(central_data$date_onset, na.rm = T) - 21), # note must be wrapped in as.Date()\n           xmax  = as.Date(Inf),                                          # note must be wrapped in as.Date()\n           ymin  = 0,\n           ymax  = Inf,\n           alpha = 0.2,          # alpha easy and intuitive to adjust using annotate()\n           fill  = \"red\")+\n  \n  # add black vertical line on top of other layers\n  annotate(\"segment\",\n           x     = max(central_data$date_onset, na.rm = T) - 21, # 21 days before last data\n           xend  = max(central_data$date_onset, na.rm = T) - 21, \n           y     = 0,         # line begins at y = 0\n           yend  = Inf,       # line to top of plot\n           size  = 2,         # line size\n           color = \"black\",\n           lty   = \"solid\")+   # linetype e.g. \"solid\", \"dashed\"\n\n  # add text in rectangle\n  annotate(\"text\",\n           x = max(central_data$date_onset, na.rm = T) - 15,\n           y = 20,\n           label = \"Subject to reporting delays\",\n           angle = 90)## Warning: Removed 15 rows containing non-finite values (stat_bin).geom_vline(xintercept = max(central_data$date_onset, na.rm = T) - 21,\r\n           size = 2,\r\n           color = \"black\")"},{"path":"epidemic-curves.html","id":"using-geom_segment-and-geom_rect","chapter":"29 Epidemic curves","heading":"29.4.2.5.2 Using geom_segment() and geom_rect()","text":"","code":"\nggplot(central_data, aes(x = date_onset)) + \n  \n  # histogram\n  geom_histogram(\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n\n  # scales\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_date(\n    expand = c(0,0),                   # remove excess x-axis space below and after case bars\n    date_breaks = \"3 weeks\",           # Monday every 3 weeks\n    date_minor_breaks = \"week\",        # Monday weeks \n    date_labels = \"%d\\n%b\\n'%y\")+      # label format\n  \n  # labels and theme\n  labs(title = \"Using geom_segment() and geom_rect()\\nRectangle and line showing that data from last 21-days are tentative\",\n    subtitle = \"\")+ \n  theme_minimal()+\n  \n  # make rectangle covering last 21 days\n  geom_rect(aes(\n              xmin  = as.Date(max(central_data$date_onset, na.rm = T) - 21), # note must be wrapped in as.Date()\n              xmax  = as.Date(Inf),                                          # note must be wrapped in as.Date()\n              ymin  = 0,\n              ymax  = Inf,\n              color = \"Reporting delays\\npossible\"),    # sets label for legend (note: is within aes())\n              alpha = .002,                             # !!! Difficult to adjust transparency with this option\n           fill  = \"red\")+\n  \n  # make vertical line\n  geom_segment(aes(x = max(central_data$date_onset, na.rm = T) - 21,\n                   xend = max(central_data$date_onset, na.rm = T) - 21,\n                   y = 0,\n                   yend = Inf),\n               color = \"black\",\n               lty = \"solid\",\n               size = 2)+\n  theme(legend.title = element_blank())                 # remove title of legend## Warning: Use of `central_data$date_onset` is discouraged. Use `date_onset` instead.\r\n\r\n## Warning: Use of `central_data$date_onset` is discouraged. Use `date_onset` instead.\r\n\r\n## Warning: Use of `central_data$date_onset` is discouraged. Use `date_onset` instead.## Warning: Removed 15 rows containing non-finite values (stat_bin)."},{"path":"epidemic-curves.html","id":"dual-axis","chapter":"29 Epidemic curves","heading":"29.4.2.6 Dual axis","text":"Two axes","code":""},{"path":"epidemic-curves.html","id":"multi-level-date-labels","chapter":"29 Epidemic curves","heading":"29.4.2.7 Multi-level date labels","text":"option want multi-level date labels, without duplicating lower label levels (e.g. year month).Remember, can can use tools like \\n within date_labels labels arguments put parts label new line . However, code helps take years months (example) lower line .notes code :Case counts aggregated weeks aesthetic reasons. See Epicurves page (aggregated data tab) details.line used instead histogram, faceting approach work well histograms.Aggreagate weekly countsMake plots\r\ntechniques adapted post stackoverflow.com.","code":"\n# Create dataset of case counts by week\n#######################################\ncentral_weekly <- linelist %>%\n  filter(hospital == \"Central Hospital\") %>%           # filter linelist\n  mutate(week = lubridate::floor_date(date_onset, unit = \"weeks\")) %>%  \n  count(week, .drop=F) %>%                             # summarize weekly case counts\n  filter(!is.na(week)) %>%                             # remove cases with missing onset_date\n  complete(week = seq.Date(from = min(week),           # fill-in all weeks with no cases reported\n                           to   = max(week),\n                           by   = \"week\"))\n# plot\n######\nggplot(central_weekly) +\n  geom_line(aes(x = week, y = n),    # make line, specify x and y\n            stat = \"identity\") +             # because line height is count number\n  scale_x_date(date_labels=\"%b\",             # date label format show month \n               date_breaks=\"month\",          # date labels on 1st of each month\n               expand=c(0,0)) +              # remove excess space\n  facet_grid(~lubridate::year(week), # facet on year (of Date class column)\n             space=\"free_x\",                \n             scales=\"free_x\",                # x-axes adapt to data range (not \"fixed\")\n             switch=\"x\") +                   # facet labels (year) on bottom\n  theme_bw() +\n  theme(strip.placement = \"outside\",         # facet labels placement\n        strip.background = element_rect(fill = NA, # facet labels no fill grey border\n                                        colour = \"grey50\"),\n        panel.spacing = unit(0, \"cm\"))+      # no space between facet panels\n  labs(title = \"Nested year labels, grey label border\")\n# plot no border\n################\nggplot(central_weekly,\n       aes(x = week, y = n)) +              # establish x and y for entire plot\n  geom_line(stat = \"identity\",              # make line, line height is count number\n            color = \"#69b3a2\") +            # line color\n  geom_point(size=1, color=\"#69b3a2\") +     # make points at the weekly data points\n  geom_area(fill = \"#69b3a2\",               # fill area below line\n            alpha = 0.4)+                   # fill transparency\n  scale_x_date(date_labels=\"%b\",            # date label format show month \n               date_breaks=\"month\",         # date labels on 1st of each month\n               expand=c(0,0)) +             # remove excess space\n  facet_grid(~lubridate::year(week),   # facet on year (of Date class column)\n             space=\"free_x\",                \n             scales=\"free_x\",               # x-axes adapt to data range (not \"fixed\")\n             switch=\"x\") +                  # facet labels (year) on bottom\n  theme_bw() +\n  theme(strip.placement = \"outside\",                     # facet label placement\n          strip.background = element_blank(),            # no facet lable background\n          panel.grid.minor.x = element_blank(),          \n          panel.border = element_rect(colour=\"grey40\"),  # grey border to facet PANEL\n          panel.spacing=unit(0,\"cm\"))+                   # No space between facet panels\n  labs(title = \"Nested year labels - points, shaded, no label border\")## Warning: Removed 5 rows containing missing values (position_stack).## Warning: Removed 5 rows containing missing values (geom_point)."},{"path":"epidemic-curves.html","id":"aggregating-linelist-data","chapter":"29 Epidemic curves","heading":"29.4.2.8 Aggregating linelist data","text":"learn generally group aggregate data, see handbook page Grouping/Aggregating.circumstance, demonstrate aggregating weeks, months, days.","code":""},{"path":"epidemic-curves.html","id":"weeks","chapter":"29 Epidemic curves","heading":"29.4.2.8.1 Weeks","text":"Create new column weeks, use group_by() summarize() get weekly case counts.aggregate weeks show weeks (even ones cases), :Create new ‘week’ column within mutate(), using floor_date() lubridate package:\r\nuse unit = set desired time unit, e.g. \"week`\r\nuse week_start = set weekday start week (7 = Sunday, 1 = Monday)\r\nuse unit = set desired time unit, e.g. \"week`use week_start = set weekday start week (7 = Sunday, 1 = Monday)Follow complete() ensure weeks appear - even cases.example:first 50 rows resulting dataframe:Alternatively, can use aweek package’s date2week() function. shown , set week_start = “Sunday”, “Monday”, etc. Set floor_date = TRUE output YYYY-Www. Set factor = TRUE possible weeks included, even cases (replaces complete() step lubridate approach ). can also use numeric = TRUE want week number (note distinguish years).","code":"\n# Make dataset of weekly case counts\nweekly_counts <- linelist %>% \n  mutate(\n    week = lubridate::floor_date(date_onset,\n                                 unit = \"week\")) %>%  # new column of week of onset\n  count(week) %>%                                     # group data by week and count rows per group\n  filter(!is.na(week)) %>%                            # remove entries for cases missing date_onset\n  complete(week = seq.Date(from = min(week),          # fill-in all weeks with no cases reported\n                           to = max(week),\n                           by=\"week\")) %>% \n  ungroup()                                           # deactivate grouping\n# Make dataset of weekly case counts\nweekly_counts <- linelist %>% \n  mutate(week = aweek::date2week(date_onset,          # new column of week of onset\n                                 floor_day = T,       # show as weeks without weekday\n                                 factor = TRUE)) %>%  # include all possible weeks\n  count(week) %>% \n  ungroup()                                           # deactivate grouping\n\n# Optional: add column of start DATE for each week - e.g. for ggplot() when date x-axis is expected\n# note: add this step AFTER the above code, to ensure all weeks are present\nweekly_counts <- weekly_counts %>% \n  mutate(week_as_date = aweek::week2date(week, week_start = \"Monday\")) # output is Monday date of each week"},{"path":"epidemic-curves.html","id":"months","chapter":"29 Epidemic curves","heading":"29.4.2.8.2 Months","text":"aggregate cases months, use floor_date() lubridate package, argument unit = \"months\". rounds date 1st month. output class Date.Note complete() step also use “months”","code":"\n# Make dataset of weekly case counts\nmonthly_counts <- linelist %>% \n  mutate(month = lubridate::floor_date(date_onset, unit = \"months\")) %>%   # new column, 1st of month of onset\n  count(month) %>% \n  filter(!is.na(month)) %>% \n  complete(month = seq.Date(min(month),     # fill-in all months with no cases reported\n                            max(month),\n                            by=\"month\"))    "},{"path":"epidemic-curves.html","id":"days","chapter":"29 Epidemic curves","heading":"29.4.2.8.3 Days","text":"aggregate linelist days, use approach need create new column. Use group_by() date column (e.g. date_onset).plotting histogram, missing days data problem long column class Date. However, may important types plots tables possible days apear data. done : tidyr::complete()","code":"\n# Make dataset of weekly case counts\ndaily_counts <- linelist %>% \n  count(date_onset) %>%                           # count number of rows per unique date\n  filter(!is.na(date_onset)) %>%                  # remove aggregation of rows that were missing date_onset\n  complete(date_onset = seq.Date(min(date_onset), # ensure all days appear\n                                 max(date_onset),\n                                 by=\"day\"))  "},{"path":"epidemic-curves.html","id":"aggregated-data","chapter":"29 Epidemic curves","heading":"29.5 Aggregated data","text":"Often instead linelist, begin aggregated counts facilities, districts, etc. can make epicurve ggplot() code slightly different. incidence package support aggregate data.section utilize count_data dataset imported earlier, data preparation section. linelist aggregated day-hospital counts. first 50 rows displayed ., must ensure date variables correctly classified.can plot daily epicurve data. differences:Specify y = counts column within primary aesthetics aes()Use stat = \"identity\" within geom_histogram() indicates y-values counts y = column aes()aggregate furtherTo aggregated , weeks, use package lubridate function floor_date(), described . Note use group_by() summarize() place count() becase need sum() case counts instead just counting number rows per group.first 50 rows count_data displayed .plotting also specify factor level order hospital.Now plot epiweek.","code":"\n# Convert Date variable to Date class\nclass(count_data$date_hospitalisation)## [1] \"Date\"\nggplot(data = count_data, aes(x = as.Date(date_hospitalisation), y = n_cases))+\n     geom_histogram(stat = \"identity\")+\n     labs(x = \"Week of report\", \n          y = \"Number of cases\",\n          Title = \"Daily case incidence, from daily count data\")## Warning: Ignoring unknown parameters: binwidth, bins, pad\n# Create weekly dataset with epiweek column\ncount_data_weekly <- count_data %>%\n  mutate(epiweek = lubridate::floor_date(date_hospitalisation, \"week\")) %>% \n  group_by(hospital, epiweek, .drop=F) %>% \n  summarize(n_cases_weekly = sum(n_cases, na.rm=T))   ## `summarise()` has grouped output by 'hospital'. You can override using the `.groups` argument.\ncount_data_weekly <- count_data_weekly %>% \n  mutate(hospital = factor(hospital,\n                           levels = c(\"Missing\", \"Port Hospital\", \"Military Hospital\", \"Central Hospital\", \"St. Mark's Maternity Hospital (SMMH)\", \"Other\")))\nggplot(data = count_data_weekly,\n       aes(x = epiweek,\n           y = n_cases_weekly,\n           group = hospital,\n           fill = hospital))+\n  \n  geom_histogram(stat = \"identity\")+\n     \n  # labels for x-axis\n  scale_x_date(date_breaks = \"2 months\",      # labels every 2 months \n               date_minor_breaks = \"1 month\", # gridlines every month\n               date_labels = '%b\\n%Y')+       #labeled by month with year below\n     \n  # Choose color palette (uses RColorBrewer package)\n  scale_fill_brewer(palette = \"Pastel2\")+ \n  \n  theme_minimal()+\n  \n  labs(x = \"Week of onset\", \n       y = \"Weekly case incidence\",\n       fill = \"Hospital\",\n       title = \"Weekly case incidence, from aggregated count data by hospital\")## Warning: Ignoring unknown parameters: binwidth, bins, pad"},{"path":"epidemic-curves.html","id":"dual-axis-1","chapter":"29 Epidemic curves","heading":"29.6 Dual-axis","text":"Although fierce discussions validity within data visualization community, many supervisors want see epicurve similar chart percent overlaid second axis.ggplot difficult , except case showing line reflecting proportion category shown bars .See handbook page ggplot tips details make second axis.","code":""},{"path":"epidemic-curves.html","id":"resources-18","chapter":"29 Epidemic curves","heading":"29.7 Resources","text":"Links online tutorials resources.","code":""},{"path":"plotting-continuous-data.html","id":"plotting-continuous-data","chapter":"30 Plotting continuous data","heading":"30 Plotting continuous data","text":"appropriate plotting continuous data, e.g. age, clinical measurements, distance, etc.","code":""},{"path":"plotting-continuous-data.html","id":"overview-27","chapter":"30 Plotting continuous data","heading":"30.1 Overview","text":"usual, R built-functions quick visualisations. can opt install additional packages functionality - often recommended presentation-ready visualisations. Specifically, can use:boxplot() function graphics package (installed automatically base R)ggplot() function ggplot2 package, orVisualisations covered include:Plots one continuous variable:\r\nBox plots (also called box whisker), box represents 25th, 50th, 75th percentile continuous variable, line outside represent tail ends distribution continuous variable, dots represent outliers.\r\nViolin plots, similar histograms show distribution continuous variable based symettrical width ‘violin’.\r\nJitter plots, visualise distribution continuous variable showing values dots, rather collectively one larger shape. dot ‘jittered’ can (mostly) seen, even two value.\r\nPlots one continuous variable:Box plots (also called box whisker), box represents 25th, 50th, 75th percentile continuous variable, line outside represent tail ends distribution continuous variable, dots represent outliers.Violin plots, similar histograms show distribution continuous variable based symettrical width ‘violin’.Jitter plots, visualise distribution continuous variable showing values dots, rather collectively one larger shape. dot ‘jittered’ can (mostly) seen, even two value.Scatter plots two continuous variables.Scatter plots two continuous variables.","code":"## Warning: Removed 88 rows containing non-finite values (stat_boxplot).## Warning: Removed 88 rows containing non-finite values (stat_ydensity).## Warning: Removed 88 rows containing missing values (geom_point)."},{"path":"plotting-continuous-data.html","id":"preparation-21","chapter":"30 Plotting continuous data","heading":"30.2 Preparation","text":"Preparation includes ensuring correct packages, (install.packages(\"ggplot2\") needed), ensuring data correct class format.Convert character outcomes numeric needed:","code":"linelist <- linelist %>% \r\n  mutate(age = as.numeric(age))"},{"path":"plotting-continuous-data.html","id":"plotting-with-base-graphics","chapter":"30 Plotting continuous data","heading":"30.3 Plotting with base graphics","text":"Plotting one continuous variableThe -built graphics package comes boxplot() function, allowing straight-forward visualisation continuous variable whole dataset () within different groups (B C ). Note C, outcome gender written outcome*gender boxplots four combinations two columns.options boxplot() shown :Boxplot width proportional sample size ()violin plots, notched representing median x around (B; )Horizontal (C)Plotting two continuous variablesScatter plots helpful visualising correlation two continuous variables.Using base R, can simple visualisation plot function.","code":"\n# For total population\ngraphics::boxplot(linelist$age,\n                  main = \"A) One boxplot() for total dataset\") # Plot title\n\n\n# By subgroup\ngraphics::boxplot(age ~ outcome*gender,\n                  data = linelist, # Here 'data' is specified so no need to write 'linelist$age' in line above.\n                  main = \"B) boxplot() by subgroup\")\n\n# By crossed subgroups\ngraphics::boxplot(age ~ outcome*gender,\n                  data = linelist, # Here 'data' is specified so no need to write 'linelist$age' in line above.\n                  main = \"C) boxplot() by crossed groups\")\n# Varying width by sample size \ngraphics::boxplot(linelist$age ~ linelist$outcome,\n                  varwidth = TRUE, # width varying by sample size\n                  main=\"A) Proportional boxplot() widths\")\n\n                  \n# Notched (violin plot), and varying width\nboxplot(age ~ outcome,\n        data=linelist,\n        notch=TRUE,      # notch at median\n        main=\"B) Notched boxplot()\",\n        col=(c(\"gold\",\"darkgreen\")),\n        xlab=\"Suppliment and Dose\")\n\n# Horizontal\nboxplot(age ~ outcome,\n        data=linelist,\n        horizontal=TRUE,  # flip to horizontal\n        col=(c(\"gold\",\"darkgreen\")),\n        main=\"C) Horizontal boxplot()\",\n        xlab=\"Suppliment and Dose\")\nplot(linelist$age)"},{"path":"plotting-continuous-data.html","id":"plotting-with-ggplot","chapter":"30 Plotting continuous data","heading":"30.4 Plotting with ggplot","text":"Code syntaxGgplot extensive functionality, code syntax can used many different plot types.basic breakdown ggplot code follows:ggplot() starts function. can specify data aesthetics (see next point) within ggplot bracket, unless combining different data sources plot types oneaes() stands ‘aesthetics’, columns used visualisation specified. instance aes(x = col1, y = col2) specify data used x y values (y continuous variable examples).fill specifies colour boxplot areas. One also write color specify outline point colour.geom_XXX specifies type plot. Options include:\r\ngeom_boxplot() boxplot\r\ngeom_violin() violin plot\r\ngeom_jitter() jitter plot\r\ngeom_point() scatter plot\r\ngeom_boxplot() boxplotgeom_violin() violin plotgeom_jitter() jitter plotgeom_point() scatter plotFor see section ggplot tips).Plotting one continuous variableBelow code creating box plots, entire dataset sub group. Note subgroup breakdowns, ‘NA’ values also removed using dplyr, otherwise ggplot plots age distribution ‘NA’ separate boxplot.code creating violin plots (geom_violin) jitter plots (geom_jitter). One can specify ‘fill’ ’color’also determined data, thereby inserting options within aes bracket.examine subgroups, one can ‘facet’ graph. means plot recreased within specified subgroups. One can use:facet_wrap() - recreate sub-graphs present alphabetically (typically, unless stated otherwise). can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within. See plot .facet_grid() - suited seeing subgroups particular combinations discrete variables. See plot B .turn plot horizontal, flip coordinates coord_flip.Plotting two continuous variablesFollowing similar syntax, geom_point allow one plot two continuous variables eachother scatter plot. use facet_grid show interaction two different discrete variables.","code":"ggplot(data = linelist,\r\n       aes(x = col1, y = col2),\r\n       fill = \"color\")+  \r\n  geom_boxplot() \n# A) Simple boxplot of one numeric variable\nggplot(data = linelist, aes(y = age))+  # only y variable given (no x variable)\n  geom_boxplot()+\n  ggtitle(\"A) Simple ggplot() boxplot\")## Warning: Removed 88 rows containing non-finite values (stat_boxplot).\n# B) Box plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,         # numeric variable\n           x = outcome)) +      # group variable\n  geom_boxplot(fill = \"gold\")+   # create the boxplot and specify colour\n  ggtitle(\"B) ggplot() boxplot by gender\")      # main title## Warning: Removed 61 rows containing non-finite values (stat_boxplot).\n# A) Violin plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,         # numeric variable\n           x = outcome,      # group variable\n           fill = outcome))+ # fill variable (color of boxes)\n  geom_violin()+                            # create the violin plot\n  ggtitle(\"A) ggplot() violin plot by gender\")      # main title## Warning: Removed 61 rows containing non-finite values (stat_ydensity).\n# B) Jitter plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,         # numeric variable\n           x = outcome,      # group variable\n           color = outcome))+ # Color variable\n  geom_jitter()+                            # create the violin plot\n  ggtitle(\"B) ggplot() violin plot by gender\")      # main title## Warning: Removed 61 rows containing missing values (geom_point).\n# A) Facet by one variable\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = age, x = outcome, fill=outcome))+\n  geom_boxplot()+\n  ggtitle(\"A) A ggplot() boxplot by gender and outcome\")+\n  facet_wrap(~gender, nrow = 1)\n\n# B) Facet across two variables\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = age))+\n  geom_boxplot()+\n  ggtitle(\"A) A ggplot() boxplot by gender and outcome\")+\n  facet_grid(outcome~gender)\n# By subgroup\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = age, x = outcome, fill=outcome))+\n  geom_boxplot()+\n  ggtitle(\"B) A horizontal ggplot() boxplot by gender and outcome\")+\n  facet_wrap(gender~., ncol=1) + \n  coord_flip()\n# By subgroup\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = age, x = age))+\n  geom_point()+\n  ggtitle(\"A horizontal ggplot() boxplot by gender and outcome\")+\n  facet_grid(gender~outcome) "},{"path":"plotting-continuous-data.html","id":"resources-19","chapter":"30 Plotting continuous data","heading":"30.5 Resources","text":"huge amount help online, especially ggplot. see:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"plotting-discrete-variables.html","id":"plotting-discrete-variables","chapter":"31 Plotting discrete variables","heading":"31 Plotting discrete variables","text":"","code":""},{"path":"plotting-discrete-variables.html","id":"overview-28","chapter":"31 Plotting discrete variables","heading":"31.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"plotting-discrete-variables.html","id":"preparation-22","chapter":"31 Plotting discrete variables","heading":"31.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"plotting-discrete-variables.html","id":"base-r-2","chapter":"31 Plotting discrete variables","heading":"31.3 base R","text":"","code":""},{"path":"plotting-discrete-variables.html","id":"ggplot2","chapter":"31 Plotting discrete variables","heading":"31.4 ggplot2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"plotting-discrete-variables.html","id":"option-2-sub-tab-8","chapter":"31 Plotting discrete variables","heading":"31.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"plotting-discrete-variables.html","id":"resources-20","chapter":"31 Plotting discrete variables","heading":"31.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"tables.html","id":"tables","chapter":"32 Tables","heading":"32 Tables","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"tables.html","id":"overview-29","chapter":"32 Tables","heading":"32.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"tables.html","id":"preparation-23","chapter":"32 Tables","heading":"32.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"tables.html","id":"manually","chapter":"32 Tables","heading":"32.3 Manually","text":"","code":""},{"path":"tables.html","id":"from-data-frame-1","chapter":"32 Tables","heading":"32.4 From data frame","text":"knitr::kable\r\nDT","code":""},{"path":"tables.html","id":"summarizing-dataframe","chapter":"32 Tables","heading":"32.5 Summarizing dataframe","text":"","code":""},{"path":"tables.html","id":"from-modelresults","chapter":"32 Tables","heading":"32.6 From modelresults","text":"publication","code":""},{"path":"tables.html","id":"other","chapter":"32 Tables","heading":"32.7 Other","text":"quickly changing denominator (per 100,000, etc.)","code":""},{"path":"tables.html","id":"resources-21","chapter":"32 Tables","heading":"32.8 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"age-pyramids.html","id":"age-pyramids","chapter":"33 Age pyramids","heading":"33 Age pyramids","text":"Age pyramids can useful show patterns age group. can show gender, distribution characteristics.\r\ntabs demonstrate produce age pyramids using:Fast & easy: Using apyramid packageMore flexible: Using ggplot()baseline demographics displayed background pyramidUsing pyramid-style plots show types data (e.g responses Likert-style questions)","code":""},{"path":"age-pyramids.html","id":"overview-30","chapter":"33 Age pyramids","heading":"33.1 Overview","text":"Age/gender demographic pyramids R generally made ggplot() creating two barplots (one gender), converting one’s values negative values, flipping x y axes display barplots vertically.offer quick approach apyramid package:customizable code using raw ggplot() commandsHow combine case demographic data compare baseline population (shown )Application methods show types data (e.g. responses Likert-style survey questions)","code":""},{"path":"age-pyramids.html","id":"preparation-24","chapter":"33 Age pyramids","heading":"33.2 Preparation","text":"tab use linelist dataset cleaned Cleaning tab.make traditional age/sex demographic pyramid, data must first cleaned following ways:gender column must cleaned.Age age category column, class Factor (correctly ordered levels)Load packagesFirst, load packages required analysis:Load dataCheck class variablesEnsure age variable class Numeric, check class order levels age_cat age_cat5","code":"\npacman::p_load(rio,       # to import data\n               here,      # to locate files\n               tidyverse, # to clean, handle, and plot the data (includes ggplot2 package)\n               apyramid,  # a package dedicated to creating age pyramids\n               stringr)   # working with strings for titles, captions, etc.\nlinelist <- rio::import(\"linelist_cleaned.csv\")\nclass(linelist$age_years)## [1] \"numeric\"\nclass(linelist$age_cat)## [1] \"factor\"\nclass(linelist$age_cat5)## [1] \"factor\"\ntable(linelist$age_cat, useNA = \"always\")## \r\n##   0-4   5-9 10-14 15-19 20-29 30-49 50-69   70+  <NA> \r\n##  1081  1148   971   837  1091   628    45     0    88\ntable(linelist$age_cat5, useNA = \"always\")## \r\n##   0-4   5-9 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64 65-69 70-74 75-79 80-84   85+  <NA> \r\n##  1081  1148   971   837   600   491   295   181    98    54    26    14     2     3     0     0     0     0    88"},{"path":"age-pyramids.html","id":"apyramid-package","chapter":"33 Age pyramids","heading":"33.3 apyramid package","text":"package apyramid allows quickly make age pyramid. nuanced situations, see tab using ggplot() make age pyramids. can read apyramid package Help page entering ?age_pyramid R console.","code":""},{"path":"age-pyramids.html","id":"linelist-data","chapter":"33 Age pyramids","heading":"33.3.1 Linelist data","text":"Using cleaned linelist dataset, can create age pyramid just one simple command. need help cleaning data, see handbook page Cleaning data (LINK). command:data argument set linelist dataframeThe age_group argument set name (quotes) numeric category variable (case age_cat5)split_by argument (bar colors) binary column (case “gender”)\r\nusing agepyramid package, split_by column binary (e.g. male/female, yes/), result appear pyramid. However two values split_by column (including NA), pyramid appears faceted barplot empty bars background indicating range un-faceted data set age group. Values split_by appear labels top facet. example split_by variable “hospital”.Missing values\r\nRows missing values split_by age_group columns, coded NA, trigger faceting shown . default rows shown. However can specify appear, adjacent barplot separate age group top, specifying na.rm = FALSE.Proportions, colors, & aestheticsBy default, bars display counts (%), dashed mid-line group shown, colors green/purple. parameters can adjusted, shown :can also add additional ggplot() commands plot using standard ggplot() “+” syntax, aesthetic themes label adjustments:","code":"\napyramid::age_pyramid(data = linelist,\n                      age_group = \"age_cat5\",\n                      split_by = \"gender\")## Warning: 283 missing rows were removed (88 values from `age_cat5` and 283 values from `gender`).\napyramid::age_pyramid(data = linelist,\n                      age_group = \"age_cat5\",\n                      split_by = \"hospital\",\n                      na.rm = FALSE)        # show a bar for patients missing age, (note: this changes the pyramid into a faceted barplot)\napyramid::age_pyramid(data = linelist,\n                      age_group = \"age_cat5\",\n                      split_by = \"gender\",\n                      na.rm = FALSE)         # show patients missing age or gender\napyramid::age_pyramid(data = linelist,\n                      age_group = \"age_cat5\",\n                      split_by = \"gender\",\n                      proportional = TRUE,                  # show percents, not counts\n                      show_midpoint = FALSE,                # remove bar mid-point line\n                      #pal = c(\"orange\", \"purple\")          # can specify alt. colors here (but not labels, see below)\n                      )+                 \n  \n  # additional ggplot commands\n  theme_minimal()+                                          # simplify the background\n  scale_fill_manual(values = c(\"orange\", \"purple\"),         # to specify colors AND labels\n                     labels = c(\"Male\", \"Female\"))+\n  labs(y = \"Percent of all cases\",                          # note that x and y labels are switched (see ggplot tab)\n       x = \"Age categories\",                          \n       fill = \"Gender\", \n       caption = \"My data source and caption here\",\n       title = \"Title of my plot\",\n       subtitle = \"Subtitle with \\n a second line...\")+\n  theme(\n    legend.position = \"bottom\",                             # move legend to bottom\n    axis.text = element_text(size = 10, face = \"bold\"),     # fonts/sizes, see ggplot tips page\n    axis.title = element_text(size = 12, face = \"bold\"))## Warning: 283 missing rows were removed (88 values from `age_cat5` and 283 values from `gender`).## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale."},{"path":"age-pyramids.html","id":"aggregated-data-1","chapter":"33 Age pyramids","heading":"33.3.2 Aggregated data","text":"examples assume data linelist-like format, one row per observation. data already aggregated counts age category, can still use apyramid package, shown .Let’s say dataset looks like , columns age category, male counts, female counts, missing counts.\r\n(see handbook page Transforming data tips)ggplot() perfers data “long” format, first pivot data “long” pivot_longer() function dplyr.use split_by count arguments age_pyramid() specify respective columns:Note , factor order “m” “f” different (pyramid reversed). adjust order must re-define gender aggredated data Factor order levels desired.","code":"## `summarise()` has grouped output by 'age_cat5'. You can override using the `.groups` argument.\n# View the aggregated data\nDT::datatable(demo_agg, rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T) )\n# pivot the aggregated data into long format\ndemo_agg_long <- demo_agg %>% \n  pivot_longer(c(f, m, missing_gender),            # cols to elongate\n               names_to = \"gender\",                # name for new col of categories\n               values_to = \"counts\") %>%           # name for new col of counts\n  mutate(gender = na_if(gender, \"missing_gender\")) # convert \"missing_gender\" to NA\n# View the aggregated data\nDT::datatable(demo_agg_long, rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T) )\napyramid::age_pyramid(data = demo_agg_long,\n                      age_group = \"age_cat5\",\n                      split_by = \"gender\",\n                      count = \"counts\")      # give the column name for the aggregated counts## Warning: Removed 19 rows containing missing values (position_stack).## Warning: Removed 19 rows containing missing values."},{"path":"age-pyramids.html","id":"ggplot-1","chapter":"33 Age pyramids","heading":"33.4 ggplot()","text":"Using ggplot() build age pyramid allows flexibility, requires effort understanding ggplot() works. also easier accidentally make mistakes.apyramid uses ggplot() background (accepts ggplot() commands added), page shows adjust recreate pyramid using ggplot(), wish.","code":""},{"path":"age-pyramids.html","id":"constructing-the-plot","chapter":"33 Age pyramids","heading":"33.4.1 Constructing the plot","text":"First, understand make pyramid using ggplot() approach :Within ggplot(), create two graphs age category. Create one two grouping values (case gender). See filters applied data arguments geom_histogram() commands .Within ggplot(), create two graphs age category. Create one two grouping values (case gender). See filters applied data arguments geom_histogram() commands .using geom_histogram(), graphs operate numeric column (e.g. age_years), whereas using geom_barplot() graphs operate ordered Factor (e.g. age_cat5).using geom_histogram(), graphs operate numeric column (e.g. age_years), whereas using geom_barplot() graphs operate ordered Factor (e.g. age_cat5).One graph positive count values, counts converted negative values - allows graphs seen compared plot.One graph positive count values, counts converted negative values - allows graphs seen compared plot.command coord_flip() switches X Y axes, resulting graphs turning vertical creating pyramid.command coord_flip() switches X Y axes, resulting graphs turning vertical creating pyramid.Lastly, counts-axis labels must specified appear “positive” counts sides pyramid (despite underlying values one side negative).Lastly, counts-axis labels must specified appear “positive” counts sides pyramid (despite underlying values one side negative).simple version , using geom_histogram(), :DANGER: limits counts axis set low, counts bar exceeds , bar disappear entirely artificially shortened! Watch analyzing data routinely updated. Prevent count-axis limits auto-adjust data, .many things can change/add simple version, including:Auto adjust counts-axis count scale data (avoid errors discussed warning )Manually specify colors legend labels","code":"\n  # begin ggplot\n  ggplot(data = linelist, aes(x = age, fill = gender)) +\n  \n  # female histogram\n  geom_histogram(data = filter(linelist, gender == \"f\"),\n                 breaks = seq(0,85,5),\n                 colour = \"white\") +\n  \n  # male histogram (values converted to negative)\n  geom_histogram(data = filter(linelist, gender == \"m\"),\n                 breaks = seq(0,85,5),\n                 aes(y=..count..*(-1)),\n                 colour = \"white\") +\n  \n  # flip the X and Y axes\n  coord_flip() +\n  \n  # adjust counts-axis scale\n  scale_y_continuous(limits = c(-600, 900),\n                     breaks = seq(-600,900,100),\n                     labels = abs(seq(-600, 900, 100)))\n# create dataset with proportion of total\npyramid_data <- linelist %>%\n  group_by(age_cat5, gender) %>% \n  summarize(counts = n()) %>% \n  ungroup() %>% \n  mutate(percent = round(100*(counts / sum(counts, na.rm=T)),1), \n         percent = case_when(\n            gender == \"f\" ~ percent,\n            gender == \"m\" ~ -percent,\n            TRUE          ~ NA_real_))## `summarise()` has grouped output by 'age_cat5'. You can override using the `.groups` argument.\nmax_per <- max(pyramid_data$percent, na.rm=T)\nmin_per <- min(pyramid_data$percent, na.rm=T)\n\n\n# begin ggplot\n  ggplot()+  # default x-axis is age in years;\n\n  # case data graph\n  geom_bar(data = pyramid_data,\n           stat = \"identity\",\n           aes(x = age_cat5,\n               y = percent,\n               fill = gender),        # \n           colour = \"white\")+         # white around each bar\n  \n  # flip the X and Y axes to make pyramid vertical\n  coord_flip()+\n  \n\n  # adjust the axes scales (remember they are flipped now!)\n  #scale_x_continuous(breaks = seq(0,100,5), labels = seq(0,100,5)) +\n  scale_y_continuous(limits = c(min_per, max_per),\n                     breaks = seq(floor(min_per), ceiling(max_per), 2),\n                     labels = paste0(abs(seq(floor(min_per), ceiling(max_per), 2)), \"%\"))+\n\n  # designate colors and legend labels manually\n  scale_fill_manual(\n    values = c(\"f\" = \"orange\",\n               \"m\" = \"darkgreen\"),\n    labels = c(\"Female\", \"Male\"),\n  ) +\n  \n  # label values (remember X and Y flipped now)\n  labs(\n    x = \"Age group\",\n    y = \"Percent of total\",\n    fill = NULL,\n    caption = stringr::str_glue(\"Data are from linelist \\nn = {nrow(linelist)} (age or sex missing for {sum(is.na(linelist$gender) | is.na(linelist$age_years))} cases) \\nData as of: {format(Sys.Date(), '%d %b %Y')}\")) +\n  \n  # optional aesthetic themes\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    axis.line = element_line(colour = \"black\"),\n    plot.title = element_text(hjust = 0.5), \n    plot.caption = element_text(hjust=0, size=11, face = \"italic\")) + \n  \n  ggtitle(paste0(\"Age and gender of cases\"))## Warning: Removed 12 rows containing missing values (position_stack)."},{"path":"age-pyramids.html","id":"compare-to-baseline","chapter":"33 Age pyramids","heading":"33.4.2 Compare to baseline","text":"flexibility ggplot(), can second layer bars background represent true population pyramid. can provide nice visualization compare observed counts baseline.Import view population dataFirst data management steps:record order age categories want appear. Due quirks way ggplot() implemented, easiest store character vector use later plotting function.Combine population case data dplyr function bind_rows():First, ensure exact column names, age categories values, gender valuesMake data structure: columns age category, gender, counts, percent totalBind together, one -top (bind_rows())Review changed population datasetNow implement case linelist. Slightly different begins case-rows, counts.Review changed case datasetNow two datasets combined, one top (column names)Store maximum minimum percent values, used plotting funtion define extent plot (cut bars!)Now plot made ggplot():One bar graph population data (wider, transparent bars)One bar graph case data (small, solid bars)","code":"\n# import the population demographics data\npop <- rio::import(\"country_demographics.csv\")\n# display the linelist data as a table\nDT::datatable(pop, rownames = FALSE, filter=\"top\", options = list(pageLength = 10, scrollX=T) )\n# record correct age cat levels\nage_levels <- c(\"0-4\",\"5-9\", \"10-14\", \"15-19\", \"20-24\",\n                \"25-29\",\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\",\n                \"75-79\", \"80-84\", \"85+\")\n# create/transform populaton data, with percent of total\n########################################################\npop_data <- pivot_longer(pop, c(m, f), names_to = \"gender\", values_to = \"counts\") %>% # pivot gender columns longer\n  mutate(data = \"population\",                                                         # add column designating data source\n         percent  = round(100*(counts / sum(counts, na.rm=T)),1),                     # calculate % of total\n         percent  = case_when(                                                        # if male, convert % to negative\n                            gender == \"f\" ~ percent,\n                            gender == \"m\" ~ -percent,\n                            TRUE          ~ NA_real_))\n# display the linelist data as a table\nDT::datatable(pop_data, rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T) )\n# create case data by age/gender, with percent of total\n#######################################################\ncase_data <- linelist %>%\n  group_by(age_cat5, gender) %>%  # aggregate linelist cases into age-gender groups\n  summarize(counts = n()) %>%     # calculate counts per age-gender group\n  ungroup() %>% \n  mutate(data = \"cases\",                                          # add column designating data source\n         percent = round(100*(counts / sum(counts, na.rm=T)),1),  # calculate % of total for age-gender groups\n         percent = case_when(                                     # convert % to negative if male\n            gender == \"f\" ~ percent,\n            gender == \"m\" ~ -percent,\n            TRUE          ~ NA_real_))## `summarise()` has grouped output by 'age_cat5'. You can override using the `.groups` argument.\n# display the linelist data as a table\nDT::datatable(case_data, rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T) )\n# combine case and population data (same column names, age_cat values, and gender values)\npyramid_data <- bind_rows(case_data, pop_data)\n# Define extent of percent axis, used for plot limits\nmax_per <- max(pyramid_data$percent, na.rm=T)\nmin_per <- min(pyramid_data$percent, na.rm=T)\n# begin ggplot\n##############\nggplot()+  # default x-axis is age in years;\n\n  # population data graph\n  geom_bar(data = filter(pyramid_data, data == \"population\"),\n           stat = \"identity\",\n           aes(x = age_cat5,\n               y = percent,\n               fill = gender),        \n           colour = \"black\",                               # black color around bars\n           alpha = 0.2,                                    # more transparent\n           width = 1)+                                     # full width\n  \n  # case data graph\n  geom_bar(data = filter(pyramid_data, data == \"cases\"), \n           stat = \"identity\",                              # use % as given in data, not counting rows\n           aes(x = age_cat5,                               # age categories as original X axis\n               y = percent,                                # % as original Y-axis\n               fill = gender),                             # fill of bars by gender\n           colour = \"black\",                               # black color around bars\n           alpha = 1,                                      # not transparent \n           width = 0.3)+                                   # half width\n  \n  # flip the X and Y axes to make pyramid vertical\n  coord_flip()+\n  \n  # adjust axes order, scale, and labels (remember X and Y axes are flipped now)\n  # manually ensure that age-axis is ordered correctly\n  scale_x_discrete(limits = age_levels)+ \n  \n  # set percent-axis \n  scale_y_continuous(limits = c(min_per, max_per),                                          # min and max defined above\n                     breaks = seq(floor(min_per), ceiling(max_per), by = 2),                # from min% to max% by 2 \n                     labels = paste0(                                                       # for the labels, paste together... \n                       abs(seq(floor(min_per), ceiling(max_per), by = 2)),                  # ...rounded absolute values of breaks... \n                       \"%\"))+                                                               # ... with \"%\"\n                                                                                            # floor(), ceiling() round down and up \n\n  # designate colors and legend labels manually\n  scale_fill_manual(\n    values = c(\"f\" = \"orange\",         # assign colors to values in the data\n               \"m\" = \"darkgreen\"),\n    labels = c(\"f\" = \"Female\",\n               \"m\"= \"Male\"),      # change labels that appear in legend, note order\n  ) +\n\n  # plot labels, titles, caption    \n  labs(\n    title = \"Case age and gender distribution,\\nas compared to baseline population\",\n    subtitle = \"\",\n    x = \"Age category\",\n    y = \"Percent of total\",\n    fill = NULL,\n    caption = stringr::str_glue(\"Cases shown on top of country demographic baseline\\nCase data are from linelist, n = {nrow(linelist)}\\nAge or gender missing for {sum(is.na(linelist$gender) | is.na(linelist$age_years))} cases\\nCase data as of: {format(max(linelist$date_onset, na.rm=T), '%d %b %Y')}\")) +\n  \n  # optional aesthetic themes\n  theme(\n    legend.position = \"bottom\",                             # move legend to bottom\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    axis.line = element_line(colour = \"black\"),\n    plot.title = element_text(hjust = 0), \n    plot.caption = element_text(hjust=0, size=11, face = \"italic\"))## Warning: Removed 12 rows containing missing values (position_stack)."},{"path":"age-pyramids.html","id":"likert-scale","chapter":"33 Age pyramids","heading":"33.5 Likert scale","text":"techniques used make population pyramid ggplot() can also used make plots Likert-scale survey data.Import dataStart data looks like , categorical classification respondent (status) answers 8 questions 4-point Likert-type scale (“poor”, “Poor”, “Good”, “good”).First, data management steps:Pivot data longerCreate new column direction depending whether response generally “positive” “negative”Set Factor level order status column Response columnStore max count value limits plot appropriateNow make plot:","code":"\n# import the likert survey response data\nlikert_data <- rio::import(\"likert_data.csv\")\n# display the linelist data as a table\nDT::datatable(likert_data, rownames = FALSE, filter=\"top\", options = list(pageLength = 10, scrollX=T) )\nmelted <- pivot_longer(likert_data, Q1:Q8, names_to = \"Question\", values_to = \"Response\") %>% \n     mutate(direction = case_when(\n               Response %in% c(\"Poor\",\"Very Poor\") ~ \"Negative\",\n               Response %in% c(\"Good\", \"Very Good\") ~ \"Positive\",\n               TRUE ~ \"Unknown\"),\n            status = factor(status, levels = rev(c(\n                 \"Senior\", \"Intermediate\", \"Junior\"))),\n            Response = factor(Response, levels = c(\"Very Good\", \"Good\",\n                                             \"Very Poor\", \"Poor\"))) # must reverse Very Poor and Poor for ordering to work\n\nmelted_max <- melted %>% \n   group_by(status, Question) %>% \n   summarize(n = n())## `summarise()` has grouped output by 'status'. You can override using the `.groups` argument.\nmelted_max <- max(melted_max$n, na.rm=T)\n# make plot\nggplot()+\n     # bar graph of the \"negative\" responses \n     geom_bar(data = filter(melted,\n                            direction == \"Negative\"), \n              aes(x = status,\n                        y=..count..*(-1),    # counts inverted to negative\n                        fill = Response),\n                    color = \"black\",\n                    closed = \"left\", \n                    position = \"stack\")+\n     \n     # bar graph of the \"positive responses\n     geom_bar(data = filter(melted, direction == \"Positive\"),\n              aes(x = status, fill = Response),\n              colour = \"black\",\n              closed = \"left\",\n              position = \"stack\")+\n     \n     # flip the X and Y axes\n     coord_flip()+\n  \n     # Black vertical line at 0\n     geom_hline(yintercept = 0, color = \"black\", size=1)+\n     \n    # convert labels to all positive numbers\n    scale_y_continuous(limits = c(-ceiling(melted_max/10)*11, ceiling(melted_max/10)*10),   # seq from neg to pos by 10, edges rounded outward to nearest 5\n                       breaks = seq(-ceiling(melted_max/10)*10, ceiling(melted_max/10)*10, 10),\n                       labels = abs(unique(c(seq(-ceiling(melted_max/10)*10, 0, 10),\n                                            seq(0, ceiling(melted_max/10)*10, 10))))) +\n     \n    # color scales manually assigned \n    scale_fill_manual(values = c(\"Very Good\"  = \"green4\", # assigns colors\n                                  \"Good\"      = \"green3\",\n                                  \"Poor\"      = \"yellow\",\n                                  \"Very Poor\" = \"red3\"),\n                       breaks = c(\"Very Good\", \"Good\", \"Poor\", \"Very Poor\"))+ # orders the legend\n     \n    \n     \n    # facet the entire plot so each question is a sub-plot\n    facet_wrap(~Question, ncol = 3)+\n     \n    # labels, titles, caption\n    labs(x = \"Respondent status\",\n          y = \"Number of responses\",\n          fill = \"\")+\n     ggtitle(str_glue(\"Likert-style responses\\nn = {nrow(likert_data)}\"))+\n\n     # aesthetic settings\n     theme_minimal()+\n     theme(axis.text = element_text(size = 12),\n           axis.title = element_text(size = 14, face = \"bold\"),\n           strip.text = element_text(size = 14, face = \"bold\"),  # facet sub-titles\n           plot.title = element_text(size = 20, face = \"bold\"),\n           panel.background = element_rect(fill = NA, color = \"black\")) # black box around each facet## Warning: Ignoring unknown parameters: closed\r\n\r\n## Warning: Ignoring unknown parameters: closed"},{"path":"age-pyramids.html","id":"resources-22","chapter":"33 Age pyramids","heading":"33.6 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"diagrams.html","id":"diagrams","chapter":"34 Diagrams","heading":"34 Diagrams","text":"","code":""},{"path":"diagrams.html","id":"overview-31","chapter":"34 Diagrams","heading":"34.1 Overview","text":"page covers:Flow diagrams using DiagrammeRAlluvial/Sankey diagramsEvent timelinesDendrogram organizational trees (e.g. folder contents)DAGs (Directed Acyclic Graphs)","code":""},{"path":"diagrams.html","id":"preparation-25","chapter":"34 Diagrams","heading":"34.2 Preparation","text":"Load packages","code":"\npacman::p_load(\n  DiagrammeR,     # for flow diagrams\n  networkD3       # For alluvial/Sankey diagrams\n  )"},{"path":"diagrams.html","id":"flow-diagrams","chapter":"34 Diagrams","heading":"34.3 Flow diagrams","text":"One can use R package DiagrammeR create charts/flow charts. can static, can adjust somewhat dynamically based changes dataset.ToolsThe function grViz() used create “Graphviz” diagram. function accepts character string input containing instructions making diagram. Within string, instructions written different language, called DOT - quite easy learn basics.Basic structureOpen instructions grViz(\"Specify directionality name graph, open brackets, e.g. digraph my_flow_chart {Graph statement (layout, rank direction)Nodes statements (create nodes)Edges statements (gives links nodes)Close instructions }\")","code":""},{"path":"diagrams.html","id":"simple-examples","chapter":"34 Diagrams","heading":"34.3.1 Simple examples","text":"two simple examplesA minimal example:example applied public health context:","code":"\n# A minimal plot\nDiagrammeR::grViz(\"digraph {\n  \ngraph[layout = dot, rankdir = LR]\n\na\nb\nc\n\na -> b -> c\n}\")\ngrViz(\"                           # All instructions are within a large character string\ndigraph surveillance_diagram {    # 'digraph' means 'directional graph', then the graph name \n  \n  # graph statement\n  #################\n  graph [layout = dot,\n         rankdir = TB,\n         overlap = true,\n         fontsize = 10]\n  \n  # nodes\n  #######\n  node [shape = circle,           # shape = circle\n       fixedsize = true\n       width = 1.3]               # width of circles\n  \n  Primary                         # names of nodes\n  Secondary\n  Tertiary\n\n  # edges\n  #######\n  Primary   -> Secondary [label = 'case transfer']\n  Secondary -> Tertiary [label = 'case transfer']\n}\n\")"},{"path":"diagrams.html","id":"syntax","chapter":"34 Diagrams","heading":"34.3.2 Syntax","text":"Basic syntaxNode names, edge statements, can separated spaces, semicolons, newlines.Rank directionA plot can re-oriented move left--right adjusting rankdir argument within graph statement. default TB (top--bottom), can LR (left--right), RL, BT.Node namesNode names can single words, simple example . use multi-word names special characters (e.g. parentheses, dashes), put node name within single quotes (’ ’). may easier short node name, assign label, shown within brackets [ ]. label also necessary newline within node name - use \\n node label within single quotes, shown .Subgroups\r\nWithin edge statements, subgroups can created either side edge curly brackets ({ }). edge applies nodes bracket - shorthand.Layoutsdot (set rankdir either TB, LR, RL, BT, )neatotwopicircoNodes - editable attributeslabel (text, single quotes multi-word)fillcolor (many possible colors)fontcoloralpha (transparency 0-1)shape (ellipse, oval, diamond, egg, plaintext, point, square, triangle)stylesidesperipheriesfixedsize (h x w)heightwidthdistortionpenwidth (width shape border)x (displacement left/right)y (displacement /)fontnamefontsizeiconEdges - editable attributesarrowsizearrowhead (normal, box, crow, curve, diamond, dot, inv, none, tee, vee)arrowtaildir (direction, )style (dashed, …)coloralphaheadport (text front arrowhead)tailport (text behind arrowtail)fontnamefontsizefontcolorpenwidth (width arrow)minlen (minimum length)Color names: hexadecimal values ‘X11’ color names, see X11 details","code":""},{"path":"diagrams.html","id":"complex-examples","chapter":"34 Diagrams","heading":"34.3.3 Complex examples","text":"example expands surveillance_diagram, adding complex node names, grouped edges, colors stylingSub-graph clustersTo group nodes boxed clusters, put within named subgraph (subgraph name {}). subgraph identified within box, begin name “cluster” shown .node shapesThe example , borrowed tutorial, shows applied node shapes, shows shorthand serial edge connections","code":"\ngrViz([1249 chars quoted with '\"'])\ngrViz([1623 chars quoted with '\"'])\nDiagrammeR::grViz(\"digraph {\n\ngraph [layout = dot, rankdir = LR]\n\n# define the global styles of the nodes. We can override these in box if we wish\nnode [shape = rectangle, style = filled, fillcolor = Linen]\n\ndata1 [label = 'Dataset 1', shape = folder, fillcolor = Beige]\ndata2 [label = 'Dataset 2', shape = folder, fillcolor = Beige]\nprocess [label =  'Process \\n Data']\nstatistical [label = 'Statistical \\n Analysis']\nresults [label= 'Results']\n\n# edge definitions with the node IDs\n{data1 data2}  -> process -> statistical -> results\n}\")"},{"path":"diagrams.html","id":"outputs","chapter":"34 Diagrams","heading":"34.3.4 Outputs","text":"handle save outputsOutputs appear RStudio’s Viewer pane, default lower-right alongside Files, Plots, Packages, Help.export can “Save image” “Copy clipboard” Viewer. graphic adjust specified size.","code":""},{"path":"diagrams.html","id":"parameterized-figures","chapter":"34 Diagrams","heading":"34.3.5 Parameterized figures","text":"“Parameterized figures: great benefit designing figures within R able connect figures directly analysis reading R values directly flowcharts. example, suppose created filtering process removes values stage process, can figure show number values left dataset stage process. , can use @@X symbol directly within figure, refer footer plot using [X]:, X unique numeric index. basic example:”https://mikeyharper.uk/flowcharts--r-using-diagrammer/Much adapted tutorial siteOther -depth tutorial: http://rich-iannone.github.io/DiagrammeR/","code":"\n# Define some sample data\ndata <- list(a=1000, b=800, c=600, d=400)\n\n\nDiagrammeR::grViz(\"\ndigraph graph2 {\n\ngraph [layout = dot]\n\n# node definitions with substituted label text\nnode [shape = rectangle, width = 4, fillcolor = Biege]\na [label = '@@1']\nb [label = '@@2']\nc [label = '@@3']\nd [label = '@@4']\n\na -> b -> c -> d\n\n}\n\n[1]:  paste0('Raw Data (n = ', data$a, ')')\n[2]: paste0('Remove Errors (n = ', data$b, ')')\n[3]: paste0('Identify Potential Customers (n = ', data$c, ')')\n[4]: paste0('Select Top Priorities (n = ', data$d, ')')\n\")"},{"path":"diagrams.html","id":"consort-diagram","chapter":"34 Diagrams","heading":"34.3.6 CONSORT diagram","text":"https://scriptsandstatistics.wordpress.com/2017/12/22/--draw--consort-flow-diagram-using-r--graphviz/Note date via DiagrammeR","code":""},{"path":"diagrams.html","id":"alluvialsankey-diagrams","chapter":"34 Diagrams","heading":"34.4 Alluvial/Sankey Diagrams","text":"","code":""},{"path":"diagrams.html","id":"preparation-26","chapter":"34 Diagrams","heading":"34.4.1 Preparation","text":"Load packages","code":"\npacman::p_load(networkD3)"},{"path":"diagrams.html","id":"plotting-from-dataset","chapter":"34 Diagrams","heading":"34.4.2 Plotting from dataset","text":"Plotting connections datasethttps://www.r-graph-gallery.com/321-introduction--interactive-sankey-diagram-2.htmlCounts age category hospital, relabled target source, respectively.Now formalize nodes list, adjust ID columns numbers instead labels:Now plot Sankey diagram:example patient Outome included well. Note data management step bind rows counts hospital -> outcome, using column names.https://www.displayr.com/sankey-diagrams-r/Timeline Sankey - LTFU cohort… application/rejections… etc.","code":"\n# counts by hospital and age category\nlinks <- linelist %>% \n  select(hospital, age_cat) %>%\n  count(hospital, age_cat) %>% \n  rename(source = hospital,\n         target = age_cat)\n# The unique node names\nnodes <- data.frame(\n  name=c(as.character(links$source), as.character(links$target)) %>% \n    unique()\n  )\n\n# match to numbers, not names\nlinks$IDsource <- match(links$source, nodes$name)-1 \nlinks$IDtarget <- match(links$target, nodes$name)-1\n# plot\n######\np <- sankeyNetwork(Links = links,\n                   Nodes = nodes,\n                   Source = \"IDsource\",\n                   Target = \"IDtarget\",\n                   Value = \"n\",\n                   NodeID = \"name\",\n                   units = \"TWh\",\n                   fontSize = 12,\n                   nodeWidth = 30)\np\n# counts by hospital and age category\nlinks <- linelist %>% \n  select(hospital, age_cat) %>%\n  mutate(age_cat = stringr::str_glue(\"Age {age_cat}\")) %>% \n  count(hospital, age_cat) %>% \n  rename(source = age_cat,\n         target = hospital) %>% \n  bind_rows(\n    linelist %>% \n      select(hospital, outcome) %>% \n      count(hospital, outcome) %>% \n      rename(source = hospital,\n             target = outcome)\n  )\n\n# The unique node names\nnodes <- data.frame(\n  name=c(as.character(links$source), as.character(links$target)) %>% \n    unique()\n  )\n\n# match to numbers, not names\nlinks$IDsource <- match(links$source, nodes$name)-1 \nlinks$IDtarget <- match(links$target, nodes$name)-1\n\n# plot\n######\np <- sankeyNetwork(Links = links,\n                   Nodes = nodes,\n                   Source = \"IDsource\",\n                   Target = \"IDtarget\",\n                   Value = \"n\",\n                   NodeID = \"name\",\n                   units = \"TWh\",\n                   fontSize = 12,\n                   nodeWidth = 30)\np"},{"path":"diagrams.html","id":"event-timelines","chapter":"34 Diagrams","heading":"34.5 Event timelines","text":"make timeline showing specific events, can use vistime package.See vignetteHere events dataset begin :","code":"\n# load package\npacman::p_load(vistime,  # make the timeline\n               plotly    # for interactive visualization\n               )\np <- vistime(data)    # apply vistime\n\nlibrary(plotly)\n\n# step 1: transform into a list\npp <- plotly_build(p)\n\n# step 2: Marker size\nfor(i in 1:length(pp$x$data)){\n  if(pp$x$data[[i]]$mode == \"markers\") pp$x$data[[i]]$marker$size <- 10\n}\n\n# step 3: text size\nfor(i in 1:length(pp$x$data)){\n  if(pp$x$data[[i]]$mode == \"text\") pp$x$data[[i]]$textfont$size <- 10\n}\n\n\n# step 4: text position\nfor(i in 1:length(pp$x$data)){\n  if(pp$x$data[[i]]$mode == \"text\") pp$x$data[[i]]$textposition <- \"right\"\n}\n\n#print\npp"},{"path":"diagrams.html","id":"dags","chapter":"34 Diagrams","heading":"34.6 DAGs","text":"can build DAG manually using DiagammeR package DOT language, described another tab. Alternatively, packages like ggdag daggityhttps://cran.r-project.org/web/packages/ggdag/vignettes/intro--dags.htmlhttps://www.r-bloggers.com/2019/08/causal-inference--dags--r/#:~:text=%20a%20DAG%20all%20the,%20drawing%20and%20analyzing%20DAGs.","code":""},{"path":"diagrams.html","id":"resources-23","chapter":"34 Diagrams","heading":"34.7 Resources","text":"Links online tutorials resources.","code":""},{"path":"combination-analysis.html","id":"combination-analysis","chapter":"35 Combination analysis","heading":"35 Combination analysis","text":"","code":""},{"path":"combination-analysis.html","id":"overview-32","chapter":"35 Combination analysis","heading":"35.1 Overview","text":"analysis plots frequency different combinations values/responses. example, plot frequency symptom combinations.analysis often called:Multiple response analysis\r\nSets analysis\r\nCombinations analysisThe first method shown uses package ggupset, second using package UpSetR.","code":"An example plot is below. Five symptoms are shown. Below each vertical bar is a line and dots indicating the combination of symptoms reflected by the bar above. To the right, horizontal bars reflect the frequency of each individual symptom."},{"path":"combination-analysis.html","id":"preparation-27","chapter":"35 Combination analysis","heading":"35.2 Preparation","text":"","code":"\npacman::p_load(tidyverse,\n               UpSetR,\n               ggupset)"},{"path":"combination-analysis.html","id":"view-the-data","chapter":"35 Combination analysis","heading":"35.2.1 View the data","text":"linelist includes five “yes/” variables reported symptoms. need transform variables bit use ggupset package make plot.View data (scroll right see symptoms variables)","code":"## Warning in instance$preRenderHook(instance): It seems your data is too big for client-side DataTables. You may consider server-side\r\n## processing: https://rstudio.github.io/DT/server.html"},{"path":"combination-analysis.html","id":"re-format-values","chapter":"35 Combination analysis","heading":"35.2.2 Re-format values","text":"convert “yes” “actual symptom name. ”\", set value blank.Now make two final variables:\r\n1. Pasting together symptoms patient (character variable)\r\n2. Convert class list, can accepted ggupset make plotView new data. Note two columns end - pasted combined values, list","code":"\n# create column with the symptoms named, separated by semicolons\nlinelist_sym_1 <- linelist_sym %>% \n  \n  # convert the \"yes\" and \"no\" values into the symptom name itself\n  mutate(fever = case_when(fever == \"yes\" ~ \"fever\",          # if old value is \"yes\", new value is \"fever\"\n                           TRUE           ~ NA_character_),   # if old value is anything other than \"yes\", the new value is NA\n         \n         chills = case_when(chills == \"yes\" ~ \"chills\",\n                           TRUE           ~ NA_character_),\n         \n         cough = case_when(cough == \"yes\" ~ \"cough\",\n                           TRUE           ~ NA_character_),\n         \n         aches = case_when(aches == \"yes\" ~ \"aches\",\n                           TRUE           ~ NA_character_),\n         \n         shortness_of_breath = case_when(shortness_of_breath == \"yes\" ~ \"shortness_of_breath\",\n                           TRUE           ~ NA_character_))\nlinelist_sym_1 <- linelist_sym_1 %>% \n  mutate(\n         # combine the variables into one, using paste() with a semicolon separating any values\n         all_symptoms = paste(fever, chills, cough, aches, shortness_of_breath, sep = \"; \"),\n         \n         # make a copy of all_symptoms variable, but of class \"list\" (which is required to use ggupset() in next step)\n         all_symptoms_list = as.list(strsplit(all_symptoms, \"; \"))\n         )\nDT::datatable(linelist_sym, rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T))## Warning in instance$preRenderHook(instance): It seems your data is too big for client-side DataTables. You may consider server-side\r\n## processing: https://rstudio.github.io/DT/server.html"},{"path":"combination-analysis.html","id":"ggupset","chapter":"35 Combination analysis","heading":"35.3 ggupset","text":"Load required package make plot (ggupset)Create plot:information ggupset can found online offline package documentation RStudio Help tab.","code":"\npacman::p_load(ggupset)\nggplot(linelist_sym_1,\n       aes(x=all_symptoms_list)) +\ngeom_bar() +\nscale_x_upset(reverse = FALSE,\n              n_intersections = 10,\n              sets = c(\"fever\", \"chills\", \"cough\", \"aches\", \"shortness_of_breath\")\n              )+\n  labs(title = \"Signs & symptoms\",\n       subtitle = \"10 most frequent combinations of signs and symptoms\",\n       caption = \"Caption here.\",\n       x = \"Symptom combination\",\n       y = \"Frequency in dataset\")## Warning: Removed 732 rows containing non-finite values (stat_count)."},{"path":"combination-analysis.html","id":"upsetr","chapter":"35 Combination analysis","heading":"35.4 UpSetR","text":"UpSetR package allows customization, difficult execute:https://github.com/hms-dbmi/UpSetR read \r\nhttps://gehlenborglab.shinyapps.io/upsetr/ Shiny App version - can upload data\r\nhttps://cran.r-project.org/web/packages/UpSetR/UpSetR.pdf documentation - difficult interpretConvert symptoms variables 1/0.Now make plot, using symptom variables. Must designate “sets” compare (names symptom variables).\r\nAlternatively use nsets = order.= \"freq\" show top X combinations.","code":"\npacman::p_load(UpSetR)\n# Make using upSetR\n\nlinelist_sym_2 <- linelist_sym %>% \n  \n  # convert the \"yes\" and \"no\" values into the symptom name itself\n  mutate(fever = case_when(fever == \"yes\" ~ 1,          # if old value is \"yes\", new value is \"fever\"\n                           TRUE           ~ 0),   # if old value is anything other than \"yes\", the new value is NA\n         \n         chills = case_when(chills == \"yes\" ~ 1,\n                           TRUE           ~ 0),\n         \n         cough = case_when(cough == \"yes\" ~ 1,\n                           TRUE           ~ 0),\n         \n         aches = case_when(aches == \"yes\" ~ 1,\n                           TRUE           ~ 0),\n         \n         shortness_of_breath = case_when(shortness_of_breath == \"yes\" ~ 1,\n                           TRUE           ~ 0))\n# Make the plot\nUpSetR::upset(\n  select(linelist_sym_2, fever, chills, cough, aches, shortness_of_breath),\n  sets = c(\"fever\", \"chills\", \"cough\", \"aches\", \"shortness_of_breath\"),\n  order.by = \"freq\",\n  sets.bar.color = c(\"blue\", \"red\", \"yellow\", \"darkgreen\", \"orange\"), # optional colors\n  empty.intersections = \"on\",\n  # nsets = 3,\n  number.angles = 0,\n  point.size = 3.5,\n  line.size = 2, \n  mainbar.y.label = \"Symptoms Combinations\",\n  sets.x.label = \"Patients with Symptom\")"},{"path":"combination-analysis.html","id":"resources-24","chapter":"35 Combination analysis","heading":"35.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"heatmaps-density-plots.html","id":"heatmaps-density-plots","chapter":"36 Heatmaps & density plots","heading":"36 Heatmaps & density plots","text":"","code":""},{"path":"heatmaps-density-plots.html","id":"overview-33","chapter":"36 Heatmaps & density plots","heading":"36.1 Overview","text":"Heatmaps can useful tracking reporting metrics across many facilities/jurisdictions timeFor example, image shows % weekdays data received facility, week--week:","code":""},{"path":"heatmaps-density-plots.html","id":"preparation-28","chapter":"36 Heatmaps & density plots","heading":"36.2 Preparation","text":"","code":"\npacman::p_load(OpenStreetMap,\n               aweek)"},{"path":"heatmaps-density-plots.html","id":"reporting-metrics-over-time","chapter":"36 Heatmaps & density plots","heading":"36.3 Reporting metrics over time","text":"Often public health, objective assess trends time many entities (facilities, jurisdictions, etc.). One way visualize trends time many entities heatmap x-axis time y-axis many entities.","code":""},{"path":"heatmaps-density-plots.html","id":"preparation-29","chapter":"36 Heatmaps & density plots","heading":"36.3.1 Preparation","text":"demonstrate , import dataset daily malaria case reports 65 facilities.preparation involve:Importing reviewing dataAggregating daily data weekly, summarizing weekly performance","code":""},{"path":"heatmaps-density-plots.html","id":"load-and-view","chapter":"36 Heatmaps & density plots","heading":"36.3.1.1 Load and view","text":"first 30 rows data:","code":""},{"path":"heatmaps-density-plots.html","id":"packages-6","chapter":"36 Heatmaps & density plots","heading":"36.3.1.2 Packages","text":"packages use :","code":"\npacman::p_load(tidyverse, # ggplot and data manipulation\n               rio,       # importing data\n               aweek)     # manage weeks"},{"path":"heatmaps-density-plots.html","id":"aggregate-and-summarize","chapter":"36 Heatmaps & density plots","heading":"36.3.1.3 Aggregate and summarize","text":"objective transform daily reports (seen previous tab) weekly reports summary performance - case proportion days per week facility reported data Spring District April-May 2019.achieve :Filter data appropriate (place, date)Create week column using date2week() package aweek\r\nfunction transforms dates weeks, using specified start date week (e.g. “Monday”)\r\nfloor_day = argument means dates rounded week (day week shown)\r\nfactor = argument converts new column factor - important possible weeks within date range designated levels, even data currently.\r\nfunction transforms dates weeks, using specified start date week (e.g. “Monday”)floor_day = argument means dates rounded week (day week shown)factor = argument converts new column factor - important possible weeks within date range designated levels, even data currently.data grouped columns “location” “week” create analysis units “facility-week”verb summarize() creates new columns calculate reporting performance “facility-week”:\r\nNumber days per week (7 - static value)\r\nNumber reports received facility-week (7!)\r\nSum malaria cases reported facility-week (just interest)\r\nNumber unique days facility-week data reported\r\nPercent 7 days per facility-week data reported\r\nNumber days per week (7 - static value)Number reports received facility-week (7!)Sum malaria cases reported facility-week (just interest)Number unique days facility-week data reportedPercent 7 days per facility-week data reportedThe dataframe joined (right_join()) comprehensive list possible facility-week combinations, make dataset complete. matrix possible combinations created applying expand() two columns dataframe moment pipe chain (represented “.”). right_join() used, rows expand() dataframe kept, added agg_weeks necessary. new rows appear NA (missing) summarized values.","code":"\n# Create weekly summary dataset\nagg_weeks <- facility_count_data %>% \n  \n  # filter the data as appropriate\n  filter(District == \"Spring\",\n         data_date < as.Date(\"2019-06-01\")) %>% \n  \n  # Create week column from data_date\n  mutate(week = aweek::date2week(data_date,\n                                 start_date = \"Monday\",\n                                 floor_day = TRUE,\n                                 factor = TRUE)) %>% \n  # Group into facility-weeks\n  group_by(location_name, week, .drop = F) %>%\n  \n  # Create summary column on the grouped data\n  summarize(n_days          = 7,                                          # 7 days per week           \n            n_reports       = dplyr::n(),                                 # number of reports received per week (could be >7)\n            malaria_tot     = sum(malaria_tot, na.rm = T),                # total malaria cases reported\n            n_days_reported = length(unique(data_date)),                  # number of unique days reporting per week\n            p_days_reported = round(100*(n_days_reported / n_days))) %>%  # percent of days reporting\n  \n  # Ensure every possible facility-week combination appears in the data\n  right_join(tidyr::expand(., week, location_name))    # \".\" represents the dataset at that moment in the pipe chain"},{"path":"heatmaps-density-plots.html","id":"create-heatmap","chapter":"36 Heatmaps & density plots","heading":"36.3.2 Create heatmap","text":"ggplot() make using geom_tile():Weeks x-axis transformed dates, allowing use scale_x_date()location_name y-axis show facility namesThe fill performance facility-week (numeric)scale_fill_gradient() used numeric fill, specifying colors high, low, NAscale_x_date() used x-axis specifying labels every 2 weeks formatAesthetic themes labels can adjusted necessary","code":""},{"path":"heatmaps-density-plots.html","id":"basic","chapter":"36 Heatmaps & density plots","heading":"36.3.2.1 Basic","text":"","code":"\nggplot(agg_weeks,\n       aes(x = aweek::week2date(week),            # transformed to date class\n           y = location_name,\n           fill = p_days_reported))+\n  # tiles\n  geom_tile(colour=\"white\")+                      # white gridlines\n  \n  scale_fill_gradient(low = \"orange\", high = \"darkgreen\", na.value = \"grey80\")+\n  scale_x_date(expand = c(0,0),\n               date_breaks = \"2 weeks\",\n               date_labels = \"%d\\n%b\")+\n  \n  # aesthetic themes\n  theme_minimal()+                                  # simplify background\n  theme(\n    legend.title = element_text(size=12, face=\"bold\"),\n    legend.text  = element_text(size=10, face=\"bold\"),\n    legend.key.height = grid::unit(1,\"cm\"),         # height of legend key\n    legend.key.width  = grid::unit(0.6,\"cm\"),       # width of legend key\n    \n    axis.text.x = element_text(size=12),\n    axis.text.y = element_text(vjust=0.2),\n    axis.ticks = element_line(size=0.4),\n    axis.title = element_text(size=12, face=\"bold\"),\n    \n    plot.title = element_text(hjust=0,size=14,face=\"bold\"),\n    plot.caption = element_text(hjust = 0, face = \"italic\")\n    )+\n  \n  # plot labels\n  labs(x = \"Week\",\n       y = \"Facility name\",\n       fill = \"Reporting\\nperformance (%)\", # legend title\n       title = \"Percent of days per week that facility reported data\",\n       subtitle = \"District health facilities, April-May 2019\",\n       caption = \"7-day weeks beginning on Mondays.\")"},{"path":"heatmaps-density-plots.html","id":"ordered-y-axis","chapter":"36 Heatmaps & density plots","heading":"36.3.2.2 Ordered y-axis","text":"want order y-axis facilities something, convert class Factor provide order. , order set based total number reporting days filed facility across whole timespan:Now use vector (facility_order$location_name) order factor levels location_name dataset agg_weeks:now data re-plotted, location_name ordered factor:","code":"\nfacility_order <- agg_weeks %>% \n  group_by(location_name) %>% \n  summarize(tot_reports = sum(n_days_reported, na.rm=T)) %>% \n  arrange(tot_reports) # ascending order\nas.tibble(facility_order)## Warning: `as.tibble()` is deprecated as of tibble 2.0.0.\r\n## Please use `as_tibble()` instead.\r\n## The signature and semantics have changed, see `?as_tibble`.\r\n## This warning is displayed once every 8 hours.\r\n## Call `lifecycle::last_warnings()` to see where this warning was generated.## # A tibble: 15 x 2\r\n##    location_name tot_reports\r\n##    <chr>               <int>\r\n##  1 Facility 56             1\r\n##  2 Facility 65             6\r\n##  3 Facility 11            19\r\n##  4 Facility 39            31\r\n##  5 Facility 59            33\r\n##  6 Facility 27            40\r\n##  7 Facility 32            41\r\n##  8 Facility 51            41\r\n##  9 Facility 7             42\r\n## 10 Facility 1             46\r\n## 11 Facility 9             48\r\n## 12 Facility 35            50\r\n## 13 Facility 50            51\r\n## 14 Facility 58            53\r\n## 15 Facility 28            75\nagg_weeks <- agg_weeks %>% \n  mutate(location_name = factor(location_name, levels = facility_order$location_name))\nggplot(agg_weeks,\n       aes(x = aweek::week2date(week),            # transformed to date class\n           y = location_name,\n           fill = p_days_reported))+\n  # tiles\n  geom_tile(colour=\"white\")+                      # white gridlines\n\n  scale_fill_gradient(low = \"orange\", high = \"darkgreen\", na.value = \"grey80\")+\n  scale_x_date(expand = c(0,0),\n               date_breaks = \"2 weeks\",\n               date_labels = \"%d\\n%b\")+\n  \n  # aesthetic themes\n  theme_minimal()+                                  # simplify background\n  theme(\n    legend.title = element_text(size=12, face=\"bold\"),\n    legend.text  = element_text(size=10, face=\"bold\"),\n    legend.key.height = grid::unit(1,\"cm\"),         # height of legend key\n    legend.key.width  = grid::unit(0.6,\"cm\"),       # width of legend key\n    \n    axis.text.x = element_text(size=12),\n    axis.text.y = element_text(vjust=0.2),\n    axis.ticks = element_line(size=0.4),\n    axis.title = element_text(size=12, face=\"bold\"),\n    \n    plot.title = element_text(hjust=0,size=14,face=\"bold\"),\n    plot.caption = element_text(hjust = 0, face = \"italic\")\n    )+\n  \n  # plot labels\n  labs(x = \"Week\",\n       y = \"Facility name\",\n       fill = \"Reporting\\nperformance (%)\", # legend title\n       title = \"Percent of days per week that facility reported data\",\n       subtitle = \"District health facilities, April-May 2019\",\n       caption = \"7-day weeks beginning on Mondays.\")"},{"path":"heatmaps-density-plots.html","id":"display-values","chapter":"36 Heatmaps & density plots","heading":"36.3.2.3 Display values","text":"can add geom_text() layer top tiles, display actual numbers tile. aware may look pretty many small tiles!Note fillowing code added geom_text(aes(label=p_days_reported))+. aesthetic aes() geom_tile() argument label (show) set numeric column used create color gradient.","code":"\nggplot(agg_weeks,\n       aes(x = aweek::week2date(week),            # transformed to date class\n           y = location_name,\n           fill = p_days_reported))+\n  # tiles\n  geom_tile(colour=\"white\")+                      # white gridlines\n  \n  geom_text(aes(label = p_days_reported))+          # add text on top of tile\n  \n  scale_fill_gradient(low = \"orange\", high = \"darkgreen\", na.value = \"grey80\")+\n  scale_x_date(expand = c(0,0),\n               date_breaks = \"2 weeks\",\n               date_labels = \"%d\\n%b\")+\n  \n  # aesthetic themes\n  theme_minimal()+                                  # simplify background\n  theme(\n    legend.title = element_text(size=12, face=\"bold\"),\n    legend.text  = element_text(size=10, face=\"bold\"),\n    legend.key.height = grid::unit(1,\"cm\"),         # height of legend key\n    legend.key.width  = grid::unit(0.6,\"cm\"),       # width of legend key\n    \n    axis.text.x = element_text(size=12),\n    axis.text.y = element_text(vjust=0.2),\n    axis.ticks = element_line(size=0.4),\n    axis.title = element_text(size=12, face=\"bold\"),\n    \n    plot.title = element_text(hjust=0,size=14,face=\"bold\"),\n    plot.caption = element_text(hjust = 0, face = \"italic\")\n    )+\n  \n  # plot labels\n  labs(x = \"Week\",\n       y = \"Facility name\",\n       fill = \"Reporting\\nperformance (%)\", # legend title\n       title = \"Percent of days per week that facility reported data\",\n       subtitle = \"District health facilities, April-May 2019\",\n       caption = \"7-day weeks beginning on Mondays.\")"},{"path":"heatmaps-density-plots.html","id":"gis-heatmaps","chapter":"36 Heatmaps & density plots","heading":"36.4 GIS heatmaps","text":"Contoured heatmap cases basemapCreate basemap tile OpenStreetMapPlot cases linelist using latitude longitudehttp://data-analytics.net/cep/Schedule_files/geospatial.htmlhttps://www.rdocumentation.org/packages/OpenStreetMap/versions/0.3.4/topics/autoplot.OpenStreetMap","code":"\npacman::p_load(OpenStreetMap)\n\n# Fit basemap by range of lat/long coordinates. Choose tile type\nmap <- openmap(c(max(linelist$lat, na.rm=T), max(linelist$lon, na.rm=T)),  # limits of tile\n               c(min(linelist$lat, na.rm=T), min(linelist$lon, na.rm=T)),\n               zoom = NULL,\n               type = c(\"osm\", \"stamen-toner\", \"stamen-terrain\",\"stamen-watercolor\", \"esri\",\"esri-topo\")[1],\n               mergeTiles = TRUE)\n\n# Projection WGS84\nmap.latlon <- openproj(map, projection = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n\n# Plot map. Must be autoplotted to work with ggplot\nOpenStreetMap::autoplot.OpenStreetMap(map.latlon)+\n  # Density tiles  \n  ggplot2::stat_density_2d(aes(x = lon,\n        y = lat,\n        fill = ..level..,\n        alpha=..level..),\n    bins = 10,\n    geom = \"polygon\",\n    contour_var = \"count\",\n    data = linelist,\n    show.legend = F) +\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of simulated cases\")"},{"path":"heatmaps-density-plots.html","id":"resources-25","chapter":"36 Heatmaps & density plots","heading":"36.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"transmission-chains.html","id":"transmission-chains","chapter":"37 Transmission Chains","heading":"37 Transmission Chains","text":"","code":""},{"path":"transmission-chains.html","id":"overview-34","chapter":"37 Transmission Chains","heading":"37.1 Overview","text":"primary tool visualize analyze transmission chains package epicontacts, developed folks RECON.","code":"## Warning: package 'outbreaks' was built under R version 4.0.3## Warning in epicontacts::make_epicontacts(linelist = mers_korea_2015$linelist, : Cycle(s) detected in the contact network: this may be\r\n## unwanted## Warning in vis_temporal_interactive(x, x_axis = x_axis, node_color = node_color, : 14 nodes and 14 edges removed as x_axis data is\r\n## unavailable"},{"path":"transmission-chains.html","id":"preparation-30","chapter":"37 Transmission Chains","heading":"37.2 Preparation","text":"","code":""},{"path":"transmission-chains.html","id":"visualization","chapter":"37 Transmission Chains","heading":"37.3 Visualization","text":"transmission tree, date onset x-axis:Note: currently requires installing development version epicontacts github… @ttree","code":"\nlinks <- epicontacts::make_epicontacts(linelist = mers_korea_2015$linelist,\n                                       contacts = mers_korea_2015$contacts, \n                                       directed = TRUE)## Warning in epicontacts::make_epicontacts(linelist = mers_korea_2015$linelist, : Cycle(s) detected in the contact network: this may be\r\n## unwanted\n# plot without time\nplot(links,\n     selector = FALSE,\n     height = 700,\n     width = 700)\n# plot with date of onset as x-axis\nplot(sim,\n     x_axis = 'onset',\n     height = 700,\n     width = 700,\n)## Warning in vis_temporal_interactive(x, x_axis = x_axis, node_color = node_color, : 14 nodes and 14 edges removed as x_axis data is\r\n## unavailable"},{"path":"transmission-chains.html","id":"analysis","chapter":"37 Transmission Chains","heading":"37.4 Analysis","text":"","code":"\nsummary(links)## \r\n## /// Overview //\r\n##   // number of unique IDs in linelist: 162\r\n##   // number of unique IDs in contacts: 97\r\n##   // number of unique IDs in both: 97\r\n##   // number of contacts: 98\r\n##   // contacts with both cases in linelist: 100 %\r\n## \r\n## /// Degrees of the network //\r\n##   // in-degree summary:\r\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n##  0.0000  0.0000  1.0000  0.6049  1.0000  3.0000 \r\n## \r\n##   // out-degree summary:\r\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n##  0.0000  0.0000  0.0000  0.6049  0.0000 38.0000 \r\n## \r\n##   // in and out degree summary:\r\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n##    0.00    0.00    1.00    1.21    1.00   39.00 \r\n## \r\n## /// Attributes //\r\n##   // attributes in linelist:\r\n##  age age_class sex place_infect reporting_ctry loc_hosp dt_onset dt_report week_report dt_start_exp dt_end_exp dt_diag outcome dt_death\r\n## \r\n##   // attributes in contacts:\r\n##  exposure diff_dt_onset"},{"path":"transmission-chains.html","id":"resources-26","chapter":"37 Transmission Chains","heading":"37.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"phylogenetic-trees.html","id":"phylogenetic-trees","chapter":"38 Phylogenetic trees","heading":"38 Phylogenetic trees","text":"","code":""},{"path":"phylogenetic-trees.html","id":"overview-35","chapter":"38 Phylogenetic trees","heading":"38.1 Overview","text":"Phylogenetic trees used visualize describe relatedness evolution organisms based sequence genetic code. can constructed genetic sequences using distance-based methods (neighbor-joining method) character-based methods (maximum likelihood Bayesian Markov Chain Monte Carlo method). Next-generation sequencing (NGS) become affordable becoming widely used public health describe pathogens causing infectious diseases. Portable devices decrease turn around time make data available support outbreak investigation real-time. NGS data can used identify origin source outbreak strain propagation, well determine presence antimicrobial resistance genes. visualize genetic relatedness samples phylogenetic tree constructed. page learn use ggtree() package, allows combination phylogenetic trees additional sample data form dataframe order help observe patterns improve understanding outbreak dynamic.","code":""},{"path":"phylogenetic-trees.html","id":"preparation-31","chapter":"38 Phylogenetic trees","heading":"38.2 Preparation","text":"code chunk shows loading required packages:several different formats phylogenetic tree can stored (eg. Newick, NEXUS, Phylip). common one, also use example Newick file format (.nwk), standard representing trees computer-readable form. means, entire tree can expressed string format “((t2:0.04,t1:0.34):0.89,(t5:0.37,(t4:0.03,t3:0.67):0.9):0.59);” listing nodes tips relationship (branch length) .important understand phylogenetic tree file contain sequencing data, merely result distances sequences. therefore extract sequencing data tree file.use ape() package import phylogenetic tree file store list object class “phylo”. inspect tree object see contains 299 tips (samples) 236 nodes.Second import table additional information sequenced sample gender, country origine attributes antimicrobial resistance:clean inspect data: order assign correct sample data phylogenetic tree, Sample_IDs sample_data file need match tip.labels tree file:Upon inspection can see format sample_ID dataframe corresponds format sample names tree tips. sorted order matched.ready go!","code":"\n# First we load the pacman package:\nlibrary(pacman)\n\n# This allows us to load multiple packages at the same time in one line of code:\npacman::p_load(here, ggplot2, dplyr, ape, ggtree, treeio, ggnewscale)\n# read in the tree: we use the here package to specify the location of our R project and data files:\ntree <- ape::read.tree(here::here(\"data\", \"Shigella_tree.nwk\"))\n\n# inspect the tree file:\ntree## \r\n## Phylogenetic tree with 299 tips and 236 internal nodes.\r\n## \r\n## Tip labels:\r\n##   SRR5006072, SRR4192106, S18BD07865, S18BD00489, S17BD08906, S17BD05939, ...\r\n## Node labels:\r\n##   17, 29, 100, 67, 100, 100, ...\r\n## \r\n## Rooted; includes branch lengths.\n# We read in a csv file into a dataframe format:\nsample_data <- read.csv(here::here(\"data\",\"sample_data_Shigella_tree.csv\"),sep=\",\", na.strings=c(\"NA\"), head = TRUE, stringsAsFactors=F)\n# We clean the data: we select certain columns to be protected from cleaning in order to main tain their formating (eg. for the sample names, as they have to match the names in the phylogenetic tree file)\n#sample_data <- linelist::clean_data(sample_data, protect = c(1, 3:5)) \n\n# We check the formatting of the tip labels in the tree file: \n\nhead(tree$tip.label) # these are the sample names in the tree - we inspect the first 6 with head()## [1] \"SRR5006072\" \"SRR4192106\" \"S18BD07865\" \"S18BD00489\" \"S17BD08906\" \"S17BD05939\"\n# We make sure the first column in our dataframe are the Sample_IDs:\ncolnames(sample_data)   ##  [1] \"Sample_ID\"                  \"serotype\"                   \"Country\"                    \"Continent\"                 \r\n##  [5] \"Travel_history\"             \"Year\"                       \"Patient_age\"                \"Source\"                    \r\n##  [9] \"Gender\"                     \"gyrA_mutations\"             \"macrolide_resistance_genes\" \"ESBL\"                      \r\n## [13] \"MIC_AZM\"                    \"MIC_CIP\"\n# We look at the sample_IDs in the dataframe to make sure the formatting is the same than in the tip.labels (eg. letters are all capital, no extra _ between letters and numbers etc.)\nhead(sample_data$Sample_ID) # we inspect only the first 6 using head()## [1] \"ERR025692\" \"ERR025682\" \"ERR025714\" \"ERR025713\" \"ERR025709\" \"ERR025711\""},{"path":"phylogenetic-trees.html","id":"simple-tree-visualization","chapter":"38 Phylogenetic trees","heading":"38.3 Simple tree visualization","text":"","code":""},{"path":"phylogenetic-trees.html","id":"different-tree-layouts","chapter":"38 Phylogenetic trees","heading":"38.3.1 Different tree layouts:","text":"ggtree() offers many different layout formats may suitable specific purpose others:","code":"\n# Examples:\nggtree(tree) # most simple linear tree\nggtree(tree,  branch.length = \"none\") # most simple linear tree with all tips aligned\nggtree(tree, layout=\"circular\") # most simple circular tree\nggtree(tree, layout=\"circular\", branch.length = \"none\") # most simple circular tree with all tips aligned\n\n# for other options see online: http://yulab-smu.top/treedata-book/chapter4.html"},{"path":"phylogenetic-trees.html","id":"simple-tree-with-addition-of-sample-data","chapter":"38 Phylogenetic trees","heading":"38.3.2 Simple tree with addition of sample data:","text":"easy annotation tree addition sample names tips, well coloring tip points desired branches:","code":"\n# A: Plot Circular tree:\nggtree(tree, layout=\"circular\", branch.length='none') %<+% sample_data + # the %<+% is used to add your dataframe with sample data to the tree\n  aes(color=I(Source))+ # color the branches according to a variable in your dataframe\n  scale_color_manual(name = \"Sample Origin\", # name of your color scheme (will show up in the legend like this)\n                     breaks = c(\"NRC BEL\", \"NA\"), # the different options in your variable\n                     labels = c(\"NRCSS Belgium\", \"\"), # how you want the different options named in your legend, allows for formatting\n                     values= c(\"blue\"), # the color you want to assign to the variable if its \"nrc_bel\"\n                     na.value=\"grey\")+ # for the NA values we choose the color grey\n  new_scale_color()+ # allows to add an additional color scheme for another variable\n     geom_tippoint(aes(color=Continent), size=1.5)+ # color the tip point by continent, you may change shape adding \"shape = \"\nscale_color_brewer(name = \"Continent\",  # name of your color scheme (will show up in the legend like this)\n                       palette=\"Set1\", # we choose a premade set of colors coming with the brewer package\n                   na.value=\"grey\")+ # for the NA values we choose the color grey\n  geom_tiplab(color='black', offset = 1, size = 1, geom = \"text\" , align=TRUE)+ # add the name of the sample to the tip of its branch (you can add as many text lines as you like with the + , you just need to change the offset value to place them next to each other)\n  ggtitle(\"Phylogenetic tree of Shigella sonnei\")+ # title of your graph\n  theme(axis.title.x=element_blank(), # removes x-axis title\n      axis.title.y=element_blank(), # removes y-axis title\n     legend.title=element_text(face=\"bold\", size =12), # defines font size and format of the legend title\n       legend.text=element_text(face=\"bold\", size =10), # defines font size and format of the legend text\n      plot.title = element_text(size =12, face=\"bold\"),  # defines font size and format of the plot title\n     legend.position=\"bottom\", # defines placement of the legend\n        legend.box=\"vertical\", legend.margin=margin()) # defines placement of the legend## Warning: Duplicated aesthetics after name standardisation: size\r\n\r\n## Warning: Duplicated aesthetics after name standardisation: size\n# Export your tree graph:\nggsave(here::here(\"example_tree_circular_1.png\"), width = 12, height = 14)"},{"path":"phylogenetic-trees.html","id":"manipulation-of-phylogenetic-trees","chapter":"38 Phylogenetic trees","heading":"38.4 Manipulation of phylogenetic trees","text":"Sometimes may large phylogenetic tree interested one part tree. example produced tree including historical international samples get large overview dataset might fit bigger picture. look closer data want inspect portion bigger tree.Since phylogenetic tree file just output sequencing data analysis, can manipulate order nodes branches file . already determined previous analysis raw NGS data. able though zoom parts, hide parts seven subset part tree.","code":""},{"path":"phylogenetic-trees.html","id":"zooming-in-on-one-part-of-the-tree","chapter":"38 Phylogenetic trees","heading":"38.4.1 Zooming in on one part of the tree:","text":"don’t want “cut” tree, inspect part closely can zoom view specific part:want zoom branch sticking , node number 452 get closer look:","code":"\n# First we plot the whole tree:\np <- ggtree(tree,) %<+% sample_data +\n  geom_tiplab(size =1.5) + # labels the tips of all branche with the sample name in the tree file\n  geom_text2(aes(subset=!isTip, label=node), size =5, color = \"darkred\", hjust=1, vjust =1) # labels all the nodes in the tree\np\nviewClade(p , node=452)"},{"path":"phylogenetic-trees.html","id":"collapsing-one-part-of-the-tree","chapter":"38 Phylogenetic trees","heading":"38.4.2 Collapsing one part of the tree:","text":"way around may want ignore branch sticking can collapsing node (indicated blue square):","code":"\n#First we collapse at node 452\np_collapsed <- collapse(p, node=452)\n\n#To not forget that we collapsed this node we assign a symbol to it:\np_collapsed + geom_point2(aes(subset=(node == 452)), size=5, shape=23, fill=\"steelblue\")"},{"path":"phylogenetic-trees.html","id":"subsetting-a-tree","chapter":"38 Phylogenetic trees","heading":"38.4.3 Subsetting a tree:","text":"want make permanent change create new tree work can subset part even save new newick tree file.can also save new tree Newick file:","code":"\n# To do so you can add the node and tip labels to your tree to see which part you want to subset:\nggtree(tree, branch.length='none', layout='circular') %<+% sample_data +\n  geom_tiplab(size =1) + # labels the tips of all branche with the sample name in the tree file\n  geom_text2(aes(subset=!isTip, label=node), size =3, color = \"darkred\") +# labels all the nodes in the tree\n theme(legend.position = \"none\", # removes the legend all together\n axis.title.x=element_blank(),\n      axis.title.y=element_blank(),\n      plot.title = element_text(size =12, face=\"bold\"))\n\n# A: Subset tree based on node:\nsub_tree1 <- tree_subset(tree, node = 528) # we subset the tree at node 528\n# lets have a look at the subset tree:\nggtree(sub_tree1)+  geom_tiplab(size =3) +\n  ggtitle(\"Subset tree 1\")\n\n# B: Subset the same part of the tree based on a samplem in this case S17BD07692:\nsub_tree2 <- tree_subset(tree,\"S17BD07692\", levels_back = 9) # levels back defines how many nodes backwards from the sample tip you want to go\n# lets have a look at the subset tree:\nggtree(sub_tree2)+  geom_tiplab(size =3)  +\n  ggtitle(\"Subset tree 2\")\nape::write.tree(sub_tree2, file='Shigelle_subtree_2.nwk')"},{"path":"phylogenetic-trees.html","id":"rotating-nodes-in-a-tree","chapter":"38 Phylogenetic trees","heading":"38.4.4 Rotating nodes in a tree:","text":"mentioned change order tips nodes tree, based genetic relatedness subject visual manipulation. can rote branches around nodes eases visualization.First plot new subsetted tree nodelabels choose node want manipulate:choose manipulate node number 39: applying ggtree::rotate() ggtree::fluip() indirectly node 36 node 39 moves bottom nodes 37 38 move top:","code":"\np <- ggtree(sub_tree2) +  geom_tiplab(size =4) +\n  geom_text2(aes(subset=!isTip, label=node), size =5, color = \"darkred\", hjust =1, vjust =1) # labels all the nodes in the tree\np\n# \n# p1 <- p + geom_hilight(39, \"steelblue\", extend =0.0015)+ # highlights the node 39 in blue\n#    geom_hilight(37, \"yellow\", extend =0.0015)  + # highlights the node 37 in yellow\n#   ggtitle(\"Original tree\")\n# \n# # we want to rotate node 36 so node 39 is on the bottom and nodes 37 and 38 move to the top:\n# \n# rotate(p1, 39) %>% rotate(37)+\n#   ggtitle(\"Rotated Node 36\")\n# \n# #or we can use the flip command to achieve the same thing:\n# flip(p1, 39, 37)"},{"path":"phylogenetic-trees.html","id":"example-subtree-with-sample-data-annotation","chapter":"38 Phylogenetic trees","heading":"38.4.5 Example subtree with sample data annotation:","text":"Lets say investigating cluster cases clonal expansion occured 2017 2018 node 39 sub-tree. add year strain isolation well travel history color country see origin closely related strains:observation points towards import strains Asia, circulated Belgium years seem caused latest outbreak.","code":"\n# Add sample data:\nggtree(sub_tree2) %<+% sample_data + \n   geom_tiplab(size =2.5, offset = 0.001, align = TRUE) + # labels the tips of all branche with the sample name in the tree file\n  theme_tree2()+\n  xlab(\"genetic distance\")+ # add a label to the x-azis\n  xlim(0, 0.015)+ # set the x-axis limits of our tree\n  geom_tippoint(aes(color=Country), size=1.5)+ # color the tip point by continent\n  scale_color_brewer(name = \"Country\", \n                       palette=\"Set1\", \n                     na.value=\"grey\")+\n    geom_tiplab(aes(label = Year), color='blue', offset = 0.0045, size = 3, linetype = \"blank\" , geom = \"text\" , align=TRUE)+ # add isolation year\n    geom_tiplab(aes(label = Travel_history), color='red', offset = 0.006, size = 3, linetype = \"blank\" , geom = \"text\" , align=TRUE)+ # add travel history\n  ggtitle(\"Phylogenetic tree of Belgian S. sonnei strains with travel history\")+ # add plot title\n  theme(axis.title.x=element_blank(),\n      axis.title.y=element_blank(),\n     legend.title=element_text(face=\"bold\", size =12),\n       legend.text=element_text(face=\"bold\", size =10),\n      plot.title = element_text(size =12, face=\"bold\"))## Warning: Duplicated aesthetics after name standardisation: size\r\n\r\n## Warning: Duplicated aesthetics after name standardisation: size\r\n\r\n## Warning: Duplicated aesthetics after name standardisation: size"},{"path":"phylogenetic-trees.html","id":"more-complex-trees-adding-heatmaps-of-sample-data","chapter":"38 Phylogenetic trees","heading":"38.5 More complex trees: adding heatmaps of sample data","text":"can add complex information, categorical presence antimicrobial resistance genes numeric values actually measured resistance antimicrobials form heatmap using ggtree::gheatmap() function.First need plot tree (can either linear circular): use sub_stree part 3.)Second prepare data. visualize different variables new color schemes, subset dataframe desired variable.example want look gender mutations confer resistance ciprofloxacin:create first plot adding binary heatmap gender phylogenetic tree:add information ciprofloxacin resistance genes:Next add continuous data actual resistance determined laboratory\r\nminimum inhibitory concentration (MIC) ciprofloxacin :can exercise linear tree:","code":"\n# A: Circular tree:\np <- ggtree(sub_tree2, branch.length='none', layout='circular') %<+% sample_data +\n  geom_tiplab(size =3) + \n theme(legend.position = \"none\",\n axis.title.x=element_blank(),\n      axis.title.y=element_blank(),\n      plot.title = element_text(size =12, face=\"bold\",hjust = 0.5, vjust = -15))\np\n# Create your gender dataframe:\ngender <- data.frame(\"gender\" = sample_data[,c(\"Gender\")])\n# Its important to add the Sample_ID as rownames otherwise it cannot match the data to the tree tip.labels:\nrownames(gender) <- sample_data$Sample_ID\n\n# Create your ciprofloxacin dataframe based on mutations in the gyrA gene:\ncipR <- data.frame(\"cipR\" = sample_data[,c(\"gyrA_mutations\")])\nrownames(cipR) <- sample_data$Sample_ID\n\n# Create your ciprofloxacin dataframe based on the measured minimum inhibitory concentration (MIC) from the laboratory:\nMIC_Cip <- data.frame(\"mic_cip\" = sample_data[,c(\"MIC_CIP\")])\nrownames(MIC_Cip) <- sample_data$Sample_ID\n# First we add gender:\nh1 <-  gheatmap(p, gender, offset = 10, width=0.10, color=NULL, # offset shifts the heatmap to the right, width defines the width of the heatmap column, color defines the boarder of the heatmap columns\n         colnames = FALSE)+ # hides column names for the heatmap\n  scale_fill_manual(name = \"Gender\", # define the coloring scheme and legend for gender\n                    values = c(\"#00d1b1\", \"purple\"),\n                    breaks = c(\"Male\", \"Female\"),\n                    labels = c(\"Male\", \"Female\"))+\n   theme(legend.position=\"bottom\",\n        legend.title = element_text(size=12),\n        legend.text = element_text(size =10),\n        legend.box=\"vertical\", legend.margin=margin())## Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale.\nh1\n# First we assigng a new color scheme to our existing plot, this enables us to define and change the colors for our second variable\nh2 <- h1 + new_scale_fill() \n\n# then we combine these into a new plot:\nh3 <- gheatmap(h2, cipR,  offset = 12, width=0.10, # adds the second row of heatmap describing ciprofloxacin resistance genes\n                colnames = FALSE)+\n  scale_fill_manual(name = \"Ciprofloxacin resistance \\n conferring mutation\",\n                    values = c(\"#fe9698\",\"#ea0c92\"),\n                    breaks = c( \"gyrA D87Y\", \"gyrA S83L\"),\n                    labels = c( \"gyrA d87y\", \"gyrA s83l\"))+\n   theme(legend.position=\"bottom\",\n        legend.title = element_text(size=12),\n        legend.text = element_text(size =10),\n        legend.box=\"vertical\", legend.margin=margin())+\n  guides(fill=guide_legend(nrow=2,byrow=TRUE))## Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale.\nh3\n# First we add the new coloring scheme:\nh4 <- h3 + new_scale_fill()\n\n# then we combine the two into a new plot:\nh5 <- gheatmap(h4, MIC_Cip,  offset = 14, width=0.10,\n                colnames = FALSE)+\n  scale_fill_continuous(name = \"MIC for ciprofloxacin\",\n                      low = \"yellow\", high = \"red\",\n                      breaks = c(0, 0.50, 1.00),\n                      na.value = \"white\")+\n   guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+\n   theme(legend.position=\"bottom\",\n        legend.title = element_text(size=12),\n        legend.text = element_text(size =10),\n        legend.box=\"vertical\", legend.margin=margin())## Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale.\nh5\n# B: Lineartree:\np <- ggtree(sub_tree2) %<+% sample_data +\n  geom_tiplab(size =3) + # labels the tips\n  theme_tree2()+\n  xlab(\"genetic distance\")+\n  xlim(0, 0.015)+\n theme(legend.position = \"none\",\n      axis.title.y=element_blank(),\n      plot.title = element_text(size =12, face=\"bold\",hjust = 0.5, vjust = -15))\n\n\n# First we add gender:\n\nh1 <-  gheatmap(p, gender, offset = 0.003, width=0.1, color=\"black\", \n         colnames = FALSE)+\n  scale_fill_manual(name = \"Gender\",\n                    values = c(\"#00d1b1\", \"purple\"),\n                    breaks = c(\"Male\", \"Female\"),\n                    labels = c(\"Male\", \"Female\"))+\n   theme(legend.position=\"bottom\",\n        legend.title = element_text(size=12),\n        legend.text = element_text(size =10),\n        legend.box=\"vertical\", legend.margin=margin())## Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale.\n# h1\n\n# Then we add ciprofloxacin after adding another colorscheme layer:\n\nh2 <- h1 + new_scale_fill()\nh3 <- gheatmap(h2, cipR,  offset = 0.004, width=0.1,color=\"black\",\n                colnames = FALSE)+\n  scale_fill_manual(name = \"Ciprofloxacin resistance \\n conferring mutation\",\n                    values = c(\"#fe9698\",\"#ea0c92\"),\n                    breaks = c( \"gyrA D87Y\", \"gyrA S83L\"),\n                    labels = c( \"gyrA d87y\", \"gyrA s83l\"))+\n   theme(legend.position=\"bottom\",\n        legend.title = element_text(size=12),\n        legend.text = element_text(size =10),\n        legend.box=\"vertical\", legend.margin=margin())+\n  guides(fill=guide_legend(nrow=2,byrow=TRUE))## Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.\r\n## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale.\n# h3\n\n# Then we add the minimum inhibitory concentration determined by the lab (MIC):\nh4 <- h3 + new_scale_fill()\nh5 <- gheatmap(h4, MIC_Cip, offset = 0.005, width=0.1, color=\"black\", \n                colnames = FALSE)+\n  scale_fill_continuous(name = \"MIC for ciprofloxacin\",\n                      low = \"yellow\", high = \"red\",\n                      breaks = c(0,0.50,1.00),\n                      na.value = \"white\")+\n   guides(fill = guide_colourbar(barwidth = 5, barheight = 1))+\n   theme(legend.position=\"bottom\",\n        legend.title = element_text(size=10),\n        legend.text = element_text(size =8),\n        legend.box=\"horizontal\", legend.margin=margin())+\n  guides(shape = guide_legend(override.aes = list(size = 2)))## Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.\r\n## Scale for 'fill' is already present. Adding another scale for 'fill', which will replace the existing scale.\nh5"},{"path":"phylogenetic-trees.html","id":"resources-27","chapter":"38 Phylogenetic trees","heading":"38.6 Resources","text":"http://hydrodictyon.eeb.uconn.edu/eebedia/index.php/Ggtree# Clade_Colors\r\nhttps://bioconductor.riken.jp/packages/3.2/bioc/vignettes/ggtree/inst/doc/treeManipulation.html\r\nhttps://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html\r\nhttps://bioconductor.riken.jp/packages/3.8/bioc/vignettes/ggtree/inst/doc/treeManipulation.html","code":""},{"path":"interactive-plots.html","id":"interactive-plots","chapter":"39 Interactive plots","heading":"39 Interactive plots","text":"Data visualisation increasingly required interrogable audience. Consequently creating interactive plots becoming common. several ways include two important {plotly} {shiny}.{Shiny} covered another part handbook, cover {plotly} .\r\n#TODO - link shiny page","code":""},{"path":"interactive-plots.html","id":"overview-36","chapter":"39 Interactive plots","heading":"39.1 Overview","text":"Making plots interactive can sound difficult turns , thanks fantastic tools.section, ’ll learn easily make plot interactive {wonders {ggplot2} {plotly}","code":"## Warning: Removed 3 rows containing missing values (position_stack)."},{"path":"interactive-plots.html","id":"preparation-32","chapter":"39 Interactive plots","heading":"39.2 Preparation","text":"example saw basic epicurve transformed bbe interactive using fantastic {ggplot2} - {plotly} integrations. start, make basic chart :Loading dataManipulate add columns (best taught epicurves section)Count plotting","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")\nlinelist <- linelist %>% \n  dplyr::mutate(\n    ## If the outcome column is NA, change to \"Unknown\"\n    outcome = dplyr::if_else(condition = is.na(outcome),\n                             true = \"Unknown\",\n                             false = outcome),\n    ## If the date of infection is NA, use the date of onset instead\n    date_earliest = dplyr::if_else(condition = is.na(date_infection),\n                                   true = date_onset,\n                                   false = date_infection),\n    ## Summarise earliest date to earliest week \n    week_earliest = lubridate::floor_date(x = date_earliest,\n                                          unit = \"week\",\n                                          week_start = 1)\n    )\n## Find number of cases in each week by their outcome\nlinelist <- linelist %>% \n  dplyr::count(week_earliest, outcome)"},{"path":"interactive-plots.html","id":"plot","chapter":"39 Interactive plots","heading":"39.3 Plot","text":"Make plotMake interactiveVoila!","code":"\np <- linelist %>% \n  ggplot()+\n  geom_col(aes(week_earliest, n, fill = outcome))+\n  xlab(\"Week of infection/onset\") + ylab(\"Cases per week\")+\n  theme_minimal()\np <- p %>% \n  plotly::ggplotly()\np## Warning: Removed 3 rows containing missing values (position_stack)."},{"path":"interactive-plots.html","id":"modifications-2","chapter":"39 Interactive plots","heading":"39.4 Modifications","text":"exporting Rmarkdown generated HTML (like book!) want make plot small possible (negative side effects cases). , just add add line:buttons standard plotly (shown preparation tab) superfluous can distracting, ’s best remove . can simply piping output plotly::config","code":"\np <- p %>% \n  plotly::partial_bundle()\n## these buttons are superfluous/distracting\nplotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',\n                              'zoomOut2d','autoScale2d','hoverClosestCartesian',\n                              'toggleSpikelines','hoverCompareCartesian')\n\np <- p %>% \n  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)"},{"path":"interactive-plots.html","id":"example","chapter":"39 Interactive plots","heading":"39.5 Example","text":"Earlier saw #TODO link heatmaps make heatmaps, just easy make interactive.","code":"## `summarise()` has grouped output by 'location_name'. You can override using the `.groups` argument.## Joining, by = c(\"location_name\", \"week\")\nmetrics_plot %>% \n  ggplotly() %>% \n  partial_bundle() %>% \n  config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)"},{"path":"interactive-plots.html","id":"maps---preparation","chapter":"39 Interactive plots","heading":"39.6 Maps - preparation","text":"can even make interactive maps! However, ’re slightly trickier. Although {plotly} works well ggplot2::geom_sf RStudio, try include ’s outputs Rmarkdown HTML files (like book), doesn’t work well.instead can use {plotly}’s mapping tools can tricky easy know . Read …’re going use Covid-19 incidence across African countries example. data used can found World Health Organisation website.’ll also need new type file, GeoJSON, sort similar shp file familiar GIS. book, used one .GeoJSON files stored R complex lists ’ll need maipulate little.tricky part. {plotly} match incidence data GeoJSON, countries geoJSON need id specific place list lists. need build basic function:","code":"\n## You need two new packages: {rjson} and {purrr}\npacman::p_load(plotly, rjson, purrr)\n\n## This is a simplified version of the WHO data\ndf <- rio::import(here::here(\"data\", \"covid_incidence.csv\"))\n\n## Load your geojson file\ngeoJSON <- rjson::fromJSON(file=here::here(\"data\", \"africa_countries.geo.json\"))\n\n## Here are some of the properties for each element of the object\nhead(geoJSON$features[[1]]$properties)## $scalerank\r\n## [1] 1\r\n## \r\n## $featurecla\r\n## [1] \"Admin-0 country\"\r\n## \r\n## $labelrank\r\n## [1] 6\r\n## \r\n## $sovereignt\r\n## [1] \"Burundi\"\r\n## \r\n## $sov_a3\r\n## [1] \"BDI\"\r\n## \r\n## $adm0_dif\r\n## [1] 0\n## The property column we need to choose here is \"sovereignt\" as it is the names for each country\ngive_id <- function(x){\n  \n  x$id <- x$properties$sovereignt  ## Take sovereignt from properties and set it as the id\n  \n  return(x)\n}\n\n## Use {purrr} to apply this function to every element of the features list of the geoJSON object\ngeoJSON$features <- purrr::map(.x = geoJSON$features, give_id)"},{"path":"interactive-plots.html","id":"maps---plot","chapter":"39 Interactive plots","heading":"39.7 Maps - plot","text":"","code":"\nplotly::plot_ly() %>% \n  plotly::add_trace(                    #The main plot mapping functionn\n    type=\"choropleth\",\n    geojson=geoJSON,\n    locations=df$Name,          #The column with the names (must match id)\n    z=df$Cumulative_incidence,  #The column with the incidence values\n    zmin=0,\n    zmax=57008,\n    colorscale=\"Viridis\",\n    marker=list(line=list(width=0))\n  ) %>%\n  plotly::colorbar(title = \"Cases per million\") %>%\n  plotly::layout(title = \"Covid-19 cumulative incidence\",\n                 geo = list(scope = 'africa')) %>% \n  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)"},{"path":"interactive-plots.html","id":"resources-28","chapter":"39 Interactive plots","heading":"39.8 Resources","text":"Plotly just R, also works well Python (really data science language ’s built JavaScript). can read plotly website","code":""},{"path":"advanced-rstudio.html","id":"advanced-rstudio","chapter":"40 Advanced RStudio","heading":"40 Advanced RStudio","text":"","code":""},{"path":"advanced-rstudio.html","id":"overview-37","chapter":"40 Advanced RStudio","heading":"40.1 Overview","text":"rprofilesKeep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"advanced-rstudio.html","id":"preparation-33","chapter":"40 Advanced RStudio","heading":"40.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"advanced-rstudio.html","id":"sub-tab-1-9","chapter":"40 Advanced RStudio","heading":"40.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"advanced-rstudio.html","id":"sub-tab-2-9","chapter":"40 Advanced RStudio","heading":"40.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"advanced-rstudio.html","id":"option-1-7","chapter":"40 Advanced RStudio","heading":"40.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"advanced-rstudio.html","id":"option-1-sub-tab-7","chapter":"40 Advanced RStudio","heading":"40.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"advanced-rstudio.html","id":"option-2-7","chapter":"40 Advanced RStudio","heading":"40.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"advanced-rstudio.html","id":"option-2-sub-tab-9","chapter":"40 Advanced RStudio","heading":"40.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"advanced-rstudio.html","id":"resources-29","chapter":"40 Advanced RStudio","heading":"40.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"relational-databases.html","id":"relational-databases","chapter":"41 Relational databases","heading":"41 Relational databases","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"relational-databases.html","id":"overview-38","chapter":"41 Relational databases","heading":"41.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"relational-databases.html","id":"preparation-34","chapter":"41 Relational databases","heading":"41.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"relational-databases.html","id":"sub-tab-1-10","chapter":"41 Relational databases","heading":"41.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"relational-databases.html","id":"sub-tab-2-10","chapter":"41 Relational databases","heading":"41.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"relational-databases.html","id":"option-1-8","chapter":"41 Relational databases","heading":"41.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"relational-databases.html","id":"option-1-sub-tab-8","chapter":"41 Relational databases","heading":"41.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"relational-databases.html","id":"option-2-8","chapter":"41 Relational databases","heading":"41.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"relational-databases.html","id":"option-2-sub-tab-10","chapter":"41 Relational databases","heading":"41.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"relational-databases.html","id":"resources-30","chapter":"41 Relational databases","heading":"41.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"routine-reports.html","id":"routine-reports","chapter":"42 Routine reports","heading":"42 Routine reports","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"routine-reports.html","id":"overview-39","chapter":"42 Routine reports","heading":"42.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"routine-reports.html","id":"preparation-35","chapter":"42 Routine reports","heading":"42.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"routine-reports.html","id":"sub-tab-1-11","chapter":"42 Routine reports","heading":"42.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"routine-reports.html","id":"sub-tab-2-11","chapter":"42 Routine reports","heading":"42.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"routine-reports.html","id":"option-1-9","chapter":"42 Routine reports","heading":"42.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"routine-reports.html","id":"option-1-sub-tab-9","chapter":"42 Routine reports","heading":"42.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"routine-reports.html","id":"option-2-9","chapter":"42 Routine reports","heading":"42.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"routine-reports.html","id":"option-2-sub-tab-11","chapter":"42 Routine reports","heading":"42.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"routine-reports.html","id":"resources-31","chapter":"42 Routine reports","heading":"42.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"r-markdown.html","id":"r-markdown","chapter":"43 R Markdown","heading":"43 R Markdown","text":"R Markdown fantastic tool creating automated, reproducible, share-worthy outputs. can generate static interactive outputs, form html, word, pdf, powerpoint, others.","code":""},{"path":"r-markdown.html","id":"overview-40","chapter":"43 R Markdown","heading":"43.1 Overview","text":"Using markdown allow easily recreate entire formatted document, including tables/figures/text, using new data (e.g. daily surveillance reports) /subsets data (e.g. reports specific geographies).guide go basics. See ‘resources’ tab info.","code":""},{"path":"r-markdown.html","id":"preparation-36","chapter":"43 R Markdown","heading":"43.2 Preparation","text":"Preparation R Markdown workflow involves ensuring set R project folder structure suits desired workflow.instance, may want ‘output’ folder rendered documents, ‘input’ folder new cleaned data files, well subfolders within date-stamped reflect subgeographies interest. markdown can go ‘rmd’ subfolder, particularly multiple Rmd files within project.can set code create output subfolders time run reports (see “Producing output”), overall design mind.R Markdown can run pandoc issues running shared network drive, recommended folder local machine, e.g. project within ‘Documents’. use Git (much recommended!), familiar.","code":""},{"path":"r-markdown.html","id":"the-r-markdown-file","chapter":"43 R Markdown","heading":"43.3 The R Markdown file","text":"R Markdown document looks like can edited just like standard R script, R Studio. However, contains just usual R code hashed comments. three basic components:1. Metadata: referred ‘YAML metadata’ top R Markdown document two ‘—‘s. tell Rmd file type output produce, formatting preferences, metadata sucsh document title, author, date. uses mentioned (referred ‘Producing output’). Note indentation matters.2. Text: narrative document, including titles. written markdown language, used across many different programmes. means can add basic formatting, instance:_text_ *text* italicise**text** bold text# start new line title (## second-level title, ## third-level title etc)* start new line bullet pointstext display text code ()actual appearance font can set using specific templates (specified YAML metadata; see example tabs).can also include minimal R code within backwards ticks, within-text values. See example .3. Code chunks: R code goes, actual data management visualisation. note:\r\n‘chunks’ appear slightly different background colour narrative part document.chunk always starts three backticks chunk information within squiggly brackets, ends three backticks.notes content squiggly brackets:start ‘r’ indicate language name within chunk rFollowed chunk name - note ALWAYS unique name else R complain try render.can include options , many can configured point--click using setting buttons top right chunk. , can specify parts chunk want rendered document include, namely code, outputs, warnings. come written preferences within squiggly brackets, e.g. ‘echo=FALSE’ specify want ‘Show output ’.also two arrows top right chunk, useful run code within chunk, code prior chunks.","code":""},{"path":"r-markdown.html","id":"producing-an-output","chapter":"43 R Markdown","heading":"43.4 Producing an output","text":"General notesEverything used markdown must referenced within Rmd file. instance, need load required packages data.single test run within R MarkdownTo render single document, instance testing need produce one rendered document time, can within open R Markdown file. Click “knit” button top document.‘R Markdown’ tab start processing show overall progress, complete document automatically open complete. document also saved folder markdown, file name aside file extension. obviously ideal version control, rename file .single run separate scriptTo run markdown date-stamped file produced, can create separate script call Rmd file within . can also specify folder file name, include dynamic date time, file date stamped production.Routine runs newly created date-stamped sub foldersAdd couple lines code define date running report (e.g. using Sys.Date example ) create new sub folders. want date reflect specific date rather current date, can also enter object.may want dynamic information included markdown . addressed next section.","code":"rmarkdown::render((\"rmd_reports/create_RED_report.Rmd\"),  \r\n                        output_file = paste0(\"outputs/Report_\", Sys.Date, \".docx\")) # Use 'paste0' to combine text and code for a dynamic file name# Set the date of report\r\nrefdate <- as.Date(\"2020-12-21\")\r\n\r\n# Create the folders\r\noutputfolder <- paste0(\"outputs/\", refdate) # This is the new folder name\r\ndir.create(outputfolder) # Creates the folder (in this case assumed 'outputs' already exists)\r\n\r\n#Run the loop\r\nrmarkdown::render((\"rmd_reports/create_report.Rmd\"),  \r\n                        output_file = paste0(outputfolder, \"/Report_\", refdate, \".docx\")) #Dyanmic folder name now included"},{"path":"r-markdown.html","id":"parametrised-reports","chapter":"43 R Markdown","heading":"43.5 Parametrised reports","text":"Parameterised reports next step content R Markdown can also dynamic. example, title can change according subgeography running, data can filter subgeography interest.Let’s say want run markdown produce report surveillance data Area1 Area2. :Edit R Markdown:Change YAML metadata include ‘params’ section, specifies dynamic object.Refer parameterised object within code needed. E.g. filter(area == params$areanumber) rather filter(area==\"Area1\").instance (simplified version include setup code library/data loading):can change content editing YAML needed, set loop separate script iterate areas. previous section, can set folders well.can see , set list includes areas interest (arealist), rendering markdown specify parameterized areanumber specific iteration Nth value arealist. instance, first iteration, areanumber equate “Area1”. code also specifies Nth area name included output file name.Note work even area date specified within YAML - YAML information get overwritten loop.","code":"# Set the date of report\r\nrefdate <- as.Date(\"2020-12-21\")\r\n\r\n# Set the list (note that this can also be an imported list)\r\narealist <- c(\"Area1\", \"Area2\", \"Area3\", \"Area4\", \"Area5\")\r\n\r\n# Create the folders\r\noutputfolder <- paste0(\"outputs/\", refdate) # This is the new folder name\r\ndir.create(outputfolder) # Creates the folder (in this case assumed 'outputs' already exists)\r\n\r\n#Run the loop\r\n\r\nfor(i in 1:length(arealist))  { # This will loop through from the first value to the last value in 'arealist'\r\n\r\nrmarkdown::render(here(\"rmd_reports/create_report.Rmd\"), \r\n                        params = list(areanumber = arealist[1], #Assigns the nth value of arealist to the current areanumber\r\n                                      refdate = refdate),\r\n                        output_file = paste0(outputfolder, \"/Report_\", arealist[1], refdate, \".docx\")) \r\n                        \r\n}\r\n\r\n"},{"path":"r-markdown.html","id":"resources-32","chapter":"43 R Markdown","heading":"43.6 Resources","text":"information can found via:https://bookdown.org/yihui/rmarkdown/https://rmarkdown.rstudio.com/articles_intro.html","code":""},{"path":"shiny-basics.html","id":"shiny-basics","chapter":"44 Shiny basics","heading":"44 Shiny basics","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"shiny-basics.html","id":"overview-41","chapter":"44 Shiny basics","heading":"44.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"shiny-basics.html","id":"preparation-37","chapter":"44 Shiny basics","heading":"44.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"shiny-basics.html","id":"sub-tab-1-12","chapter":"44 Shiny basics","heading":"44.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"shiny-basics.html","id":"sub-tab-2-12","chapter":"44 Shiny basics","heading":"44.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"shiny-basics.html","id":"flexdashboard","chapter":"44 Shiny basics","heading":"44.3 flexdashboard","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"shiny-basics.html","id":"option-1-sub-tab-10","chapter":"44 Shiny basics","heading":"44.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"shiny-basics.html","id":"option-2-10","chapter":"44 Shiny basics","heading":"44.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"shiny-basics.html","id":"option-2-sub-tab-12","chapter":"44 Shiny basics","heading":"44.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"shiny-basics.html","id":"resources-33","chapter":"44 Shiny basics","heading":"44.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"collaboration.html","id":"collaboration","chapter":"45 Collaboration","heading":"45 Collaboration","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"collaboration.html","id":"overview-42","chapter":"45 Collaboration","heading":"45.1 Overview","text":"Package managementUsing Github Rhttps://happygitwithr.com/reset.htmlhttps://ohi-science.org/news/github-going-back--time","code":""},{"path":"collaboration.html","id":"preparation-38","chapter":"45 Collaboration","heading":"45.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"collaboration.html","id":"option-1-10","chapter":"45 Collaboration","heading":"45.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"collaboration.html","id":"option-1-sub-tab-11","chapter":"45 Collaboration","heading":"45.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"collaboration.html","id":"option-2-11","chapter":"45 Collaboration","heading":"45.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"collaboration.html","id":"option-2-sub-tab-13","chapter":"45 Collaboration","heading":"45.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"collaboration.html","id":"resources-34","chapter":"45 Collaboration","heading":"45.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"writing-functions.html","id":"writing-functions","chapter":"46 Writing functions","heading":"46 Writing functions","text":"Page title succinct. Consider adding tag spaces curly brackets, . can used internal links within handbook.\r\n{#title_tag .tabset .tabset-fade}","code":""},{"path":"writing-functions.html","id":"overview-43","chapter":"46 Writing functions","heading":"46.1 Overview","text":"Keep title section “Overview”.\r\ntab include:Textual overview purpose pageSmall image showing outputs","code":""},{"path":"writing-functions.html","id":"preparation-39","chapter":"46 Writing functions","heading":"46.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"writing-functions.html","id":"sub-tab-1-13","chapter":"46 Writing functions","heading":"46.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"writing-functions.html","id":"sub-tab-2-13","chapter":"46 Writing functions","heading":"46.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"writing-functions.html","id":"option-1-11","chapter":"46 Writing functions","heading":"46.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"writing-functions.html","id":"option-1-sub-tab-12","chapter":"46 Writing functions","heading":"46.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"writing-functions.html","id":"option-2-12","chapter":"46 Writing functions","heading":"46.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"writing-functions.html","id":"option-2-sub-tab-14","chapter":"46 Writing functions","heading":"46.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"writing-functions.html","id":"resources-35","chapter":"46 Writing functions","heading":"46.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"r-on-network-drives.html","id":"r-on-network-drives","chapter":"47 R on network drives","heading":"47 R on network drives","text":"","code":""},{"path":"r-on-network-drives.html","id":"overview-44","chapter":"47 R on network drives","heading":"47.1 Overview","text":"Using R network “company” shared drives can extremely frustrating. page contains approaches, common errors, suggestions troubleshooting, including particularly delicate situations involving Rmarkdown.Using R Network Drives: Overarching principlesMust administrator access computer. Setup RStudio specifically run administrator.Use “\\\" package library little possible, save packages ”C:\" library possible.rmarkdown package must \"\\\" library, can’t talk TinyTex Pandoc.","code":""},{"path":"r-on-network-drives.html","id":"preparation-40","chapter":"47 R on network drives","heading":"47.2 Preparation","text":"Using R Network Drives: Overarching principlesMust administrator access computer. Setup RStudio specifically run administrator.Use “\\\" package library little possible, save packages ”C:\" library possible.rmarkdown package must \"\\\" library, can’t talk TinyTex Pandoc.Useful commands","code":"\n# Find libraries\n.libPaths()                   # Your library paths, listed in order that R installs/searches. \n                              # Note: all libraries will be listed, but to install to some (e.g. C:) you \n                              # may need to be running RStudio as an administrator (it won't appear in the \n                              # install packages library drop-down menu) \n\n# Switch order of libraries\n# this can effect the priority of R finding a package. E.g. you may want your C: library to be listed first\nmyPaths <- .libPaths() # get the paths\nmyPaths <- c(myPaths[2], myPaths[1]) # switch them\n.libPaths(myPaths) # reassign them\n\n# Find Pandoc\nSys.getenv(\"RSTUDIO_PANDOC\")  # Find where RStudio thinks your Pandoc installation is\n\n# Find a package\n# gives first location of package (note order of your libraries)\nfind.package(\"rmarkdown\", lib.loc = NULL, quiet = FALSE, verbose = getOption(\"verbose\")) "},{"path":"r-on-network-drives.html","id":"troubleshooting-common-errors","chapter":"47 R on network drives","heading":"47.3 Troubleshooting common errors","text":"“Failed compile…tex rmarkdown”check/install tinytex, C: locationInternet routines loadedFor example, “Error tools::startDynamicHelp() : internet routines loaded”Try selecting 32-bit version RStudio via Tools/Global Options.\r\nnote: 32-bit version appear menu, make sure using RStudio v1.2.\r\nnote: 32-bit version appear menu, make sure using RStudio v1.2.try uninstalling R re-installing different bit (32 instead 64)C: library appear option try install packages manuallyMust run RStudio administrator, appear.set-RStudio always run administrator (advantageous using Rproject don’t click RStudio icon open)… right-click Rstudio icon, open properties, compatibility, click checkbox Run Administrator.Pandoc 1 errorIf getting pandoc error 1 knitting Rmarkdowns network drives:can help (two library locations, one lettered drive listed first)worked knitting local drive network internet connectionSee https://ciser.cornell.edu/rmarkdown-knit--html-word-pdf/Pandoc Error 83 (can’t find file…rmarkdown…lua…)\r\nmeans unable find file.See https://stackoverflow.com/questions/58830927/rmarkdown-unable--locate-lua-filter--knitting--wordPossibilities:Rmarkdown package installedRmarkdown package findablean admin rights issue.R able find ‘rmarkdown’ package file, check library rmarkdown package lives.\r\nlibrary inaccessible (e.g. starts \"\\\") consider manually moving C: named drive library.\r\naware rmarkdown package able reach tinytex, rmarkdown package can’t live network drive.Pandoc Error 61\r\nexample: “Error: pandoc document conversion failed error 61”“fetch…”Try running RStudio administrator (right click icon, select run admin, see instructions)Also see specific package unable reached can moved C: library.LaTex error (see )“! Package pdftex.def Error: File `cict_qm2_2020-06-29_files/figure-latex/unnamed-chunk-5-1.png’ found: using draft setting.”“Error: LaTeX failed compile file_name.tex.”\r\nSee https://yihui.org/tinytex/r/#debugging debugging tips.\r\nSee file_name.log info.Pandoc Error 127\r\nRAM (space) issue. Re-start R session try .Mapping network drivesHow one open file “mapped network drive”?First, ’ll need know network location ’re trying access.Next, Windows file manager, need right click “PC” right hand pane, select “Map network drive”.Go dialogue define network location earlier lettered drive.Now two ways get file ’re opening. Using drive-letter path work.: https://stackoverflow.com/questions/48161177/r-markdown-openbinaryfile---exist---file--directory/55616529?noredirect=1#comment97966859_55616529ISSUES SHARED LIBRARY LOCATION NETWORK DRIVEError install.packages()Try removing… /../…/00LOCK (directory)Manually delete 00LOCK folder directory package library. Try installing .can try command pacman::p_unlock() (can also put command Rprofile runs every time project opens.)try installing package . may take several tries.else fails, install package another library manually copy .","code":"\n# check/install tinytex, to C: location\ntinytex::install_tinytex()\ntinytex:::is_tinytex() # should return TRUE (note three colons)\nmyPaths <- .libPaths() # get the library paths\nmyPaths <- c(myPaths[2], myPaths[1]) # switch them\n.libPaths(myPaths) # reassign them"},{"path":"r-on-network-drives.html","id":"resources-36","chapter":"47 R on network drives","heading":"47.4 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""},{"path":"directory-interactions.html","id":"directory-interactions","chapter":"48 Directory interactions","heading":"48 Directory interactions","text":"","code":""},{"path":"directory-interactions.html","id":"overview-45","chapter":"48 Directory interactions","heading":"48.1 Overview","text":"Saving files, deleting files, creating folders, interacting files folder, etc\r\nOverwriting files Excel","code":""},{"path":"directory-interactions.html","id":"preparation-41","chapter":"48 Directory interactions","heading":"48.2 Preparation","text":"Keep title section “Preparation”.\r\nData preparation steps :Loading datasetAdding changing variablesmelting, pivoting, grouping, etc.","code":""},{"path":"directory-interactions.html","id":"sub-tab-1-14","chapter":"48 Directory interactions","heading":"48.2.1 sub-tab 1","text":"Can used separate major steps data preparation. Re-name needed","code":""},{"path":"directory-interactions.html","id":"sub-tab-2-14","chapter":"48 Directory interactions","heading":"48.2.2 sub-tab 2","text":"Can used separate major steps data preparation. Re-name needed.","code":""},{"path":"directory-interactions.html","id":"option-1-12","chapter":"48 Directory interactions","heading":"48.3 Option 1","text":"tab can renamed.\r\ntab demonstrate execution task using recommended package/approach. example, using package customized task execution simple fast perhaps less customizable. example using incidence package create epicurve.","code":""},{"path":"directory-interactions.html","id":"option-1-sub-tab-13","chapter":"48 Directory interactions","heading":"48.3.1 Option 1 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"directory-interactions.html","id":"option-2-13","chapter":"48 Directory interactions","heading":"48.4 Option 2","text":"tab can re-named.\r\ntab demonstrate execution task standard/core package (e.g. ggplot2, base R) allows flexibility output package stability. example, showing create epicurve using ggplot2.","code":""},{"path":"directory-interactions.html","id":"option-2-sub-tab-15","chapter":"48 Directory interactions","heading":"48.4.1 Option 2 sub-tab","text":"Sub-tabs necessary. Re-name needed.","code":""},{"path":"directory-interactions.html","id":"resources-37","chapter":"48 Directory interactions","heading":"48.5 Resources","text":"tab stay name “Resources”.\r\nLinks online tutorials resources.","code":""}]
