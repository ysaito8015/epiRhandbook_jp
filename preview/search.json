[{"path":"index.html","id":"welcome---this-is-a-draft","chapter":"Welcome - THIS IS A DRAFT","heading":"Welcome - THIS IS A DRAFT","text":"","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"About this handbook","text":"free open-access R reference book applied epidemiologists public health practitioners.book strives :Serve quick reference guide - textbookAddress common epidemiological problems via task-centered examplesBe accessible settings limited technical support low internet-connectivity (downloadable version)Contain clear simple language, step--step instructions helpful code annotationBe living document, growing adapting new best practicesWhat gaps book address?Many epidemiologists lack formal R training transitioning SAS, STATA, statistical software.R universe changes frequently - place best practice code catered toward common epidemiologist user.Epidemiologists often search dozens online forums answers, epidemiology-oriented.epidemiologists work low internet-connectivity environments limited technical support.different R books?handbook written epidemiologists, epidemiologists. approved product specific organization. Examples techniques adapted authors lived experience local, national, academic, emergency settings.book offered download-able format settings unreliable internet.addition core R skills book uses epidemiology-centered examples cover tasks like epidemic curves, transmission chains epidemic modeling, age sex pyramids, age sex standardization, probabilistic matching records, outbreak detection methods, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, missing data imputation, automated routine reports Rmarkdown, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “clipboard” “copy” icon copy codeSee “Resources” section page links trainingClick download offline versionIf use handbook suggestions, let us know SURVEY LINK!","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"Welcome - THIS IS A DRAFT","heading":"Edit or contribute","text":"suggestions want contribute content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome - THIS IS A DRAFT","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"Welcome - THIS IS A DRAFT","heading":"Contributors","text":"handbook collaborative team production. conceived, written, edited epidemiologists public health practitioners around world, drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), UNHCR, WFP, hospital systems, academic institutions.team members:Editor--Chief: Neale BatraEditorial core team: Alex Spina, Amrish Baidjoe, Henry Laurenson-Schafer, Finlay Campbell, Pat KeatingAuthors (order contributions): Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Daniel Molling, Liza Coyer, Jonny Polonski, Yurie Izawa, Sara HollisReviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"Welcome - THIS IS A DRAFT","heading":"Funding and programmatic support","text":"handbook received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET).Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"Welcome - THIS IS A DRAFT","heading":"Inspiration","text":"multitude tutorials vignettes provided foundational knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"Welcome - THIS IS A DRAFT","heading":"Image credits","text":"Logo: CDC Public Health Image library, R Graph Gallery2013 Yemen looking mosquito breeding sitesEbola virusSurvey RajasthanNetwork","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"Welcome - THIS IS A DRAFT","heading":"License and Terms of Use","text":"handbook approved product specific organization.Although strive accuracy, provide guarantee content book.book licensed Creative Commons license TBD…","code":""},{"path":"importing-and-exporting.html","id":"importing-and-exporting","chapter":"1 Importing and exporting","heading":"1 Importing and exporting","text":"","code":""},{"path":"importing-and-exporting.html","id":"overview","chapter":"1 Importing and exporting","heading":"1.1 Overview","text":"describe ways import export data:rio package import/exportThe package locate files\r\nRelative versus absolute filepaths\r\nRelative versus absolute filepaths","code":""},{"path":"importing-and-exporting.html","id":"the-rio-package","chapter":"1 Importing and exporting","heading":"1.2 The rio package","text":"package recommend importing data : rio. rio utilizes file extension (e.g. .xlsx, .csv, .rds, etc.) import export file correctly.alternative using rio use functions many packages specific type file (e.g. read.csv(), read.xlsx(), etc.). alternatives can difficult remember, whereas using import() rio relatively easy.table, taken rio online vignette. shows type data, file extension expected, packages uses import export data (can look specific arguments, needed), whether functionality included default installed version rio.can read rio package online vignette","code":""},{"path":"importing-and-exporting.html","id":"here","chapter":"1 Importing and exporting","heading":"1.3 Relative filepaths (here())","text":"Relative filepaths differ static filepaths relative specific directory location.\r\nexample:static filepath: import(\"C:/Users/nsbatra/Documents/R files/epiproject/data/linelists/ebola_linelist.xlsx\")\r\nSpecific fixed path\r\nUseful calling file distant directory, multiple users running script hosted network drive\r\nSpecific fixed pathUseful calling file distant directory, multiple users running script hosted network driveA relative filepath: import((\"data\", \"linelists\", \"ebola_linelist.xlsx\"))\r\nPath given relation directory\r\nBest working within R project\r\nPath given relation directoryBest working within R projectThe package can used, often conjunction rio importing exporting. locates files computer via relative pathways, usually within context [R projects]. Relative pathways relative designated folder location, pathways listed R code break script run different computer.code chunk shows loading packages importing data.Use package function () implement relative pathways.() works best within R projects. package first loaded, places small file called “” root-level folder R project “benchmark” “anchor” files project.Thus, script, want import reference file saved R project’s folders, use function () tell R file relation benchmark. relative filepaths can used importing exporting/saving data.unsure “” set , run function () empty brackets:example importing file “linelist.xlsx” located benchmark “” folder. provide name file quotes (appropriate ending).file within subfolder - let’s say “data” folder - write folder names quotes, separated commas, :Using () command produces character filepath, processed import() function.","code":"\n# Checks if package is installed, installs if necessary, and loads package for current session\npacman::p_load(rio, here)\n# This command tells you the folder path that \"here\" is set to \nhere::here()\nlinelist <- import(here(\"linelist_raw.xlsx\"))\nlinelist <- import(here(\"data\", \"linelist.xlsx\"))\n# the filepath\nhere(\"data\", \"linelist.xlsx\")## [1] \"C:/Users/Neale/OneDrive - Neale Batra/Documents/Analytic Software/R/Projects/R handbook/Epi_R_handbook/data/linelist.xlsx\"\n# the filepath is given to the import() function\nlinelist <- import(here(\"data\", \"linelist.xlsx\"))"},{"path":"importing-and-exporting.html","id":"importing","chapter":"1 Importing and exporting","heading":"1.4 Importing","text":"import dataset, following:Creating new, named data frame object R environmentDefining new object imported dataset","code":""},{"path":"importing-and-exporting.html","id":"import-from-filepath","chapter":"1 Importing and exporting","heading":"Import from filepath","text":"function import() (package rio) accepts filepath within quotation marks. things note:Slashes must forward slashes, code shown. default Windows filepaths.Filepaths begin double slashes (e.g. “//…”) likely recognized R produce error. Consider moving files “named” “lettered” drive begins letter (e.g. “J:” “C:”). See section using Network Drive details issue.worry slash direction using relative filepaths hereWith absolute filepath:relative filepath:","code":"\n# Absolute pathway\np_load(rio)                                                      \nmy_data <- import(\"C:/Users/Timothy/Documents/cancer project/data/clean/survival_data.xlsx\")# Absolute pathway\r\np_load(rio)                                                 \r\nmy_data <- import(here(\"data\", \"clean\", \"survival_data.xlsx\")"},{"path":"importing-and-exporting.html","id":"excel-sheet","chapter":"1 Importing and exporting","heading":"Excel sheet","text":"importing specific sheet Excel file, include sheet name = argument import(). example:using () method provide relative pathway import(), can still indicate specific sheet adding = argument closing parenthese () function.","code":"\nmy_data <- rio::import(\"my_excel_file.xlsx\", which = \"Sheetname\")# Demonstration: importing a specific Excel sheet when using relative pathways with the 'here' package\r\nlinelist_raw <- import(here(\"data\", \"linelists\", \"linelist.xlsx\"), which = \"Sheet1\")`  "},{"path":"importing-and-exporting.html","id":"select-file-manually","chapter":"1 Importing and exporting","heading":"Select file manually","text":"can import data manually via one methods:Environment RStudio Pane, click “Import Dataset”, select type dataClick File / Import Dataset / (select type data)hard-code manual selection, use base R command file.choose() (leaving parentheses empty) trigger appearance pop-window allows user manually select file computer. example:TIP: pop-window may appear BEHIND RStudio window.","code":"\n# Manual selection of a file.\n# When this command is run, a POP-UP window should appear. \n# The filepath of the selected file will be supplied to the import() command.\n\nmy_data <- import(file.choose())"},{"path":"importing-and-exporting.html","id":"google-sheets","chapter":"1 Importing and exporting","heading":"1.5 Google sheets","text":"can import data online Google spreadsheet googlesheet4 package authenticating access spreadsheet., demo Google sheet imported saved. command may prompt confirmation authentification Google account. Follow prompts pop-ups internet browser grant Tidyverse API packages permissions edit, create, delete spreadsheets Google Drive.sheet “viewable anyone link” can try import .sheet can also imported using sheet ID, shorter part URL:Another package, googledrive offers useful functions writing, editing, deleting Google sheets. example, using gs4_create() sheet_write() functions found package.helpful online tutorials: basic importing tutorial detail interaction two packages","code":"\npacman::p_load(\"googlesheets4\")\nGsheets_demo <- read_sheet(\"https://docs.google.com/spreadsheets/d/1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY/edit#gid=0\")\nGsheets_demo <- read_sheet(\"1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY\")"},{"path":"importing-and-exporting.html","id":"websites","chapter":"1 Importing and exporting","heading":"1.6 Websites","text":"Scraping data website - TBD - construction","code":""},{"path":"importing-and-exporting.html","id":"skip-rows","chapter":"1 Importing and exporting","heading":"1.7 Skip rows","text":"Sometimes, may want avoid importing row data. can argument skip = using import() rio .xlsx .csv file. Provide number rows want skip.Unfortunately skip = accepts one integer value, range (e.g. “2:10” work). skip import specific rows consecutive top, consider importing multiple times using bind_rows() dplyr. See example skipping row 2.","code":"\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 1)  # does not import header row"},{"path":"importing-and-exporting.html","id":"removing-a-second-header-row","chapter":"1 Importing and exporting","heading":"1.7.1 Removing a second header row","text":"data may second row data, example “data dictionary” row (see example ).situation can problematic can result columns imported class “character”. solve , likely need import data twice.Import data order store correct column namesImport data , skipping first two rows (header second rows)Bind correct names onto reduced dataframeThe exact arguments used bind correct column names depends type data file (.csv, .tsv, .xlsx, etc.). using rio’s import() function, understand function rio uses import data, give appropriate argument skip lines /designate column names.Excel files:CSV files:Backup option - changing column names separate commandBonus! second row data dictionary, can easily create proper data dictionary . See vignette","code":"\n# import first time; store the column names\nlinelist_raw_names <- import(\"linelist_raw.xlsx\") %>% names()  # save true column names\n\n# import second time; skip row 2, and assign column names to argument col_names =\nlinelist_raw <- import(\"linelist_raw.xlsx\",\n                       skip = 2,\n                       col_names = linelist_raw_names\n                       ) \n# import first time; sotre column names\nlinelist_raw_names <- import(\"linelist_raw.csv\") %>% names() # save true column names\n\n# note argument for csv files is 'col.names = '\nlinelist_raw <- import(\"linelist_raw.csv\",\n                       skip = 2,\n                       col.names = linelist_raw_names\n                       ) \n# assign/overwrite headers using the base 'colnames()' function\ncolnames(linelist_raw) <- linelist_raw_names"},{"path":"importing-and-exporting.html","id":"manual-data-entry","chapter":"1 Importing and exporting","heading":"1.8 Manual data entry","text":"","code":""},{"path":"importing-and-exporting.html","id":"entry-by-columns","chapter":"1 Importing and exporting","heading":"1.8.1 Entry by columns","text":"Since data frame combination vertical vectors (columns), R default expects manual entry data also vertical vectors (columns).CAUTION: vectors must length (number values).vectors can bound together using function data.frame():now display new dataset:","code":"\n# define each vector (vertical column) separately, each with its own name\nPatientID <- c(235, 452, 778, 111)\nTreatment <- c(\"Yes\", \"No\", \"Yes\", \"Yes\")\nDeath     <- c(1, 0, 1, 0)\n# combine the columns into a data frame, by referencing the vector names\nmanual_entry_cols <- data.frame(PatientID, Treatment, Death)"},{"path":"importing-and-exporting.html","id":"entry-by-rows","chapter":"1 Importing and exporting","heading":"1.8.2 Entry by rows","text":"Use tribble function tibble package tidverse (onlinetibble reference).Note column headers start tilde (~). Also note column must contain one class data (character, numeric, etc.).\r\ncan use tabs, spacing, new rows make data entry intuitive readable. example:now display new dataset:","code":"\n# create the dataset manually by row\nmanual_entry_rows <- tibble::tribble(\n                        ~colA, ~colB,\n                        \"a\",   1,\n                        \"b\",   2,\n                        \"c\",   3\n                      )"},{"path":"importing-and-exporting.html","id":"pasting-from-clipboard","chapter":"1 Importing and exporting","heading":"1.8.3 Pasting from clipboard","text":"copy data elsewhere clipboard, can try following command convert data R data frame:","code":"\nmanual_entry_clipboard <- read.table(file = \"clipboard\",\n                                     sep = \"t\",           # separator could be tab, or commas, etc.\n                                     header=TRUE)         # if there is a header row"},{"path":"importing-and-exporting.html","id":"rdata-files","chapter":"1 Importing and exporting","heading":"1.9 Rdata files","text":".Rdata files store R objects, can actually store multiple R objects within one file, example multiple dataframes, model results, lists, etc. can useful consolidate share data.list want imported original structure (e.g. list lists), use import_list():","code":"\nrio::export(my_list, my_dataframe, my_vector, \"my_objects.Rdata\")\nrio::import_list(\"my_list_of_lists.Rdata\")"},{"path":"importing-and-exporting.html","id":"export","chapter":"1 Importing and exporting","heading":"1.10 Export","text":"rio, can use export() function similar way import(). First give name R object want save (e.g. linelist) quote filepath including name file extension. example:save dataframe .csv, folder specified relative pathway:","code":"\nexport(linelist, \"my_linelist.xlsx\") # will save to working directoryexport(linelist, here(\"data\",\"clean\", \"my_linelist.csv\")"},{"path":"importing-and-exporting.html","id":"rds-files","chapter":"1 Importing and exporting","heading":"RDS files","text":"can also export/save R dataframes .rds files. convenient thing classes columns retained, less cleaning importing Excel even CSV file.","code":"export(linelist, here(\"data\",\"clean\", \"my_linelist.rds\")"}]
