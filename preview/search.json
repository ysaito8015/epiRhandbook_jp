[{"path":"index.html","id":"the-epidemiologist-r-handbook","chapter":"The Epidemiologist R Handbook","heading":"The Epidemiologist R Handbook","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"The Epidemiologist R Handbook","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via (**downloadable version**)gaps book address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareLet’s avoid hours online searching repository best-practice code common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"The Epidemiologist R Handbook","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"The Epidemiologist R Handbook","heading":"Edit or contribute","text":"welcome feedback comments survey LINK.want directly contribute modify content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"The Epidemiologist R Handbook","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"The Epidemiologist R Handbook","heading":"Contributors","text":"book conceived, written, edited collaboration epidemiologists around world draw upon experiences constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Henry Laurenson-Schafer, Finlay Campbell, Pat KeatingAuthors (order contributions): Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Daniel Molling, Liza Coyer, Jonny Polonski, Yurie Izawa, Sara Hollis, Isha BerryReviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"The Epidemiologist R Handbook","heading":"Funding and programmatic support","text":"handbook received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET).Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"The Epidemiologist R Handbook","heading":"Inspiration","text":"multitude tutorials vignettes provided foundational knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"The Epidemiologist R Handbook","heading":"Image credits","text":"Logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"The Epidemiologist R Handbook","heading":"License and Terms of Use","text":"handbook approved product specific organization.Although strive accuracy, provide guarantee content book.work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"iteration-and-loops.html","id":"iteration-and-loops","chapter":"1 Iteration and loops","heading":"1 Iteration and loops","text":"","code":""},{"path":"iteration-and-loops.html","id":"preparation","chapter":"1 Iteration and loops","heading":"1.1 Preparation","text":"Load packagesLoad dataThe first 50 rows displayed:","code":"\npacman::p_load(\n     rio,\n     here, \n     purrr,\n     tidyverse\n)\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"iteration-and-loops.html","id":"for-loops","chapter":"1 Iteration and loops","heading":"1.2 for loops","text":"epidemiologist, common need repeat analyses sub-groups (e.g. jurisdictions sub-populations). Iterating loop one method automate process.loop three core parts:container resultsThe sequence items iterate throughThe operations conduct per item sequenceThe basic syntax : (item sequence) {operations using item}. Note parentheses curly brackets. results printed console, stored container.","code":""},{"path":"iteration-and-loops.html","id":"container","chapter":"1 Iteration and loops","heading":"Container","text":"efficient create container results even beginning loop. practice, means creating empty vector, data frame, list. can created functions vector() vectors lists, data.frame() data frame.Vector example\r\nSay want store median delay--admission hospital new vector. Use vector() specify class either “double” (hold numbers), “character”, “logical”. case use “double” set length number unique hospitals dataset (6).Data frame exampleList exampleSay want store plots created loop list. actually initialize container using vector() command , mode = \"list\".","code":"\ndelays <- vector(mode = \"double\",\n                 length = length(unique(linelist$hospital))) # this is the number of unique hospitals in the dataset\ndelays <- data.frame(matrix(ncol = 2, nrow = 3))\nplots <- vector(mode = \"list\", length = 16)"},{"path":"iteration-and-loops.html","id":"sequence","chapter":"1 Iteration and loops","heading":"Sequence","text":"“” part loop - operations run item sequence. sequence can series character names (e.g. jurisdictions, diseases, etc) can series numbers (e.g. 1,2,3,4,5). utilities described .Sequence character itemsSequence namesThis variation can used loop columns dataframe, elements list. , sequence names (column names) linelist. Inside loop condition - column numeric mean column printed console. column class Numeric another statement printed console.note - whenever referencing column (e.g. within mean()) just write “col”! col just character column name! refer entire column use column name index* linelist via linelist[[col]].Sequence numbersUse approach plan complicated operations store results loop. achieved loop iterate numeric sequence. can use number indexing objects operations code.Say example want loop every row data frame. items numeric rownumbers. sequence explained “every item sequence numbers 1 total number rows data frame, X”.Whew, mouthful words! looks like code: (seq_len(nrow(linelist)) {} represents itemans seq_len() produces sequence consecutive numbers 1 number rows linelist.using named vector (data frame) use seq_along(), like (seq_along(hospital_names) {}.first iteration loop, 1. second iteration, 2. Etc.","code":"\n# make vector of the hospital names\nhospital_names <- unique(linelist$hospital)\nhospital_names # print## [1] \"Port Hospital\"                        \"St. Mark's Maternity Hospital (SMMH)\" \"Other\"                                \"Missing\"                             \r\n## [5] \"Military Hospital\"                    \"Central Hospital\"\n# 'for loop'\nfor (hosp in hospital_names){       # sequence of cha\n  \n  # OPERATIONS HERE\n  \n}\nfor (col in names(linelist)){ \n  \n  # if column is class Numeric, print the mean value\n  if(is.numeric(linelist[[col]])) {\n    print(mean(linelist[[col]], na.rm=T))     # don't forget to index with [[col]]\n    } else {        \n    print(\"Column not numeric\")            # if column is not numeric, print this\n  }\n  \n}## [1] \"Column not numeric\"\r\n## [1] 16.56165\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] 16.20083\r\n## [1] \"Column not numeric\"\r\n## [1] 16.14426\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] -13.23381\r\n## [1] 8.469638\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] 53.14759\r\n## [1] 124.7962\r\n## [1] 21.19412\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] \"Column not numeric\"\r\n## [1] 38.54144\r\n## [1] \"Column not numeric\"\r\n## [1] 48.11272\r\n## [1] 2.011889\nseq_along(hospital_names)  # on a named vector## [1] 1 2 3 4 5 6"},{"path":"iteration-and-loops.html","id":"operations","chapter":"1 Iteration and loops","heading":"Operations","text":"code within loop. want run item sequence. Therefore, careful every part code changes item correctly coded changes! Remember use [[]] indexing. example,, use seq_len() linelist. gender age row pasted together stored container character vector cases_demographics.","code":"\n# create container to store results - a character vector\ncases_demographics <- vector(mode = \"character\", length = nrow(linelist))\n\n# the for loop\nfor (i in seq_len(nrow(linelist))){\n  \n  # OPERATIONS\n  # extract values from linelist for i using indexing\n  row_gender  <- linelist$gender[[i]]\n  row_age     <- linelist$age_years[[i]]    # don't forget to index!\n  \n  # store the gender-age in container\n  cases_demographics[i] <- str_c(row_gender, row_age, sep = \", \") \n\n}  # end for loop\n\n# display first 10 rows of container\nhead(cases_demographics, 10)"},{"path":"iteration-and-loops.html","id":"printing","chapter":"1 Iteration and loops","heading":"Printing","text":"Note print within loop likely need explicitly wrap function print().example , sequence explicit character vector, used subset linelist hospital.results stored container, rather print console print() function.","code":"\nfor (hosp in hospital_names){ \n  hospital_cases <- linelist %>% filter(hospital == hosp)\n  print(nrow(hospital_cases))\n}## [1] 1762\r\n## [1] 422\r\n## [1] 885\r\n## [1] 1469\r\n## [1] 896\r\n## [1] 454"},{"path":"iteration-and-loops.html","id":"testing-your-for-loop","chapter":"1 Iteration and loops","heading":"Testing your for loop","text":"test loop, can make temporarily assignment item, <- 10 hosp <- \"Central Hospital\" run operations code see expected results produced.","code":""},{"path":"iteration-and-loops.html","id":"looping-plots","chapter":"1 Iteration and loops","heading":"Looping plots","text":"put three components together (container, sequence, operations) let’s try plot epicurve hospital (see page [Epidemic curves].course, can make epicurve cases using incidence2 package :produce separate plot hospital’s cases, can put epicurve code within loop.First, save named vector unique hospital names, hospital_names. loop run names ((hosp hospital_names)). iteration loop, current hospital name vector represented “hosp” use within loop.Within loop, can write R code normal, use item (hosp case) knowing value changing. Within loop:filter() applied linelist, column hospital must equal current value hospThe incidence object created filtered linelistThe plot current hospital created, auto-adjusting titleThe plot current hospital temporarily saved printedThe loop moves onward repeat next hospital hospital_names","code":"\n# create 'incidence' object\noutbreak <- incidence2::incidence(   \n     x = linelist,                   # dataframe - complete linelist\n     date_index = date_onset,        # date column\n     interval = \"week\",              # aggregate counts weekly\n     groups = gender,                # group values by gender\n     na_as_group = TRUE)             # missing gender is own group\n\n# plot epi curve\nplot(outbreak,                       # name of incidence object\n     fill = \"gender\",                # color bars by gender\n     color = \"black\",                # outline color of bars\n     title = \"Outbreak of ALL cases\" # title\n     )\n# make vector of the hospital names\nhospital_names <- unique(linelist$hospital)\n\n# for each name (\"hosp\") in hospital_names, create and print the epi curve\nfor (hosp in hospital_names) {\n     \n     # create incidence object specific to the current hospital\n     outbreak_hosp <- incidence2::incidence(\n                    x = linelist %>% filter(hospital == hosp),   # linelist is filtered to the current hospital\n                    date_index = date_onset,\n                    interval = \"week\", \n                    groups = gender,\n                    na_as_group = TRUE\n     )\n     \n     # Create and save the plot. Title automatically adjusts to the current hospital\n     plot_hosp <- plot(outbreak_hosp,\n                       fill = \"gender\",\n                       color = \"black\",\n                       title = stringr::str_glue(\"Epidemic of cases admitted to {hosp}\")\n                       )\n     \n     # print the plot for the current hospital\n     print(plot_hosp)\n\n} # end the for loop when it has been run for every hospital in hospital_names "},{"path":"iteration-and-loops.html","id":"tracking-progress-of-a-loop","chapter":"1 Iteration and loops","heading":"Tracking progress of a loop","text":"loop many iterations can run many minutes even hours. Thus, can helpful print progress R console. code can placed within loop print every 100th number.","code":"# loop with code to print progress every 100 iterations\r\nfor (row in 1:nrow(linelist)){\r\n\r\n  # print progress\r\n  if(row %% 100==0){    # The %% operator is the remainder\r\n    print(row)\r\n\r\n}"},{"path":"iteration-and-loops.html","id":"purrr","chapter":"1 Iteration and loops","heading":"1.3 purrr","text":"One approach iterative operations purrr package. using loop, can probably purrr! example, applying model different datasets, producing plots maps various jurisdictions, iterating data management tasks (across columns subsets).purrr online cheatsheet","code":""},{"path":"iteration-and-loops.html","id":"load-packages","chapter":"1 Iteration and loops","heading":"Load packages","text":"purrr part tidyverse, need install/load another package.One core purrr function map(), “maps” (applies) function input element. several variations map() specific use cases, detailed .key arguments :.x = input - e.g. vector, data frame, list.f = function apply element inputYou often encounter syntax ., placeholder primary input - vector dataframe, element list.","code":"\npacman::p_load(\n  rio,            # import/export\n  here,           # relative filepaths\n  tidyverse,      # data mgmt and viz\n  writexl,        # write Excel file with multiple sheets\n  readxl          # import Excel with multiple sheets\n  )"},{"path":"iteration-and-loops.html","id":"mapping-a-function-across-columns","chapter":"1 Iteration and loops","heading":"1.3.1 Mapping a function across columns","text":", map() function t.test() across numeric columns, comparing genders. Recall page [Descriptive analysis] t.test() can take inputs formula format, NUMERIC_COLUMN ~ BINARY COLUMN. example, following:numeric columns interest selected linelistThe function t.test() supplied .f function mapped numeric column (note tilde ~ front)Within parentheses t.test():\r\n. represents current column mapped\r\nsecond ~ part t-test equation\r\nlinelist$gender binary column t-test comparison, separate column included select() included left side t.test equation.\r\n. represents current column mappedthe second ~ part t-test equationthe linelist$gender binary column t-test comparison, separate column included select() included left side t.test equation.result list t-test results - one element numeric column. first one shown demonstration purposes.wanted p-values , can append $p.value t.test() output.Remember want apply function certain columns data frame, can also use mutate() across(), explained [Grouping data] page. example applying .character() “age” columns. Note placement parentheses commas.","code":"\n# Results are saved as a list\nt.test_results <- linelist %>% \n  select(age, wt_kg, ht_cm, ct_blood, temp) %>%  # keep only the numeric columns to map across\n  map(~t.test(. ~ linelist$gender))              # t.test function, with equation NUMERIC ~ CATEGORICAL\n\nt.test_results[[1]] # show first result ## \r\n##  Welch Two Sample t-test\r\n## \r\n## data:  . by linelist$gender\r\n## t = -22.814, df = 4803.4, p-value < 2.2e-16\r\n## alternative hypothesis: true difference in means is not equal to 0\r\n## 95 percent confidence interval:\r\n##  -8.032929 -6.761592\r\n## sample estimates:\r\n## mean in group f mean in group m \r\n##        12.49840        19.89566\nlinelist %>% \n  select(age, wt_kg, ht_cm, ct_blood, temp) %>% \n  map(~t.test(. ~ linelist$gender)$p.value)## $age\r\n## [1] 1.821713e-109\r\n## \r\n## $wt_kg\r\n## [1] 5.768923e-198\r\n## \r\n## $ht_cm\r\n## [1] 6.116976e-142\r\n## \r\n## $ct_blood\r\n## [1] 0.7107849\r\n## \r\n## $temp\r\n## [1] 0.5572372\n# convert columns with column name containing \"age\" to class Character\nlinelist <- linelist %>% \n  mutate(across(contains(\"age\"), as.character))  "},{"path":"iteration-and-loops.html","id":"custom-functions","chapter":"1 Iteration and loops","heading":"Custom functions","text":"t.test() existing function, often want create function provide map(). One example may iteratively plot (demonstrated loop section).Let’s say want create simple epicurves hospital. using purrr, .f function can ggplot() extensions + usual. plots stored list map(). can extracted plotted easily ggarrange() function ggpubr package (documentation.code style looks messy, can achieve result saving specific ggplot() command custom user-defined function make_epicurve()). function used within map(). .x iteratively replaced hospital name, used hosp_name make_epicurve() function. See page [Writing functions].","code":"\n# load package for plotting elements from list\npacman::p_load(ggpubr)\n\n# map across the vector of 6 hospital \"names\" (created earlier)\n# use the ggplot function specified\n# output is a list with 6 ggplots\n\nmy_plots <- map(.x = hospital_names,\n             .f = ~ggplot(data = linelist %>% filter(hospital == .x))+\n                    geom_histogram(aes(x = date_onset)) +\n                    labs(title = .x)\n)\n\n# print the ggplots (they are stored in a list)\nggarrange(plotlist = my_plots, ncol = 2, nrow = 3)\nmake_epicurve <- function(hosp_name){\n  \n  ggplot(data = linelist %>% filter(hospital == hosp_name)) +\n    geom_histogram(aes(x = date_onset)) +\n    theme_classic()+\n    labs(title = hosp_name)\n  \n}\n# mapping\nmy_plots <- map(hospital_names, ~make_epicurve(.x))\n\n# print the ggplots (they are stored in a list)\nggarrange(plotlist = my_plots, ncol = 2, nrow = 3)"},{"path":"iteration-and-loops.html","id":"split-datasets","chapter":"1 Iteration and loops","heading":"Split datasets","text":"","code":""},{"path":"iteration-and-loops.html","id":"split-dataset-and-export-csv-files","chapter":"1 Iteration and loops","heading":"Split dataset and export CSV files","text":"complex purrr map() example. Let’s say want create separate linelist hospital export separate CSV file. task arduous done copy-paste hand Excel, involve lot code filter() export() distinct command (imagine wanted make linelist hospital-gender!)., following steps:Use group_split() (dplyr) split linelist hospital admission - output list one “element” per hospital subset (case, element dataframe)can View(linelsit_split) see list contains 6 dataframe representing cases one hospital.However, note dataframes list names! standard behavior map(), want name, use name saving CSV file. , use pull() (purrr) extract ’hospitalcolumn data frame list. , safe, convert values character useunique()` get name dataset.can now see list elements name. names can access via names(linelist_split).Lastly, take vector names (shown ) use map() iterate , applying export() function element list linelist_split saving correct name. works:begin vector character names, passed map()function export() (rio package, see [Import export] page), needs dataframe filepath write toThe dataframe provided element linelist_split currently named map() proceedes names(linelist_split)\r\nexample, “Military Hospital”, linelist_split[[.]] actually linelist_split[[\"Military Hospital\"]], thus returning second element linelist_split - cases hospital.\r\nexample, “Military Hospital”, linelist_split[[.]] actually linelist_split[[\"Military Hospital\"]], thus returning second element linelist_split - cases hospital.filepath provided dynamic via use str_glue() (see [Characters strings] page):\r\n() used get base filepath specify “data” folder (note single quotes interrupt str_glue() double quotes)\r\nslash /, . prints current hospital name\r\nFinally extension “.csv” export() uses create CSV file\r\n() used get base filepath specify “data” folder (note single quotes interrupt str_glue() double quotes)slash /, . prints current hospital nameFinally extension “.csv” export() uses create CSV fileNow can see file saved “data” folder R Project “Epi_R_handbook”!","code":"\nlinelist_split <- linelist %>% \n  group_split(hospital)\nnames(linelist_split) <- linelist_split %>%\n  purrr::map(~pull(.,hospital)) %>% # Pull out Species variable\n  purrr::map(~as.character(.)) %>% # Convert factor to character\n  purrr::map(~unique(.))\nnames(linelist_split)## [1] \"Central Hospital\"                     \"Military Hospital\"                    \"Missing\"                              \"Other\"                               \r\n## [5] \"Port Hospital\"                        \"St. Mark's Maternity Hospital (SMMH)\"\nnames(linelist_split) %>%\n  map(~export(linelist_split[[.]], file= str_glue(\"{here('data')}/{.}.csv\")))"},{"path":"iteration-and-loops.html","id":"split-dataset-and-export-as-excel-sheets","chapter":"1 Iteration and loops","heading":"Split dataset and export as Excel sheets","text":"export hospital linelists Excel workbook one linelist per sheet, can just provide named list linelist_split write_xlsx() function writexl package. ability save one Excel workbook multiple sheets. list element names automatically applied sheet names.can now open Excel file see hospital sheet.","code":"\nlinelist_split %>% \n  writexl::write_xlsx(path = here(\"data\", \"hospital_linelists.xlsx\"))"},{"path":"iteration-and-loops.html","id":"more-than-one-group_split-column","chapter":"1 Iteration and loops","heading":"More than one group_split() column","text":"wanted split linelist one grouping column, produce subset linelist intersection hospital gender, need different approach naming list elements. involves collecting unique “group keys” using group_keys() dplyr - returned data frame. can combine group keys values unite() shown , assign conglomerate names linelist_split.Now combine groupings together, separated dashes, assign names list elements linelist_split. takes extra lines replace NA “Missing”, use unite() dplyr combine column values together (separated dashes), convert un-named vector can used names linelist_split.","code":"\n# split linelist by unique hospital-gender combinations\nlinelist_split <- linelist %>% \n  group_split(hospital, gender)\n\n# extract group_keys() as a dataframe\ngroupings <- linelist %>% \n  group_by(hospital, gender) %>%       \n  group_keys()\n\ngroupings      # show unique groupings ## # A tibble: 18 x 2\r\n##    hospital                             gender\r\n##  * <chr>                                <chr> \r\n##  1 Central Hospital                     f     \r\n##  2 Central Hospital                     m     \r\n##  3 Central Hospital                     <NA>  \r\n##  4 Military Hospital                    f     \r\n##  5 Military Hospital                    m     \r\n##  6 Military Hospital                    <NA>  \r\n##  7 Missing                              f     \r\n##  8 Missing                              m     \r\n##  9 Missing                              <NA>  \r\n## 10 Other                                f     \r\n## 11 Other                                m     \r\n## 12 Other                                <NA>  \r\n## 13 Port Hospital                        f     \r\n## 14 Port Hospital                        m     \r\n## 15 Port Hospital                        <NA>  \r\n## 16 St. Mark's Maternity Hospital (SMMH) f     \r\n## 17 St. Mark's Maternity Hospital (SMMH) m     \r\n## 18 St. Mark's Maternity Hospital (SMMH) <NA>\n# Combine into one name value \nnames(linelist_split) <- groupings %>% \n  mutate(across(everything(), replace_na, \"Missing\")) %>%  # replace NA with \"Missing\" in all columns\n  unite(\"combined\", sep = \"-\") %>%                         # Unite all column values into one\n  setNames(NULL) %>% \n  as_vector() %>% \n  as.list()"},{"path":"iteration-and-loops.html","id":"reading-in-multiple-excel-sheets","chapter":"1 Iteration and loops","heading":"Reading in multiple Excel sheets","text":"reference, want use purrr import multiple Excel workbook sheets combine (reverse ), can use package readxl demonstrated .First, extract sheet names Excel workbook. Use excel_sheets() readxl package. provide filepath within parentheses.Now can use vector sheet names iteratively import() sheets. argument used import specific Excel workbook sheet given .x, sheet name currently mapped . Finally, used map(), sheets saved list - data frame one element list.Assuming data frame columns, can combine six data frames simple bind_rows() command (dplyr). Optionally, add .id = \"sheet_name\" column specifying sheet row came originally.","code":"\nsheet_names <- readxl::excel_sheets(here(\"data\", \"hospital_linelists.xlsx\"))\n\nsheet_names## [1] \"Central Hospital\"              \"Military Hospital\"             \"Missing\"                       \"Other\"                         \"Port Hospital\"                \r\n## [6] \"St. Mark's Maternity Hospital\"\nsheets_as_list <- sheet_names %>% \n  map(~rio::import(here(\"data\", \"hospital_linelists.xlsx\"), which = .x))\ncombined_sheets <- bind_rows(sheets_as_list)"},{"path":"iteration-and-loops.html","id":"resources","chapter":"1 Iteration and loops","heading":"1.4 Resources","text":"loops Data CarpentryThe R Data Science page iterationVignette write/read Excel filesA purrr tutorialpurrr cheatsheetTO \r\ngroup_split\r\ncollapse\r\npluckset_names()\r\nvars = linelist %>%\r\nselect_if(.numeric) %>%\r\nselect(-cyl, - year) %>%\r\nnames() %>%\r\nset_names()","code":""},{"path":"directory-interactions.html","id":"directory-interactions","chapter":"2 Directory interactions","heading":"2 Directory interactions","text":"page cover common scenarios interact , save, import directories (folders).","code":""},{"path":"directory-interactions.html","id":"preparation-1","chapter":"2 Directory interactions","heading":"2.1 Preparation","text":"","code":""},{"path":"directory-interactions.html","id":"fs-package","chapter":"2 Directory interactions","heading":"fs package","text":"fs package tidyverse package facilitate directory interactions, improving base R functions. sections often use functions fs.","code":"\npacman::p_load(fs)"},{"path":"directory-interactions.html","id":"print-directory-as-a-dendrogram-tree","chapter":"2 Directory interactions","heading":"2.1.1 Print directory as a dendrogram tree","text":"Use function dir_tree() fs.Provide folder filepath path = decide whether want show one level (recurse = FALSE) files sub-levels (recurse = TRUE). use (\"data) shorthand R project ’s sub-folder “data”, contains data used R handbook. use set display files within “data” sub-folders (e.g. “cache”, “epidemic models”, “population”, “shp”, “weather”).","code":"\nfs::dir_tree(path = here(\"data\"), recurse = TRUE)## C:/Users/Neale/OneDrive - Neale Batra/Documents/Analytic Software/R/Projects/R handbook/Epi_R_handbook/data\r\n## +-- africa_countries.geo.json\r\n## +-- cache\r\n## |   \\-- epidemic_models\r\n## |       +-- 2015-04-30\r\n## |       |   +-- estimated_reported_cases_samples.rds\r\n## |       |   +-- estimate_samples.rds\r\n## |       |   +-- latest_date.rds\r\n## |       |   +-- reported_cases.rds\r\n## |       |   +-- summarised_estimated_reported_cases.rds\r\n## |       |   +-- summarised_estimates.rds\r\n## |       |   \\-- summary.rds\r\n## |       +-- epinow_res.rds\r\n## |       +-- epinow_res_small.rds\r\n## |       +-- generation_time.rds\r\n## |       \\-- incubation_period.rds\r\n## +-- campylobacter_germany.xlsx\r\n## +-- Central Hospital.csv\r\n## +-- cleaning_dict.csv\r\n## +-- country_demographics.csv\r\n## +-- country_demographics_2.csv\r\n## +-- covid_incidence.csv\r\n## +-- covid_incidence_map.R\r\n## +-- district_count_data.xlsx\r\n## +-- facility_count_data.rds\r\n## +-- fluH7N9_China_2013.csv\r\n## +-- hospital_linelists.xlsx\r\n## +-- likert_data.csv\r\n## +-- linelist_cleaned.rds\r\n## +-- linelist_cleaned.xlsx\r\n## +-- linelist_raw.xlsx\r\n## +-- make_evd_dataset.R\r\n## +-- Military Hospital.csv\r\n## +-- Missing.csv\r\n## +-- Other.csv\r\n## +-- population\r\n## |   +-- sle_admpop_adm3_2020.csv\r\n## |   \\-- sle_population_statistics_sierraleone_2020.xlsx\r\n## +-- Port Hospital.csv\r\n## +-- sample_data_Shigella_tree.csv\r\n## +-- Shigella_subtree_2.nwk\r\n## +-- Shigella_tree.nwk\r\n## +-- shp\r\n## |   +-- README.txt\r\n## |   +-- sle_adm3.CPG\r\n## |   +-- sle_adm3.dbf\r\n## |   +-- sle_adm3.prj\r\n## |   +-- sle_adm3.sbn\r\n## |   +-- sle_adm3.sbx\r\n## |   +-- sle_adm3.shp\r\n## |   +-- sle_adm3.shp.xml\r\n## |   +-- sle_adm3.shx\r\n## |   +-- sle_hf.CPG\r\n## |   +-- sle_hf.dbf\r\n## |   +-- sle_hf.prj\r\n## |   +-- sle_hf.sbn\r\n## |   +-- sle_hf.sbx\r\n## |   +-- sle_hf.shp\r\n## |   \\-- sle_hf.shx\r\n## +-- St. Mark's Maternity Hospital (SMMH).csv\r\n## +-- weather\r\n## |   +-- germany_weather2002.nc\r\n## |   +-- germany_weather2003.nc\r\n## |   +-- germany_weather2004.nc\r\n## |   +-- germany_weather2005.nc\r\n## |   +-- germany_weather2006.nc\r\n## |   +-- germany_weather2007.nc\r\n## |   +-- germany_weather2008.nc\r\n## |   +-- germany_weather2009.nc\r\n## |   +-- germany_weather2010.nc\r\n## |   \\-- germany_weather2011.nc\r\n## +-- world_standard_population_by_sex.csv\r\n## \\-- ~$hospital_linelists.xlsx"},{"path":"directory-interactions.html","id":"accessing-files-in-the-directory","chapter":"2 Directory interactions","heading":"2.2 Accessing files in the directory","text":"","code":""},{"path":"directory-interactions.html","id":"running-other-files","chapter":"2 Directory interactions","heading":"2.3 Running other files","text":"","code":""},{"path":"directory-interactions.html","id":"source","chapter":"2 Directory interactions","heading":"source()","text":"run one R script another R script, can use source() command (base R).equivalent viewing R script clicking “Source” button upper-right script. execute script silently (output R console) unless specifically intended. See page [Interactive console] examples using source() interact user via R console question--answer mode.","code":"\nsource(here(\"scripts\", \"cleaning_scripts\", \"clean_testing_data.R\"))"},{"path":"directory-interactions.html","id":"render","chapter":"2 Directory interactions","heading":"render()","text":"render() variation source() often used R markdown scripts. provide input = R markdown file, also output_format = (typically either “html_document”, “pdf_document”, “word_document”, \"\")See page [R markdown] details. Also see documentation render() entering ?render.","code":""},{"path":"directory-interactions.html","id":"run-files-in-a-directory","chapter":"2 Directory interactions","heading":"Run files in a directory","text":"can create loop use source() every file directory, identified dir().want run certain scripts, can identify name like :comparison fs base R functions.","code":"\nfor(script in dir(here(\"scripts\"), pattern = \".R$\")) {   # for each script name in the R Project's \"scripts\" folder (with .R extension)\n  source(here(\"scripts\", script))                        # source the file with the matching name that exists in the scripts folder\n}\nscripts_to_run <- c(\n     \"epicurves.R\",\n     \"demographic_tables.R\",\n     \"survival_curves.R\"\n)\n\nfor(script in scripts_to_run) {\n  source(here(\"scripts\", script))\n}"},{"path":"directory-interactions.html","id":"import-files-in-a-directory","chapter":"2 Directory interactions","heading":"Import files in a directory","text":"See page [Import export] importing exporting individual files.\r\nSee page Iteration loops example package purrr demonstrating:Splitting dataframe saving multiple CSV filesSplitting dataframe saving part separate sheet within one Excel workbookImporting multiple CSV files combining one dataframeImporting Excel workbook multiple sheets combining one dataframe","code":""},{"path":"directory-interactions.html","id":"base-r","chapter":"2 Directory interactions","heading":"2.4 base R","text":"See functions list.files() dir(), perform operation listing files within specified directory. can specify ignore.case = specific patter look .file currently “open”, display tilde front, like “~$hospital_linelists.xlsx”.","code":"\nlist.files(path = here(\"data\"))\n\nlist.files(path = here(\"data\"), pattern = \".csv\")\n# dir(path = here(\"data\"), pattern = \".csv\")\n\nlist.files(path = here(\"data\"), pattern = \"evd\", ignore.case = TRUE)"},{"path":"directory-interactions.html","id":"resources-1","chapter":"2 Directory interactions","heading":"2.5 Resources","text":"https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html","code":""}]
