[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"contact-us","chapter":"","heading":"Contact us","text":"Structured feedback formEmail us epiRhandbook@gmail.comSubmit issues pull requests Github repositoryTwitter handle @epirhandbook","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Emma Buajitti, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Wayne Enanoria, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Molly Mantus, Adam Vaughan, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"factors.html","id":"factors","chapter":"1 Factors","heading":"1 Factors","text":"R, factors class data allow ordered categories fixed set acceptable values. Typically, convert column character numeric class factor want set intrinsic order values (“levels”) can displayed non-alphabetically plots tables. Another common use factors standardise legends plots fluctuate certain values temporarily absent data.page demonstrates use functions package forcats (short name “categorical variables”) base R functions. also touch upon use lubridate aweek special factor cases related epidemiological weeks.complete list forcats functions can found online . demonstrate common ones.","code":""},{"path":"factors.html","id":"preparation","chapter":"1 Factors","heading":"1.1 Preparation","text":"","code":""},{"path":"factors.html","id":"load-packages","chapter":"1 Factors","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,           # import/export\n  here,          # filepaths\n  lubridate,     # working with dates\n  forcats,       # factors\n  aweek,         # create epiweeks with automatic factor levels\n  janitor,       # tables\n  tidyverse      # data mgmt and viz\n  )"},{"path":"factors.html","id":"import-data","chapter":"1 Factors","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). Import data import() function rio package (accepts many file types like .xlsx, .rds, .csv - see [Import export] page details).","code":"\n# import your dataset\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"factors.html","id":"fct_newcat","chapter":"1 Factors","heading":"New categorical variable","text":"demonstration page use common scenario - creation new categorical variable.","code":""},{"path":"factors.html","id":"create-column","chapter":"1 Factors","heading":"Create column","text":"use existing column days_onset_hosp (days symptom onset hospital admission) create new column delay_cat classifying row one several categories. dplyr function case_when(), sequentially applies logical criteria (right-side) row returns corresponding left-side value new column delay_cat. Read case_when() [Cleaning data core functions].","code":"\nlinelist <- linelist %>% \n  mutate(delay_cat = case_when(\n    # criteria                                   # new value if TRUE\n    days_onset_hosp < 2                        ~ \"<2 days\",\n    days_onset_hosp >= 2 & days_onset_hosp < 5 ~ \"2-5 days\",\n    days_onset_hosp >= 5                       ~ \">5 days\",\n    is.na(days_onset_hosp)                     ~ NA_character_,\n    TRUE                                       ~ \"Check me\"))  "},{"path":"factors.html","id":"default-value-order","chapter":"1 Factors","heading":"Default value order","text":"created case_when(), new column delay_cat categorical column class Character - yet factor. Thus, frequency table, see unique values appear default alpha-numeric order - order make much intuitive sense:Likewise, make bar plot, values also appear order x-axis (see [ggplot basics] page ggplot2 - common visualization package R).","code":"\ntable(linelist$delay_cat, useNA = \"always\")## \r\n##  <2 days  >5 days 2-5 days     <NA> \r\n##     2990      602     2040      256\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = delay_cat))"},{"path":"factors.html","id":"convert-to-factor","chapter":"1 Factors","heading":"1.2 Convert to factor","text":"initially convert character numeric column class factor two options: base R function factor(), forcats function as_factor(). suggest using base R function factor() allows convert factor set order levels one command (90% time really want ).use mutate() factor() convert column delay_cat class character class factor. column delay_cat created Preparation section .unique “values” column now considered “levels” factor. levels order, can printed base R function levels(), alternatively viewed count table via table() base R tabyl() janitor. default, order levels alpha-numeric, . Note NA factor level.However, can conveniently specify levels order factor() command, character vector levels = argument. spelling must exactly match values. vector values provide sets two things:column’s possible/acceptable values. can include values yet exist column (might later). Later, add rows attempt otherwise convert/add new values delay_cat, R return error value defined levels.order levelsWe can now see levels ordered, specified previous command, sensible order.Now plot order makes intuitive sense well.","code":"\nlinelist <- linelist %>%\n  mutate(delay_cat = factor(delay_cat))\nlevels(linelist$delay_cat)## [1] \"<2 days\"  \">5 days\"  \"2-5 days\"\nlinelist <- linelist %>%\n  mutate(delay_cat = factor(delay_cat, levels = c(\"<2 days\", \"2-5 days\", \">5 days\")))\nlevels(linelist$delay_cat)## [1] \"<2 days\"  \"2-5 days\" \">5 days\"\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = delay_cat))"},{"path":"factors.html","id":"add-or-drop-levels","chapter":"1 Factors","heading":"1.3 Add or drop levels","text":"","code":""},{"path":"factors.html","id":"add","chapter":"1 Factors","heading":"Add","text":"need add levels factor, can fct_expand(). Just write factor name followed new levels (separated commas). tabulating values, can see new levels zero counts. can use table() base R, tabyl() janitor:Note: special forcats function easily add missing values (NA) level. See section Missing values .","code":"\nlinelist %>% \n  mutate(delay_cat = fct_expand(delay_cat, \"Not admitted to hospital\", \"Transfer to other jurisdiction\")) %>% \n  tabyl(delay_cat)   # print table##                       delay_cat    n    percent valid_percent\r\n##                         <2 days 2990 0.50781250     0.5308949\r\n##                        2-5 days 2040 0.34646739     0.3622159\r\n##                         >5 days  602 0.10224185     0.1068892\r\n##        Not admitted to hospital    0 0.00000000     0.0000000\r\n##  Transfer to other jurisdiction    0 0.00000000     0.0000000\r\n##                            <NA>  256 0.04347826            NA"},{"path":"factors.html","id":"drop","chapter":"1 Factors","heading":"Drop","text":"use fct_drop(), “unused” levels zero counts dropped set levels. levels added (“admitted hospital”) exists level rows actually values. dropped applying fct_drop() factor column:","code":"\nlinelist %>% \n  mutate(delay_cat = fct_drop(delay_cat)) %>% \n  tabyl(delay_cat)##  delay_cat    n    percent valid_percent\r\n##    <2 days 2990 0.50781250     0.5308949\r\n##   2-5 days 2040 0.34646739     0.3622159\r\n##    >5 days  602 0.10224185     0.1068892\r\n##       <NA>  256 0.04347826            NA"},{"path":"factors.html","id":"adjust-level-order","chapter":"1 Factors","heading":"1.4 Adjust level order","text":"package forcats offers useful functions easily adjust order factor’s levels (column defined class factor):functions can applied factor column two contexts:column data frame, usual, transformation available subsequent use dataInside plot, change applied within plot","code":""},{"path":"factors.html","id":"manually","chapter":"1 Factors","heading":"Manually","text":"function used manually order factor levels. Within parentheses first provide factor column name, provide either:levels desired order (character vector c()), orOne level ’s corrected placement using = argumentHere example redefining column delay_cat (already class Factor) specifying desired order levels.want move one level, can specify fct_relevel() alone give number = argument indicate order . example, command shifts “<2 days” second position:","code":"\n# re-define level order\nlinelist <- linelist %>% \n  mutate(delay_cat = fct_relevel(delay_cat, c(\"<2 days\", \"2-5 days\", \">5 days\")))\n# re-define level order\nlinelist %>% \n  mutate(delay_cat = fct_relevel(delay_cat, \"<2 days\", after = 1)) %>% \n  tabyl(delay_cat)"},{"path":"factors.html","id":"within-a-plot","chapter":"1 Factors","heading":"Within a plot","text":"forcats commands can used set level order data frame, within plot. using command “wrap around” column name within ggplot() plotting command, can reverse/relevel/etc. transformation apply within plot., two plots created ggplot() (see [ggplot basics] page). first, delay_cat column mapped x-axis plot, ’s default level order data linelist. second example wrapped within fct_relevel() order changed plot.Note default x-axis title now quite complicated - can overwrite title ggplot2 labs() argument.","code":"\n# Alpha-numeric default order - no adjustment within ggplot\nggplot(data = linelist)+\n    geom_bar(mapping = aes(x = delay_cat))\n\n# Factor level order adjusted within ggplot\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = fct_relevel(delay_cat, c(\"<2 days\", \"2-5 days\", \">5 days\"))))"},{"path":"factors.html","id":"reverse","chapter":"1 Factors","heading":"Reverse","text":"rather common want reverse level order. Simply wrap factor fct_rev().Note want reverse plot legend actual factor levels, can guides() (see [ggplot tips]).","code":""},{"path":"factors.html","id":"by-frequency","chapter":"1 Factors","heading":"By frequency","text":"order frequency value appears data, use fct_infreq(). missing values (NA) automatically included end, unless converted explicit level (see section). can reverse order wrapping fct_rev().function can used within ggplot(), shown .","code":"\n# ordered by frequency\nggplot(data = linelist, aes(x = fct_infreq(delay_cat)))+\n  geom_bar()+\n  labs(x = \"Delay onset to admission (days)\",\n       title = \"Ordered by frequency\")\n\n# reversed frequency\nggplot(data = linelist, aes(x = fct_rev(fct_infreq(delay_cat))))+\n  geom_bar()+\n  labs(x = \"Delay onset to admission (days)\",\n       title = \"Reverse of order by frequency\")"},{"path":"factors.html","id":"by-appearance","chapter":"1 Factors","heading":"By appearance","text":"Use fct_inorder() set level order match order appearance data, starting first row. can useful first carefully arrange() data data frame, use set factor order.","code":""},{"path":"factors.html","id":"by-summary-statistic-of-another-column","chapter":"1 Factors","heading":"By summary statistic of another column","text":"can use fct_reorder() order levels one column summary statistic another column. Visually, can result pleasing plots bars/points ascend descend steadily across plot.examples , x-axis delay_cat, y-axis numeric column ct_blood (cycle-threshold value). Box plots show CT value distribution delay_cat group. want order box plots ascending order group median CT value.first example , default order alpha-numeric level order used. can see box plot heights jumbled particular order. second example, delay_cat column (mapped x-axis) wrapped fct_reorder(), column ct_blood given second argument, “median” given third argument (also use “max”, “mean”, “min”, etc). Thus, order levels delay_cat now reflect ascending median CT values delay_cat group’s median CT value. reflected second plot - box plots re-arranged ascend. Note NA (missing) appear end, unless converted explicit level.Note example steps required prior ggplot() call - grouping calculations done internally ggplot command.","code":"\n# boxplots ordered by original factor levels\nggplot(data = linelist)+\n  geom_boxplot(\n    aes(x = delay_cat,\n        y = ct_blood, \n        fill = delay_cat))+\n  labs(x = \"Delay onset to admission (days)\",\n       title = \"Ordered by original alpha-numeric levels\")+\n  theme_classic()+\n  theme(legend.position = \"none\")\n\n\n# boxplots ordered by median CT value\nggplot(data = linelist)+\n  geom_boxplot(\n    aes(x = fct_reorder(delay_cat, ct_blood, \"median\"),\n        y = ct_blood,\n        fill = delay_cat))+\n  labs(x = \"Delay onset to admission (days)\",\n       title = \"Ordered by median CT value in group\")+\n  theme_classic()+\n  theme(legend.position = \"none\")"},{"path":"factors.html","id":"by-end-value","chapter":"1 Factors","heading":"By “end” value","text":"Use fct_reorder2() grouped line plots. orders levels (therefore legend) align vertical ordering lines “end” plot. Technically speaking, “orders y-values associated largest x values.”example, lines showing case counts hospital time, can apply fct_reorder2() color = argument within aes(), vertical order hospitals appearing legend aligns order lines terminal end plot. Read online documentation.","code":"\nepidemic_data <- linelist %>%         # begin with the linelist   \n    filter(date_onset < as.Date(\"2014-09-21\")) %>%    # cut-off date, for visual clarity\n    count(                                            # get case counts per week and by hospital\n      epiweek = lubridate::floor_date(date_onset, \"week\"),  \n      hospital                                            \n    ) \n  \nggplot(data = epidemic_data)+                       # start plot\n  geom_line(                                        # make lines\n    aes(\n      x = epiweek,                                  # x-axis epiweek\n      y = n,                                        # height is number of cases per week\n      color = fct_reorder2(hospital, epiweek, n)))+ # data grouped and colored by hospital, with factor order by height at end of plot\n  labs(title = \"Factor levels (and legend display) by line height at end of plot\",\n       color = \"Hospital\")                          # change legend title"},{"path":"factors.html","id":"fct_missing","chapter":"1 Factors","heading":"1.5 Missing values","text":"NA values factor column, can easily convert named level “Missing” fct_explicit_na(). NA values converted “(Missing)” end level order default. can adjust level name argument na_level =., opertation performed column delay_cat table printed tabyl() NA converted “Missing delay”.","code":"\nlinelist %>% \n  mutate(delay_cat = fct_explicit_na(delay_cat, na_level = \"Missing delay\")) %>% \n  tabyl(delay_cat)##      delay_cat    n    percent\r\n##       2-5 days 2040 0.34646739\r\n##        <2 days 2990 0.50781250\r\n##        >5 days  602 0.10224185\r\n##  Missing delay  256 0.04347826"},{"path":"factors.html","id":"combine-levels","chapter":"1 Factors","heading":"1.6 Combine levels","text":"","code":""},{"path":"factors.html","id":"manually-1","chapter":"1 Factors","heading":"Manually","text":"can adjust level displays manually manually fct_recode(). like dplyr function recode() (see [Cleaning data core functions]), allows creation new factor levels. use simple recode() factor, new re-coded values rejected unless already set permissible levels.tool can also used “combine” levels, assigning multiple levels re-coded value. Just careful lose information! Consider combining steps new column (-writing existing column).fct_recode() different syntax recode(). recode() uses OLD = NEW, whereas fct_recode() uses NEW = OLD.current levels delay_cat :new levels created using syntax fct_recode(column, \"new\" = \"old\", \"new\" = \"old\", \"new\" = \"old\") printed:manually combined fct_recode(). Note error raised creation new level “Less 5 days”.","code":"\nlevels(linelist$delay_cat)## [1] \"<2 days\"  \"2-5 days\" \">5 days\"\nlinelist %>% \n  mutate(delay_cat = fct_recode(\n    delay_cat,\n    \"Less than 2 days\" = \"<2 days\",\n    \"2 to 5 days\"      = \"2-5 days\",\n    \"More than 5 days\" = \">5 days\")) %>% \n  tabyl(delay_cat)##         delay_cat    n    percent valid_percent\r\n##  Less than 2 days 2990 0.50781250     0.5308949\r\n##       2 to 5 days 2040 0.34646739     0.3622159\r\n##  More than 5 days  602 0.10224185     0.1068892\r\n##              <NA>  256 0.04347826            NA\nlinelist %>% \n  mutate(delay_cat = fct_recode(\n    delay_cat,\n    \"Less than 5 days\" = \"<2 days\",\n    \"Less than 5 days\" = \"2-5 days\",\n    \"More than 5 days\" = \">5 days\")) %>% \n  tabyl(delay_cat)##         delay_cat    n    percent valid_percent\r\n##  Less than 5 days 5030 0.85427989     0.8931108\r\n##  More than 5 days  602 0.10224185     0.1068892\r\n##              <NA>  256 0.04347826            NA"},{"path":"factors.html","id":"reduce-into-other","chapter":"1 Factors","heading":"Reduce into “Other”","text":"can use fct_other() manually assign factor levels “” level. , levels column hospital, aside “Port Hospital” “Central Hospital”, combined “”. can provide vector either keep =, drop =. can change display “” level other_level =.","code":"\nlinelist %>%    \n  mutate(hospital = fct_other(                      # adjust levels\n    hospital,\n    keep = c(\"Port Hospital\", \"Central Hospital\"),  # keep these separate\n    other_level = \"Other Hospital\")) %>%            # All others as \"Other Hospital\"\n  tabyl(hospital)                                   # print table##          hospital    n    percent\r\n##  Central Hospital  454 0.07710598\r\n##     Port Hospital 1762 0.29925272\r\n##    Other Hospital 3672 0.62364130"},{"path":"factors.html","id":"reduce-by-frequency","chapter":"1 Factors","heading":"Reduce by frequency","text":"can combine least-frequent factor levels automatically using fct_lump().“lump” together many low-frequency levels “” group, one following:Set n = number groups want keep. n -frequent levels kept, others combine “”.Set prop = threshold frequency proportion levels want keep. values combine “”.can change display “” level other_level =. , two -frequent hospitals combined “Hospital”., warn\r\n## Show levelsOne benefit using factors standardise appearance plot legends tables, regardless values actually present dataset.preparing many figures (e.g. multiple jurisdictions) want legends tables appear identically even varying levels data completion data composition.","code":"\nlinelist %>%    \n  mutate(hospital = fct_lump(                      # adjust levels\n    hospital,\n    n = 2,                                          # keep top 2 levels\n    other_level = \"Other Hospital\")) %>%            # all others as \"Other Hospital\"\n  tabyl(hospital)                                   # print table##        hospital    n   percent\r\n##         Missing 1469 0.2494905\r\n##   Port Hospital 1762 0.2992527\r\n##  Other Hospital 2657 0.4512568"},{"path":"factors.html","id":"in-plots","chapter":"1 Factors","heading":"In plots","text":"ggplot() figure, simply add argument drop = FALSE relevant scale_xxxx() function. factor levels displayed, regardless whether present data. factor column levels displayed using fill =, scale_fill_discrete() include drop = FALSE, shown . levels displayed x = (x-axis) color = size = provide scale_color_discrete() scale_size_discrete() accordingly.example stacked bar plot age category, hospital. Adding scale_fill_discrete(drop = FALSE) ensures age groups appear legend, even present data.","code":"\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = hospital, fill = age_cat)) +\n  scale_fill_discrete(drop = FALSE)+                        # show all age groups in the legend, even those not present\n  labs(\n    title = \"All age groups will appear in legend, even if not present in data\")"},{"path":"factors.html","id":"in-tables","chapter":"1 Factors","heading":"In tables","text":"base R table() tabyl() janitor show factor levels (even unused levels).use count() summarise() dplyr make table, add argument .drop = FALSE include counts factor levels even unused.Read [Descriptive tables] page, scale_discrete documentation, count() documentation. can see another example [Contact tracing] page.","code":""},{"path":"factors.html","id":"epiweeks","chapter":"1 Factors","heading":"1.7 Epiweeks","text":"Please see extensive discussion create epidemiological weeks [Grouping data] page.\r\nPlease also see [Working dates] page tips create format epidemiological weeks.","code":""},{"path":"factors.html","id":"epiweeks-in-a-plot","chapter":"1 Factors","heading":"Epiweeks in a plot","text":"goal create epiweeks display plot, can simply lubridate’s floor_date(), explained [Grouping data] page. values returned class Date format YYYY-MM-DD. use column plot, dates naturally order correctly, need worry levels converting class Factor. See ggplot() histogram onset dates .approach, can adjust display dates axis scale_x_date(). See page [Epidemic curves] information. can specify “strptime” display format date_labels = argument scale_x_date(). formats use “%” placeholders covered [Working dates] page. Use “%Y” represent 4-digit year, either “%W” “%U” represent week number (Monday Sunday weeks respectively).","code":"\nlinelist %>% \n  mutate(epiweek_date = floor_date(date_onset, \"week\")) %>%  # create week column\n  ggplot()+                                                  # begin ggplot\n  geom_histogram(mapping = aes(x = epiweek_date))+           # histogram of date of onset\n  scale_x_date(date_labels = \"%Y-W%W\")                       # adjust disply of dates to be YYYY-WWw"},{"path":"factors.html","id":"epiweeks-in-the-data","chapter":"1 Factors","heading":"Epiweeks in the data","text":"However, purpose factoring plot, can approach one two ways:fine control display, convert lubridate epiweek column (YYYY-MM-DD) desired display format (YYYY-WWw) within data frame , convert class Factor.First, use format() base R convert date display YYYY-MM-DD YYYY-Www display (see [Working dates] page). process class converted character. , convert character class Factor factor().DANGER: place weeks ahead years (“Www-YYYY”) (“%W-%Y”), default alpha-numeric level ordering incorrect (e.g. 01-2015 35-2014). need manually adjust order, long painful process.fast default display, use aweek package ’s function date2week(). can set week_start = day, set factor = TRUE output column ordered factor. bonus, factor includes levels possible weeks span - even cases week.See [Working dates] page information aweek. also offers reverse function week2date().","code":"\nlinelist <- linelist %>% \n  mutate(epiweek_date = floor_date(date_onset, \"week\"),       # create epiweeks (YYYY-MM-DD)\n         epiweek_formatted = format(epiweek_date, \"%Y-W%W\"),  # Convert to display (YYYY-WWw)\n         epiweek_formatted = factor(epiweek_formatted))       # Convert to factor\n\n# Display levels\nlevels(linelist$epiweek_formatted)##  [1] \"2014-W13\" \"2014-W14\" \"2014-W15\" \"2014-W16\" \"2014-W17\" \"2014-W18\" \"2014-W19\" \"2014-W20\" \"2014-W21\" \"2014-W22\" \"2014-W23\" \"2014-W24\" \"2014-W25\" \"2014-W26\" \"2014-W27\" \"2014-W28\"\r\n## [17] \"2014-W29\" \"2014-W30\" \"2014-W31\" \"2014-W32\" \"2014-W33\" \"2014-W34\" \"2014-W35\" \"2014-W36\" \"2014-W37\" \"2014-W38\" \"2014-W39\" \"2014-W40\" \"2014-W41\" \"2014-W42\" \"2014-W43\" \"2014-W44\"\r\n## [33] \"2014-W45\" \"2014-W46\" \"2014-W47\" \"2014-W48\" \"2014-W49\" \"2014-W50\" \"2014-W51\" \"2015-W00\" \"2015-W01\" \"2015-W02\" \"2015-W03\" \"2015-W04\" \"2015-W05\" \"2015-W06\" \"2015-W07\" \"2015-W08\"\r\n## [49] \"2015-W09\" \"2015-W10\" \"2015-W11\" \"2015-W12\" \"2015-W13\" \"2015-W14\" \"2015-W15\" \"2015-W16\"\ndf <- linelist %>% \n  mutate(epiweek = date2week(date_onset, week_start = \"Monday\", factor = TRUE))\n\nlevels(df$epiweek)"},{"path":"factors.html","id":"resources","chapter":"1 Factors","heading":"1.8 Resources","text":"R Data Science page factorsaweek package vignette","code":""}]
