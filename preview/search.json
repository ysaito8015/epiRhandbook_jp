[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Offline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link, email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Emma Buajitti, Chris Bailey, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Adam Vaughan, Lionel Monteiro, Joao Muianga","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"shiny-and-dashboards.html","id":"shiny-and-dashboards","chapter":"1 Shiny and dashboards","heading":"1 Shiny and dashboards","text":"One largest drawbacks R usability people new experience programming languages. skills valuable, people find represents barrier sharing analyses, especially multidisciplinary environments. requires work maintain R installation, everyone comfortable running shared code, even ’s well documented easy read. especially true users change parameters code! reason dashboards often great way share results analyses others without interface code .R based dashboards also advantageous centralise code run - code run different machines, often people deal differing file paths, different R versions, different package installations. reason, dashboards great way share code others user friendly way!Despite , making dashboards R requires relatively advanced knowledge language. reason, recommended someone learning dashboards good knowledge data transformation visualisation, comfortable debugging code, writing functions. Working dashboards intuitive ’re starting, difficult understand times, great skill learn gets much easier practice!section give short overview can use R make dashboards, primarily using excellent shiny package, extensions.","code":""},{"path":"shiny-and-dashboards.html","id":"the-structure-of-a-shiny-app","chapter":"1 Shiny and dashboards","heading":"1.1 The structure of a shiny app","text":"","code":""},{"path":"shiny-and-dashboards.html","id":"basic-file-structures","chapter":"1 Shiny and dashboards","heading":"1.1.1 Basic file structures","text":"understand shiny, first need understand file structure app works! make brand new directory start. can actually made easier choosing New project Rstudio, choosing Shiny Web Application. create basic structure shiny app .Lets also install shiny go :opening project, ’ll notice .R file already present called app.R. essential either one two basic file structures file structure:file called app.RTwo files called ui.R server.RIf open file, ’ll notice two different objects defined one called ui another called server. objects must defined every shiny app central structure app ! difference two structures structure 1, ui server defined one file, defined separate files structure 2. can also (larger app) .R files structure can source() app, need core files times.","code":"\ninstall.packages(\"shiny\")\n# an example of app.R\n\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"My app\"),\n\n    # Sidebar with a slider input widget\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"input_1\")\n        ),\n\n        # Show a plot \n        mainPanel(\n           plotOutput(\"my_plot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n     \n     plot_1 <- reactive({\n          plot_func(param = input_1)\n     })\n     \n    output$my_plot <- renderPlot({\n       plot_1()\n    })\n}\n\n\n# Run the application \nshinyApp(ui = ui, server = server)"},{"path":"shiny-and-dashboards.html","id":"the-server-and-the-ui","chapter":"1 Shiny and dashboards","heading":"1.1.2 The server and the ui","text":"next need understand server ui objects actually . Put simply, two objects interacting whenever user interacts shiny app.UI element shiny app , basic level, R code creates HTML interface. means everything displayed UI app. largely includes:“Widgets” - dropdown menus, check boxes, sliders, etc can interacted userPlots, tables, etc - outputs generated R codeNavigation aspects app - tabs, panes, etc.Generic text, hyperlinks, etcHTML CSS elements (addressed later)important thing understand UI receives inputs user displays outputs server. active code running ui time - changes seen UI passed server (less). make plots, downloads, etc serverThe server shiny app code run app starts . way works little confusing. server function effectively react user interfacing UI, run chunks code response. things change server, passed back ui, changes can seen. Importantly, code server executed non-consecutively (’s best think way). Basically, whenever ui input affects chunk code server, run automatically, output produced.probably sounds abstract now, ’ll dive examples get clear idea actually works.","code":""},{"path":"shiny-and-dashboards.html","id":"before-you-start-to-build-an-app","chapter":"1 Shiny and dashboards","heading":"1.1.3 Before you start to build an app","text":"begin build app, immensely helpful know want build. Since UI written code, can’t really visualise ’re building unless aiming something specific. reason, immensely helpful look lots examples shiny apps get idea can make - even better can look source code behind apps! great resources :Rstudio app galleryOnce get idea possible, ’s also helpful map want look like - can drawing software (PowerPoint, MS paint, etc.). ’s helpful start simple first app! ’s also shame using code find online nice app template work - much easier building something scratch!","code":""},{"path":"shiny-and-dashboards.html","id":"building-a-ui","chapter":"1 Shiny and dashboards","heading":"1.2 Building a UI","text":"building app, easier work UI first can see ’re making, risk app failing server errors. mentioned previously, often good use template working UI. number standard layouts can used shiny available base shiny package, ’s worth noting also number package extensions shinydashboard. ’ll use example base shiny start .shiny UI generally defined series nested functions, following orderA function defining general layout (basic fluidPage(), available)Panels within layout :\r\nsidebar (sidebarPanel())\r\n“main” panel (mainPanel())\r\ntab (tabPanel())\r\ngeneric “column” (column())\r\nsidebar (sidebarPanel())“main” panel (mainPanel())tab (tabPanel())generic “column” (column())Widgets outputs - can confer inputs server (widgets) outputs server (outputs)\r\nWidgets generally styled xxxInput() e.g. selectInput()\r\nOutputs generally styled xxxOutput() e.g. plotOutput()\r\nWidgets generally styled xxxInput() e.g. selectInput()Outputs generally styled xxxOutput() e.g. plotOutput()’s worth stating can’t visualised easily abstract way, ’s best look example! Lets consider making basic app visualises malaria facility count data district. data lot differnet parameters, great end user apply filters see data age group/district see fit! can use simple shiny layout start - sidebar layout. layout widgets placed sidebar left, plot placed right.Lets plan app - can start selector lets us choose district want visualise data, another let us visualise age group interested . ’ll aim use filters show epicurve reflects parameters. need:Two dropdown menus let us choose district want, age group ’re interested .area can show resulting epicurve.might look something like :layout looks something like - note plot server render , inputs working!good opportunity discuss widgets work - note widget accepting inputId, label, series options specific widget type. inputId extremely important - IDs used pass information UI server. reason, must unique. make effort name something sensible, specific interacting cases larger apps.read documentation carefully full details widgets . Widgets pass specific types data server depending widget type, needs fully understood. example, selectInput() pass character type server:select Spring first widget , pass character object \"Spring\" server.select two items dropdown menu, come vector (e.g. c(\"Spring\", \"Bolo\")).widgets pass different types object server! example:numericInput() pass numeric type object servercheckboxInput() pass logical type object serverIt’s also worth noting named vector used age data . many widgets, using named vector choices display names objects, pass contents vector server. .e. can select 15+ pass \"malaria_rdt_15\" server - happens name column ’re interested !loads widgets can use lots things app. Widgets also allow upload files app, download outputs. also excellent shiny extensions give access widgets base shiny - shinyWidgets great example . look examples can look following links:base shiny widget galleryshinyWidgets gallery","code":"\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = TRUE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\")\n    )\n    \n  )\n)"},{"path":"shiny-and-dashboards.html","id":"loading-data-into-our-app","chapter":"1 Shiny and dashboards","heading":"1.3 Loading data into our app","text":"next step development getting server running. however, need get data app, figure calculations ’re going . shiny app straightforward debug, ’s often clear errors coming , ’s ideal get data processing visualisation code working start making server .given want make app shows epi curves change based user input, think code need run normal R script. ’ll need :Load packagesLoad dataTransform dataDevelop function visualise data based user inputsThis list pretty straightforward, shouldn’t hard . ’s now important think parts process need done parts need run response user inputs. shiny apps generally run code running, performed . help app’s performance much code can moved section. example, need load data/packages basic transformations , can put code outside server. means thing ’ll need server code visualise data. Lets develop componenets script first. However, since ’re visualising data function, can also put code function outside server function environment app runs!First lets load data. Since ’re working new project, want make clean, can create new directory called data, add malaria data . can run code testing script eventually delete clean structure app.easier work data use tidy data standards, also transform longer data format, age group column, cases another column. can easily using ’ve learned xxx section:’ve finished preparing data! crosses items 1, 2, 3 list things develop “testing R script”. last, difficult task building function produce epicurve based user defined parameters. mentioned previously, ’s highly recommended anyone learning shiny first look section functional programming understand works!defining function, might hard think parameters want include. functional programming shiny, every relevent parameter generally widget associated , thinking usually quite easy! example current app, want able filter province, widget , can add province parameter reflect . don’t app functionality filter facility (now), don’t need add parameter. Lets start making function three parameters:core datasetThe district choiceThe age group choiceWe won’t go great detail function, ’s relatively simple works. One thing note however, handle errors returning NULL otherwise give error. shiny server produces NULL object instead plot object, nothing shown ui! important, otherwise errors often cause app stop working.Let’s test function!function working, now understand going fit shiny app. mentioned concept startup code , lets look can actually incorporate structure app. two ways can !Put code app.R file start scriptCreate new file directory called global.R, put startup code file.’s worth noting point ’s generally easier, especially bigger apps, use second file structure, lets separate file structure simple way. Lets fully develop global.R script now. look like:Easy! One great feature shiny understand files named app.R, server.R, ui.R, global.R , need connect via code. just code global.R run start app!. also note improve apps organisation moved function file - especially helpful apps become larger. , make another directory called funcs, put function file called plot_epicurve.R. read function via following command global.RNote always specify local = TRUE shiny apps, since affect sourcing /app published server.","code":"\npacman::p_load(\"tidyverse\", \"lubridate\")\n\n# read data\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) %>% \n  as_tibble()\n\nprint(malaria_data)## # A tibble: 3,038 x 10\r\n##    location_name data_date  submitted_date Province District `malaria_rdt_0-4` `malaria_rdt_5-14` malaria_rdt_15 malaria_tot newid\r\n##    <chr>         <date>     <date>         <chr>    <chr>                <int>              <int>          <int>       <int> <int>\r\n##  1 Facility 1    2019-06-13 2019-06-14     North    Spring                  11                 12             23          46     1\r\n##  2 Facility 2    2019-06-13 2019-06-14     North    Bolo                    11                 10              5          26     2\r\n##  3 Facility 3    2019-06-13 2019-06-14     North    Dingo                    8                  5              5          18     3\r\n##  4 Facility 4    2019-06-13 2019-06-14     North    Bolo                    16                 16             17          49     4\r\n##  5 Facility 5    2019-06-13 2019-06-14     North    Bolo                     9                  2              6          17     5\r\n##  6 Facility 6    2019-06-13 2019-06-14     North    Dingo                    3                  1              4           8     6\r\n##  7 Facility 6    2019-06-12 2019-06-14     North    Dingo                    4                  0              3           7     6\r\n##  8 Facility 5    2019-06-12 2019-06-14     North    Bolo                    15                 14             13          42     5\r\n##  9 Facility 5    2019-06-11 2019-06-14     North    Bolo                    11                 11             13          35     5\r\n## 10 Facility 5    2019-06-10 2019-06-14     North    Bolo                    19                 15             15          49     5\r\n## # ... with 3,028 more rows\nmalaria_data <- malaria_data %>%\n  select(-newid) %>%\n  pivot_longer(cols = starts_with(\"malaria_\"), names_to = \"age_group\", values_to = \"cases_reported\")\n\nprint(malaria_data)## # A tibble: 12,152 x 7\r\n##    location_name data_date  submitted_date Province District age_group        cases_reported\r\n##    <chr>         <date>     <date>         <chr>    <chr>    <chr>                     <int>\r\n##  1 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_rdt_0-4              11\r\n##  2 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_rdt_5-14             12\r\n##  3 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_rdt_15               23\r\n##  4 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_tot                  46\r\n##  5 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_rdt_0-4              11\r\n##  6 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_rdt_5-14             10\r\n##  7 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_rdt_15                5\r\n##  8 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_tot                  26\r\n##  9 Facility 3    2019-06-13 2019-06-14     North    Dingo    malaria_rdt_0-4               8\r\n## 10 Facility 3    2019-06-13 2019-06-14     North    Dingo    malaria_rdt_5-14              5\r\n## # ... with 12,142 more rows\nplot_epicurve <- function(data, district = \"All\", agegroup = \"malaria_tot\") {\n  \n  if (!(\"All\" %in% district)) {\n    data <- data %>%\n      filter(District %in% district)\n    \n    plot_title_district <- stringr::str_glue(\"{paste0(district, collapse = \",\")} districts\")\n    \n  } else {\n    \n    plot_title_district <- \"all districts\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  data <- data %>%\n    filter(age_group == agegroup)\n  \n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  if (agegroup == \"malaria_tot\") {\n      agegroup_title <- \"All ages\"\n  } else {\n    agegroup_title <- stringr::str_glue(\"{str_remove(agegroup, 'malaria_rdt')} years\")\n  }\n  \n  \n  ggplot(data, aes(x = data_date, y = cases_reported)) +\n    geom_bar(stat = \"identity\", fill = \"darkred\") +\n    theme_minimal() +\n    labs(\n      x = \"date\",\n      y = \"number of cases\",\n      title = stringr::str_glue(\"Malaria cases - {plot_title_district}\"),\n      subtitle = agegroup_title\n    )\n  \n  \n  \n}\nplot_epicurve(malaria_data, district = \"Bolo\", agegroup = \"malaria_rdt_0-4\")\n# global.R script\n\npacman::p_load(\"tidyverse\", \"lubridate\", \"shiny\")\n\n# read data\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) %>% \n  as_tibble()\n\n\nmalaria_data <- malaria_data %>%\n  select(-newid) %>%\n  pivot_longer(cols = starts_with(\"malaria_\"), names_to = \"age_group\", values_to = \"cases_reported\")\n\n\n\nplot_epicurve <- function(data, district = \"All\", agegroup = \"malaria_tot\") {\n  \n  if (!(\"All\" %in% district)) {\n    data <- data %>%\n      filter(District %in% district)\n    \n    plot_title_district <- stringr::str_glue(\"{paste0(district, collapse = \",\")} districts\")\n    \n  } else {\n    \n    plot_title_district <- \"all districts\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  data <- data %>%\n    filter(age_group == agegroup)\n  \n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  if (agegroup == \"malaria_tot\") {\n      agegroup_title <- \"All ages\"\n  } else {\n    agegroup_title <- stringr::str_glue(\"{str_remove(agegroup, 'malaria_rdt')} years\")\n  }\n  \n  \n  ggplot(data, aes(x = data_date, y = cases_reported)) +\n    geom_bar(stat = \"identity\", fill = \"darkred\") +\n    theme_minimal() +\n    labs(\n      x = \"date\",\n      y = \"number of cases\",\n      title = stringr::str_glue(\"Malaria cases - {plot_title_district}\"),\n      subtitle = \n    )\n  \n  \n  \n}"},{"path":"shiny-and-dashboards.html","id":"developing-an-app-server","chapter":"1 Shiny and dashboards","heading":"1.4 Developing an app server","text":"Now code, just develop server. final piece app, probably hardest understand. server large R function, helpful think series smaller functions, tasks app can perform. ’s important understand functions executed linear order. order , ’s fully necessary understand starting shiny. basic level, tasks functions activate change user inputs affects , unless developer set behave differently. , quite abstract, lets first go three basic types shiny objectsReactive sources - another term user inputs. shiny server access outputs UI widgets ’ve programmed. Every time values changed, passed server.Reactive sources - another term user inputs. shiny server access outputs UI widgets ’ve programmed. Every time values changed, passed server.Reactive conductors - objects exist inside shiny server. don’t actually need simple apps, produce objects can seen inside server, used operations. generally depend reactive sources.Reactive conductors - objects exist inside shiny server. don’t actually need simple apps, produce objects can seen inside server, used operations. generally depend reactive sources.Endpoints - outputs passed server UI. example, epi curve producing.Endpoints - outputs passed server UI. example, epi curve producing.mind lets construct server step step. ’ll show UI code just reference:code UI :Two inputs:\r\nDistrict selector (inputId select_district)\r\nAge group selector (inputId select_agegroup)\r\nDistrict selector (inputId select_district)Age group selector (inputId select_agegroup)One output:\r\nepicurve (outputId malaria_epicurve)\r\nepicurve (outputId malaria_epicurve)stated previously, unique names assigned inputs outputs crucial. must unique used pass information ui server. server, access inputs via syntax input$input_name outputs passed ui syntax output$output_name Lets look example, hard understand otherwise!server simple app like actually quite straightforward! ’ll notice server function three parameters - input, output, session - isn’t important understand now, important stick setup! server one task - renders plot based function made earlier, inputs server. Notice names input output objects correspond exactly ui.understand basics server reacts user inputs, note output know (underlying package) inputs change, rerun function create plot every time change. Note also use renderPlot() function - one family class specific functions pass objects output. number functions behave similar, need ensure function matches class object ’re passing ui! example:renderText() - send text uirenderDataTable - send interactive table ui.Remember need match output function used ui - renderPlot() paired plotOutput(), renderText() matched textOutput().’ve finally made functioning app! can run pressing Run App button top right script window Rstudio. note can choose run app default browser (rather Rstudio) accurately reflect app look like users. ADD SOMETHING DOWNLOADING ZIP FILE APP MAYBE?","code":"\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = TRUE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\")\n    )\n    \n  )\n)\nserver <- function(input, output, session) {\n  \n  output$malaria_epicurve <- renderPlot(\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  )\n  \n}"},{"path":"shiny-and-dashboards.html","id":"adding-more-functionality","chapter":"1 Shiny and dashboards","heading":"1.5 Adding more functionality","text":"point ’ve finally got running app, little functionality. also haven’t really scratched surface shiny can , ’s lot learn ! Lets continue build existing app adding extra features. things nice add :explanatory textA download button plot - provide user high quality version image ’re generating appA selector specific facilitiesAnother dashboard page - show table data.lot add, can use learn bunch different shiny featues way. much learn shiny (can get advanced, hopefully case users better idea use can become comfortable using external learning sources well).","code":""},{"path":"shiny-and-dashboards.html","id":"adding-static-text","chapter":"1 Shiny and dashboards","heading":"1.5.1 Adding static text","text":"Lets first discuss adding static text shiny app. Adding text app extremely easy, basic grasp . Since static text doesn’t shiny app (’d like change, can use text rendering functions server!), shiny’s static text generally added ui app. wont go great detail, can add number different elements ui (even custom ones) interfacing R HTML css.HTML css languages explicitly involved user interface design. don’t need understand well, HTML creates objects UI (like text box, table), css generally used change style aesthetics objects. Shiny access large array HTML tags - present objects behave specific way, headers, paragraphs text, line breaks, tables, etc. can use examples like :h1() - header tag, make enclosed text automatically larger, change defaults pertain font face, colour etc (depending overall theme app). can access smaller smaller sub-heading h2() h6() well. Usage looks like:\r\nh1(\"header - section 1\")\r\nh1() - header tag, make enclosed text automatically larger, change defaults pertain font face, colour etc (depending overall theme app). can access smaller smaller sub-heading h2() h6() well. Usage looks like:h1(\"header - section 1\")p() - paragraph tag, make enclosed text similar text body text. text automatically wrap, relatively small size (footers smaller example.) Think text body word document. Usage looks like:\r\n*p(\"larger body text explaining function app\")p() - paragraph tag, make enclosed text similar text body text. text automatically wrap, relatively small size (footers smaller example.) Think text body word document. Usage looks like:\r\n*p(\"larger body text explaining function app\")tags$b() tags$() - used create bold tags$b() italicised tags$() whichever text enclosed!tags$b() tags$() - used create bold tags$b() italicised tags$() whichever text enclosed!tags$ul(), tags$ol() tags$li() - tags used creating lists. used within syntax , allow user create either ordered list (tags$ol(); .e. numbered) unordered list (tags$ul(), .e. bullet points). tags$li() used denote items list, regardless type list used. e.g.:tags$ul(), tags$ol() tags$li() - tags used creating lists. used within syntax , allow user create either ordered list (tags$ol(); .e. numbered) unordered list (tags$ul(), .e. bullet points). tags$li() used denote items list, regardless type list used. e.g.:br() hr() - tags create linebreaks horizontal lines (linebreak) respectively. Use separate sections app text! need pass items tags.br() hr() - tags create linebreaks horizontal lines (linebreak) respectively. Use separate sections app text! need pass items tags.div() - generic tag can contain anything, can named anything. progress ui design, can use compartmentalize ui, give specific sections specific styles, create interactions server UI elements. won’t go detail, ’re worth aware !div() - generic tag can contain anything, can named anything. progress ui design, can use compartmentalize ui, give specific sections specific styles, create interactions server UI elements. won’t go detail, ’re worth aware !Note every one objects can accessed tags$... , just function. effectively synonymous, may help use tags$... style ’d rather explicit overwrite functions accidentally. also means exhaustive list tags available. full list tags available shiny even can used inserting HTML directly ui!’re feeling confident, can also add css styling elements HTML tags style argument . won’t go works detail, one tip testing aesthetic changes UI using HTML inspector mode chrome (shiny app running browser), editing style objects !Lets add text app","code":"\ntags$ol(\n  \n  tags$li(\"Item 1\"),\n  \n  tags$li(\"Item 2\"),\n  \n  tags$li(\"Item 3\")\n  \n)ui <- fluidPage(\r\n\r\n  titlePanel(\"Malaria facility visualisation app\"),\r\n\r\n  sidebarLayout(\r\n\r\n    sidebarPanel(\r\n         h4(\"Options\"),\r\n         # selector for district\r\n         selectInput(\r\n              inputId = \"select_district\",\r\n              label = \"Select district\",\r\n              choices = c(\r\n                   \"All\",\r\n                   \"Spring\",\r\n                   \"Bolo\",\r\n                   \"Dingo\",\r\n                   \"Barnard\"\r\n              ),\r\n              selected = \"All\",\r\n              multiple = TRUE\r\n         ),\r\n         # selector for age group\r\n         selectInput(\r\n              inputId = \"select_agegroup\",\r\n              label = \"Select age group\",\r\n              choices = c(\r\n                   \"All ages\" = \"malaria_tot\",\r\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\r\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\r\n                   \"15+ yrs\" = \"malaria_rdt_15\"\r\n              ), \r\n              selected = \"All\",\r\n              multiple = FALSE\r\n         ),\r\n         # horizontal line\r\n         hr(),\r\n         downloadButton(\r\n           inputId = \"download_epicurve\",\r\n           label = \"Download plot\"\r\n         )\r\n\r\n    ),\r\n\r\n    mainPanel(\r\n      # epicurve goes here\r\n      plotOutput(\"malaria_epicurve\"),\r\n      br(),\r\n      hr(),\r\n      p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\r\n    tags$ul(\r\n      tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\r\n      tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\r\n      tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\r\n      tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\r\n      tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\r\n      tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\r\n      tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\r\n    )\r\n    \r\n  )\r\n)"},{"path":"shiny-and-dashboards.html","id":"adding-a-download-button","chapter":"1 Shiny and dashboards","heading":"1.5.2 Adding a download button","text":"Lets move second three features. download button fairly common thing add app fairly easy make. need add another Widget ui, need add another output server attach . can also introduce reactive conductors example!Lets update ui first - easy shiny comes widget called downloadButton() - lets give inputId label.Note ’ve also added hr() tag - adds horizontal line separating control widgets download widgets. another one HTML tags discussed previously.Now ui ready, need add server component. Downloads done server downloadHandler() function. Similar plot, need attach output inputId download button. function takes two arguments - filename content - functions. might able guess, filename used specify name downloaded file, content used specify downloaded. content contain function use save data locally - downloading csv file use rio::export(). Since ’re downloading plot, ’ll use ggplot2::ggsave(). Lets look program (won’t add server yet).Note content function always takes file argument, put output file name specified. might also notice ’re repeating code - using plot_epicurve() function twice server, download image displayed app. wont massively affect performance, means code generate plot run user changes widgets specifying district age group, want download plot. larger apps, suboptimal decisions like one slow things , ’s good learn make app efficient sense. make sense way run epicurve code districts/age groups changes, let used renderPlot() downloadHandler() functions. reactive conductors come !Reactive conductors objects created shiny server reactive way, outputted - can just used parts server. number different kinds reactive conductors, ’ll go basic two.1.reactive() - basic reactive conductor - react whenever inputs used inside change (district/age group widgets)\r\n2. eventReactive()- rective conductor works reactive(), except user can specify inputs cause rerun. useful reactive conductor takes long time process, explained later.Lets look two examples:use eventReactive() setup, can specify inputs cause chunk code run - isn’t useful us moment, can leave now. Note can include multiple inputs c()Lets look can integrate server code:can see ’re just calling output reactive ’ve defined download plot rendering functions. One thing note often trips people use outputs reactives functions - must add empty brackets end (.e. malaria_plot() correct, malaria_plot ). Now ’ve added solution app little tidyer, faster, easier change since code runs epicurve function one place.","code":"\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # horizontal line\n         hr(),\n         downloadButton(\n           inputId = \"download_epicurve\",\n           label = \"Download plot\"\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\"),\n      br(),\n      hr(),\n      p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n      tags$ul(\n        tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n        tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n        tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n        tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n        tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n        tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n        tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n      )\n      \n    )\n    \n  )\n)\nserver <- function(input, output, session) {\n  \n  output$malaria_epicurve <- renderPlot(\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n}\nmalaria_plot_r <- reactive({\n  \n  plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  \n})\n\n\n# only runs when the district selector changes!\nmalaria_plot_er <- eventReactive(input$select_district, {\n  \n  plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  \n})\nserver <- function(input, output, session) {\n  \n  malaria_plot <- reactive({\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  })\n  \n  \n  \n  output$malaria_epicurve <- renderPlot(\n    malaria_plot()\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    \n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             malaria_plot(),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n}"},{"path":"shiny-and-dashboards.html","id":"adding-a-facility-selector","chapter":"1 Shiny and dashboards","heading":"1.5.3 Adding a facility selector","text":"Lets move next feature - selector specific facilities. ’ll implement another parameter function can pass argument code. Lets look first - just operates principles parameters ’ve set . Lets update test function.facilites data, isn’t clear facilities correspond districts - end user won’t know either. might make using app quite unintuitive. reason, make facility options UI change dynamically user changes district - one filters ! Since many variables ’re using options, might also want generate options ui global.R file data. example, can add code chunk global.R ’ve read data :can pass new variables ui without issue, since globally visible server ui! Lets update UI:Notice ’re now passing variables choices instead hard coding ui! might make code compact well! Lastly, ’ll update server. easy update function incorporate new input (just pass argument new parameter), remember also want ui dynamically user changes selected district. important understand can change parameters behaviour widgets app running, needs done server. need understand new way output server learn .functions need understand known observer functions, similar reactive functions behave. one key difference though:Reactive functions directly affect outputs, produce objects can seen locations serverObserver functions can affect server outputs, via side effects functions. (can also things, main function practice)Similar reactive functions, two flavours observer functions, divided logic divides reactive functions:observe() - function runs whenever inputs used inside changeobserveEvent() - function runs user specified input changesWe also need understand shiny-provided functions update widgets. fairly straightforward run -first take session object server function (doesn’t need understood now), inputId function changed. pass new versions parameters already taken selectInput() - automatically updated widget.Lets look isolated example use server. user changes district, want filter tibble facilities district, update choices reflect available district (option facilities)’s ! can add server, behaviour now work. ’s new server look like:","code":"\nplot_epicurve <- function(data, district = \"All\", agegroup = \"malaria_tot\", facility = \"All\") {\n  \n  if (!(\"All\" %in% district)) {\n    data <- data %>%\n      filter(District %in% district)\n    \n    plot_title_district <- stringr::str_glue(\"{paste0(district, collapse = \",\")} districts\")\n    \n  } else {\n    \n    plot_title_district <- \"all districts\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  data <- data %>%\n    filter(age_group == agegroup)\n  \n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  if (agegroup == \"malaria_tot\") {\n      agegroup_title <- \"All ages\"\n  } else {\n    agegroup_title <- stringr::str_glue(\"{str_remove(agegroup, 'malaria_rdt')} years\")\n  }\n  \n    if (!(\"All\" %in% facility)) {\n    data <- data %>%\n      filter(location_name == facility)\n    \n    plot_title_facility <- facility\n    \n  } else {\n    \n    plot_title_facility <- \"all facilities\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n\n  \n  \n  ggplot(data, aes(x = data_date, y = cases_reported)) +\n    geom_bar(stat = \"identity\", fill = \"darkred\") +\n    theme_minimal() +\n    labs(\n      x = \"date\",\n      y = \"number of cases\",\n      title = stringr::str_glue(\"Malaria cases - {plot_title_district}; {plot_title_facility}\"),\n      subtitle = agegroup_title\n    )\n  \n  \n  \n}\n\n\nplot_epicurve(malaria_data, district = \"Spring\", agegroup = \"malaria_rdt_0-4\", facility = \"Facility 1\")## Warning: Removed 15 rows containing missing values (position_stack).\nall_districts <- c(\"All\", unique(malaria_data$District))\n\n# data frame of location names by district\nfacility_list <- malaria_data %>%\n  group_by(location_name, District) %>%\n  summarise() %>% \n  ungroup()\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = all_districts,\n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # selector for facility\n         selectInput(\n           inputId = \"select_facility\",\n           label = \"Select Facility\",\n           choices = c(\"All\", facility_list$location_name),\n           selected = \"All\"\n         ),\n         \n         # horizontal line\n         hr(),\n         downloadButton(\n           inputId = \"download_epicurve\",\n           label = \"Download plot\"\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\"),\n      br(),\n      hr(),\n      p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n      tags$ul(\n        tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n        tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n        tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n        tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n        tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n        tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n        tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n      )\n      \n    )\n    \n  )\n)\nobserve({\n  \n  if (input$select_district == \"All\") {\n    new_choices <- facility_list$location_name\n  } else {\n    new_choices <- facility_list %>%\n      filter(District == input$select_district) %>%\n      pull(location_name)\n  }\n  \n  new_choices <- c(\"All\", new_choices)\n  \n  updateSelectInput(session, inputId = \"select_facility\",\n                    choices = new_choices)\n  \n})\nserver <- function(input, output, session) {\n  \n  malaria_plot <- reactive({\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup, facility = input$select_facility)\n  })\n  \n  \n  \n  observe({\n    \n    if (input$select_district == \"All\") {\n      new_choices <- facility_list$location_name\n    } else {\n      new_choices <- facility_list %>%\n        filter(District == input$select_district) %>%\n        pull(location_name)\n    }\n    \n    new_choices <- c(\"All\", new_choices)\n    \n    updateSelectInput(session, inputId = \"select_facility\",\n                      choices = new_choices)\n    \n  })\n  \n  \n  output$malaria_epicurve <- renderPlot(\n    malaria_plot()\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    \n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             malaria_plot(),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n  \n  \n}"},{"path":"shiny-and-dashboards.html","id":"adding-another-tab-with-a-table","chapter":"1 Shiny and dashboards","heading":"1.5.4 Adding another tab with a table","text":"Now ’ll move last component want add app. ’ll want separate ui two tabs, one interactive table user can see data making epidemic curve . , can use packaged ui elements come shiny relevant tabs. basic level, can enclose main panel general structure:Lets apply ui. also want use DT package - great package making interactive tables pre-existing data. can see used DT::datatableOutput() example.Now app arranged tabs! Lets make necessary edits server well. Since dont need manipulate dataset render actually simple - just render malaria_data dataset via DT::renderDT() ui!","code":"\n# ... the rest of ui\n\nmainPanel(\n  \n  tabsetPanel(\n    type = \"tabs\",\n    tabPanel(\n      \"Epidemic Curves\",\n      ...\n    ),\n    tabPanel(\n      \"Data\",\n      ...\n    )\n  )\n)\nui <- fluidPage(\n     \n     titlePanel(\"Malaria facility visualisation app\"),\n     \n     sidebarLayout(\n          \n          sidebarPanel(\n               # selector for district\n               selectInput(\n                    inputId = \"select_district\",\n                    label = \"Select district\",\n                    choices = all_districts,\n                    selected = \"All\",\n                    multiple = FALSE\n               ),\n               # selector for age group\n               selectInput(\n                    inputId = \"select_agegroup\",\n                    label = \"Select age group\",\n                    choices = c(\n                         \"All ages\" = \"malaria_tot\",\n                         \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                         \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                         \"15+ yrs\" = \"malaria_rdt_15\"\n                    ), \n                    selected = \"All\",\n                    multiple = FALSE\n               ),\n               # selector for facility\n               selectInput(\n                    inputId = \"select_facility\",\n                    label = \"Select Facility\",\n                    choices = c(\"All\", facility_list$location_name),\n                    selected = \"All\"\n               ),\n               \n               # horizontal line\n               hr(),\n               downloadButton(\n                    outputId = \"download_epicurve\",\n                    label = \"Download plot\"\n               )\n               \n          ),\n          \n          mainPanel(\n               tabsetPanel(\n                    type = \"tabs\",\n                    tabPanel(\n                         \"Epidemic Curves\",\n                         plotOutput(\"malaria_epicurve\")\n                    ),\n                    tabPanel(\n                         \"Data\",\n                         DT::dataTableOutput(\"raw_data\")\n                    )\n               ),\n               br(),\n               hr(),\n               p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n               tags$ul(\n                    tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n                    tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n                    tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n                    tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n                    tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n                    tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n                    tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n               )\n               \n               \n          )\n     )\n)"},{"path":"shiny-and-dashboards.html","id":"sharing-shiny-apps","chapter":"1 Shiny and dashboards","heading":"1.6 Sharing shiny apps","text":"Now ’ve developed app, probably want share others - main advantage shiny ! can sharing code directly, publish server. share code, others able see ’ve done build , negate one main advantages shiny - can eliminate need end-users maintain R installation. reason, ’re sharing app users comfortable R, much easier share app published server.’d rather share code, make .zip file app, better yet, publish app github add collaborators. can refer section github information .However, ’re publishing app online, need little work. Ultimately, want app able accessed via web URL others can get quick easy access . Unfortunately, publish app server, need access server publish ! number hosting options comes :shinyapps.io: easiest place publish shiny apps, smallest amount configuration work needed, free, limited licenses.shinyapps.io: easiest place publish shiny apps, smallest amount configuration work needed, free, limited licenses.RStudio Connect: far powerful version R server, can perform many operations, including publishing shiny apps. however, harder use, less recommended first-time users.RStudio Connect: far powerful version R server, can perform many operations, including publishing shiny apps. however, harder use, less recommended first-time users.purposes document, use shinyapps.io, since easier first time users. can make free account start - also different price plans server licesnses needed. users expect , expensive price plan may , keep consideration. ’re looking create something small set individuals use, free license may perfectly suitable, public facing app may need licenses.First make sure app suitable publishing server. app, restart R session, ensure runs without running extra code. important, app requires package loading, data reading defined app code won’t run server. Also note can’t explicit file paths app - invalid server setting - using package solves issue well. Finally, ’re reading data source requires user-authentication, organisation’s servers, generally work server. need liase department figure whitelist shiny server .signing accountOnce account, can navigate tokens page Accounts. want add new token - used deploy app., note url account reflect name app - app called my_app, url appended xxx.io/my_app/. Choose app name wisely! Now ready, click deploy - successful run app web url chose!something making apps documents?","code":""},{"path":"shiny-and-dashboards.html","id":"further-reading","chapter":"1 Shiny and dashboards","heading":"1.7 Further reading","text":"far, ’ve covered lot aspects shiny, barely scratched surface offer shiny. guide serves introduction, loads learn fully understand shiny. start making apps gradually add functionality","code":""},{"path":"recommended-extension-packages.html","id":"recommended-extension-packages","chapter":"2 Recommended extension packages","heading":"2 Recommended extension packages","text":"following represents selection high quality shiny extensions can help get lot shiny. particular order:shinyWidgets - package gives many many widgets can used app. Run shinyWidgets::shinyWidgetsGallery() see selection available widgets package. See examples hereshinyWidgets - package gives many many widgets can used app. Run shinyWidgets::shinyWidgetsGallery() see selection available widgets package. See examples hereshinyjs - excellent package gives user ability greatly extend shiny’s utility via series javascript. applications package range simple highly advanced, might want first use manipulate ui simple ways, like hiding/showing elements, enabling/disabling buttons. Find hereshinyjs - excellent package gives user ability greatly extend shiny’s utility via series javascript. applications package range simple highly advanced, might want first use manipulate ui simple ways, like hiding/showing elements, enabling/disabling buttons. Find hereshinydashboard - package massively expands available ui can used shiny, specifically letting user create complex dashboard variety complex layouts. See hereshinydashboard - package massively expands available ui can used shiny, specifically letting user create complex dashboard variety complex layouts. See hereshinydashboardPlus - get even features shinydashboard framework! See hereshinydashboardPlus - get even features shinydashboard framework! See hereshinythemes - change default css theme shiny app wide range preset templates! See hereshinythemes - change default css theme shiny app wide range preset templates! See hereThere also number packages can used create interactive outputs shiny compatible.DT semi-incorporated base-shiny, provides great set functions create interactive tables.DT semi-incorporated base-shiny, provides great set functions create interactive tables.plotly package creating interactive plots user can manipulate app. can also convert plot interactive versions via plotly::ggplotly()! alternatives, dygraphs highcharter also excellent.plotly package creating interactive plots user can manipulate app. can also convert plot interactive versions via plotly::ggplotly()! alternatives, dygraphs highcharter also excellent.","code":""},{"path":"recommended-resources.html","id":"recommended-resources","chapter":"3 Recommended resources","heading":"3 Recommended resources","text":"","code":""}]
