[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via offline version (instructions )challenges book try address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareEpidemiologists need spend hours searching online code relevant common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see “Datasets used” pageTo download offline version follow steps:Click html file Github repositoryClick “Download” button. window open HTML source code.“Save ” webpage, via right-click (windows) Cmd-s (mac) - ensure file type “Webpage, Complete”file large (>40MB) content may take time appear. displays one long page, search Ctrl+f (Cmd-f).","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions. can submit issue pull request Github repository, provide feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha BerryReviewers:Advisers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET) (details ).handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN) also MSF’s Manson Unit.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"descriptive-analysis.html","id":"descriptive-analysis","chapter":"1 Descriptive analysis","heading":"1 Descriptive analysis","text":"page demonstrates use janitor, dplyr, gtsummary produce tabulations descriptive statistics, conduct simple statistical tests. tools advantages disadvantages areas code simplicity, accessibility outputs, quality printed outputs. hope one approaches works .","code":""},{"path":"descriptive-analysis.html","id":"preparation","chapter":"1 Descriptive analysis","heading":"1.1 Preparation","text":"","code":""},{"path":"descriptive-analysis.html","id":"load-packages","chapter":"1 Descriptive analysis","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,          # File import\n  here,         # File locator\n  skimr,        # get overview of data\n  tidyverse,    # data management + ggplot2 graphics, \n  gtsummary,    # summary statistics and tests\n  janitor,      # adding totals and percents to tables\n  flextable,    # converting tables to HTML\n  corrr         # correlation analayis for numeric variables\n  )"},{"path":"descriptive-analysis.html","id":"import-data","chapter":"1 Descriptive analysis","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Datasets used] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"descriptive-analysis.html","id":"browse-data","chapter":"1 Descriptive analysis","heading":"1.2 Browse data","text":"","code":""},{"path":"descriptive-analysis.html","id":"skimr-package","chapter":"1 Descriptive analysis","heading":"skimr package","text":"Using skimr package can get detailed aesthetically pleasing overview variables dataset. Read skimr github page., function skim() applied entire linelist data frame. overview data frame summary every column (class) produced.Table 1.1: Data summaryVariable type: characterVariable type: DateVariable type: factorVariable type: numericYou can also use summary() function, base R, get information entire data sets, output can difficult read using skimr.","code":"\n## get information about each variable in a dataset \nskim(linelist)\n## get information about each column in a dataset \nsummary(linelist)"},{"path":"descriptive-analysis.html","id":"summary-statistics","chapter":"1 Descriptive analysis","heading":"Summary statistics","text":"can use base R functions return summary statistics numeric column. functions also often used within complex code operations, example grouping summarising columns, referencing max() value calibrate plot height.See [R Basics] page complete list mathematical operators max(), min(), median(), mean(), quantile(), sd(), range().CAUTION: data contain missing values, R wants know return NA unless specify mathematical functions want R ignore missing values, via argument na.rm = TRUE.can return useful summary statistics numeric column using summary(), . Note dataframe must also specified shown .can access save one specific part index brackets [ ]:","code":"\nsummary(linelist$age_years)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##    0.00    6.00   13.00   16.14   23.00   90.00      87\nsummary(linelist$age_years)[[2]]## [1] 6"},{"path":"descriptive-analysis.html","id":"descriptive-tables","chapter":"1 Descriptive analysis","heading":"1.3 Descriptive tables","text":"several choices producing tabulation cross-tabulation summary tables. factors consider include code simplicity ease, desired output (printed R console, pretty HTML), can data afterward. Consider thoughts choose tool situation.Use tabyl() janitor produce “adorn” tabulations cross-tabulationsUse count() summarise() dplyr preparing data ggplot() calculating complex statisticsUse tbl_summary() gtsummary produce detailed publication-ready tables","code":""},{"path":"descriptive-analysis.html","id":"janitor","chapter":"1 Descriptive analysis","heading":"janitor","text":"janitor packages offers tabyl() function produces clean tabulations cross-tabulations, can “adorned” modified functions display percents, proportions, etc., pipe linelist data frame janitor functions print result. desired, can also save resulting tables assignment operator <-.","code":""},{"path":"descriptive-analysis.html","id":"simple-tabyl","chapter":"1 Descriptive analysis","heading":"Simple tabyl","text":"default use tabyl() specific column produces unique values, counts, column-wise “percents” (actually proportions). proportions may many digits. can adjust adorn_rounding() described .can see , missing values display row labeled <NA>. can suppress show_na = FALSE. missing values, row appear. missing values, proportions given raw (denominator inclusive NA counts) “valid” (denominator excludes NA counts).column class Factor certain levels present data, still appear table. can suppress feature show_missing_levels = FALSE.","code":"\nlinelist %>% tabyl(age_cat)##  age_cat    n    percent valid_percent\r\n##      0-4 1066 0.18104620   0.183761420\r\n##      5-9 1103 0.18733016   0.190139631\r\n##    10-14  918 0.15591033   0.158248578\r\n##    15-19  773 0.13128397   0.133252887\r\n##    20-29 1102 0.18716033   0.189967247\r\n##    30-49  724 0.12296196   0.124806068\r\n##    50-69  102 0.01732337   0.017583175\r\n##      70+   13 0.00220788   0.002240993\r\n##     <NA>   87 0.01477582            NA"},{"path":"descriptive-analysis.html","id":"cross-tabulation","chapter":"1 Descriptive analysis","heading":"Cross-tabulation","text":"Cross-tabulation counts achieved adding one additional within tabyl(). Note counts returned - proportions percents can added additional steps.","code":"\nlinelist %>% tabyl(age_cat, gender)##  age_cat   f   m NA_\r\n##      0-4 624 404  38\r\n##      5-9 651 414  38\r\n##    10-14 555 334  29\r\n##    15-19 381 367  25\r\n##    20-29 440 626  36\r\n##    30-49 161 539  24\r\n##    50-69   3  93   6\r\n##      70+   0  12   1\r\n##     <NA>   0   0  87"},{"path":"descriptive-analysis.html","id":"adorning-the-tabyl","chapter":"1 Descriptive analysis","heading":"“Adorning” the tabyl","text":"Use janitor’s “adorn” functions add totals convert proportions, percents, otherwise adjust display. Often pipe tabyl multiple functions.conscious order apply functions. examples.simple one-way table percents instead default proportions.cross-tabulation total row row percents.cross-tabulation adjusted counts percents displayed.","code":"\nlinelist %>%               # case linelist\n  tabyl(age_cat) %>%       # tabulate counts and proportions by age category\n  adorn_pct_formatting()   # convert proportions to percents##  age_cat    n percent valid_percent\r\n##      0-4 1066   18.1%         18.4%\r\n##      5-9 1103   18.7%         19.0%\r\n##    10-14  918   15.6%         15.8%\r\n##    15-19  773   13.1%         13.3%\r\n##    20-29 1102   18.7%         19.0%\r\n##    30-49  724   12.3%         12.5%\r\n##    50-69  102    1.7%          1.8%\r\n##      70+   13    0.2%          0.2%\r\n##     <NA>   87    1.5%             -\nlinelist %>%                                  \n  tabyl(age_cat, gender) %>%                  # counts by age and gender\n  adorn_totals(where = \"row\") %>%             # add total row\n  adorn_percentages(denominator = \"row\") %>%  # convert counts to proportions\n  adorn_pct_formatting(digits = 1)            # convert proportions to percents##  age_cat     f     m    NA_\r\n##      0-4 58.5% 37.9%   3.6%\r\n##      5-9 59.0% 37.5%   3.4%\r\n##    10-14 60.5% 36.4%   3.2%\r\n##    15-19 49.3% 47.5%   3.2%\r\n##    20-29 39.9% 56.8%   3.3%\r\n##    30-49 22.2% 74.4%   3.3%\r\n##    50-69  2.9% 91.2%   5.9%\r\n##      70+  0.0% 92.3%   7.7%\r\n##     <NA>  0.0%  0.0% 100.0%\r\n##    Total 47.8% 47.4%   4.8%\nlinelist %>%                                  # case linelist\n  tabyl(age_cat, gender) %>%                  # cross-tabulate counts\n  adorn_totals(where = \"row\") %>%             # add a total row\n  adorn_percentages(denominator = \"col\") %>%  # convert to proportions\n  adorn_pct_formatting() %>%                  # convert to percents\n  adorn_ns(position = \"front\") %>%            # display as: \"count (percent)\"\n  adorn_title(                                # adjust titles\n    row_name = \"Age Category\",\n    col_name = \"Gender\")##                      Gender                           \r\n##  Age Category             f             m          NA_\r\n##           0-4  624  (22.2%)  404  (14.5%)  38  (13.4%)\r\n##           5-9  651  (23.1%)  414  (14.8%)  38  (13.4%)\r\n##         10-14  555  (19.7%)  334  (12.0%)  29  (10.2%)\r\n##         15-19  381  (13.5%)  367  (13.2%)  25   (8.8%)\r\n##         20-29  440  (15.6%)  626  (22.4%)  36  (12.7%)\r\n##         30-49  161   (5.7%)  539  (19.3%)  24   (8.5%)\r\n##         50-69    3   (0.1%)   93   (3.3%)   6   (2.1%)\r\n##           70+    0   (0.0%)   12   (0.4%)   1   (0.4%)\r\n##          <NA>    0   (0.0%)    0   (0.0%)  87  (30.6%)\r\n##         Total 2815 (100.0%) 2789 (100.0%) 284 (100.0%)"},{"path":"descriptive-analysis.html","id":"printing-the-tabyl","chapter":"1 Descriptive analysis","heading":"Printing the tabyl","text":"default, tabyl print raw R console. Alternatively, can pass tabyl flextable package print HTML RStudio Viewer. Note using adorn_titles(), must specify placement = \"combined\" order print manner.Age Category/GenderfmNA_Total0-4624 (22.2%)404 (14.5%)38 (13.4%)1066 (18.1%)5-9651 (23.1%)414 (14.8%)38 (13.4%)1103 (18.7%)10-14555 (19.7%)334 (12.0%)29 (10.2%) 918 (15.6%)15-19381 (13.5%)367 (13.2%)25  (8.8%) 773 (13.1%)20-29440 (15.6%)626 (22.4%)36 (12.7%)1102 (18.7%)30-49161  (5.7%)539 (19.3%)24  (8.5%) 724 (12.3%)50-69  3  (0.1%) 93  (3.3%) 6  (2.1%) 102  (1.7%)70+  0  (0.0%) 12  (0.4%) 1  (0.4%)  13  (0.2%)  0  (0.0%)  0  (0.0%)87 (30.6%)  87  (1.5%)","code":"\nlinelist %>%\n  tabyl(age_cat, gender) %>% \n  adorn_totals(where = \"col\") %>% \n  adorn_percentages(denominator = \"col\") %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\") %>% \n  adorn_title(\n    row_name = \"Age Category\",\n    col_name = \"Gender\",\n    placement = \"combined\") %>% # this is necessary to print to HTML \n  flextable::flextable() %>%    # convert to HTML\n  flextable::autofit()          # format to one line per row "},{"path":"descriptive-analysis.html","id":"use-on-other-tables","chapter":"1 Descriptive analysis","heading":"Use on other tables","text":"can use janitor’s adorn_*() functions tables, created summarise(), count(), table().","code":""},{"path":"descriptive-analysis.html","id":"saving-the-tabyl","chapter":"1 Descriptive analysis","heading":"Saving the tabyl","text":"convert table HTML package like flextable, can save functions save_as_html(), save_as_word(), save_as_ppt, save_as_image(), discussed extensively [Tables] page. , table saved Word document can hand-edited.","code":"\nlinelist %>%\n  tabyl(age_cat, gender) %>% \n  adorn_totals(where = \"col\") %>% \n  adorn_percentages(denominator = \"col\") %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\") %>% \n  adorn_title(\n    row_name = \"Age Category\",\n    col_name = \"Gender\",\n    placement = \"combined\") %>% \n  flextable::flextable() %>%                     # convert to HTML flextable\n  flextable::autofit() %>%                       # ensure only one line per row\n  flextable::save_as_docx(path = \"tabyl.docx\")   # save as Word document"},{"path":"descriptive-analysis.html","id":"statistics","chapter":"1 Descriptive analysis","heading":"Statistics","text":"can apply statistical tests tabyls, like chisq.test() fisher.test() stats shown . Note missing values allowed.","code":"\nage_by_outcome <- linelist %>% \n  tabyl(age_cat, outcome, show_na = FALSE) \n\nchisq.test(age_by_outcome)## \r\n##  Pearson's Chi-squared test\r\n## \r\n## data:  age_by_outcome\r\n## X-squared = 12.014, df = 7, p-value = 0.1001"},{"path":"descriptive-analysis.html","id":"other-tips","chapter":"1 Descriptive analysis","heading":"Other tips","text":"Include argument na.rm = TRUE exclude missing values calculations.applying adorn_XXX() tables created tabyl(), can specify particular column(s) apply like adorn_percentage(,,,c(cases,deaths)). syntax simple. Consider using summarise() instead.can read detail janitor page tabyl vignette.","code":""},{"path":"descriptive-analysis.html","id":"dplyr-package","chapter":"1 Descriptive analysis","heading":"dplyr package","text":"dplyr part tidyverse packages extremely common data management tool. Creating tables dplyr useful calculating summary statistics group, passing results ggplot() (expects “long” data).","code":""},{"path":"descriptive-analysis.html","id":"counts","chapter":"1 Descriptive analysis","heading":"Counts","text":"explained [Grouping data] page, can use dplyr function count() return tabulated counts one columns. output returned “long” format column n hold counts.Tabulations two columns still returned “long” format, counts n column.display output counts group ggplot() relatively straight-forward. See examples pages [Plotting categorical data] [ggplot tips].","code":"\nlinelist %>% \n  count(age_cat)##   age_cat    n\r\n## 1     0-4 1066\r\n## 2     5-9 1103\r\n## 3   10-14  918\r\n## 4   15-19  773\r\n## 5   20-29 1102\r\n## 6   30-49  724\r\n## 7   50-69  102\r\n## 8     70+   13\r\n## 9    <NA>   87\nlinelist %>% \n  count(age_cat, gender)##    age_cat gender   n\r\n## 1      0-4      f 624\r\n## 2      0-4      m 404\r\n## 3      0-4   <NA>  38\r\n## 4      5-9      f 651\r\n## 5      5-9      m 414\r\n## 6      5-9   <NA>  38\r\n## 7    10-14      f 555\r\n## 8    10-14      m 334\r\n## 9    10-14   <NA>  29\r\n## 10   15-19      f 381\r\n## 11   15-19      m 367\r\n## 12   15-19   <NA>  25\r\n## 13   20-29      f 440\r\n## 14   20-29      m 626\r\n## 15   20-29   <NA>  36\r\n## 16   30-49      f 161\r\n## 17   30-49      m 539\r\n## 18   30-49   <NA>  24\r\n## 19   50-69      f   3\r\n## 20   50-69      m  93\r\n## 21   50-69   <NA>   6\r\n## 22     70+      m  12\r\n## 23     70+   <NA>   1\r\n## 24    <NA>   <NA>  87\nlinelist %>% \n  count(outcome, age_cat) %>% \n  ggplot()+\n    geom_bar(aes(x = outcome, fill = age_cat, y = n), stat = \"identity\")"},{"path":"descriptive-analysis.html","id":"within-group-proportions","chapter":"1 Descriptive analysis","heading":"Within-group proportions","text":"can calculate proportions within groups two levels aggregation prior using mutate(). table first groups data frame outcome groups counts column age_cat, achieving breakdown age outcome. Note can add stratifications adding columns group_by() command.","code":"\nage_by_outcome <- linelist %>% \n  group_by(outcome) %>%                  # group first by outcome \n  count(age_cat) %>%                     # group again and count by gender (produces \"n\" column)\n  mutate(percent = scales::percent(n / sum(n))) # calculate percent - note the denominator is by outcome group"},{"path":"descriptive-analysis.html","id":"pivot-wider","chapter":"1 Descriptive analysis","heading":"Pivot wider","text":"dplyr table “long” format, can “pivot” wide format using tidyr pivot_wider() function. likely need re-define column names rename(). information see page [Pivoting data].","code":"\nage_by_outcome %>% \n  pivot_wider(names_from = age_cat, values_from = c(n, percent))  ## # A tibble: 3 x 19\r\n## # Groups:   outcome [3]\r\n##   outcome `n_0-4` `n_5-9` `n_10-14` `n_15-19` `n_20-29` `n_30-49` `n_50-69` `n_70+`  n_NA `percent_0-4` `percent_5-9`\r\n##   <chr>     <int>   <int>     <int>     <int>     <int>     <int>     <int>   <int> <int> <chr>         <chr>        \r\n## 1 Death       482     526       384       326       469       316        49       6    24 18.67%        20.37%       \r\n## 2 Recover     361     329       307       268       392       252        31       5    38 18.20%        16.59%       \r\n## 3 <NA>        223     248       227       179       241       156        22       2    25 16.86%        18.75%       \r\n## # ... with 7 more variables: `percent_10-14` <chr>, `percent_15-19` <chr>, `percent_20-29` <chr>, `percent_30-49` <chr>,\r\n## #   `percent_50-69` <chr>, `percent_70+` <chr>, percent_NA <chr>"},{"path":"descriptive-analysis.html","id":"summary-statistics-with-summarise","chapter":"1 Descriptive analysis","heading":"Summary statistics with summarise()","text":"One advantages using dplyr make table flexibility calculate statistics like median(), max(), sd(), within context summarise(). statistics can calculated whole dataset group.\r\nsummarise() creates new summary data frame consisting columns define within summarise() (grouping columns).Within summarise statement, provide name(s) new summary column, equals sign, statistical function apply. Within statistical function, list column operated relevant argument (e.g. na.rm = TRUE). can use sum() count number rows meet logical criteria (use double equals ==)., linelist data delay symptom onset hospital admission (column days_onset_hosp, days) summarised.tips:Use sum() logic statement within “count” rows meet certain criteriaNote use argument na.rm = TRUE mathematical functions like sum(), otherwise NA returned missing valuesUse function percent() scales package easily convert percentsUse round() base R specify decimalsTo calculate statistics entire dataset, use summarise() without group_by()Percentiles deserve special mention. return percentiles, use quantile() defaults specify value(s) like probs =.can also use str_glue() combine columns one new column - typically used summarise() command. , summary_table data frame created mutated columns delay_mean delay_sd combined old columns removed. , make table presentable, total row added adorn_totals() janitor (ignores non-numeric columns). Lastly, use rename() dplyr make column names nicer. Now pass flextable print Word, HTML, Powerpoint, etc.!","code":"\nsummary_table <- linelist %>%                                        # begin with linelist, save out as new object\n  group_by(hospital) %>%                                             # Group all calculations by hospital\n  summarise(                                                         # only these summary columns will be returned\n    cases       = n(),                                                # number of rows per group\n    delay_3     = sum(days_onset_hosp >= 3, na.rm = T),               # number of rows with male gender\n    pct_delay_3 = scales::percent(delay_3 / cases),                   # convert previously-defined column to percent \n    delay_mean  = round(mean(days_onset_hosp, na.rm=T), digits = 1),  # mean of delays column, by group and rounded\n    delay_sd    = round(sd(days_onset_hosp, na.rm = T), digits = 1)   # standard deviation of delays, by group and rounded\n  )\n\nsummary_table  # print## # A tibble: 6 x 6\r\n##   hospital                             cases delay_3 pct_delay_3 delay_mean delay_sd\r\n## * <chr>                                <int>   <int> <chr>            <dbl>    <dbl>\r\n## 1 Central Hospital                       454     108 24%                1.9      1.9\r\n## 2 Military Hospital                      896     253 28%                2.1      2.3\r\n## 3 Missing                               1469     399 27%                2        2.3\r\n## 4 Other                                  885     234 26%                2        2.2\r\n## 5 Port Hospital                         1762     470 27%                2        2.2\r\n## 6 St. Mark's Maternity Hospital (SMMH)   422     116 27%                2        2.3\n# get default percentile values of age (0%, 25%, 50%, 75%, 100%)\nlinelist %>% \n  summarise(age_percentiles = quantile(age_years, na.rm = TRUE))##   age_percentiles\r\n## 1               0\r\n## 2               6\r\n## 3              13\r\n## 4              23\r\n## 5              90\n# get specified percentile values of age (5%, 50%, 75%, 98%)\nlinelist %>% \n  summarise(\n    age_percentiles = quantile(\n      age_years,\n      probs = c(.05, 0.5, 0.75, 0.98), \n      na.rm=TRUE)\n    )##   age_percentiles\r\n## 1               1\r\n## 2              13\r\n## 3              23\r\n## 4              49\nsummary_table %>% \n  mutate(delay = str_glue(\"{delay_mean} ({delay_sd})\")) %>%  # combine and format other values\n  select(-c(delay_mean, delay_sd)) %>%                       # remove two old columns   \n  adorn_totals(where = \"row\") %>%                            # add total row\n  rename(                                                    # rename cols\n    \"Hospital Name\"   = hospital,\n    \"Cases\"           = cases,\n    \"Delay 3+ days\"   = delay_3,\n    \"% delay 3+ days\" = pct_delay_3,\n    \"Mean (sd)\"       = delay)##                         Hospital Name Cases Delay 3+ days % delay 3+ days Mean (sd)\r\n##                      Central Hospital   454           108             24% 1.9 (1.9)\r\n##                     Military Hospital   896           253             28% 2.1 (2.3)\r\n##                               Missing  1469           399             27%   2 (2.3)\r\n##                                 Other   885           234             26%   2 (2.2)\r\n##                         Port Hospital  1762           470             27%   2 (2.2)\r\n##  St. Mark's Maternity Hospital (SMMH)   422           116             27%   2 (2.3)\r\n##                                 Total  5888          1580               -         -"},{"path":"descriptive-analysis.html","id":"using-summarise-on-aggregated-data","chapter":"1 Descriptive analysis","heading":"Using summarise() on aggregated data","text":"begin aggregated data, use sum() counts column. example, let’s say beginning table counts , called linelist_agg - shows “long” format case counts outcome gender.sum count values (column n) group can use sum(n, na.rm=T). sum values grouping column within specific subset, can use subset bracket [ ] syntax count column :TIP: summarise function works UK US spelling - summarise() summarize() call function.","code":"##   outcome gender    n\r\n## 1   Death      f 1246\r\n## 2   Death      m 1231\r\n## 3 Recover      f  946\r\n## 4 Recover      m  933\nlinelist_agg %>% \n  group_by(outcome) %>% \n  summarise(\n    total_cases = sum(n, na.rm=T),\n    male_cases = sum(n[gender == \"m\"], na.rm=T),\n    female_cases = sum(n[gender == \"f\"], na.rm=T))## # A tibble: 2 x 4\r\n##   outcome total_cases male_cases female_cases\r\n## * <chr>         <int>      <int>        <int>\r\n## 1 Death          2477       1231         1246\r\n## 2 Recover        1879        933          946"},{"path":"descriptive-analysis.html","id":"summarise-across-multiple-columns","chapter":"1 Descriptive analysis","heading":"Summarise across() multiple columns","text":"can use summarise across multiple columns using across(). makes life easier want statistic many columns. specify columns operate across, either:Provide vector column names c(), orUse select() semantic helper functions (explained ) select columns criteriaBelow, mean() applied grouped data. columns specified, function specified (parentheses), finally, additional arguments function (e.g. na.rm=TRUE).can difficult get order parentheses commas correct using across(). Remember within across() must include columns, functions, extra arguments needed functions.select() helper functions can place within across():helper functions available assist specifying columns:everything() - columns mentionedlast_col() - last columnwhere() - applies function columns selects TRUEstarts_with() - matches specified prefix. Example: starts_with(\"date\")ends_with() - matches specified suffix. Example: ends_with(\"_end\")contains() - columns containing character string. Example: contains(\"time\")matches() - apply regular expression (regex). Example: contains(\"[pt]al\")num_range() -any_of() - matches column named. Useful name might exist. Example: any_of(date_onset, date_death, cardiac_arrest)example, return mean every numeric column. () command takes place vector column names c(). function additional arguments within across().","code":"\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),\n                   .fns = mean,\n                   na.rm=T))## # A tibble: 3 x 5\r\n##   outcome age_years  temp wt_kg ht_cm\r\n## * <chr>       <dbl> <dbl> <dbl> <dbl>\r\n## 1 Death        16.0  38.5  52.8  124.\r\n## 2 Recover      16.4  38.6  53.5  126.\r\n## 3 <NA>         16.0  38.5  53.3  125.\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(.cols = where(is.numeric), .fns = mean, na.rm=T))## # A tibble: 3 x 12\r\n##   outcome generation   age age_years   lon   lat wt_kg ht_cm ct_blood  temp   bmi days_onset_hosp\r\n## * <chr>        <dbl> <dbl>     <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl> <dbl>           <dbl>\r\n## 1 Death         16.7  16.1      16.0 -13.2  8.47  52.8  124.     21.3  38.5  48.8            1.79\r\n## 2 Recover       16.4  16.5      16.4 -13.2  8.47  53.5  126.     21.1  38.6  47.7            2.28\r\n## 3 <NA>          16.5  16.0      16.0 -13.2  8.47  53.3  125.     21.2  38.5  47.4            2.04"},{"path":"descriptive-analysis.html","id":"gtsummary-package","chapter":"1 Descriptive analysis","heading":"gtsummary package","text":"want print summary statistics pretty, publication-ready graphic, can use gtsummary package function tbl_summary(). code can seem complex first, outputs look nice print RStudio Viewer panel HTML. Read vignette .introduce tbl_summary() show basic behavior first, actually produces large beautiful table. , examine detail make adjustments tailored tables.","code":""},{"path":"descriptive-analysis.html","id":"summary-table","chapter":"1 Descriptive analysis","heading":"Summary table","text":"default behavior tbl_summary() quite incredible - takes columns provide creates summary table. function prints statistics appropriate column class: median inter-quartile range (IQR) numeric columns, counts (%) categorical binary columns. Missing values converted “Unknown”. Footnotes added bottom explain statistics, total N shown top.\r\n          1\r\n          \r\n           \r\n          Median (IQR); n (%)\r\n          Now explain function works make adjustments. key arguments detailed :=\r\ncan stratify table column (e.g. outcome), creating 2-way table.statistic =\r\nIndicate statistics show display equation. two sides equation, separated tilde ~. right quotes statistical display desired, left columns display apply.right side equation uses syntax str_glue() stringr (see [Characters Strings]), desired display string quotes statistics within curly brackets. can include statistics like “n” (counts), “N” (denominator), “mean”, “median”, “sd”, “max”, “min”, percentiles “p##” like “p25”, percent total “p”. See ?tbl_summary details.left side equation, can specify columns name (e.g. age c(age, gender)) using helpers all_continuous(), all_categorical(), contains(), starts_with(), etc.simple example statistic = equation might look like , print mean column age_years:\r\n          1\r\n          \r\n           \r\n          Mean\r\n          slightly complex equation might look like , incorporating max min values within parentheses separated comma:can also differentiate syntax separate columns types columns. complex example , value provided statistc = list indicating continuous columns table print mean standard deviation parentheses, categorical columns print n, denominator, percent.digits =\r\nAdjust digits rounding. Optionally, can specified continuous columns ().label =\r\nAdjust column name displayed. Provide column name desired label separated tilde. default column name.missing_text =\r\nAdjust missing values displayed. default “Unknown”.type =\r\nused adjust many levels statistics shown. syntax similar statistic = provide equation columns left value right. Two common scenarios include:type = all_categorical() ~ \"categorical\" Forces dichotomous columns (e.g. fever) show levels instead “yes” rowtype = all_continuous() ~ \"continuous2\" Allows multi-line statistics per variable, shown later sectionIn example , arguments used modify original summary table:\r\n          1\r\n          \r\n           \r\n          Mean (SD); n / N (%)\r\n          ","code":"\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>%  # keep columns of interest\n  tbl_summary()                                                  # default tbl_summary()\nlinelist %>% \n  select(age_years) %>%         # keep only columns of interest \n  tbl_summary(                  # create summary table\n    statistic = age_years ~ \"{mean}\") # print mean of age\nstatistic = age_years ~ \"({min}, {max})\"\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>% # keep only columns of interest\n  tbl_summary(     \n    by = outcome,                                               # stratify entire table by outcome\n    statistic = list(all_continuous() ~ \"{mean} ({sd})\",        # stats and format for continuous columns\n                     all_categorical() ~ \"{n} / {N} ({p}%)\"),   # stats and format for categorical columns\n    digits = all_continuous() ~ 1,                              # rounding for continuous columns\n    type   = all_categorical() ~ \"categorical\",                 # force all categorical levels to display\n    label  = list(                                              # display labels for column names\n      outcome   ~ \"Outcome\",                           \n      age_years ~ \"Age (years)\",\n      gender    ~ \"Gender\",\n      temp      ~ \"Temperature\",\n      hospital  ~ \"Hospital\"),\n    missing_text = \"Missing\"                                    # how missing values should display\n  )## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"multi-line-stats-for-continuous-variables","chapter":"1 Descriptive analysis","heading":"Multi-line stats for continuous variables","text":"want print multiple lines statistics continuous variables, can indicate setting type = “continuous2”. can combine previously shown elements one table choosing statistics want show. need tell function want get table back entering type “continuous2”. number missing values shown “Unknown”.many ways modify tables, including adding p-values, adjusting color headings, etc. Many described documentation (enter ?tbl_summary Console), given section statistical tests.","code":"\nlinelist %>% \n  select(age_years, temp) %>%                      # keep only columns of interest\n  tbl_summary(                                     # create summary table\n    type = all_continuous() ~ \"continuous2\",       # indicate that you want to print multiple statistics \n    statistic = all_continuous() ~ c(\n      \"{mean} ({sd})\",                             # line 1: mean and SD\n      \"{median} ({p25}, {p75})\",                   # line 2: median and IQR\n      \"{min}, {max}\")                              # line 3: min and max\n    )"},{"path":"descriptive-analysis.html","id":"base-r","chapter":"1 Descriptive analysis","heading":"base R","text":"can use function table() tabulate cross-tabulate columns. Unlike options , must specify dataframe, shown .CAUTION: NA (missing) values tabulated unless include argument useNA = \"always\" (also set “” “ifany”).Multiple columns can cross-tabulated listing one , separated commas. Optionally, can assign column “name” like Outcome = linelist$outcome.return proportions, passing table function prop.table(). Use margins = argument specify whether want proportions rows (1), columns (2), whole table (3). clarity, pipe table round() function base R, specifying 2 digits.add row column totals, pass table addmargins(). works counts proportions.Converting table() object directly data frame straight-forward. One approach demonstrated :Create table, without using useNA = \"always\". Instead convert NA values “(Missing)” fct_explicit_na() forcats.Add totals (optional) piping addmargins()Pipe base R function .data.frame.matrix()Pipe table dplyr function add_rownames(), specifying name first columnPrint, View, export desired. example use flextable() package flextable described [Tables] page. print RStudio viewer pane pretty HTML.Age CategoryDeathRecover(Missing)Sum0-4482.0361.0223.01,066.05-9526.0329.0248.01,103.010-14384.0307.0227.0918.015-19326.0268.0179.0773.020-29469.0392.0241.01,102.030-49316.0252.0156.0724.050-6949.031.022.0102.070+6.05.02.013.0(Missing)24.038.025.087.0Sum2,582.01,983.01,323.05,888.0","code":"\ntable(linelist$outcome, useNA = \"always\")## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\nage_by_outcome <- table(linelist$age_cat, linelist$outcome, useNA = \"always\") # save table as object\nage_by_outcome   # print table##        \r\n##         Death Recover <NA>\r\n##   0-4     482     361  223\r\n##   5-9     526     329  248\r\n##   10-14   384     307  227\r\n##   15-19   326     268  179\r\n##   20-29   469     392  241\r\n##   30-49   316     252  156\r\n##   50-69    49      31   22\r\n##   70+       6       5    2\r\n##   <NA>     24      38   25\n# get proportions of table defined above, by rows, rounded\nprop.table(age_by_outcome, 1) %>% round(2)##        \r\n##         Death Recover <NA>\r\n##   0-4    0.45    0.34 0.21\r\n##   5-9    0.48    0.30 0.22\r\n##   10-14  0.42    0.33 0.25\r\n##   15-19  0.42    0.35 0.23\r\n##   20-29  0.43    0.36 0.22\r\n##   30-49  0.44    0.35 0.22\r\n##   50-69  0.48    0.30 0.22\r\n##   70+    0.46    0.38 0.15\r\n##   <NA>   0.28    0.44 0.29\naddmargins(age_by_outcome)##        \r\n##         Death Recover <NA>  Sum\r\n##   0-4     482     361  223 1066\r\n##   5-9     526     329  248 1103\r\n##   10-14   384     307  227  918\r\n##   15-19   326     268  179  773\r\n##   20-29   469     392  241 1102\r\n##   30-49   316     252  156  724\r\n##   50-69    49      31   22  102\r\n##   70+       6       5    2   13\r\n##   <NA>     24      38   25   87\r\n##   Sum    2582    1983 1323 5888\ntable(fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>% \n  addmargins() %>% \n  as.data.frame.matrix() %>% \n  dplyr::add_rownames(var = \"Age Category\") %>% \n  flextable::flextable()"},{"path":"descriptive-analysis.html","id":"simple-statistical-tests","chapter":"1 Descriptive analysis","heading":"1.4 Simple statistical tests","text":"","code":""},{"path":"descriptive-analysis.html","id":"base-r-1","chapter":"1 Descriptive analysis","heading":"base R","text":"can use base R functions produce results statistical tests. commands relatively simple results print R Console simple viewing. However, outputs usually lists harder manipulate want use results subsequent code operations.","code":""},{"path":"descriptive-analysis.html","id":"t-tests","chapter":"1 Descriptive analysis","heading":"T-tests","text":"Syntax 1: Best numeric categorical columns data frame. Provide numeric column left side equation categorical column right side. Specify dataset data =. Optionally, set paired = TRUE, conf.level = (0.95 default), alternative = (either “two.sided”, “less”, “greater”). Enter ?t.test details.Syntax 2: can compare two separate numeric vectors using alternative syntax. example, two columns different data sets.Conduct one-sample t-test known/hypothesized populaton mean right side equation:","code":"\n## compare mean age by outcome group with a t-test\nt.test(age_years ~ outcome, data = linelist)## \r\n##  Welch Two Sample t-test\r\n## \r\n## data:  age_years by outcome\r\n## t = -1.1252, df = 4231.1, p-value = 0.2606\r\n## alternative hypothesis: true difference in means is not equal to 0\r\n## 95 percent confidence interval:\r\n##  -1.1878646  0.3215694\r\n## sample estimates:\r\n##   mean in group Death mean in group Recover \r\n##              16.00498              16.43813\nt.test(df1$age_years, df2$age_years)\nt.test(linelist$age_years, mu = 45)"},{"path":"descriptive-analysis.html","id":"shapiro-wilks-test","chapter":"1 Descriptive analysis","heading":"Shapiro-Wilk’s test","text":"","code":"\nshapiro.test(linelist$age_years)"},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test","chapter":"1 Descriptive analysis","heading":"Wilcoxon rank sum test","text":"","code":"\n## compare age distribution by outcome group with a wilcox test\nwilcox.test(age_years ~ outcome, data = linelist)## \r\n##  Wilcoxon rank sum test with continuity correction\r\n## \r\n## data:  age_years by outcome\r\n## W = 2412546, p-value = 0.08206\r\n## alternative hypothesis: true location shift is not equal to 0"},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test","chapter":"1 Descriptive analysis","heading":"Kruskal-wallis test","text":"","code":"\n## compare age distribution by outcome group with a kruskal-wallis test\nkruskal.test(age_years ~ outcome, linelist)## \r\n##  Kruskal-Wallis rank sum test\r\n## \r\n## data:  age_years by outcome\r\n## Kruskal-Wallis chi-squared = 3.0237, df = 1, p-value = 0.08206"},{"path":"descriptive-analysis.html","id":"chi-squared-test","chapter":"1 Descriptive analysis","heading":"Chi-squared test","text":"","code":"\n## compare the proportions in each group with a chi-squared test\nchisq.test(linelist$gender, linelist$outcome)## \r\n##  Pearson's Chi-squared test with Yates' continuity correction\r\n## \r\n## data:  linelist$gender and linelist$outcome\r\n## X-squared = 0, df = 1, p-value = 1"},{"path":"descriptive-analysis.html","id":"gtsummary-package-1","chapter":"1 Descriptive analysis","heading":"gtsummary package","text":"Use gtsummary looking add results statistical test pretty table (described section ).\r\nPerforming statistical tests comparison tbl_summary done adding \r\nadd_p function table specifying test use. possible get p-values corrected multiple testing using \r\nadd_q function. Run ?tbl_summary details.","code":""},{"path":"descriptive-analysis.html","id":"chi-squared-test-1","chapter":"1 Descriptive analysis","heading":"1.4.0.1 Chi-squared test","text":"Compare proportions categorical variable two groups. default statistical test \r\nadd_p() perform chi-squared test independence continuity correction, \r\nexpected call count 5 Fisher’s exact test used.\r\n          1\r\n          \r\n           \r\n          n (%)\r\n          \r\n          2\r\n          \r\n           \r\n          Pearson's Chi-squared test\r\n          ","code":"\nlinelist %>% \n  select(gender, outcome) %>%    # keep variables of interest\n  tbl_summary(by = outcome) %>%  # produce summary table and specify grouping variable\n  add_p()                        # specify what test to perform## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"t-tests-1","chapter":"1 Descriptive analysis","heading":"T-tests","text":"Compare difference means continuous variable two groups.\r\nexample, compare mean age patient outcome.\r\n          1\r\n          \r\n           \r\n          Mean (SD)\r\n          \r\n          2\r\n          \r\n           \r\n          Welch Two Sample t-test\r\n          ","code":"\nlinelist %>% \n  select(age_years, outcome) %>%             # keep variables of interest\n  tbl_summary(                               # produce summary table\n    statistic = age_years ~ \"{mean} ({sd})\", # specify what statistics to show\n    by = outcome) %>%                        # specify the grouping variable\n  add_p(age_years ~ \"t.test\")                # specify what tests to perform## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test-1","chapter":"1 Descriptive analysis","heading":"Wilcoxon rank sum test","text":"Compare distribution continuous variable two groups. default\r\nuse Wilcoxon rank sum test median (IQR) comparing two\r\ngroups. However non-normally distributed data comparing multiple groups,\r\nKruskal-wallis test appropriate.\r\n          1\r\n          \r\n           \r\n          Median (IQR)\r\n          \r\n          2\r\n          \r\n           \r\n          Wilcoxon rank sum test\r\n          ","code":"\nlinelist %>% \n  select(age_years, outcome) %>%                       # keep variables of interest\n  tbl_summary(                                         # produce summary table\n    statistic = age_years ~ \"{median} ({p25}, {p75})\", # specify what statistic to show (this is default so could remove)\n    by = outcome) %>%                                  # specify the grouping variable\n  add_p(age_years ~ \"wilcox.test\")                     # specify what test to perform (default so could leave brackets empty)## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test-1","chapter":"1 Descriptive analysis","heading":"Kruskal-wallis test","text":"Compare distribution continuous variable two groups,\r\nregardless whether data normally distributed.\r\n          1\r\n          \r\n           \r\n          Median (IQR)\r\n          \r\n          2\r\n          \r\n           \r\n          Kruskal-Wallis rank sum test\r\n          ","code":"\nlinelist %>% \n  select(age_years, outcome) %>%                       # keep variables of interest\n  tbl_summary(                                         # produce summary table\n    statistic = age_years ~ \"{median} ({p25}, {p75})\", # specify what statistic to show (default, so could remove)\n    by = outcome) %>%                                  # specify the grouping variable\n  add_p(age_years ~ \"kruskal.test\")                    # specify what test to perform## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"dplyr-package-1","chapter":"1 Descriptive analysis","heading":"dplyr package","text":"Performing statistical tests dplyr alone dense, \r\nfit within tidy-data framework. requires using purrr create\r\nlist dataframes subgroups want compare. See page [Iteration loops] learn purrr.easier alternative may rstatix package.","code":""},{"path":"descriptive-analysis.html","id":"t-tests-2","chapter":"1 Descriptive analysis","heading":"T-tests","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the mean age for the death group\n    Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)),\n    ## calculate the mean age for the recover group\n    Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)),\n    ## using both grouped data sets compare mean age with a t-test\n    ## keep only the p.value\n    t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value)\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_mean Death_sd Recover_mean Recover_sd t_test\r\n##        <dbl>    <dbl>        <dbl>      <dbl>  <dbl>\r\n## 1       16.1     12.9         16.5       12.7  0.251"},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test-2","chapter":"1 Descriptive analysis","heading":"Wilcoxon rank sum test","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the median age for the death group\n    Death_median = map(Death, ~median(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_iqr = map(Death, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## calculate the median age for the recover group\n    Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_iqr = map(Recover, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## using both grouped data sets compare age distribution with a wilcox test\n    ## keep only the p.value\n    wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value)\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_median Death_iqr Recover_median Recover_iqr wilcox\r\n##          <dbl> <chr>              <dbl> <chr>        <dbl>\r\n## 1           13 6, 23                 14 6, 24       0.0798"},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test-2","chapter":"1 Descriptive analysis","heading":"Kruskal-wallis test","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the median age for the death group\n    Death_median = map(Death, ~median(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_iqr = map(Death, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## calculate the median age for the recover group\n    Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_iqr = map(Recover, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## using the original data set compare age distribution with a kruskal test\n    ## keep only the p.value\n    kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_median Death_iqr Recover_median Recover_iqr kruskal\r\n##          <dbl> <chr>              <dbl> <chr>         <dbl>\r\n## 1           13 6, 23                 14 6, 24        0.0798"},{"path":"descriptive-analysis.html","id":"chi-squared-test-2","chapter":"1 Descriptive analysis","heading":"Chi-squared test","text":"","code":"\nlinelist %>% \n  ## do everything by gender \n  group_by(outcome) %>% \n  ## count the variable of interest\n  count(gender) %>% \n  ## calculate proportion \n  ## note that the denominator here is the sum of each gender\n  mutate(percentage = n / sum(n) * 100) %>% \n  pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>% \n  filter(!is.na(gender)) %>% \n  mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value)## # A tibble: 2 x 8\r\n##   gender n_Death n_Recover  n_NA percentage_Death percentage_Recover percentage_NA  pval\r\n##   <chr>    <int>     <int> <int>            <dbl>              <dbl>         <dbl> <dbl>\r\n## 1 f         1246       946   623             48.3               47.7          47.1     1\r\n## 2 m         1231       933   625             47.7               47.0          47.2     1"},{"path":"descriptive-analysis.html","id":"correlations","chapter":"1 Descriptive analysis","heading":"1.5 Correlations","text":"Correlation numeric variables can investigated using tidyversecorrr package. allows compute correlations using Pearson, Kendall\r\ntau Spearman rho. package creates table also function \r\nautomatically plot values.","code":"\ncorrelation_tab <- linelist %>% \n  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # keep numeric variables of interest\n  correlate()      # create correlation table (using default pearson)\n\ncorrelation_tab    # print## # A tibble: 6 x 7\r\n##   term            generation       age ct_blood days_onset_hosp    wt_kg    ht_cm\r\n##   <chr>                <dbl>     <dbl>    <dbl>           <dbl>    <dbl>    <dbl>\r\n## 1 generation       NA         0.000371   0.195          -0.275   0.00715  0.00486\r\n## 2 age               0.000371 NA          0.0150         -0.0139  0.832    0.877  \r\n## 3 ct_blood          0.195     0.0150    NA              -0.601   0.0193   0.0226 \r\n## 4 days_onset_hosp  -0.275    -0.0139    -0.601          NA      -0.0210  -0.0266 \r\n## 5 wt_kg             0.00715   0.832      0.0193         -0.0210 NA        0.876  \r\n## 6 ht_cm             0.00486   0.877      0.0226         -0.0266  0.876   NA\n## remove duplicate entries (the table above is mirrored) \ncorrelation_tab <- correlation_tab %>% \n  shave()\n\n## view correlation table \ncorrelation_tab## # A tibble: 6 x 7\r\n##   term            generation     age ct_blood days_onset_hosp  wt_kg ht_cm\r\n##   <chr>                <dbl>   <dbl>    <dbl>           <dbl>  <dbl> <dbl>\r\n## 1 generation       NA        NA       NA              NA      NA        NA\r\n## 2 age               0.000371 NA       NA              NA      NA        NA\r\n## 3 ct_blood          0.195     0.0150  NA              NA      NA        NA\r\n## 4 days_onset_hosp  -0.275    -0.0139  -0.601          NA      NA        NA\r\n## 5 wt_kg             0.00715   0.832    0.0193         -0.0210 NA        NA\r\n## 6 ht_cm             0.00486   0.877    0.0226         -0.0266  0.876    NA\n## plot correlations \nrplot(correlation_tab)"},{"path":"descriptive-analysis.html","id":"resources","chapter":"1 Descriptive analysis","heading":"1.6 Resources","text":"Much information page adapted resources vignettes online:gtsummary\r\ndplyr\r\ncorrr\r\nsthda correlation","code":""}]
