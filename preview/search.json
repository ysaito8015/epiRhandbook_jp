[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via offline version (instructions )challenges book try address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareEpidemiologists need spend hours searching online code relevant common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"Want share use book? Want offer fix addition?\r\nEmail us epiRhandbook@gmail.com. welcome comments suggestions.can also submit issue pull request Github repository, provide structured feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha Berry, Wen LinReviewers:Advisers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN) also MSF’s Manson Unit.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"collaboration-with-github.html","id":"collaboration-with-github","chapter":"1 Collaboration with Github","heading":"1 Collaboration with Github","text":"page presents overview using Github collaborate others. extensive tutorials, informed writing page, can found bottom Resources section.","code":""},{"path":"collaboration-with-github.html","id":"why-use-github","chapter":"1 Collaboration with Github","heading":"1.1 Why use Github","text":"Github website supports collaborative projects version control. Basically, facilitates:Archiving versions incremental changes can easily revert backwardsCollaboration others can review, comment , accept/decline changes codeHaving parallel versions code structured ways integrate changes reviewPublicly sharing code, data, outputs, inviting feedback publicUsing Github helpful working within team, want system code review, want Github take care version control archiving. can avoid situation many versions scripts saved various dates - can confusing!Github’s value collaboration quality-control tool come cost speed - processes uploading reviewing may optimal teams working emergency settings.","code":""},{"path":"collaboration-with-github.html","id":"github-basics","chapter":"1 Collaboration with Github","heading":"1.2 Github basics","text":"","code":""},{"path":"collaboration-with-github.html","id":"what-is-git","chapter":"1 Collaboration with Github","heading":"What is Git?","text":"Git software tracking changes files, usually used coordinating work programmers. must install Git use Github R. can install Git computer https://git-scm.com/downloads.Github website (github.com) facilitates enhances use Git, including capabilities code review, issue-tracking, sharing public.software Git computer engine behind scenes. Git receives commands ’s language/syntax, typically need interact Git via ’s “command line” interface. Instead, can interact via point--click buttons either RStudio Github Desktop. noted , may occasionally write Git commands terminal RStudio terminal. learn Git commands see online interactive tutorial.","code":""},{"path":"collaboration-with-github.html","id":"account","chapter":"1 Collaboration with Github","heading":"Account","text":"can sign-free account github.com.may requested set-two-factor authentication app phone. Read Github help documents.","code":""},{"path":"collaboration-with-github.html","id":"repositories","chapter":"1 Collaboration with Github","heading":"Repositories","text":"Github repository (“repo”) like folder contains sub-folders files project (data, code, images, etc.) revision histories. Github repository aligns nicely R Project (see handbook page [R projects].create new repository, log-Github look green button create new repository.","code":""},{"path":"collaboration-with-github.html","id":"public-or-private","chapter":"1 Collaboration with Github","heading":"Public or private","text":"must choose want repository public (visible everyone internet) private (visible permission). important implications data sensitive. repository private encounter quotas advanced special circumstances, using Github actions automatically run code cloud.","code":""},{"path":"collaboration-with-github.html","id":"start-up-files","chapter":"1 Collaboration with Github","heading":"Start-up files","text":"files offered create new repository, optional, can also add repository later stage. typically live “root” folder repository. Brief descriptions :README file. file someone can read understand project exists else know use . empty first, can complete later.README file. file someone can read understand project exists else know use . empty first, can complete later..gitignore file text file line contain folders files Github ignore (track changes). Read see examples ..gitignore file text file line contain folders files Github ignore (track changes). Read see examples .can choose license work, reproduced others without due acknowledgment. information, see Creative Commons licenses.can choose license work, reproduced others without due acknowledgment. information, see Creative Commons licenses.","code":""},{"path":"collaboration-with-github.html","id":"key-vocabulary","chapter":"1 Collaboration with Github","heading":"Key vocabulary","text":"project files exist two places:\r\n  * *REMOTE* - versions Project files exist online Github repository  \r\n  * *LOCAL* - *clone* online repository exists physical computer. make actual changes files/code.  project files exist two places:Pull push - REMOTE repository syncs changes LOCAL repositoryPull push - REMOTE repository syncs changes LOCAL repositoryBranches - parallel, alternate versions project files\r\n  * *\"main\" branch* primary/final/\"live\" version files  \r\n  * branches made test changes incorporated \"main\" branch  Branches - parallel, alternate versions project filesA commit - unit trackable changes. example, perhaps edit lines code update related dataset. can bundle changes one “commit”. version control purposes, can revert project back time based commits, best keep relatively small. also attach brief description changes “commit message”.commit - unit trackable changes. example, perhaps edit lines code update related dataset. can bundle changes one “commit”. version control purposes, can revert project back time based commits, best keep relatively small. also attach brief description changes “commit message”.merge - adopt changes one branch another (e.g. “main”), merge one branch .merge - adopt changes one branch another (e.g. “main”), merge one branch .pull request - (“PR”) request merge one branch another. pull request typically involves multiple commits, contain changes certain files. pull request usually begins conversation review process accepted branch merged.pull request - (“PR”) request merge one branch another. pull request typically involves multiple commits, contain changes certain files. pull request usually begins conversation review process accepted branch merged.","code":"  * *REMOTE* - the versions of your Project files that exist online in the Github repository  \r\n  * *LOCAL* - this is a *clone* of the online repository that exists on your physical computer. This is where you make the actual changes to the files/code.    * The *\"main\" branch* is the primary/final/\"live\" version of your files  \r\n  * Other branches are made to test changes before they are incorporated into the \"main\" branch  "},{"path":"collaboration-with-github.html","id":"github-workflow","chapter":"1 Collaboration with Github","heading":"1.3 Github workflow","text":"Familiarize Github workflow reading interactive example Github website","code":""},{"path":"collaboration-with-github.html","id":"orientation","chapter":"1 Collaboration with Github","heading":"Orientation","text":"using Github R project files exist several dimensions:files exist online Github repository computer local clone repository\r\n  * Remote local versions synced *pushing* *pulling* changes  files exist online Github repository computer local clone repositoryThe files also exist “main” branch (version), also “working” branches\r\n  * Changes made working branches can merged Main branch  files also exist “main” branch (version), also “working” branchesIn brief:\r\nInitial setup involves cloning online Github repository new R project computer. want add/delete/make changes files, sync R project current (online) version “main” branch. computer make new branch “main” (like “Make Copy”). can make changes code, files, etc. new “working” branch locally computer. satisfied changes, packet-ize commits, push working branch’s online version. can merge online working branch online “main” branch transfer changes. team members may thing branches, perhaps contributing commits working branch well.schematic ’ve developed - ’s format two-way table help epidemiologists understand…’s another diagram website. recently, term “master” branch used, now referred “main” branch.\r\nImage source","code":"  * Remote and local versions are synced by *pushing* and *pulling* changes    * Changes made to working branches can be merged into Main branch  "},{"path":"collaboration-with-github.html","id":"first-steps","chapter":"1 Collaboration with Github","heading":"First steps","text":"Register free account GithubHave R RStudio installed/updatedInstall Git computer (Git software computer, Github website optional Desktop client)Create empty Github repository, go Github repository want clone/work ","code":""},{"path":"collaboration-with-github.html","id":"clone-the-github-repo-as-a-local-r-project","chapter":"1 Collaboration with Github","heading":"Clone the Github repo as a local R project","text":"RStudio start new R project clicking File > New Project > Version Control > Git\r\nGithub, copy repository URL copying link shown image \r\nRStudio, prompted “Repository URL”, paste URL\r\nAssign R project name\r\nDesignate new R Project saved locally\r\nCheck “Open new session” click “Create project”\r\nnow new local RStudio project clone Github repository\r\nGithub, copy repository URL copying link shown image belowIn RStudio, prompted “Repository URL”, paste URLAssign R project nameDesignate new R Project saved locallyCheck “Open new session” click “Create project”now new local RStudio project clone Github repositoryBelow copy repository URL Github, provide RStudio making new R project.RStudio, now “Git” tab, pane R Environment:Please note buttons circled image , referenced later (left right):Button begin “committing” saved file changes local branch (open new window)Blue arrow pull (update local version branch changes made branch others)Green arrow push (send commits/changes local version branch remote/Github version branch)Git tab RStudioButton create NEW branch using whichever local branch shown right base. almost always want branch main branch (first pull update main branch).branch currently working ., changes make code files appear","code":""},{"path":"collaboration-with-github.html","id":"make-changes","chapter":"1 Collaboration with Github","heading":"Make changes","text":"make change files reflected online main branch, can following steps. steps assume using Github RStudio. slight variation using Github Desktop instead RStudio, see next section.Create branchBe “main” branch click new branch icon (see image ).prompted name branch one-word descriptive name (can use underscores needed).see locally, still R project, longer working “main” branch.created, new branch also appear Github website branch.Make changes… edit code, add new files, update datasets, etc. Every one changes tracked, respective file saved. Changed files appear RStudio Git tab.","code":""},{"path":"collaboration-with-github.html","id":"commit-changes","chapter":"1 Collaboration with Github","heading":"Commit changes","text":"Commit changes. Every bunch changes make substantial (e.g. adding updating section code), pause commit changes. Think commit “batch” changes related common purpose. can always continue revise file committed changes .\r\nPress “Commit” Git tab (see image ), opens new window (shown )\r\nClick file name upper-left box\r\nReview changes made file (green, red etc.)\r\n“Stage” file include commit checking box next , click multiple file names click “Stage”\r\nWrite commit message short descriptive (required)\r\nPress “Commit” button. pop-box appear showing success error message.\r\nMake commit changes, many times like\r\nPress “Commit” Git tab (see image ), opens new window (shown )Click file name upper-left boxReview changes made file (green, red etc.)“Stage” file include commit checking box next , click multiple file names click “Stage”Write commit message short descriptive (required)Press “Commit” button. pop-box appear showing success error message.Make commit changes, many times like","code":""},{"path":"collaboration-with-github.html","id":"push-changes-to-github","chapter":"1 Collaboration with Github","heading":"Push changes to Github","text":"“First PULL, PUSH”PULL - First, click PULL icon (downward arrow) updates branch version local computer changes made remote/Github version. PULL often. Don’t hesitate. Always pull pushing.PULL - First, click PULL icon (downward arrow) updates branch version local computer changes made remote/Github version. PULL often. Don’t hesitate. Always pull pushing.PUSH changes remote/Github version branch. may asked enter Github username password.\r\n* first time asked, may need enter two Git command lines *Terminal* (tab next R Console):  \r\n        * **git config --global user.email \"@example.com\"**   (Github email address),  \r\n        * **git config --global user.name \"Github username\"**  PUSH changes remote/Github version branch. may asked enter Github username password.TIP: Asked provide password often? See chapters 10 & 11 tutorial connect repository via SSH key (complicated)","code":"* The first time you are asked, you may need to enter two Git command lines into the *Terminal* (the tab next to the R Console):  \r\n        * **git config --global user.email \"you@example.com\"**   (your Github email address), and  \r\n        * **git config --global user.name \"Your Github username\"**  "},{"path":"collaboration-with-github.html","id":"merge-changes-to-main","chapter":"1 Collaboration with Github","heading":"Merge changes to Main","text":"finished making changes, can begin process merging changes main branch. Depending situation, may fast, may build-review approval steps involving teammates.","code":""},{"path":"collaboration-with-github.html","id":"submit-a-pull-request","chapter":"1 Collaboration with Github","heading":"Submit a Pull Request","text":"done commits pushed commits remote Github repository, can request branch merged main branch.Go Github repositoryUse branch drop-menu view branch, mainAt top click green button saying “Compare Pull Request” branch. see , look another button says “Pull requests” click see “New pull request” button (can use set pull request).Write detailed Pull Request comment click “Create Pull Request”.Now can see pull request (example image ):Review tab “Files changed” see “main” branch change branch merged.right, can request review members team tagging Github ID. like, can set repository settings require one approving review order merge main.pull request approved see button available “Merge pull request”. Click .completed, delete branch explained ","code":""},{"path":"collaboration-with-github.html","id":"delete-your-branch","chapter":"1 Collaboration with Github","heading":"Delete your branch","text":"Go repository Github click button view branches (next drop-select branches). Now find branch click trash icon next . Read detail deleting branch hereBe sure also delete branch locally computer. happen automatically.RStudio, make sure Main branchSwitch typing Git commands RStudio “Terminal” (tab adjacent R console), enter : git branch -d branch_name , “branch_name” name branch deletedRefresh Git tab branch gone","code":""},{"path":"collaboration-with-github.html","id":"github-desktop","chapter":"1 Collaboration with Github","heading":"1.4 Github Desktop","text":"","code":""},{"path":"collaboration-with-github.html","id":"package-management-with-renv","chapter":"1 Collaboration with Github","heading":"1.5 Package management with renv","text":"","code":""},{"path":"collaboration-with-github.html","id":"resources","chapter":"1 Collaboration with Github","heading":"1.6 Resources","text":"https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdfhttps://happygitwithr.com/reset.htmlhttps://ohi-science.org/news/github-going-back--timelearngitbranching.js.org","code":""}]
