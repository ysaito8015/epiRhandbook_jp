[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-for-applied-epidemiology-and-public-health","chapter":"","heading":"R for applied epidemiology and public health","text":"handbook strives :Serve quick epi R code reference manualProvide task-centered examples addressing common epidemiological problemsAssist epidemiologists transitioning RBe accessible settings low internet-connectivity via offline version \r\nWritten epidemiologists, epidemiologistsWe applied epis around world, writing spare time offer resource community. encouragement feedback welcome:Structured feedback formEmail epiRhandbook@gmail.com tweet @epiRhandbookSubmit issues Github repository","code":""},{"path":"index.html","id":"how-to-use-this-handbook","chapter":"","heading":"How to use this handbook","text":"Browse pages Table Contents, use search boxClick “copy” icons copy codeYou can follow-along [example data][Download handbook data]See “Resources” section page materialOffline versionSee instructions [Download handbook data] page.LanguagesWe want translate languages English. can help, please contact us.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world drawing upon experience organizations including local, state, provincial, national health agencies, World Health Organization (), Médecins Sans Frontières / Doctors without Borders (MSF), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinReviewers: Pat Keating, Annick Lenglet, Margot Charette, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook received supportive funding via COVID-19 emergency capacity-building grant TEPHINET, global network Field Epidemiology Training Programs (FETPs).Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.Special thanks Médecins Sans Frontières (MSF) Operational Centre Amsterdam (OCA) support development handbook.publication supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Academic courses epidemiologist training programs welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"writing-functions.html","id":"writing-functions","chapter":"1 Writing functions","heading":"1 Writing functions","text":"","code":""},{"path":"writing-functions.html","id":"preparation","chapter":"1 Writing functions","heading":"1.1 Preparation","text":"","code":""},{"path":"writing-functions.html","id":"load-packages","chapter":"1 Writing functions","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":""},{"path":"writing-functions.html","id":"import-data","chapter":"1 Writing functions","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download book data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.also use last part page data H7N9 flu 2013.","code":""},{"path":"writing-functions.html","id":"functions","chapter":"1 Writing functions","heading":"1.2 Functions","text":"Functions helpful programming since allow make codes easier understand, somehow shorter less prone errors (given errors function ).come far handbook, means came across endless functions since R, every operation function call\r\n+, , , [, $, { …. example x + y '+'(x, y)R one languages offers possibility work functions give enough tools user easily write . think functions fixed top end programming chain, R offers possibility use vectors even use inside functions, lists…Lot advanced resources functional programming exist give insight help start functional programming short practical examples. encouraged visit links references read .","code":""},{"path":"writing-functions.html","id":"why-would-you-use-a-function","chapter":"1 Writing functions","heading":"1.3 Why would you use a function?","text":"answering question, important note already tips get write first R functions page [Iteration, loops, lists] handbook. fact, use “/else” loops often core part many functions since easily help either broaden application code allowing multiple conditions iterate codes repeating tasks.repeating multiple times block code apply different variable data?repeating multiple times block code apply different variable data?Getting rid substantially shorten overall code make run quicker?Getting rid substantially shorten overall code make run quicker?possible code written used different value many places code?possible code written used different value many places code?answer one previous questions “YES”, probably need write function","code":""},{"path":"writing-functions.html","id":"how-does-r-build-functions","chapter":"1 Writing functions","heading":"1.4 How does R build functions?","text":"Functions R three main components:formals() list arguments controls can call functionthe formals() list arguments controls can call functionthe body() code inside function .e. within brackets following parenthesis depending write itthe body() code inside function .e. within brackets following parenthesis depending write itand,environment() help locate function’s variables determines function finds value.created function, can verify components calling function associated.","code":""},{"path":"writing-functions.html","id":"basic-syntax-and-structure","chapter":"1 Writing functions","heading":"1.5 Basic syntax and structure","text":"function need named properly job easily understandable soon read name. Actually already case majority base R architecture. Functions like mean(), print(), summary() name straightforwardA function need named properly job easily understandable soon read name. Actually already case majority base R architecture. Functions like mean(), print(), summary() name straightforwardA function need arguments, data work objects can static values among optionsA function need arguments, data work objects can static values among optionsAnd finally function give output based core task arguments given. Usually use built-functions print(), return()… produce output. output can logical value, number, character, data frame…short kind R object.finally function give output based core task arguments given. Usually use built-functions print(), return()… produce output. output can logical value, number, character, data frame…short kind R object.Basically composition function:can create first function called contain_covid19().can verify components newly created function.Now test function. call written function, use use R functions .e writing function name adding required arguments.can write name argument precautionary reasons. without specifying , code work since R memory positioning argument. long put values arguments correct order, can skip writing arguments names calling functions.let’s look happens one values \"\" \"yes\".provide argument recognized, get error: Error contain_covid19(barrier_gest = \"sometimes\", wear_mask = \"yes\",  :    find function \"contain_covid19\"NOTE: functions (time short straightforward) may need name can used directly line code inside another function quick task. called anonymous functions .instance first anonymous function keeps character variables dataset.another function selects every second observation dataset (may relevant longitudinal data many records per patient instance ordered date visit).\r\ncase, proper function writing outside dplyr function (x) (x%%2 == 0) apply vector containing row numbers.possible base R code task :CAUTION: Tough true using functions can help us code, can nevertheless time consuming write functions fix one thought thoroughly, written adequately returning errors result. reason often recommended first write R code, make sure intend , transform function three main components listed . ","code":"\nfunction_name <- function(argument_1, argument_2, argument_3){\n  \n           function_task\n  \n           return(output)\n}\ncontain_covid19 <- function(barrier_gest, wear_mask, get_vaccine){\n  \n                            if (barrier_gest == \"yes\" & wear_mask ==\"yes\" & get_vaccine == \"yes\" ) \n       \n                            return (\"success\")\n  \n  else(\"please make sure all are yes, this pandemic has to end!\")\n}\nformals(contain_covid19)## $barrier_gest\r\n## \r\n## \r\n## $wear_mask\r\n## \r\n## \r\n## $get_vaccine\nbody(contain_covid19)## {\r\n##     if (barrier_gest == \"yes\" & wear_mask == \"yes\" & get_vaccine == \r\n##         \"yes\") \r\n##         return(\"success\")\r\n##     else (\"please make sure all are yes, this pandemic has to end!\")\r\n## }\nenvironment(contain_covid19)## <environment: R_GlobalEnv>\ncontain_covid19(barrier_gest = \"yes\", wear_mask = \"yes\", get_vaccine = \"yes\")## [1] \"success\"\ncontain_covid19(\"yes\", \"yes\", \"yes\")## [1] \"success\"\ncontain_covid19(barrier_gest=\"yes\", wear_mask=\"yes\", get_vaccine=\"no\")## [1] \"please make sure all are yes, this pandemic has to end!\"\ncontain_covid19(barrier_gest=\"sometimes\", wear_mask=\"yes\", get_vaccine=\"no\")\nlinelist %>% \n  dplyr::slice_head(n=10) %>%  #equivalent to R base \"head\" function and that return first n observation of the  dataset\n  select(function(x) is.character(x)) %>% \nDT::datatable(rownames = FALSE, filter=\"top\", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )\nlinelist %>%   \n   slice_head(n=20) %>% \n   tibble::rownames_to_column() %>% #add indices of each obs as rownames to clearly see the final selection\n    filter(row_number() %%2 == 0) %>% \nDT::datatable(rownames = FALSE, filter=\"top\", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )\nlinelist_firstobs <- head(linelist, 20)\n\nlinelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),] %>% \nDT::datatable(rownames = FALSE, filter=\"top\", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )"},{"path":"writing-functions.html","id":"examples-of-functions","chapter":"1 Writing functions","heading":"1.6 Examples of functions","text":"","code":""},{"path":"writing-functions.html","id":"a-function-that-returns-proportions-tables-for-several-variables-of-interest.","chapter":"1 Writing functions","heading":"1.7 A function that returns proportions tables for several variables of interest.","text":"Yes already nice functions many packages allowing summarize information easy nice way. still try fo make first steps getting used writing functions.example want show writing simple function avoid copy-pasting code multiple times.TIP: shown , important comment functions general programming. Bear mind function’s aim make code ready read, shorter efficient. one able understand function just reading name details reading comments.second option use function another one via loop make process :simpler way using base R “apply” instead “loop” expressed :TIP: R often defined functional programming language almost anytime run line code using built-functions. good habit comfortable writing functions often internal look basic functions using daily built. shortcut selecting function name clicking onCtrl+F2 fn+F2 Cmd+F2 (depending computer) .","code":"\nproptab_multiple <- function(my_data, var_to_tab){\n  \n  #print the name of each variable of interest before doing the tabulation\n  print(var_to_tab)\n\n  with(my_data,\n       rbind( #bind the results of the two following function by row\n        #tabulate the variable of interest: gives only numbers\n          table(my_data[[var_to_tab]], useNA = \"no\"),\n          #calculate the proportions for each variable of interest and round the value to 2 decimals\n         round(prop.table(table(my_data[[var_to_tab]]))*100,2)\n         )\n       )\n}\n\n\nproptab_multiple(linelist, \"gender\")## [1] \"gender\"##            f       m\r\n## [1,] 2807.00 2803.00\r\n## [2,]   50.04   49.96\nproptab_multiple(linelist, \"age_cat\")## [1] \"age_cat\"##          0-4     5-9  10-14  15-19   20-29 30-49 50-69 70+\r\n## [1,] 1095.00 1095.00 941.00 743.00 1073.00   754 95.00 6.0\r\n## [2,]   18.87   18.87  16.22  12.81   18.49    13  1.64 0.1\nproptab_multiple(linelist, \"outcome\")## [1] \"outcome\"##        Death Recover\r\n## [1,] 2582.00 1983.00\r\n## [2,]   56.56   43.44\nfor(var_to_tab in c(\"gender\",\"age_cat\",  \"outcome\")){\n  \n  print(proptab_multiple(linelist, var_to_tab))\n  \n}## [1] \"gender\"\r\n##            f       m\r\n## [1,] 2807.00 2803.00\r\n## [2,]   50.04   49.96\r\n## [1] \"age_cat\"\r\n##          0-4     5-9  10-14  15-19   20-29 30-49 50-69 70+\r\n## [1,] 1095.00 1095.00 941.00 743.00 1073.00   754 95.00 6.0\r\n## [2,]   18.87   18.87  16.22  12.81   18.49    13  1.64 0.1\r\n## [1] \"outcome\"\r\n##        Death Recover\r\n## [1,] 2582.00 1983.00\r\n## [2,]   56.56   43.44"},{"path":"writing-functions.html","id":"using-purrr-writing-a-function-that-can-be-iteratively-applied","chapter":"1 Writing functions","heading":"1.8 Using purrr: writing a function that can be iteratively applied","text":"","code":""},{"path":"writing-functions.html","id":"modify-multiple-variables-class-in-a-dataset.","chapter":"1 Writing functions","heading":"1.8.1 Modify multiple variables class in a dataset.","text":"Let’s say many character variables original linelist data need changes “factor” analysis plotting purposes. Instead repeating step several times, can just use lapply transformation variables concerned single line code.CAUTION: lapply returns list, thus use may require additional modification last step.step can done using map_if function purrr package","code":"\nlinelist_factor2 <- linelist %>%\n  purrr::map_if(is.character, as.factor)\n\n\nlinelist_factor2 %>%\n        glimpse()## List of 30\r\n##  $ case_id             : Factor w/ 5888 levels \"00031d\",\"00086d\",..: 2134 3022 396 4203 3084 4347 179 1241 5594 430 ...\r\n##  $ generation          : num [1:5888] 4 4 2 3 3 3 4 4 4 4 ...\r\n##  $ date_infection      : Date[1:5888], format: \"2014-05-08\" NA NA \"2014-05-04\" ...\r\n##  $ date_onset          : Date[1:5888], format: \"2014-05-13\" \"2014-05-13\" \"2014-05-16\" \"2014-05-18\" ...\r\n##  $ date_hospitalisation: Date[1:5888], format: \"2014-05-15\" \"2014-05-14\" \"2014-05-18\" \"2014-05-20\" ...\r\n##  $ date_outcome        : Date[1:5888], format: NA \"2014-05-18\" \"2014-05-30\" NA ...\r\n##  $ outcome             : Factor w/ 2 levels \"Death\",\"Recover\": NA 2 2 NA 2 2 2 1 2 1 ...\r\n##  $ gender              : Factor w/ 2 levels \"f\",\"m\": 2 1 2 1 2 1 1 1 2 1 ...\r\n##  $ age                 : num [1:5888] 2 3 56 18 3 16 16 0 61 27 ...\r\n##  $ age_unit            : Factor w/ 2 levels \"months\",\"years\": 2 2 2 2 2 2 2 2 2 2 ...\r\n##  $ age_years           : num [1:5888] 2 3 56 18 3 16 16 0 61 27 ...\r\n##  $ age_cat             : Factor w/ 8 levels \"0-4\",\"5-9\",\"10-14\",..: 1 1 7 4 1 4 4 1 7 5 ...\r\n##  $ age_cat5            : Factor w/ 18 levels \"0-4\",\"5-9\",\"10-14\",..: 1 1 12 4 1 4 4 1 13 6 ...\r\n##  $ hospital            : Factor w/ 6 levels \"Central Hospital\",..: 4 3 6 5 2 5 3 3 3 3 ...\r\n##  $ lon                 : num [1:5888] -13.2 -13.2 -13.2 -13.2 -13.2 ...\r\n##  $ lat                 : num [1:5888] 8.47 8.45 8.46 8.48 8.46 ...\r\n##  $ infector            : Factor w/ 2697 levels \"00031d\",\"002e6c\",..: 2594 NA NA 2635 180 1799 1407 195 NA NA ...\r\n##  $ source              : Factor w/ 2 levels \"funeral\",\"other\": 2 NA NA 2 2 2 2 2 NA NA ...\r\n##  $ wt_kg               : num [1:5888] 27 25 91 41 36 56 47 0 86 69 ...\r\n##  $ ht_cm               : num [1:5888] 48 59 238 135 71 116 87 11 226 174 ...\r\n##  $ ct_blood            : num [1:5888] 22 22 21 23 23 21 21 22 22 22 ...\r\n##  $ fever               : Factor w/ 2 levels \"no\",\"yes\": 1 NA NA 1 1 1 NA 1 1 1 ...\r\n##  $ chills              : Factor w/ 2 levels \"no\",\"yes\": 1 NA NA 1 1 1 NA 1 1 1 ...\r\n##  $ cough               : Factor w/ 2 levels \"no\",\"yes\": 2 NA NA 1 2 2 NA 2 2 2 ...\r\n##  $ aches               : Factor w/ 2 levels \"no\",\"yes\": 1 NA NA 1 1 1 NA 1 1 1 ...\r\n##  $ vomit               : Factor w/ 2 levels \"no\",\"yes\": 2 NA NA 1 2 2 NA 2 2 1 ...\r\n##  $ temp                : num [1:5888] 36.8 36.9 36.9 36.8 36.9 37.6 37.3 37 36.4 35.9 ...\r\n##  $ time_admission      : Factor w/ 1072 levels \"00:10\",\"00:29\",..: NA 308 746 415 514 589 609 297 409 387 ...\r\n##  $ bmi                 : num [1:5888] 117.2 71.8 16.1 22.5 71.4 ...\r\n##  $ days_onset_hosp     : num [1:5888] 2 1 2 2 1 1 2 1 1 2 ..."},{"path":"writing-functions.html","id":"iteratively-produce-graphs-for-different-levels-of-a-variable","chapter":"1 Writing functions","heading":"1.8.2 Iteratively produce graphs for different levels of a variable","text":"produce piechart look distribution patient’s outcome China H7N9 outbreak province. Instead repeating code , just apply funtion create.","code":"\n#precising options for the use of highchart\noptions(highcharter.theme =   highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))\n\n\n#create a function called \"chart_outcome_province\" that takes as argument the dataset and the name of the province for which to plot the distribution of the outcome.\n\nchart_outcome_province <- function(data_used, prov){\n  \n  tab_prov <- data_used %>% \n    filter(province == prov,\n           !is.na(outcome))%>% \n    group_by(outcome) %>% \n    count() %>%\n    adorn_totals(where = \"row\") %>% \n    adorn_percentages(denominator = \"col\", )%>%\n    mutate(\n        perc_outcome= round(n*100,2))\n  \n  \n  tab_prov %>%\n    filter(outcome != \"Total\") %>% \n  highcharter::hchart(\n    \"pie\", hcaes(x = outcome, y = perc_outcome),\n    name = paste0(\"Distibution of the outcome in:\", prov)\n    )\n  \n}\n\nchart_outcome_province(flu_china, \"Shanghai\")\nchart_outcome_province(flu_china,\"Zhejiang\")\nchart_outcome_province(flu_china,\"Jiangsu\")"},{"path":"writing-functions.html","id":"iteratively-produce-tables-for-different-levels-of-a-variable","chapter":"1 Writing functions","heading":"1.8.3 Iteratively produce tables for different levels of a variable","text":"create three indicators summarize table like produce table provinces. indicators delay onset hospitalization, percentage recovery median age cases.Indicateurs pour la province de: ShanghaiIndicateursEstimationMean delay onset-hosp4.0Percentage recovery46.7Median age cases67.0Indicateurs pour la province de: JiangsuIndicateursEstimationMean delay onset-hosp6.0Percentage recovery71.4Median age cases55.0","code":"\nindic_1 <- flu_china %>% \n  group_by(province) %>% \n  mutate(\n    date_hosp= strptime(date_of_hospitalisation, format = \"%m/%d/%Y\"),\n    date_ons= strptime(date_of_onset, format = \"%m/%d/%Y\"), \n    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,\n    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%\n  select(province, mean_delay_onset_hosp)  %>% \n  distinct()\n     \n\nindic_2 <-  flu_china %>% \n            filter(!is.na(outcome)) %>% \n            group_by(province, outcome) %>% \n            count() %>%\n            pivot_wider(names_from = outcome, values_from = n) %>% \n    adorn_totals(where = \"col\") %>% \n    mutate(\n        perc_recovery= round((Recover/Total)*100,2))%>% \n  select(province, perc_recovery)\n    \n    \n    \nindic_3 <-  flu_china %>% \n            group_by(province) %>% \n            mutate(\n                    median_age_cases = median(as.numeric(age), na.rm = TRUE)\n            ) %>% \n  select(province, median_age_cases)  %>% \n  distinct()## Warning in median(as.numeric(age), na.rm = TRUE): NAs introduced by coercion\n#join the three indicator datasets\n\ntable_indic_all <- indic_1 %>% \n  dplyr::left_join(indic_2, by = \"province\") %>% \n        left_join(indic_3, by = \"province\")\n\n\n#print the indicators in a flextable\n\n\nprint_indic_prov <-  function(table_used, prov){\n  \n  #first transform a bit the dataframe for printing ease\n  indic_prov <- table_used %>%\n    filter(province==prov) %>%\n    pivot_longer(names_to = \"Indicateurs\", cols = 2:4) %>% \n   mutate( indic_label = factor(Indicateurs,\n   levels= c(\"mean_delay_onset_hosp\",\"perc_recovery\",\"median_age_cases\"),\n   labels=c(\"Mean delay onset-hosp\",\"Percentage of recovery\", \"Median age of the cases\"))\n   ) %>% \n    ungroup(province) %>% \n    select(indic_label, value)\n  \n\n    tab_print <- flextable(indic_prov)  %>%\n    theme_vanilla() %>% \n    flextable::fontsize(part = \"body\", size = 10) \n    \n    \n     tab_print <- tab_print %>% \n                  autofit()   %>%\n                  set_header_labels( \n                indic_label= \"Indicateurs\", value= \"Estimation\") %>%\n    flextable::bg( bg = \"darkblue\", part = \"header\") %>%\n    flextable::bold(part = \"header\") %>%\n    flextable::color(color = \"white\", part = \"header\") %>% \n    add_header_lines(values = paste0(\"Indicateurs pour la province de: \", prov)) %>% \nbold(part = \"header\")\n \n tab_print <- set_formatter_type(tab_print,\n   fmt_double = \"%.2f\",\n   na_str = \"-\")\n\ntab_print \n    \n}\n\n\n\n\nprint_indic_prov(table_indic_all, \"Shanghai\")\nprint_indic_prov(table_indic_all, \"Jiangsu\")"},{"path":"writing-functions.html","id":"tips-and-best-practices-for-well-functioning-functions","chapter":"1 Writing functions","heading":"1.9 Tips and best Practices for well functioning functions","text":"Functional programming meant ease code facilitates reading. produce contrary. tips help clean code easy read code.","code":""},{"path":"writing-functions.html","id":"naming-and-syntax","chapter":"1 Writing functions","heading":"1.9.1 Naming and syntax","text":"Avoid using character easily already taken functions already existing environmentAvoid using character easily already taken functions already existing environmentIt recommended function name short straightforward understand another readerIt recommended function name short straightforward understand another readerIt preferred use verbs function name nouns argument names.preferred use verbs function name nouns argument names.","code":""},{"path":"writing-functions.html","id":"testing-and-error-handling","chapter":"1 Writing functions","heading":"1.9.2 Testing and Error handling","text":"complicated function’s task higher possibility errors. Thus sometimes necessary add verification within funtion help quickly understand error find way t fix .can recommended introduce check missingness one argument using missing(argument). simple check can return “TRUE” “FALSE” value.Use stop() detectable errors.see run built-functions, messages warnings can pop-certain conditions. can integrate written functions using functions message() warning().see run built-functions, messages warnings can pop-certain conditions. can integrate written functions using functions message() warning().can handle errors also using safely() takes one function argument executes safe way. fact function execute without stopping encounters error. safely() returns output list two objects results error “skipped”.can handle errors also using safely() takes one function argument executes safe way. fact function execute without stopping encounters error. safely() returns output list two objects results error “skipped”.can verify first running mean() function, run safely().said previously, well commenting codes already good way documentation work","code":"\ncontain_covid19_missing <- function(barrier_gest, wear_mask, get_vaccine){\n  \n  if (missing(barrier_gest)) (print(\"please provide arg1\"))\n  if (missing(wear_mask)) print(\"please provide arg2\")\n  if (missing(get_vaccine)) print(\"please provide arg3\")\n\n\n  if (!barrier_gest == \"yes\" | wear_mask ==\"yes\" | get_vaccine == \"yes\" ) \n       \n       return (\"you can do better\")\n  \n  else(\"please make sure all are yes, this pandemic has to end!\")\n}\n\n\ncontain_covid19_missing(get_vaccine = \"yes\")## [1] \"please provide arg1\"\r\n## [1] \"please provide arg2\"## Error in contain_covid19_missing(get_vaccine = \"yes\"): argument \"barrier_gest\" is missing, with no default\ncontain_covid19_stop <- function(barrier_gest, wear_mask, get_vaccine){\n  \n  if(!is.character(barrier_gest)) (stop(\"arg1 should be a character, please enter the value with `yes`, `no` or `sometimes\"))\n  \n  if (barrier_gest == \"yes\" & wear_mask ==\"yes\" & get_vaccine == \"yes\" ) \n       \n       return (\"success\")\n  \n  else(\"please make sure all are yes, this pandemic has to end!\")\n}\n\n\ncontain_covid19_stop(barrier_gest=1, wear_mask=\"yes\", get_vaccine = \"no\")## Error in contain_covid19_stop(barrier_gest = 1, wear_mask = \"yes\", get_vaccine = \"no\"): arg1 should be a character, please enter the value with `yes`, `no` or `sometimes\nmap(linelist, mean)## $case_id\r\n## [1] NA\r\n## \r\n## $generation\r\n## [1] 16.56165\r\n## \r\n## $date_infection\r\n## [1] NA\r\n## \r\n## $date_onset\r\n## [1] NA\r\n## \r\n## $date_hospitalisation\r\n## [1] \"2014-11-03\"\r\n## \r\n## $date_outcome\r\n## [1] NA\r\n## \r\n## $outcome\r\n## [1] NA\r\n## \r\n## $gender\r\n## [1] NA\r\n## \r\n## $age\r\n## [1] NA\r\n## \r\n## $age_unit\r\n## [1] NA\r\n## \r\n## $age_years\r\n## [1] NA\r\n## \r\n## $age_cat\r\n## [1] NA\r\n## \r\n## $age_cat5\r\n## [1] NA\r\n## \r\n## $hospital\r\n## [1] NA\r\n## \r\n## $lon\r\n## [1] -13.23381\r\n## \r\n## $lat\r\n## [1] 8.469638\r\n## \r\n## $infector\r\n## [1] NA\r\n## \r\n## $source\r\n## [1] NA\r\n## \r\n## $wt_kg\r\n## [1] 52.64487\r\n## \r\n## $ht_cm\r\n## [1] 124.9633\r\n## \r\n## $ct_blood\r\n## [1] 21.20686\r\n## \r\n## $fever\r\n## [1] NA\r\n## \r\n## $chills\r\n## [1] NA\r\n## \r\n## $cough\r\n## [1] NA\r\n## \r\n## $aches\r\n## [1] NA\r\n## \r\n## $vomit\r\n## [1] NA\r\n## \r\n## $temp\r\n## [1] NA\r\n## \r\n## $time_admission\r\n## [1] NA\r\n## \r\n## $bmi\r\n## [1] 46.89023\r\n## \r\n## $days_onset_hosp\r\n## [1] NA\nsafe_mean <- safely(mean)\nlinelist %>% \n  map(safe_mean)## $case_id\r\n## $case_id$result\r\n## [1] NA\r\n## \r\n## $case_id$error\r\n## NULL\r\n## \r\n## \r\n## $generation\r\n## $generation$result\r\n## [1] 16.56165\r\n## \r\n## $generation$error\r\n## NULL\r\n## \r\n## \r\n## $date_infection\r\n## $date_infection$result\r\n## [1] NA\r\n## \r\n## $date_infection$error\r\n## NULL\r\n## \r\n## \r\n## $date_onset\r\n## $date_onset$result\r\n## [1] NA\r\n## \r\n## $date_onset$error\r\n## NULL\r\n## \r\n## \r\n## $date_hospitalisation\r\n## $date_hospitalisation$result\r\n## [1] \"2014-11-03\"\r\n## \r\n## $date_hospitalisation$error\r\n## NULL\r\n## \r\n## \r\n## $date_outcome\r\n## $date_outcome$result\r\n## [1] NA\r\n## \r\n## $date_outcome$error\r\n## NULL\r\n## \r\n## \r\n## $outcome\r\n## $outcome$result\r\n## [1] NA\r\n## \r\n## $outcome$error\r\n## NULL\r\n## \r\n## \r\n## $gender\r\n## $gender$result\r\n## [1] NA\r\n## \r\n## $gender$error\r\n## NULL\r\n## \r\n## \r\n## $age\r\n## $age$result\r\n## [1] NA\r\n## \r\n## $age$error\r\n## NULL\r\n## \r\n## \r\n## $age_unit\r\n## $age_unit$result\r\n## [1] NA\r\n## \r\n## $age_unit$error\r\n## NULL\r\n## \r\n## \r\n## $age_years\r\n## $age_years$result\r\n## [1] NA\r\n## \r\n## $age_years$error\r\n## NULL\r\n## \r\n## \r\n## $age_cat\r\n## $age_cat$result\r\n## [1] NA\r\n## \r\n## $age_cat$error\r\n## NULL\r\n## \r\n## \r\n## $age_cat5\r\n## $age_cat5$result\r\n## [1] NA\r\n## \r\n## $age_cat5$error\r\n## NULL\r\n## \r\n## \r\n## $hospital\r\n## $hospital$result\r\n## [1] NA\r\n## \r\n## $hospital$error\r\n## NULL\r\n## \r\n## \r\n## $lon\r\n## $lon$result\r\n## [1] -13.23381\r\n## \r\n## $lon$error\r\n## NULL\r\n## \r\n## \r\n## $lat\r\n## $lat$result\r\n## [1] 8.469638\r\n## \r\n## $lat$error\r\n## NULL\r\n## \r\n## \r\n## $infector\r\n## $infector$result\r\n## [1] NA\r\n## \r\n## $infector$error\r\n## NULL\r\n## \r\n## \r\n## $source\r\n## $source$result\r\n## [1] NA\r\n## \r\n## $source$error\r\n## NULL\r\n## \r\n## \r\n## $wt_kg\r\n## $wt_kg$result\r\n## [1] 52.64487\r\n## \r\n## $wt_kg$error\r\n## NULL\r\n## \r\n## \r\n## $ht_cm\r\n## $ht_cm$result\r\n## [1] 124.9633\r\n## \r\n## $ht_cm$error\r\n## NULL\r\n## \r\n## \r\n## $ct_blood\r\n## $ct_blood$result\r\n## [1] 21.20686\r\n## \r\n## $ct_blood$error\r\n## NULL\r\n## \r\n## \r\n## $fever\r\n## $fever$result\r\n## [1] NA\r\n## \r\n## $fever$error\r\n## NULL\r\n## \r\n## \r\n## $chills\r\n## $chills$result\r\n## [1] NA\r\n## \r\n## $chills$error\r\n## NULL\r\n## \r\n## \r\n## $cough\r\n## $cough$result\r\n## [1] NA\r\n## \r\n## $cough$error\r\n## NULL\r\n## \r\n## \r\n## $aches\r\n## $aches$result\r\n## [1] NA\r\n## \r\n## $aches$error\r\n## NULL\r\n## \r\n## \r\n## $vomit\r\n## $vomit$result\r\n## [1] NA\r\n## \r\n## $vomit$error\r\n## NULL\r\n## \r\n## \r\n## $temp\r\n## $temp$result\r\n## [1] NA\r\n## \r\n## $temp$error\r\n## NULL\r\n## \r\n## \r\n## $time_admission\r\n## $time_admission$result\r\n## [1] NA\r\n## \r\n## $time_admission$error\r\n## NULL\r\n## \r\n## \r\n## $bmi\r\n## $bmi$result\r\n## [1] 46.89023\r\n## \r\n## $bmi$error\r\n## NULL\r\n## \r\n## \r\n## $days_onset_hosp\r\n## $days_onset_hosp$result\r\n## [1] NA\r\n## \r\n## $days_onset_hosp$error\r\n## NULL"},{"path":"writing-functions.html","id":"resources","chapter":"1 Writing functions","heading":"1.10 Resources","text":"R Data Science linkCheatsheet advance R programmingCheatsheet purr PackageVideo-ACM talk Hadley Wickham: joy functional programming (map_dbl work)","code":""}]
