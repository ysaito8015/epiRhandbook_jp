[{"path":"index.html","id":"welcome---this-is-a-draft","chapter":"Welcome - THIS IS A DRAFT","heading":"Welcome - THIS IS A DRAFT","text":"","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"About this handbook","text":"free open-access R reference guide intended applied epidemiologists.book strives :Serve quick reference guide - textbookAddress common epidemiological problems via task-centered examplesBe accessible settings limited technical support low internet-connectivity (downloadable version)Contain clear simple language, step--step instructions many commentsBe living document, growing adapting new best practicesWhat gaps book address?Many epidemiologists formal training R data science, transitioning R SAS, STATA, statistical software.R universe changes frequently - place best practice code catered toward common epidemiologist user.Epidemiologists often must read dozens online forum pages answers, epidemiology-oriented.epidemiologists work low internet-connectivity environments limited technical support.different R books?handbook written epidemiologists, epidemiologists. Examples taken lived experience local, national, academic, emergency settings. book also offered download-able format bring settings unreliable internet.\r\naddition core R concepts tools, book covers:epidemic curvestransmission chains epidemic modelingage sex pyramidsage sex standardizationprobabilistic matching records name similarity, age, sex, birthdate, etc.outbreak detection methodssurvey analysiscausal diagramssurvival analysisGIS basicsphylogenetic treesmissing data imputationautomated routine reports Rmarkdown","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “clipboard” “copy” icon copy codeSee “Resources” section page links trainingClick download offline versionIf use handbook suggestions, let us know SURVEY LINK!","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"Welcome - THIS IS A DRAFT","heading":"Edit or contribute","text":"suggestions want contribute content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome - THIS IS A DRAFT","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"Welcome - THIS IS A DRAFT","heading":"Contributors","text":"handbook collaborative team production. conceived, written, edited epidemiologists public health practitioners around world, drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), UNHCR, WFP, hospital systems, academic institutions.team members:Editor--Chief:Editorial core team: …(list)…Authors: …(list)…Reviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"Welcome - THIS IS A DRAFT","heading":"Funding and programmatic support","text":"Training Programs Epidemiology Public Health Interventions Network (TEPHINET)EPIET Alumni Network (EAN)","code":""},{"path":"index.html","id":"data-sources","chapter":"Welcome - THIS IS A DRAFT","heading":"Data sources","text":"linelist used much handbook adapted simulated Ebola outbreak linelist outbreaks package","code":""},{"path":"index.html","id":"inspiration","chapter":"Welcome - THIS IS A DRAFT","heading":"Inspiration","text":"“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R Markdown\r\nspecific tutorials vignettes credited relevant pages","code":""},{"path":"index.html","id":"image-credits","chapter":"Welcome - THIS IS A DRAFT","heading":"Image credits","text":"Logo: CDC Public Health Image library, R Graph Gallery2013 Yemen looking mosquito breeding sitesEbola virusSurvey RajasthanNetwork","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"Welcome - THIS IS A DRAFT","heading":"License and Terms of Use","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.book licensed Creative Commons license TBD…","code":""},{"path":"diagrams.html","id":"diagrams","chapter":"1 Diagrams","heading":"1 Diagrams","text":"","code":""},{"path":"diagrams.html","id":"overview","chapter":"1 Diagrams","heading":"1.1 Overview","text":"page covers:Flow diagrams using DiagrammeRAlluvial/Sankey diagramsEvent timelinesDendrogram organizational trees (e.g. folder contents)DAGs (Directed Acyclic Graphs)","code":""},{"path":"diagrams.html","id":"preparation","chapter":"1 Diagrams","heading":"1.2 Preparation","text":"Load packages","code":"\npacman::p_load(\n  DiagrammeR,     # for flow diagrams\n  networkD3       # For alluvial/Sankey diagrams\n  )"},{"path":"diagrams.html","id":"flow-diagrams","chapter":"1 Diagrams","heading":"1.3 Flow diagrams","text":"One can use R package DiagrammeR create charts/flow charts. can static, can adjust somewhat dynamically based changes dataset.ToolsThe function grViz() used create “Graphviz” diagram. function accepts character string input containing instructions making diagram. Within string, instructions written different language, called DOT - quite easy learn basics.Basic structureOpen instructions grViz(\"Specify directionality name graph, open brackets, e.g. digraph my_flow_chart {Graph statement (layout, rank direction)Nodes statements (create nodes)Edges statements (gives links nodes)Close instructions }\")","code":""},{"path":"diagrams.html","id":"simple-examples","chapter":"1 Diagrams","heading":"1.3.1 Simple examples","text":"two simple examplesA minimal example:example applied public health context:","code":"\n# A minimal plot\nDiagrammeR::grViz(\"digraph {\n  \ngraph[layout = dot, rankdir = LR]\n\na\nb\nc\n\na -> b -> c\n}\")\ngrViz(\"                           # All instructions are within a large character string\ndigraph surveillance_diagram {    # 'digraph' means 'directional graph', then the graph name \n  \n  # graph statement\n  #################\n  graph [layout = dot,\n         rankdir = TB,\n         overlap = true,\n         fontsize = 10]\n  \n  # nodes\n  #######\n  node [shape = circle,           # shape = circle\n       fixedsize = true\n       width = 1.3]               # width of circles\n  \n  Primary                         # names of nodes\n  Secondary\n  Tertiary\n\n  # edges\n  #######\n  Primary   -> Secondary [label = 'case transfer']\n  Secondary -> Tertiary [label = 'case transfer']\n}\n\")"},{"path":"diagrams.html","id":"syntax","chapter":"1 Diagrams","heading":"1.3.2 Syntax","text":"Basic syntaxNode names, edge statements, can separated spaces, semicolons, newlines.Rank directionA plot can re-oriented move left--right adjusting rankdir argument within graph statement. default TB (top--bottom), can LR (left--right), RL, BT.Node namesNode names can single words, simple example . use multi-word names special characters (e.g. parentheses, dashes), put node name within single quotes (’ ’). may easier short node name, assign label, shown within brackets [ ]. label also necessary newline within node name - use \\n node label within single quotes, shown .Subgroups\r\nWithin edge statements, subgroups can created either side edge curly brackets ({ }). edge applies nodes bracket - shorthand.Layoutsdot (set rankdir either TB, LR, RL, BT, )neatotwopicircoNodes - editable attributeslabel (text, single quotes multi-word)fillcolor (many possible colors)fontcoloralpha (transparency 0-1)shape (ellipse, oval, diamond, egg, plaintext, point, square, triangle)stylesidesperipheriesfixedsize (h x w)heightwidthdistortionpenwidth (width shape border)x (displacement left/right)y (displacement /)fontnamefontsizeiconEdges - editable attributesarrowsizearrowhead (normal, box, crow, curve, diamond, dot, inv, none, tee, vee)arrowtaildir (direction, )style (dashed, …)coloralphaheadport (text front arrowhead)tailport (text behind arrowtail)fontnamefontsizefontcolorpenwidth (width arrow)minlen (minimum length)Color names: hexadecimal values ‘X11’ color names, see X11 details","code":""},{"path":"diagrams.html","id":"complex-examples","chapter":"1 Diagrams","heading":"1.3.3 Complex examples","text":"example expands surveillance_diagram, adding complex node names, grouped edges, colors stylingSub-graph clustersTo group nodes boxed clusters, put within named subgraph (subgraph name {}). subgraph identified within bounding box, begin name subgraph “cluster”, shown 4 boxes .node shapesThe example , borrowed tutorial, shows applied node shapes, shows shorthand serial edge connections","code":"DiagrammeR::grViz(\"               # All instructions are within a large character string\r\ndigraph surveillance_diagram {    # 'digraph' means 'directional graph', then the graph name \r\n  \r\n  # graph statement\r\n  #################\r\n  graph [layout = dot,\r\n         rankdir = TB,            # layout top-to-bottom\r\n         fontsize = 10]\r\n  \r\n\r\n  # nodes (circles)\r\n  #################\r\n  node [shape = circle,           # shape = circle\r\n       fixedsize = true\r\n       width = 1.3]                      \r\n  \r\n  Primary   [label = 'Primary\\nFacility'] \r\n  Secondary [label = 'Secondary\\nFacility'] \r\n  Tertiary  [label = 'Tertiary\\nFacility'] \r\n  SC        [label = 'Surveillance\\nCoordination',\r\n             fontcolor = darkgreen] \r\n  \r\n  # edges\r\n  #######\r\n  Primary   -> Secondary [label = 'case transfer',\r\n                          fontcolor = red,\r\n                          color = red]\r\n  Secondary -> Tertiary [label = 'case transfer',\r\n                          fontcolor = red,\r\n                          color = red]\r\n  \r\n  # grouped edge\r\n  {Primary Secondary Tertiary} -> SC [label = 'case reporting',\r\n                                      fontcolor = darkgreen,\r\n                                      color = darkgreen,\r\n                                      style = dashed]\r\n}\r\n\")DiagrammeR::grViz(\"             # All instructions are within a large character string\r\ndigraph surveillance_diagram {  # 'digraph' means 'directional graph', then the graph name \r\n  \r\n  # graph statement\r\n  #################\r\n  graph [layout = dot,\r\n         rankdir = TB,            \r\n         overlap = true,\r\n         fontsize = 10]\r\n  \r\n\r\n  # nodes (circles)\r\n  #################\r\n  node [shape = circle,                  # shape = circle\r\n       fixedsize = true\r\n       width = 1.3]                      # width of circles\r\n  \r\n  subgraph cluster_passive {\r\n    Primary   [label = 'Primary\\nFacility'] \r\n    Secondary [label = 'Secondary\\nFacility'] \r\n    Tertiary  [label = 'Tertiary\\nFacility'] \r\n    SC        [label = 'Surveillance\\nCoordination',\r\n               fontcolor = darkgreen] \r\n  }\r\n  \r\n  # nodes (boxes)\r\n  ###############\r\n  node [shape = box,                     # node shape\r\n        fontname = Helvetica]            # text font in node\r\n  \r\n  subgraph cluster_active {\r\n    Active [label = 'Active\\nSurveillance']; \r\n    HCF_active [label = 'HCF\\nActive Search']\r\n  }\r\n  \r\n  subgraph cluster_EBD {\r\n    EBS [label = 'Event-Based\\nSurveillance (EBS)']; \r\n    'Social Media'\r\n    Radio\r\n  }\r\n  \r\n  subgraph cluster_CBS {\r\n    CBS [label = 'Community-Based\\nSurveillance (CBS)'];\r\n    RECOs\r\n  }\r\n\r\n  \r\n  # edges\r\n  #######\r\n  {Primary Secondary Tertiary} -> SC [label = 'case reporting']\r\n\r\n  Primary   -> Secondary [label = 'case transfer',\r\n                          fontcolor = red]\r\n  Secondary -> Tertiary [label = 'case transfer',\r\n                          fontcolor = red]\r\n  \r\n  HCF_active -> Active\r\n  \r\n  {'Social Media'; Radio} -> EBS\r\n  \r\n  RECOs -> CBS\r\n}\r\n\")\r\n\nDiagrammeR::grViz(\"digraph {\n\ngraph [layout = dot, rankdir = LR]\n\n# define the global styles of the nodes. We can override these in box if we wish\nnode [shape = rectangle, style = filled, fillcolor = Linen]\n\ndata1 [label = 'Dataset 1', shape = folder, fillcolor = Beige]\ndata2 [label = 'Dataset 2', shape = folder, fillcolor = Beige]\nprocess [label =  'Process \\n Data']\nstatistical [label = 'Statistical \\n Analysis']\nresults [label= 'Results']\n\n# edge definitions with the node IDs\n{data1 data2}  -> process -> statistical -> results\n}\")"},{"path":"diagrams.html","id":"outputs","chapter":"1 Diagrams","heading":"1.3.4 Outputs","text":"handle save outputsOutputs appear RStudio’s Viewer pane, default lower-right alongside Files, Plots, Packages, Help.export can “Save image” “Copy clipboard” Viewer. graphic adjust specified size.","code":""},{"path":"diagrams.html","id":"parameterized-figures","chapter":"1 Diagrams","heading":"1.3.5 Parameterized figures","text":"“Parameterized figures: great benefit designing figures within R able connect figures directly analysis reading R values directly flowcharts. example, suppose created filtering process removes values stage process, can figure show number values left dataset stage process. , can use @@X symbol directly within figure, refer footer plot using [X]:, X unique numeric index. basic example:”https://mikeyharper.uk/flowcharts--r-using-diagrammer/Much adapted tutorial siteOther -depth tutorial: http://rich-iannone.github.io/DiagrammeR/","code":"\n# Define some sample data\ndata <- list(a=1000, b=800, c=600, d=400)\n\n\nDiagrammeR::grViz(\"\ndigraph graph2 {\n\ngraph [layout = dot]\n\n# node definitions with substituted label text\nnode [shape = rectangle, width = 4, fillcolor = Biege]\na [label = '@@1']\nb [label = '@@2']\nc [label = '@@3']\nd [label = '@@4']\n\na -> b -> c -> d\n\n}\n\n[1]:  paste0('Raw Data (n = ', data$a, ')')\n[2]: paste0('Remove Errors (n = ', data$b, ')')\n[3]: paste0('Identify Potential Customers (n = ', data$c, ')')\n[4]: paste0('Select Top Priorities (n = ', data$d, ')')\n\")"},{"path":"diagrams.html","id":"consort-diagram","chapter":"1 Diagrams","heading":"1.3.6 CONSORT diagram","text":"https://scriptsandstatistics.wordpress.com/2017/12/22/--draw--consort-flow-diagram-using-r--graphviz/Note date via DiagrammeR","code":""},{"path":"diagrams.html","id":"alluvialsankey-diagrams","chapter":"1 Diagrams","heading":"1.4 Alluvial/Sankey Diagrams","text":"","code":""},{"path":"diagrams.html","id":"preparation-1","chapter":"1 Diagrams","heading":"1.4.1 Preparation","text":"Load packages","code":"\npacman::p_load(networkD3)"},{"path":"diagrams.html","id":"plotting-from-dataset","chapter":"1 Diagrams","heading":"1.4.2 Plotting from dataset","text":"Plotting connections datasethttps://www.r-graph-gallery.com/321-introduction--interactive-sankey-diagram-2.htmlCounts age category hospital, relabled target source, respectively.Now formalize nodes list, adjust ID columns numbers instead labels:Now plot Sankey diagram:example patient Outome included well. Note data management step bind rows counts hospital -> outcome, using column names.https://www.displayr.com/sankey-diagrams-r/Timeline Sankey - LTFU cohort… application/rejections… etc.","code":"\n# counts by hospital and age category\nlinks <- linelist %>% \n  select(hospital, age_cat) %>%\n  count(hospital, age_cat) %>% \n  rename(source = hospital,\n         target = age_cat)\n# The unique node names\nnodes <- data.frame(\n  name=c(as.character(links$source), as.character(links$target)) %>% \n    unique()\n  )\n\n# match to numbers, not names\nlinks$IDsource <- match(links$source, nodes$name)-1 \nlinks$IDtarget <- match(links$target, nodes$name)-1\n# plot\n######\np <- sankeyNetwork(Links = links,\n                   Nodes = nodes,\n                   Source = \"IDsource\",\n                   Target = \"IDtarget\",\n                   Value = \"n\",\n                   NodeID = \"name\",\n                   units = \"TWh\",\n                   fontSize = 12,\n                   nodeWidth = 30)\np\n# counts by hospital and age category\nlinks <- linelist %>% \n  select(hospital, age_cat) %>%\n  mutate(age_cat = stringr::str_glue(\"Age {age_cat}\")) %>% \n  count(hospital, age_cat) %>% \n  rename(source = age_cat,\n         target = hospital) %>% \n  bind_rows(\n    linelist %>% \n      select(hospital, outcome) %>% \n      count(hospital, outcome) %>% \n      rename(source = hospital,\n             target = outcome)\n  )\n\n# The unique node names\nnodes <- data.frame(\n  name=c(as.character(links$source), as.character(links$target)) %>% \n    unique()\n  )\n\n# match to numbers, not names\nlinks$IDsource <- match(links$source, nodes$name)-1 \nlinks$IDtarget <- match(links$target, nodes$name)-1\n\n# plot\n######\np <- sankeyNetwork(Links = links,\n                   Nodes = nodes,\n                   Source = \"IDsource\",\n                   Target = \"IDtarget\",\n                   Value = \"n\",\n                   NodeID = \"name\",\n                   units = \"TWh\",\n                   fontSize = 12,\n                   nodeWidth = 30)\np"},{"path":"diagrams.html","id":"event-timelines","chapter":"1 Diagrams","heading":"1.5 Event timelines","text":"make timeline showing specific events, can use vistime package.See vignetteHere events dataset begin :","code":"\n# load package\npacman::p_load(vistime,  # make the timeline\n               plotly    # for interactive visualization\n               )\np <- vistime(data)    # apply vistime\n\nlibrary(plotly)\n\n# step 1: transform into a list\npp <- plotly_build(p)\n\n# step 2: Marker size\nfor(i in 1:length(pp$x$data)){\n  if(pp$x$data[[i]]$mode == \"markers\") pp$x$data[[i]]$marker$size <- 10\n}\n\n# step 3: text size\nfor(i in 1:length(pp$x$data)){\n  if(pp$x$data[[i]]$mode == \"text\") pp$x$data[[i]]$textfont$size <- 10\n}\n\n\n# step 4: text position\nfor(i in 1:length(pp$x$data)){\n  if(pp$x$data[[i]]$mode == \"text\") pp$x$data[[i]]$textposition <- \"right\"\n}\n\n#print\npp"},{"path":"diagrams.html","id":"dags","chapter":"1 Diagrams","heading":"1.6 DAGs","text":"can build DAG manually using DiagammeR package DOT language, described another tab. Alternatively, packages like ggdag daggityhttps://cran.r-project.org/web/packages/ggdag/vignettes/intro--dags.htmlhttps://www.r-bloggers.com/2019/08/causal-inference--dags--r/#:~:text=%20a%20DAG%20all%20the,%20drawing%20and%20analyzing%20DAGs.","code":""},{"path":"diagrams.html","id":"resources","chapter":"1 Diagrams","heading":"1.7 Resources","text":"Links online tutorials resources.","code":""}]
