[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.BOOK REVIEWERS: PLEASE PROVIDE FEEDBACK PAGE LINKDO LIKE BOOK? LET US KNOW ONE CLICK , PROVIDE FEEDBACK ","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"open-access R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiological problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download book data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"Want share use book? Want offer fix addition?\r\nEmail us epiRhandbook@gmail.com. welcome comments suggestions.can also submit issue pull request Github repository, provide structured feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local, state, provincial, national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha Berry, Wen LinReviewers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"r-markdown-reports.html","id":"r-markdown-reports","chapter":"1 R Markdown reports","heading":"1 R Markdown reports","text":"R Markdown fantastic tool creating automated, reproducible, share-worthy outputs. can generate static interactive outputs, form html, word, pdf, powerpoint, others.","code":""},{"path":"r-markdown-reports.html","id":"overview","chapter":"1 R Markdown reports","heading":"1.1 Overview","text":"Using R markdown allow easily recreate entire formatted document, including tables/figures/text, using new data (e.g. daily surveillance reports) /subsets data (e.g. reports specific geographies).guide go basics. See ‘resources’ tab info. See also next chapter ‘organising routine reports’ see additional packages can help design workflow use markdown reports.","code":""},{"path":"r-markdown-reports.html","id":"preparation","chapter":"1 R Markdown reports","heading":"1.2 Preparation","text":"Background R MarkdownTo explain concepts packages involved:Markdown “language” uses syntax allows design document using plain text, can converted html formats. specific R, usually markdown file ‘.md’ extension.R Markdown: extension markdown specific R, file extensions ‘.Rmd’. allows R code embedded ‘chunks’ code can run, rather just text document.Rmarkdown - package: used R render .Rmd file desire output. However focus markdown (text) syntax, also need…Knitr: package read code chunks, execute , ‘knit’ back document. tables graphs included alongside text.Pandoc: Finally, pandoc needed actually convert documents e.g. word/pdf/powerpoint etc. separate R.\r\nsum, process involves feeding .Rmd file knitr, executes R code chunks created new .md (markdown) file includes R code rendered output. .md file processed pandoc create finished product: MS Word document, powerpoint document, pdf, etc.sum, process involves feeding .Rmd file knitr, executes R code chunks created new .md (markdown) file includes R code rendered output. .md file processed pandoc create finished product: MS Word document, powerpoint document, pdf, etc.(source: https://rmarkdown.rstudio.com/authoring_quick_tour.html):InstallationTo create R Markdown, need following installed:Rmarkdown package, described : install.packages('rmarkdown')Pandoc, come RStudio. using RStudio, can download : http://pandoc.org.want generate PDF output (bit trickier), need install LaTeX. R Markdown users installed LaTeX , recommend install TinyTeX (https://yihui.name/tinytex/):","code":"install.packages('tinytex')\r\ntinytex::install_tinytex()  # install TinyTeX"},{"path":"r-markdown-reports.html","id":"getting-started","chapter":"1 R Markdown reports","heading":"1.3 Getting started","text":"","code":""},{"path":"r-markdown-reports.html","id":"starting-a-new-rmd-file","chapter":"1 R Markdown reports","heading":"1.3.1 Starting a new Rmd file","text":"RStudio, open new R markdown file, starting ‘File’, ‘New file’ ‘R markdown…’.R Studio give output options pick . example click “html” want create html document. title author names unimportant. Don’t worry output document type want one , can just pick one make changes later.open new .Rmd document, go next section.","code":""},{"path":"r-markdown-reports.html","id":"important-to-know","chapter":"1 R Markdown reports","heading":"1.3.2 Important to know","text":"working directoryThe working directory markdown file wherever Rmd file saved. instance, R project within ~/Documents/projectX Rmd file subfolder ~/Documents/projectX/markdownfiles/markdown.Rmd, code read.csv(“data.csv”) within markdown look csv file markdownfiles folder, root project folder scripts within projects normally automatically look.refer files elsewhere, either need use full file path use ‘’ package, sets working directory root folder project. instance, load csv within projectX folder, code \r\nread.csv((“data.csv”)).Note setwd() recommended – works within chunk written .Working drive vs computerBecause R Markdown can run pandoc issues running shared network drive, recommended folder local machine, e.g. project within ‘Documents’. use Git (much recommended!), familiar.","code":""},{"path":"r-markdown-reports.html","id":"the-r-markdown-file","chapter":"1 R Markdown reports","heading":"1.4 The R Markdown file","text":"R Markdown document looks like can edited just like standard R script, R Studio. start new markdown file, R Studio tries helpful. Rather blank canvas, new document text explaining different sections shows .appears starting new Rmd file intended produce html (per previous section).can see, three basic components Rmd file.","code":""},{"path":"r-markdown-reports.html","id":"yaml-metadata","chapter":"1 R Markdown reports","heading":"1.4.1 1. YAML metadata","text":"Referred ‘YAML metadata’ just ‘YAML’, top R Markdown document two ‘- - -‘s. tell Rmd file type output produce, formatting preferences, metadata document title, author, date. uses mentioned (referred ‘Producing output’). Note indentation matters; tabs accepted spaces .example , clicked default output html file, can see YAML says ‘html_document’. However can also change say ‘powerpoint_presentation’ ‘word_document’ even ‘pdf_document’.","code":""},{"path":"r-markdown-reports.html","id":"text","chapter":"1 R Markdown reports","heading":"1.4.2 2. Text","text":"narrative document, including titles. written markdown language, used across many different programmes. means can add basic formatting, instance:_text_ *text* italicise**text** bold text# start new line title (## second-level title, ## third-level title etc)* start new line bullet pointstext display text code ()actual appearance font can set using specific templates (specified YAML metadata; see example tabs).can also include minimal R code within backwards ticks, specifying ‘R’ RStudio knows evaluate code. example uses code current date evaluate printed date.","code":""},{"path":"r-markdown-reports.html","id":"code-chunks","chapter":"1 R Markdown reports","heading":"1.4.3 3. Code chunks","text":"R code goes, actual data management visualisation. note:\r\n‘chunks’ appear slightly different background colour narrative part document.chunk always starts three backticks chunk information within squiggly brackets, ends three backticks. can create new chunk typing clicking ‘insert chunk’ top script editor.notes content squiggly brackets:start ‘r’ indicate language name within chunk rFollowed chunk name – always necessary can help organise work. Note name chunks, ALWAYS use unique names else R complain try render.can include options , many can configured point--click using setting buttons top right chunk. , can specify parts chunk want rendered document include, namely code, outputs, warnings. come written preferences within squiggly brackets, e.g. ‘echo=FALSE’ specify want ‘Show output ’.global options applied chunks, can set first chunk. instance, outputs shown code chunk code , can write knitr::opts_chunk$set(echo = FALSE). R Studio automatically includes default Rmd file.also two arrows top right chunk, useful run code within chunk, code prior chunks. Hover see .","code":""},{"path":"r-markdown-reports.html","id":"combining-code-and-text","chapter":"1 R Markdown reports","heading":"1.4.4 Combining code and text","text":"showed can integrate dynamic values today’s date text. can also use short functions (e.g. calculate min, median, max column) text, integrate objects created within code chunks.following calculates proportion cases aged less 18 years old, using tidyverse code, feeds text. see looks knitted word document.","code":""},{"path":"r-markdown-reports.html","id":"producing-an-r-markdown-output","chapter":"1 R Markdown reports","heading":"1.5 Producing an R markdown output","text":"","code":""},{"path":"r-markdown-reports.html","id":"r-markdown-workflow","chapter":"1 R Markdown reports","heading":"1.5.1 R markdown workflow","text":"Production R markdown depend design . describe options :“Self-contained” R markdown: everything need run R markdown contained within Rmd file, including code chunks package loading. can also include sourcing scripts, still run course knitting Rmd file. appropriate need much data processing (e.g. brings clean semi-clean data file) running file take long.“Self-contained” R markdown: everything need run R markdown contained within Rmd file, including code chunks package loading. can also include sourcing scripts, still run course knitting Rmd file. appropriate need much data processing (e.g. brings clean semi-clean data file) running file take long.R markdown combined pre-processing: pre-process objects feed R markdown. instance, can load packages, load clean data, even create graphs interest. long occurs RStudio session objects saved environment, can called within Rmd content. R markdown used final step, produce output pre-processed objects. much easier de-bug something goes wrong.R markdown combined pre-processing: pre-process objects feed R markdown. instance, can load packages, load clean data, even create graphs interest. long occurs RStudio session objects saved environment, can called within Rmd content. R markdown used final step, produce output pre-processed objects. much easier de-bug something goes wrong.Generally, recommend splitting code different files, horrible debug extremely long script, especially horrible debug extremely long Rmd file. example error within code chunk, R tell chunk problem, tell line.workflow also concerns overall folder structure, ‘output’ folder created documents ‘input’ folder cleaned data. go detail structure , ‘organising routine reports’ discusses .","code":""},{"path":"r-markdown-reports.html","id":"producing-a-complete-document","chapter":"1 R Markdown reports","heading":"1.5.2 Producing a complete document","text":"Now know , can produce document following ways:1) Knit separate script: Call Rmd file using ‘render’ function rmarkdown package separate script. example , pre-process data object, can used within Rmd content:simplest form, save folder Rmd file, file name aside file extension. instance “create_output.Rmd” knitted create “create_output.docx” knitting word document.better version control, can add options file name location. instance following save output file within ‘outputs’ subfolder, date file name. use paste0 function , ‘paste’ together different strings space . instance April 10th 2021, file name “Report_2021-04-10.docx”.file renders, RStudio console show rendering progress 100%, final message indicate rendering complete.2) Knit within R markdown: Rmd file open, press ‘knit’ button top file. RStudio’s button render function rmarkdown. compatible self-contained R markdown, needed components within file. work pre-process data graphs save environment - knitting ignore ‘external’ objects.Just like knitting separate script, R Studio show progress Rmd file. Except time, appear within ‘R Markdown’ tab panel console. complete document automatically open complete document saved folder markdown, file name aside file extension. obviously ideal version control, rename file .","code":"\r\ndata <- read.csv(\"datafile.csv\") %>%       # Load data and save to environment\r\n  select(age, hospital, weight)            # Select limited columns\r\n\r\nrmarkdown::render(\"create_output.Rmd\")     # Create Rmd filermarkdown::render((\"create_output.Rmd\"),  \r\n                        output_file = paste0(\"outputs/Report_\", Sys.Date(), \".docx\")) "},{"path":"r-markdown-reports.html","id":"parameterised-reports","chapter":"1 R Markdown reports","heading":"1.6 Parameterised reports","text":"can use parameterisation make report dynamic, can run specific date place certain knitting options. focus basics good amount detail online: https://bookdown.org/yihui/rmarkdown/parameterized-reports.html.Using Ebola linelist example, let’s say want run standard surveillance report hospital day. show one can using parameters.Important: possible using simple R objects rather using parameter structure, explain end section (Parameterisation without params object). ","code":""},{"path":"r-markdown-reports.html","id":"using-parameters","chapter":"1 R Markdown reports","heading":"1.6.1 Using parameters","text":"1) Declare parameters within YAMLEdit YAML specify hospital name date parameters change time report run.2) Use parameters within .Rmd text codeThese parameters contained within read-list called params. use parameters code, refer object name. Continuing example, params$hospital load “Central Hospital”.Note params$date example saves date string. need use function .Date change date class.3) Run Rmd file - basicTo produce file can knit within document simply clicking ‘knit’ button , can call Rmd file using render function separate script, making sure specify parameters used. Note parameter values overwrite values within YAML. write values speech marks string values.4) Run Rmd file - using graphical user interfaceFor interactive feel, can also use graphical user interface (GUI). can click drop-menu next ‘knit’ choose ‘knit parameters’, can specify “ask” within ‘params’ option render function, e.g.:Either way pop-appear allowing us type date hospital interest.However, subject error spelling mistakes, may prefer add restrictions parameters can selected. instance can introduce drop-possible hospitals can selected. YAML:knitting ‘knit parameters’ dropdown button running render function, window drop-pop :5) ExampleThe following code uses basic parameters. can see data filtered specific hospital, titles refer correct hospital date. use linelist_cleaned.rds file , particularly appropriate linelist also datestamp within align paramterised date.Knitting produces final output default font layout.","code":"---\r\ntitle: Surveillance report\r\noutput: html_document\r\nparams:\r\n date: 2021-04-10\r\n hospital: Central Hospital\r\n---rmarkdown::render(\"surveillance_report.Rmd\",  \r\n                  output_file = paste0(\"outputs/Report_\", Sys.Date(), \".docx\"),\r\n                  params = list(date = \"2021-04-10\", hospital  = \"Central Hospital\"))rmarkdown::render(\"surveillance_report.Rmd\",  \r\n                  output_file = paste0(\"outputs/Report_\", Sys.Date(), \".docx\"),\r\n                  params = “ask”)---\r\ntitle: Surveillance report\r\noutput: html_document\r\nparams:\r\n date: 2021-04-10\r\n hospital: \r\n  label: “Town:”\r\n  value: Central Hospital\r\n  input: select\r\n  choices: [Central Hospital, Military Hospital, Port Hospital, St. Mark's Maternity Hospital (SMMH)]\r\n---"},{"path":"r-markdown-reports.html","id":"parameterisation-without-the-params-object","chapter":"1 R Markdown reports","heading":"1.6.2 Parameterisation without the params object","text":"rendering Rmd file separate script, actually essential use parameterisation options run Rmd file subsets data.instance, can simply specify hospital date two objects rendering Rmd file. Within Rmd file, need params section YAML, refer date object rather params$date hospital rather params$hospital.means able “knit parameters” use GUI, include knitting options within parameters. However allows simpler code may sufficient.","code":"hospital <- \"Central Hospital\"\r\ndate <- \"2021-04-10\"\r\n\r\nrmarkdown::render((\"create_output.Rmd\"),  \r\n                        output_file = paste0(\"outputs/Report_\", Sys.Date(), \".docx\")) "},{"path":"r-markdown-reports.html","id":"looping-reports","chapter":"1 R Markdown reports","heading":"1.7 Looping reports","text":"may want run options report , instance surveillance report hospital interest within single run, rather specifying hospital one one. need work separate script outside Rmd, create objects today’s date list hospital names loop .feed markdown using loop, go item list. letter represents item list currently iterated, hospital_list[1] “Central Hospital”. information also fed file name, file name first iteration produced April 10th 2021 “Report_Central Hospital2021-04-10.docx”, saved ‘output’ subfolder. examples, four files created day.instance, using parameterisation discussed earlier:text code within Rmd refer params$date params$hospital bring date hospital name. list items need referred within interation.using strict form parameterisation saving objects environment, discussed end parameterisation section, render function look like :text within markdown need refer hospital_list[] refdate.","code":"hospital_list <- c(“Central Hospital”, \r\n                   “Military Hospital”, \r\n                   “Port Hospital”, “\r\n                   St. Mark's Maternity Hospital (SMMH)”) \r\n\r\nrefdate <- Sys.Date() # today’s date\r\nfor(i in 1:length(hospital_list)){\r\nrmarkdown::render(\"surveillance_report.Rmd\",\r\n                  output_file = paste0(\"output/Report_\", hospital_list[i], refdate, \".docx\"),\r\n                  params = list(date = refdate, hospital  = hospital_list[i]))\r\n}       for(i in 1:length(hospital_list)){\r\nrmarkdown::render(\"surveillance_report.Rmd\",\r\n                  output_file = paste0(\"output/Report_\", hospital_list[i], refdate, \".docx\")\r\n}       "},{"path":"r-markdown-reports.html","id":"formatting-and-aesthetics","chapter":"1 R Markdown reports","heading":"1.8 Formatting and aesthetics","text":"easy aesthetics, create template file contains desired formatting. can create instance MS word power point document contains pages desired dimensions, watermarks, backgrounds, fonts.","code":""},{"path":"r-markdown-reports.html","id":"word-documents","chapter":"1 R Markdown reports","heading":"1.8.1 Word documents","text":"create template, start new word document (use existing output formatting suits ), edit fonts defining Styles. Style,Headings 1, 2, 3 refer various markdown header levels (# Header 1, ## Header 2 ### Header 3 respectively). Right click style click ‘modify’ change font formatting well paragraph (e.g. can introduce page breaks certain styles can help spacing). aspects word document margins, page size, headers etc, can changed like usual word document working directly within.","code":""},{"path":"r-markdown-reports.html","id":"powerpoint-documents","chapter":"1 R Markdown reports","heading":"1.8.2 Powerpoint documents","text":", create new slideset use existing powerpoint file desired formatting. editing, click ‘View’ ‘Slide Master’. can change ‘master’ slide appearance editing text formatting text boxes, well background/page dimensions overall page.Unfortunately, editing powerpoint files slightly less flexible:first level header (# Header 1) automatically become title new slide,## Header 2 text come subtitle text within slide’s main textbox (unless find way maniuplate Master view).Outputted plots tables automatically go new slides. need combine , instance patchwork function combine ggplots, show page.","code":""},{"path":"r-markdown-reports.html","id":"integrating-templates-into-the-yaml","chapter":"1 R Markdown reports","heading":"1.8.3 Integrating templates into the YAML","text":"template prepared, detail can added YAML Rmd underneath ‘output’ line underneath document type specified (goes separate line ). Note reference_doc can used powerpoint slide templates.easiest save template folder Rmd file (example ), subfolder within.","code":"---\r\ntitle: Surveillance report\r\noutput: \r\n word_document:\r\n  reference_docx: \"template.docx\"\r\nparams:\r\n date: 2021-04-10\r\n hospital: Central Hospital\r\ntemplate:\r\n \r\n---"},{"path":"r-markdown-reports.html","id":"formatting-html-files","chapter":"1 R Markdown reports","heading":"1.8.4 Formatting HTML files","text":"HTML files use templates, can styles configured within YAML. HTMLs interactive documents, particularly flexible. cover basic options .Table contents: can add table contents toc: true , also specify remains viewable (“floats”) scroll, toc_float: true.Table contents: can add table contents toc: true , also specify remains viewable (“floats”) scroll, toc_float: true.Themes: can refer pre-made themes, come Bootswatch theme library. example use cerulean. options include: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, yeti.Themes: can refer pre-made themes, come Bootswatch theme library. example use cerulean. options include: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, yeti.Highlight: Configuring changes look highlighted text (e.g. code within chunks shown). Supported styles include default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, textmate.Highlight: Configuring changes look highlighted text (e.g. code within chunks shown). Supported styles include default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, textmate.example integrate options YAML.two examples HTML outputs floating tables contents, different theme highlight styles selected:","code":"---\r\ntitle: \"HTML example\"\r\noutput:\r\n  html_document:\r\n    toc: true\r\n    toc_float: true\r\n    theme: cerulean\r\n    highlight: kate\r\n    \r\n---"},{"path":"r-markdown-reports.html","id":"resources","chapter":"1 R Markdown reports","heading":"1.9 Resources","text":"information can found via:https://bookdown.org/yihui/rmarkdown/https://rmarkdown.rstudio.com/articles_intro.htmlA good explainer markdown vs knitr vs Rmarkdown : https://stackoverflow.com/questions/40563479/relationship--r-markdown-knitr-pandoc--bookdown","code":""},{"path":"dashboards-with-r-markdown.html","id":"dashboards-with-r-markdown","chapter":"2 Dashboards with R Markdown","heading":"2 Dashboards with R Markdown","text":"PAGE CONSTRUCTIONThis page cover basic use flexdashboard package. package allows easily format R Markdown output dashboard panels pages. dashboard content can text, static images interactive graphics.Advantages flexdashboard:little User Interface (UI) non-standard R coding requiredRequires minimal -front knowledge - hour practice can likely create dashboardThe outputs can emailed HTML report - server requiredYou can combine flexdashboard shiny, ggplotly, htmlwidgets add interactivity static report dashboardDisadvantages flexdashboard:Interactivity can constrainedLess customization less possible using Shiny directlyVery comprehensive tutorials using flexdashboard informed page can found Resources section. describe core features give example building dashboard explore outbreak, using case linelist data.","code":""},{"path":"dashboards-with-r-markdown.html","id":"preparation-1","chapter":"2 Dashboards with R Markdown","heading":"2.1 Preparation","text":"","code":""},{"path":"dashboards-with-r-markdown.html","id":"load-packages","chapter":"2 Dashboards with R Markdown","heading":"Load packages","text":"handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,            \n  here,\n  tidyverse,\n  flexdashboard,   # dashboard versions of R Markdown reports\n  shiny,           # interactive \n  plotly \n)"},{"path":"dashboards-with-r-markdown.html","id":"import-data","chapter":"2 Dashboards with R Markdown","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download book data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"dashboards-with-r-markdown.html","id":"new-r-markdown","chapter":"2 Dashboards with R Markdown","heading":"2.2 New R Markdown","text":"installed package, create new R Markdown file clicking File > New file > R Markdown.window opens, select “Template” select “Flex Dashboard” template. prompted name document. page’s example, name R Markdown “outbreak_dashboard.Rmd”.","code":""},{"path":"dashboards-with-r-markdown.html","id":"the-script","chapter":"2 Dashboards with R Markdown","heading":"2.3 The script","text":"script R Markdown script, components organization:","code":""},{"path":"dashboards-with-r-markdown.html","id":"yaml","chapter":"2 Dashboards with R Markdown","heading":"YAML","text":"top, “YAML” header must begin three dashes --- must close three dashes ---. YAML parameters comes key:value pairs. placement colons YAML important - key:value pairs separated colons (equals signs!).YAML begin metadata document. order primary YAML parameters (indented) matter. example:can use R code YAML values putting like -line code (preceeded r within backticks) also within quotes (see Date).required YAML parameter output:, specifies type file produced (e.g. html_document, pdf_document, word_document, powerpoint_presentation). flexdashboard parameter value bit confusing - must set output:flexdashboard::flex_dashboard. single double colons. often followed additional colon indented sub-parameters.shown , indentations (2 spaces) used sub-parameters. case, forget put additional colon primary, like key:value:.appropriate, logical values given lowercase (true, false, null). colon part value (e.g. title) put value quotes. See examples sections .","code":"title: \"My document\"\r\nauthor: \"Me\"\r\ndate: \"2021-04-18\"title: \"My dashboard\"\r\nauthor: \"Me\"\r\ndate: \"2021-04-18\"\r\noutput:\r\n  flexdashboard::flex_dashboard:\r\n    orientation: rows\r\n    vertical_layout: scroll"},{"path":"dashboards-with-r-markdown.html","id":"narrative-text","chapter":"2 Dashboards with R Markdown","heading":"Narrative text","text":"Outside R code “chunk”, can write narrative text described page R Markdown reports. can italicize text surrounding one asterisk (*), bold surrounding two asterisks (**). Recall bullets numbering schemes sensitive newlines, indentation, finishing line two spaces.can also insert -line R code text described R Markdown reports page, surrounding code backticks starting command r (see example scripts ).","code":""},{"path":"dashboards-with-r-markdown.html","id":"headings","chapter":"2 Dashboards with R Markdown","heading":"Headings","text":"Different heading levels established different numbers hash symbols, described R Markdown reports page. One hash symbol primary heading (flexdashboard represents “page” dashboard). Two hash symbols second-level heading, reflect column row depending orientation: parameter (see details ). Third- fourth-level headings can made successively hash symbols.","code":"# First-level heading (page)\r\n\r\n## Second level heading (row or column)  \r\n\r\n### Third-level heading (plot, chart, etc.)"},{"path":"dashboards-with-r-markdown.html","id":"code-chunks-1","chapter":"2 Dashboards with R Markdown","heading":"Code chunks","text":"“Chunks” R code work just like R scripts. created three back-ticks curly brackets lowercase r within. chunk closed three backticks. See examples , page R Markdown reports information.","code":""},{"path":"dashboards-with-r-markdown.html","id":"attributes","chapter":"2 Dashboards with R Markdown","heading":"2.4 Attributes","text":"normal R markdown, can specify attributes apply parts dashboard including specifications curly brackets { } heading. example, typical HTML R Markdown report might organize content tabs ## heading {.tabset}.Attributes specific flexdashboard include:{data-width = } {data-height = } set relative size charts, columns, rows laid dimension (horizontal vertical). Absolute sizes adjusted best fill space display device thanks flexbox engine.\r\nHeight charts also depends whether set YAML parameter vertical_layout: fill vertical_layout: scroll. set scroll, height reflect traditional fig.height = option R code chunk.\r\nSee complete size documentation flexdashboard site\r\nHeight charts also depends whether set YAML parameter vertical_layout: fill vertical_layout: scroll. set scroll, height reflect traditional fig.height = option R code chunk.See complete size documentation flexdashboard site{data-orientation=} Set either rows columns. dashboard multiple pages, add attribute page indicate orientation.{.hidden} Use exclude specific page navigation bar{data-navbar=} Use page-level heading nest within navigation bar drop-menu. Provide name (quotes) drop-menu. See example .","code":""},{"path":"dashboards-with-r-markdown.html","id":"layout","chapter":"2 Dashboards with R Markdown","heading":"2.5 Layout","text":"Adjust layout dashboard following ways:Add pages, columns/rows, charts R Markdown headings (e.g. #, ##, ###)Adjust YAML parameter orientation: either rows columnsSpecify whether layout fills browser allows scrollingAdd tabs particular section heading","code":""},{"path":"dashboards-with-r-markdown.html","id":"pages","chapter":"2 Dashboards with R Markdown","heading":"Pages","text":"First-level headings (#) R Markdown represent “pages” dashboard. default pages appear navigation bar along top dashboard.can group pages “menu” within navigaton bar adding attribute {data-navmenu=} page heading. careful - include spaces around equals sign otherwise work!can also transfer navigation bar “sidebar” left side dashboard.","code":"---\r\ntitle: \"Outbreak dashboard\"\r\ndate: \"2021-04-18\"\r\noutput: \r\n  flexdashboard::flex_dashboard\r\n---\r\n\r\n# Outbreak dashboard\r\n\r\nThis dashboard is produced for the leadership of Tenaya County.\r\nIt aims to advise them on the status of the COVID-19 pandemic. \r\n\r\n## Epidemic Curve\r\n\r\n# Overview {.sidebar}\r\n\r\nThis is a sidebar that can be viewed from all pages.  \r\n\r\nYou could just have text here. \r\n\r\nOr if using **shiny** within **flexdashboard**, you might put your input controls here (e.g. via `selectInput()` or `sliderInput()`).  \r\n\r\n\r\n# Health indicators {data-navmenu=\"Indicators\"} \r\n\r\n\r\n# Economic indicators {data-navmenu=\"Indicators\"}  \r\n\r\n\r\n# Appleville {data-navmenu=\"Towns\"}\r\n\r\n\r\n# Orangetown {data-navmenu=\"Towns\"}\r\n\r\n\r\n# New Kiwi {data-navmenu=\"Towns\"}"},{"path":"dashboards-with-r-markdown.html","id":"orientation","chapter":"2 Dashboards with R Markdown","heading":"Orientation","text":"Set orientation: yaml parameter indicate R Markdown headings interpreted - either orientation: columns orientation: rows.Second-level headings (##) interpreted new columns rows based orientation setting.","code":""},{"path":"dashboards-with-r-markdown.html","id":"column-orientation","chapter":"2 Dashboards with R Markdown","heading":"Column orientation","text":"set orientation: columns, second-level headers create new columns dashboard. dashboard :Code chunks beginning load packages data - header appear dashboardThree columns:\r\nfirst named “Intro text” panels. R Markdown narrative text including example dynamic text includes R code display \r\nfirst named “Intro text” panels. R Markdown narrative text including example dynamic text includes R code display noBelow output","code":""},{"path":"dashboards-with-r-markdown.html","id":"interactive","chapter":"2 Dashboards with R Markdown","heading":"2.6 Interactive","text":"","code":""},{"path":"dashboards-with-r-markdown.html","id":"add-plotly","chapter":"2 Dashboards with R Markdown","heading":"Add plotly","text":"","code":""},{"path":"dashboards-with-r-markdown.html","id":"add-shiny","chapter":"2 Dashboards with R Markdown","heading":"Add shiny","text":"htmlwidgets\r\nshiny embedded\r\nvisNetwork","code":""},{"path":"dashboards-with-r-markdown.html","id":"resources-1","chapter":"2 Dashboards with R Markdown","heading":"2.7 Resources","text":"Excellent tutorials informed page can found . review , likely within hour can dashboard.https://bookdown.org/yihui/rmarkdown/dashboards.htmlhttps://rmarkdown.rstudio.com/flexdashboard/https://rmarkdown.rstudio.com/flexdashboard/using.htmlhttps://rmarkdown.rstudio.com/flexdashboard/examples.html","code":""},{"path":"organizing-routine-reports.html","id":"organizing-routine-reports","chapter":"3 Organizing routine reports","heading":"3 Organizing routine reports","text":"page cover reportfactory package. reportfactory package developed RECON (R Epidemics Consortium).reportfactory accompaniment using R Markdowns reports. built scenarios running routine reports (daily, weekly, etc.). makes easier organization compilation multiple R Markdown files outputs. essence, provides “factory” can run R Markdown reports automatically get organized date- time-stamped folders outputs.","code":""},{"path":"organizing-routine-reports.html","id":"preparation-2","chapter":"3 Organizing routine reports","heading":"3.1 Preparation","text":"","code":""},{"path":"organizing-routine-reports.html","id":"r-project","chapter":"3 Organizing routine reports","heading":"R project","text":"Open new R project, existing one. See page [R projects] instructions create R project. report factory live within R project., created R project called “demo_factory”. Currently files within project.","code":""},{"path":"organizing-routine-reports.html","id":"packages","chapter":"3 Organizing routine reports","heading":"Packages","text":"within open R project, install /load reportfactory package CRAN.handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(reportfactory)"},{"path":"organizing-routine-reports.html","id":"new-factory","chapter":"3 Organizing routine reports","heading":"3.2 New factory","text":"Adding new report factory add self-contained folder R project. create factory within empty “demo_factory” R project. report factory called “new_factory” (default name - can changed).Run function new_factory(). can run empty parentheses, specifying argument values explained . default, factory folder called “new_factory”, added R project root folder.see folder “new_factory” createdThere several defaults can change new_factory() command:factory = - can provide name factory folder. default shown : “new_factory”.path = - can designate file path new factory. default current directory.report_sources = can provide alternate name folder holds R Markdown scripts create reports. default “report_sources”.outputs = can provide alternate name folder holds output reports. default “outputs”.See ?new_factory complete list function arguments.","code":"\n# This will create the factory folder in the current directory\nnew_factory()"},{"path":"organizing-routine-reports.html","id":"review-the-factory","chapter":"3 Organizing routine reports","heading":"3.3 Review the factory","text":"Looking inside “new_factory” folder can see sub-folders created automatically. can adjust new_factory() command want sub-folders created.report_sources folder hold R Markdown scripts, generate reportsThe outputs folder report outputs (e.g. HTML, Word, PDF, etc.) - contain automatically-generated sub-folder organized report date-time stampThe scripts folder can used store R scripts can sourced/run R Markdown scripts (optional)data folder can used hold data (optional).file created, now can reference files sub-folders relation factory root folder (see [R projects] details package)gitignore file created case decide link Github repository (see [Collaboration Github])empty README markdown file created, assist using Github repositoryWithin R, can run command see structure (folders files) report factory.following “tree” factory’s folders files printed R console. can see sub-folders “raw” “clean” data, example CSV data. also “example_report.Rmd” “report_sources” folder.","code":"\nreportfactory::factory_overview()"},{"path":"organizing-routine-reports.html","id":"create-a-report","chapter":"3 Organizing routine reports","heading":"3.4 Create a report","text":"purposes example, create new R markdown script entitled “daily_sitrep.Rmd” save within “report_sources” folder report factory. , case linelist imported “data” folder, summary tables epicurves printed report HTML output exported .csv .png files respectively.also added data report (“linelist_cleaned.rds”) “clean” sub-folder within “data” folder. new R Markdown script can source data following command. read importing data rio package package see page [Import export].screenshot beginning new R Markdown “daily_sitrep.Rmd”. can see output format set HTML, via YAML header output: html_document. Later report, commands :Print summary table cases, also exporting table .csv filePrint epicurve, also saving .png image fileWe can now see factory overview Rmd added “report_sources” data file added well (highlighted):","code":"\nlinelist <- import(here(\"data\", \"clean\", \"linelist_cleaned.rds\"))"},{"path":"organizing-routine-reports.html","id":"review","chapter":"3 Organizing routine reports","heading":"3.5 Review","text":"can review R Markdown reports report_sources folder command:","code":"\nlist_reports()"},{"path":"organizing-routine-reports.html","id":"compile","chapter":"3 Organizing routine reports","heading":"3.6 Compile","text":"report factory, “compile” R Markdown report means .Rmd rendered (HTML, Word, PDF, etc - however indicated YAML Rmd script). report factory auto-create date- time-stamped folder output “outputs” folder. output exported files (e.g. csv, png, xlsx, etc. saved folder. Rmd also saved folder, record version Rmd, moment.contrasts normal behavior rendered R Markdown, save location .Rmd. default behavior can result crowded, messy folders. report factory aims improve organization one needs run reports frequently.","code":""},{"path":"organizing-routine-reports.html","id":"compile-by-name","chapter":"3 Organizing routine reports","heading":"Compile by name","text":"can compile specific report running compile_reports() providing name (without .rmd extension) reports =. , command compile “daily_sitrep.rmd” report, rendering HTML saving products date- time-stamped sub-folder specific report, within “outputs” folder.Note compile, see several files temporarily appear “report_sources” folder - soon disappear.","code":""},{"path":"organizing-routine-reports.html","id":"compile-by-number","chapter":"3 Organizing routine reports","heading":"Compile by number","text":"can also specify Rmd compile feeding number vector numbers reports =. numbers must align order reports appear run list_reports().","code":"\n# Run the second and fourth Rmds in the \"report_sources\" folder\ncompile_reports(reports = c(2, 4))"},{"path":"organizing-routine-reports.html","id":"compile-from-sub-folder","chapter":"3 Organizing routine reports","heading":"Compile from sub-folder","text":"can add sub-folders “report_sources” folder. run R Markdown report subfolder, simply provide name folder subfolder =. example code compile Rmd report lives sub_folder “report_sources”.","code":"\ncompile_reports(\n     reports = \"summary_for_partners.Rmd\",\n     subfolder = \"for_partners\")"},{"path":"organizing-routine-reports.html","id":"compile-all","chapter":"3 Organizing routine reports","heading":"Compile all","text":"can compile R Markdown reports “report_sources” folder setting reports = argument TRUE.","code":""},{"path":"organizing-routine-reports.html","id":"parameterization","chapter":"3 Organizing routine reports","heading":"Parameterization","text":"noted page R Markdown reports, can run reports specified parameters. can pass parameters list compile_reports() via params = argument. example, fictional report three parameters provided R Markdown reports.","code":"\ncompile_reports(\n  reports = \"daily_sitrep.Rmd\",\n  params = list(most_recent_data = TRUE,\n                region = \"NORTHERN\",\n                rates_denominator = 10000),\n  subfolder = \"regional\"\n)"},{"path":"organizing-routine-reports.html","id":"outputs","chapter":"3 Organizing routine reports","heading":"3.7 Outputs","text":"compiled reports times, “outputs” folder might look like (highlights added clarity):Folders created outputs Rmd reportSub-folders created unique compiling - folders date- time-stamped (“2021-04-07_T20-11-25” means 7th April 2021 20:11:25)\r\ncan edit date/time-stamp format. See ?compile_reports\r\ncan edit date/time-stamp format. See ?compile_reportsWithin date/time compiled folder, rendered output stored (HTML, PDF, Word, etc.) along Rmd exported files rendering (e.g. csv, png)view inside one date/time-stamped folders, “daily_sitrep” report. File path folders highlighted yellow emphasis.","code":""},{"path":"organizing-routine-reports.html","id":"review-1","chapter":"3 Organizing routine reports","heading":"3.8 Review","text":"can use list_outputs() review list outputs.","code":""},{"path":"organizing-routine-reports.html","id":"extras","chapter":"3 Organizing routine reports","heading":"3.9 Extras","text":"reportfactory, can use function list_deps() list packages required across reports entire factory.reportfactory, can use function list_deps() list packages required across reports entire factory.accompanying package development called rfextras offers helper functions assist building reports, :\r\nload_scripts() - sources/loads .R scripts given folder (“scripts” folder default)\r\nfind_latest() - finds latest version file (e.g. latest dataset)\r\naccompanying package development called rfextras offers helper functions assist building reports, :load_scripts() - sources/loads .R scripts given folder (“scripts” folder default)find_latest() - finds latest version file (e.g. latest dataset)","code":""},{"path":"organizing-routine-reports.html","id":"resources-2","chapter":"3 Organizing routine reports","heading":"3.10 Resources","text":"See reportfactory package’s Github pageSee rfextras package’s Github page","code":""}]
