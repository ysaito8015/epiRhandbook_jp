[{"path":"index.html","id":"the-epidemiologist-r-handbook","chapter":"The Epidemiologist R Handbook","heading":"The Epidemiologist R Handbook","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"The Epidemiologist R Handbook","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via (**downloadable version**)gaps book address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareLet’s avoid hours online searching repository best-practice code common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?Written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsProvides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"The Epidemiologist R Handbook","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “clipboard” “copy” icon copy codeSee “Resources” section page resources","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"The Epidemiologist R Handbook","heading":"Edit or contribute","text":"welcome feedback comments survey LINK.want directly contribute modify content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"The Epidemiologist R Handbook","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"The Epidemiologist R Handbook","heading":"Contributors","text":"handbook conceived, written, edited collaboration epidemiologists public health practitioners around world drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Alex Spina, Amrish Baidjoe, Henry Laurenson-Schafer, Finlay Campbell, Pat KeatingAuthors (order contributions): Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Daniel Molling, Liza Coyer, Jonny Polonski, Yurie Izawa, Sara Hollis, Isha BerryReviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"The Epidemiologist R Handbook","heading":"Funding and programmatic support","text":"handbook received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET).Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"The Epidemiologist R Handbook","heading":"Inspiration","text":"multitude tutorials vignettes provided foundational knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"The Epidemiologist R Handbook","heading":"Image credits","text":"Logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"The Epidemiologist R Handbook","heading":"License and Terms of Use","text":"handbook approved product specific organization.Although strive accuracy, provide guarantee content book.work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"descriptive-analysis.html","id":"descriptive-analysis","chapter":"1 Descriptive analysis","heading":"1 Descriptive analysis","text":"","code":""},{"path":"descriptive-analysis.html","id":"overview","chapter":"1 Descriptive analysis","heading":"1.1 Overview","text":"tab demonstrates use base R, dplyr, gtsummary produce descriptive statistics tabulations. Consider factors choosing approach:Code simplicityAccessibility outputsPresentation-quality printed outputsBrowse data: get quick overview dataset using summary() skimr packageBrowse data: get quick overview dataset using summary() skimr packageSummary statistics: mean, median, range, standard deviations, percentilesSummary statistics: mean, median, range, standard deviations, percentilesFrequency / cross-tabs: counts proportionsFrequency / cross-tabs: counts proportionsStatistical tests: t-tests, wilcoxon rank sum, kruskal-wallis chi-squaresStatistical tests: t-tests, wilcoxon rank sum, kruskal-wallis chi-squaresCorrelationsCorrelations","code":""},{"path":"descriptive-analysis.html","id":"preparation","chapter":"1 Descriptive analysis","heading":"1.2 Preparation","text":"","code":""},{"path":"descriptive-analysis.html","id":"packages","chapter":"1 Descriptive analysis","heading":"1.2.1 Packages","text":"code chunk shows loading packages required analyses.","code":"\npacman::p_load(\n  rio,          # File import\n  here,         # File locator\n  skimr,        # get overview of data\n  tidyverse,    # data management + ggplot2 graphics, \n  gtsummary,    # summary statistics and tests\n  janitor,      # adding totals and percents to tables\n  flextable,    # converting tables to HTML\n  corrr         # correlation analayis for numeric variables\n  )"},{"path":"descriptive-analysis.html","id":"load-data","chapter":"1 Descriptive analysis","heading":"Load data","text":"example dataset used section linelist individual cases simulated epidemic.dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"descriptive-analysis.html","id":"clean-data","chapter":"1 Descriptive analysis","heading":"Clean data","text":"See page [Cleaning data] full explanation cleaning data use dyplr functions mutate(), filter(), select(), etc.purposes page, just ensure class column age numeric.","code":"\n## make sure that age variable is numeric \nlinelist <- linelist %>% \n  mutate(age = as.numeric(age))"},{"path":"descriptive-analysis.html","id":"browse-data","chapter":"1 Descriptive analysis","heading":"1.3 Browse data","text":"","code":""},{"path":"descriptive-analysis.html","id":"skimr-package","chapter":"1 Descriptive analysis","heading":"skimr package","text":"Using skimr package can get detailed aesthetically pleasing overview variables dataset. Read skimr github page.function skim() applied entire linelist data frame. summary every column produced.Table 1.1: Data summaryVariable type: characterVariable type: DateVariable type: factorVariable type: numeric","code":"\n## get information about each variable in a dataset \nskim(linelist)"},{"path":"descriptive-analysis.html","id":"base-r","chapter":"1 Descriptive analysis","heading":"Base R","text":"can also use summary() function, base R, get information entire data sets. Provide name dataset summary() return overview column whole dataset. values returned depend class column. However, output can difficult read using skimr.","code":"\n## get information about each variable in a dataset \nsummary(linelist)"},{"path":"descriptive-analysis.html","id":"descriptive-tables","chapter":"1 Descriptive analysis","heading":"1.4 Descriptive tables","text":"several choices producing tabulations, cross-tabulations, statistical summaries. factors consider include code simplicity ease, output appears (R console, Viewer pane), can data afterward. options strengths can create simple complex tables. Nevertheless, one way approach decision use.Use table() summary() base R view quick tablesUse count() summarise() dplyr within context pipe chain preparing data ggplot()Use tbl_summary() gtsummary produce elaborate publication-ready tables","code":""},{"path":"descriptive-analysis.html","id":"base-r-1","chapter":"1 Descriptive analysis","heading":"base R","text":"","code":""},{"path":"descriptive-analysis.html","id":"statistical-functions","chapter":"1 Descriptive analysis","heading":"1.4.0.1 Statistical functions","text":"print summary statistics numeric column console, base R functions can easiest fastest use. functions also often used within complex code operations, example grouping summarising columns, referencing max()` calibrate plot height.See [R Basics] page complete list mathematical operators max(), min(), median(), mean(), quantile(), sd(), range().CAUTION: data contain missing values, R wants know return NA unless specify mathematical functions want R ignore missing values, via argument na.rm = TRUE.can return important summary statistics numeric column using summary(), . Note dataframe must also specified.","code":"\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##     0.0     6.0    13.0    16.2    23.0    90.0      87"},{"path":"descriptive-analysis.html","id":"tables","chapter":"1 Descriptive analysis","heading":"1.4.0.2 Tables","text":"Use function table() print counts unique values R console. must specify dataframe column, shown . CAUTION: NA (missing) values tabulated unless include argument useNA = \"always\" (also set “” “ifany”).Two columns (even three!) can cross-tabulated listing , separated commas. Optionally, can assign column “name” like Outcome = linelist$outcome help distinguishing printed table. can create classic epidemiological 2x2 table.can return proportions passing table function prop.table() . Use margins = argument specify whether want proportions rows (1), columns (3), whole table (3). clarity, pipe table round() function base R, specifying 2 digits.add row column totals, pass table addmargins(). works counts proportions.Converting table() object like one directly data frame surprisingly straight-forward. One option demonstrated :Create table, without using useNA = \"always\", instead convert NA values “(Missing)” fct_explicit_na() forcats packageAdd totals desired (optional) piping addmargin()Pipe base R function .data.frame.matrix()Pipe table dplyr function add_rownames(), specifying first columnPrint. example use flextable() package flextable described Tables page. print RStudio viewer pane HTML.Age CategoryDeathRecover(Missing)Sum0-4482.0361.0223.01,066.05-9526.0329.0248.01,103.010-14384.0307.0227.0918.015-19326.0268.0179.0773.020-29469.0392.0241.01,102.030-49316.0252.0156.0724.050-6949.031.022.0102.070+6.05.02.013.0(Missing)24.038.025.087.0Sum2,582.01,983.01,323.05,888.0Below alternative method adding totals percents. totals formatting counts percents added conversion class Data Frame. adorn_xxx() functions janitor work data frame.Age CategoryDeathRecover(Missing)0-4 482 (45.2%) 361 (33.9%) 223 (20.9%)5-9 526 (47.7%) 329 (29.8%) 248 (22.5%)10-14 384 (41.8%) 307 (33.4%) 227 (24.7%)15-19 326 (42.2%) 268 (34.7%) 179 (23.2%)20-29 469 (42.6%) 392 (35.6%) 241 (21.9%)30-49 316 (43.6%) 252 (34.8%) 156 (21.5%)50-69  49 (48.0%)  31 (30.4%)  22 (21.6%)70+   6 (46.2%)   5 (38.5%)   2 (15.4%)(Missing)  24 (27.6%)  38 (43.7%)  25 (28.7%)Total2582 (43.9%)1983 (33.7%)1323 (22.5%)","code":"\ntable(linelist$outcome, useNA = \"always\")## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\nage_by_outcome <- table(linelist$age_cat, linelist$outcome, useNA = \"always\")\nage_by_outcome   # print table##        \r\n##         Death Recover <NA>\r\n##   0-4     482     361  223\r\n##   5-9     526     329  248\r\n##   10-14   384     307  227\r\n##   15-19   326     268  179\r\n##   20-29   469     392  241\r\n##   30-49   316     252  156\r\n##   50-69    49      31   22\r\n##   70+       6       5    2\r\n##   <NA>     24      38   25\n# get proportions of table defined above, by rows, rounded\nprop.table(age_by_outcome, 1) %>% round(2)##        \r\n##         Death Recover <NA>\r\n##   0-4    0.45    0.34 0.21\r\n##   5-9    0.48    0.30 0.22\r\n##   10-14  0.42    0.33 0.25\r\n##   15-19  0.42    0.35 0.23\r\n##   20-29  0.43    0.36 0.22\r\n##   30-49  0.44    0.35 0.22\r\n##   50-69  0.48    0.30 0.22\r\n##   70+    0.46    0.38 0.15\r\n##   <NA>   0.28    0.44 0.29\naddmargins(age_by_outcome)##        \r\n##         Death Recover <NA>  Sum\r\n##   0-4     482     361  223 1066\r\n##   5-9     526     329  248 1103\r\n##   10-14   384     307  227  918\r\n##   15-19   326     268  179  773\r\n##   20-29   469     392  241 1102\r\n##   30-49   316     252  156  724\r\n##   50-69    49      31   22  102\r\n##   70+       6       5    2   13\r\n##   <NA>     24      38   25   87\r\n##   Sum    2582    1983 1323 5888\ntable(fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>% \n  addmargins() %>% \n  as.data.frame.matrix() %>% \n  add_rownames(var = \"Age Category\") %>% \n  flextable()\ntable(fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>% \n  as.data.frame.matrix() %>% \n  add_rownames(var = \"Age Category\") %>% \n  adorn_totals() %>%\n  adorn_percentages(denominator = \"row\") %>% \n  adorn_pct_formatting() %>%\n  adorn_ns(position = \"front\") %>% \n  flextable()"},{"path":"descriptive-analysis.html","id":"gtsummary-package","chapter":"1 Descriptive analysis","heading":"gtsummary package","text":"want print summary statistics pretty, publication-ready graphic, can use gtsummary package function tbl_summary(). code can seem complex first, outputs look nice print RStudio Viewer panel HTML. Read vignette .introduce tbl_summary() show basic behavior first, actually produces large beautiful table. , examine detail make adjustments tailored tables.","code":""},{"path":"descriptive-analysis.html","id":"summary-table","chapter":"1 Descriptive analysis","heading":"Summary table","text":"default behavior tbl_summary() quite incredible - takes columns provide creates summary table. functions prints statistics appropriate column class: median inter-quartile range (IQR) numeric columns, counts (%) categorical binary columns. Missing values converted “Unknown”. Footnotes added bottom explain statistics, total N shown top.\r\n          1\r\n          \r\n           \r\n          Median (IQR); n (%)\r\n          Now explain function works make adjustments. key arguments detailed :=\r\ncan stratify table column (e.g. outcome), creating 2-way table.statistic =\r\nIndicate statistics show display equation. two sides equation, separated tilde ~. right quotes statistical display desired, left columns display apply.right side uses syntax str_glue() stringr (see [Characters Strings]), desired display string quotes statistics within curly brackets. can include statistics like “n” (counts), “N” (denominator), “mean”, “median”, “sd”, “max”, “min”, percentiles “p##” like “p25”, percent total “p”. See ?tbl_summary details.left side equation, can specify columns name (e.g. age c(age, gender)) using helpers all_continuous(), all_categorical(), contains(), starts_with(), etc.simple example statistic = equation might look like - printing mean column age:\r\n          1\r\n          \r\n           \r\n          Mean\r\n          slightly complex equation might look like , incorporating max min values within parentheses separated comma:can also differentiate syntax separate columns types columns. complex example , value provided statistc = list indicating continuous columns table print mean standard deviation parentheses, categorical columns print n, denominator, percent.digits =\r\nAdjust digits rounding. Optionally, can specified continuous columns ().label =\r\nAdjust column name displayed. Provide column name desired label separated tilde. default column name.missing_text =\r\nAdjust missing values displayed. default “Unknown”.type =\r\nused adjust many levels statistics shown. syntax similar statistic = provide equation columns left value right. Two common scenarios include:type = all_categorical() ~ \"categorical\" Forces dichotomous columns (e.g. fever) show levels instead “yes” rowtype = all_continuous() ~ \"continuous2\" Allows multi-line statistics per variable, shown section belowIn example , arguments used modify original summary table:\r\n          1\r\n          \r\n           \r\n          Mean (SD); n / N (%)\r\n          ","code":"\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>%  # keep columns of interest\n  tbl_summary()                                                  # pipe to tbl_summary()\nlinelist %>% \n  select(age_years) %>%         # keep only columns of interest \n  tbl_summary(                  # create summary table\n    statistic = age_years ~ \"{mean}\") # print mean of age\nstatistic = age_years ~ \"({min}, {max})\"\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>% # keep only columns of interest\n  tbl_summary(     \n    by = outcome,                                               # stratify entire table by outcome\n    statistic = list(all_continuous() ~ \"{mean} ({sd})\",        # stats and format for continuous columns\n                     all_categorical() ~ \"{n} / {N} ({p}%)\"),   # stats and format for categorical columns\n    digits = all_continuous() ~ 1,                              # rounding for continuous columns\n    type   = all_categorical() ~ \"categorical\",                 # force all categorical levels to display\n    label  = list(                                              # display labels for column names\n      outcome   ~ \"Outcome\",                           \n      age_years ~ \"Age (years)\",\n      gender    ~ \"Gender\",\n      temp      ~ \"Temperature\",\n      hospital  ~ \"Hospital\"),\n    missing_text = \"Missing\"                                    # how missing values should display\n  )## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"multi-line-stats-for-continuous-variables","chapter":"1 Descriptive analysis","heading":"Multi-line stats for continuous variables","text":"want print multiple lines statistics continuous variables, can indicate setting type = “continuous2”. can combine previously shown elements one table choosing statistics want show. need tell function want get table back entering type “continuous2”.Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).many ways modify tables, including adding p-values, adjusting color headings, etc. Many described documentation (enter ?tbl_summary Console), given examples .","code":"\nlinelist %>% \n  select(age_years, temp) %>%                      # keep only columns of interest\n  tbl_summary(                                     # create summary table\n    type = all_continuous() ~ \"continuous2\",       # indicate that you want to print multiple statistics \n    statistic = all_continuous() ~ c(\n      \"{mean} ({sd})\",                             # line 1: mean and SD\n      \"{median} ({p25}, {p75})\",                   # line 2: median and IQR\n      \"{min}, {max}\")                              # line 3: min and max\n    )"},{"path":"descriptive-analysis.html","id":"dplyr-package","chapter":"1 Descriptive analysis","heading":"dplyr package","text":"Creating cross-tabulations dplyr less straightforward, outputs fit within tidyverse dataset structure. However, approach tabulation useful working within longer pipe chain, want pass results ggplot() (expects “long” data). See [Cleaning data] page example pipe chain.Use dplyr function count() return tabulated counts. function applied group data described depth [Grouping data] page. output returned “long” format column n created hold counts.can cross-tabulate two columns adding within count() function. Note format different table() - “long” unique combination two columns listed, counts n column. Also note missing values considered.pipe output ggplot() relatively straight-forward. See examples pages [Plotting categorical data] [ggplot tips].","code":"\nlinelist %>% \n  count(age_cat)##   age_cat    n\r\n## 1     0-4 1066\r\n## 2     5-9 1103\r\n## 3   10-14  918\r\n## 4   15-19  773\r\n## 5   20-29 1102\r\n## 6   30-49  724\r\n## 7   50-69  102\r\n## 8     70+   13\r\n## 9    <NA>   87\nlinelist %>% \n  count(age_cat, gender)##    age_cat gender   n\r\n## 1      0-4      f 624\r\n## 2      0-4      m 404\r\n## 3      0-4   <NA>  38\r\n## 4      5-9      f 651\r\n## 5      5-9      m 414\r\n## 6      5-9   <NA>  38\r\n## 7    10-14      f 555\r\n## 8    10-14      m 334\r\n## 9    10-14   <NA>  29\r\n## 10   15-19      f 381\r\n## 11   15-19      m 367\r\n## 12   15-19   <NA>  25\r\n## 13   20-29      f 440\r\n## 14   20-29      m 626\r\n## 15   20-29   <NA>  36\r\n## 16   30-49      f 161\r\n## 17   30-49      m 539\r\n## 18   30-49   <NA>  24\r\n## 19   50-69      f   3\r\n## 20   50-69      m  93\r\n## 21   50-69   <NA>   6\r\n## 22     70+      m  12\r\n## 23     70+   <NA>   1\r\n## 24    <NA>   <NA>  87\nlinelist %>% \n  count(outcome, age_cat) %>% \n  ggplot()+\n    geom_bar(aes(x = outcome, fill = age_cat, y = n), stat = \"identity\")"},{"path":"descriptive-analysis.html","id":"add-proportions","chapter":"1 Descriptive analysis","heading":"Add proportions","text":"add proportions percents new column, use mutate() counted data frame . Note data remain “long” format (like table() ).can calculate proportions within groups two levels aggregation prior using mutate(). table first groups data frame outcome groups/counts age_cat, achieving breakdown age outcome. Note can add stratifications adding columns group_by() command.Note possible change table wide format, making like two--two (cross tabulation), using tidyr pivot_wider() function. done adding end code: pivot_wider(names_from = age_cat, values_from = c(n, percentage)) information see page [Pivoting data].want display table produced using count(), can add totals, percents, proportions using package janitor. See detailed example [Grouping data] page, brief example :","code":"\nlinelist %>% \n  count(outcome) %>%                     # counts by outcome \n  mutate(percentage = n / sum(n) * 100)  # calculate proportion##   outcome    n percentage\r\n## 1   Death 2582   43.85190\r\n## 2 Recover 1983   33.67867\r\n## 3    <NA> 1323   22.46943\nlinelist %>% \n  group_by(outcome) %>%                  # group first by outcome \n  count(age_cat) %>%                     # group again and count by gender (produces n column)\n  mutate(percentage = n / sum(n) * 100)  # calculate proportion - note the denominator is by outcome group## # A tibble: 27 x 4\r\n## # Groups:   outcome [3]\r\n##    outcome age_cat     n percentage\r\n##    <chr>   <fct>   <int>      <dbl>\r\n##  1 Death   0-4       482     18.7  \r\n##  2 Death   5-9       526     20.4  \r\n##  3 Death   10-14     384     14.9  \r\n##  4 Death   15-19     326     12.6  \r\n##  5 Death   20-29     469     18.2  \r\n##  6 Death   30-49     316     12.2  \r\n##  7 Death   50-69      49      1.90 \r\n##  8 Death   70+         6      0.232\r\n##  9 Death   <NA>       24      0.930\r\n## 10 Recover 0-4       361     18.2  \r\n## # ... with 17 more rows\npacman::p_load(janitor)\n\nlinelist %>% \n  count(outcome) %>%              # produce the counts by unique outcome\n  adorn_totals(where = \"row\") %>% # add total row\n  adorn_percentages(\"col\") %>%    # add proportion by column\n  adorn_pct_formatting() %>%      # proportion converted to percent\n  adorn_ns(position = \"front\")    # Add the underlying N, in front of the percentage##  outcome             n\r\n##    Death 2582  (43.9%)\r\n##  Recover 1983  (33.7%)\r\n##     <NA> 1323  (22.5%)\r\n##    Total 5888 (100.0%)"},{"path":"descriptive-analysis.html","id":"summarise","chapter":"1 Descriptive analysis","heading":"summarise()","text":"can also use dplyr create table different summary statistics, example mean, median, range, standard deviation percentiles. can also show one table. discussed detail page [Grouping data].Note argument na.rm = TRUE, removes missing values calculation. missing values excluded, returned value NA (missing).return percentiles can type one value like, can type multiple (e.g. return interquartile range).can combine previously shown elements one table choosing statistics want show. dplyr need use str_c\r\nfunction stringr combine outputs IQR range one\r\ncell, separated comma.Note automatically excludes missing values. missing values excluded, returned value NA (missing). number missing values seen Unknown column).Lastly, another option use janitor package tabyl function.","code":"\nlinelist %>% \n  summarise(mean = mean(age_years, na.rm = TRUE)) # get the mean value of age while excluding missings##       mean\r\n## 1 16.14426\n# get default percentile values of age (0%, 25%, 50%, 75%, 100%)\nlinelist %>% \n  summarise(percentiles = quantile(age_years, na.rm = TRUE))##   percentiles\r\n## 1           0\r\n## 2           6\r\n## 3          13\r\n## 4          23\r\n## 5          90\n# get specified percentile values of age (5%, 50%, 75%, 98%)\nlinelist %>% \n  summarise(percentiles = quantile(age_years,\n                                   probs = c(.05, 0.5, 0.75, 0.98), \n                                   na.rm=TRUE))##   percentiles\r\n## 1           1\r\n## 2          13\r\n## 3          23\r\n## 4          49\nlinelist %>% \n  summarise(\n    mean   = mean(age_years, na.rm = TRUE),   # mean\n    SD     = sd(age_years, na.rm = TRUE),     # standard deviation\n    median = median(age_years, na.rm = TRUE), # median \n    IQR = str_c(                        # collapse the IQR, separated by a comma\n      quantile(age_years, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      ), \n    range = str_c(                      # collapse range, separated by a comma\n      range(age_years, na.rm = TRUE), \n      collapse = \", \"\n    )\n  )##       mean       SD median   IQR range\r\n## 1 16.14426 12.73159     13 6, 23 0, 90"},{"path":"descriptive-analysis.html","id":"statistical-tests","chapter":"1 Descriptive analysis","heading":"1.5 Statistical tests","text":"","code":""},{"path":"descriptive-analysis.html","id":"base-r-2","chapter":"1 Descriptive analysis","heading":"base R","text":"can use base R functions produce results statistical tests. commands relatively simple results print R Console simple viewing. However, outputs usually lists harder manipulate want use results subsequent code operations.","code":""},{"path":"descriptive-analysis.html","id":"t-tests","chapter":"1 Descriptive analysis","heading":"T-tests","text":"Provide numeric column left side equation categorical column right side. Specify dataset data =. Optionally, set paired =, conf.level = alternative = (either “two.sided”, “less”, “greater”). Enter ?t.test details.can compare two numeric vectors using alternative syntax. example, two columns different data sets.Conduct one-sample t-test known/hypothesized populaton mean right side equation:","code":"\n## compare mean age by outcome group with a t-test\nt.test(age_years ~ outcome, data = linelist)## \r\n##  Welch Two Sample t-test\r\n## \r\n## data:  age_years by outcome\r\n## t = -1.1252, df = 4231.1, p-value = 0.2606\r\n## alternative hypothesis: true difference in means is not equal to 0\r\n## 95 percent confidence interval:\r\n##  -1.1878646  0.3215694\r\n## sample estimates:\r\n##   mean in group Death mean in group Recover \r\n##              16.00498              16.43813\nt.test(df1$age_years, df2$age_years)\nt.test(linelist$age_years, mu = 45)"},{"path":"descriptive-analysis.html","id":"shapiro-wilks-test","chapter":"1 Descriptive analysis","heading":"Shapiro-Wilk’s test","text":"","code":"\nshapiro.test(linelist$age_years)"},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test","chapter":"1 Descriptive analysis","heading":"Wilcoxon rank sum test","text":"","code":"\n## compare age distribution by outcome group with a wilcox test\nwilcox.test(age_years ~ outcome, data = linelist)## \r\n##  Wilcoxon rank sum test with continuity correction\r\n## \r\n## data:  age_years by outcome\r\n## W = 2412546, p-value = 0.08206\r\n## alternative hypothesis: true location shift is not equal to 0"},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test","chapter":"1 Descriptive analysis","heading":"Kruskal-wallis test","text":"","code":"\n## compare age distribution by outcome group with a kruskal-wallis test\nkruskal.test(age_years ~ outcome, linelist)## \r\n##  Kruskal-Wallis rank sum test\r\n## \r\n## data:  age_years by outcome\r\n## Kruskal-Wallis chi-squared = 3.0237, df = 1, p-value = 0.08206"},{"path":"descriptive-analysis.html","id":"chi-squared-test","chapter":"1 Descriptive analysis","heading":"Chi-squared test","text":"","code":"\n## compare the proportions in each group with a chi-squared test\nchisq.test(linelist$gender, linelist$outcome)## \r\n##  Pearson's Chi-squared test with Yates' continuity correction\r\n## \r\n## data:  linelist$gender and linelist$outcome\r\n## X-squared = 0, df = 1, p-value = 1"},{"path":"descriptive-analysis.html","id":"gtsummary-package-1","chapter":"1 Descriptive analysis","heading":"gtsummary package","text":"Performing statistical tests comparison tbl_summary done adding \r\nadd_p function table specifying test use. See detailed description\r\nproduce tables. possible get p-values corrected multiple testing using \r\nadd_q function.","code":""},{"path":"descriptive-analysis.html","id":"chi-squared-test-1","chapter":"1 Descriptive analysis","heading":"1.5.0.1 Chi-squared test","text":"Compare proportions categorical variable two groups. default statistical test \r\nadd_p() perform chi-squared test independence continuity correction, \r\nexpected call count 5 Fisher’s exact test used.\r\n          1\r\n          \r\n           \r\n          n (%)\r\n          \r\n          2\r\n          \r\n           \r\n          Pearson's Chi-squared test\r\n          ","code":"\nlinelist %>% \n  select(gender, outcome) %>%    # keep variables of interest\n  tbl_summary(by = outcome) %>%  # produce summary table and specify grouping variable\n  add_p()                        # specify what test to perform## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"t-tests-1","chapter":"1 Descriptive analysis","heading":"T-tests","text":"Compare difference means continuous variable two groups.\r\nexample compare mean age patient outcome.\r\n          1\r\n          \r\n           \r\n          Mean (SD)\r\n          \r\n          2\r\n          \r\n           \r\n          Welch Two Sample t-test\r\n          ","code":"\nlinelist %>% \n  select(age_years, outcome) %>%             # keep variables of interest\n  tbl_summary(                               # produce summary table\n    statistic = age_years ~ \"{mean} ({sd})\", # specify what statistics to show\n    by = outcome) %>%                        # specify the grouping variable\n  add_p(age_years ~ \"t.test\")                # specify what tests to perform## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test-1","chapter":"1 Descriptive analysis","heading":"1.5.0.2 Wilcoxon rank sum test","text":"Compare distribution continuous variable two groups. default\r\nuse Wilcoxon rank sum test median (IQR) comparing two\r\ngroups. However non-normally distributed data comparing multiple groups,\r\nKruskal-wallis test appropriate.\r\n          1\r\n          \r\n           \r\n          Median (IQR)\r\n          \r\n          2\r\n          \r\n           \r\n          Wilcoxon rank sum test\r\n          ","code":"\nlinelist %>% \n  select(age_years, outcome) %>%                       # keep variables of interest\n  tbl_summary(                                         # produce summary table\n    statistic = age_years ~ \"{median} ({p25}, {p75})\", # specify what statistic to show (this is default so could remove)\n    by = outcome) %>%                                  # specify the grouping variable\n  add_p(age_years ~ \"wilcox.test\")                     # specify what test to perform (default so could leave brackets empty)## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test-1","chapter":"1 Descriptive analysis","heading":"1.5.0.3 Kruskal-wallis test","text":"Compare distribution continuous variable two groups,\r\nregardless whether data normally distributed.\r\n          1\r\n          \r\n           \r\n          Median (IQR)\r\n          \r\n          2\r\n          \r\n           \r\n          Kruskal-Wallis rank sum test\r\n          ","code":"\nlinelist %>% \n  select(age_years, outcome) %>%                       # keep variables of interest\n  tbl_summary(                                         # produce summary table\n    statistic = age_years ~ \"{median} ({p25}, {p75})\", # specify what statistic to show (default, so could remove)\n    by = outcome) %>%                                  # specify the grouping variable\n  add_p(age_years ~ \"kruskal.test\")                    # specify what test to perform## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-analysis.html","id":"dplyr-package-1","chapter":"1 Descriptive analysis","heading":"1.5.1 dplyr package","text":"Performing statistical tests dplyr alone dense, \r\nfit within tidy-data framework. requires using purrr create\r\nlist dataframes subgroups want compare. See page [Iteration loops] learn purrr.\r\neasier alternative may rstatix package.","code":""},{"path":"descriptive-analysis.html","id":"t-tests-2","chapter":"1 Descriptive analysis","heading":"1.5.1.1 T-tests","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the mean age for the death group\n    Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)),\n    ## calculate the mean age for the recover group\n    Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)),\n    ## using both grouped data sets compare mean age with a t-test\n    ## keep only the p.value\n    t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value)\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_mean Death_sd Recover_mean Recover_sd t_test\r\n##        <dbl>    <dbl>        <dbl>      <dbl>  <dbl>\r\n## 1       16.1     12.9         16.5       12.7  0.251"},{"path":"descriptive-analysis.html","id":"wilcoxon-rank-sum-test-2","chapter":"1 Descriptive analysis","heading":"1.5.1.2 Wilcoxon rank sum test","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the median age for the death group\n    Death_median = map(Death, ~median(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_iqr = map(Death, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## calculate the median age for the recover group\n    Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_iqr = map(Recover, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## using both grouped data sets compare age distribution with a wilcox test\n    ## keep only the p.value\n    wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value)\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_median Death_iqr Recover_median Recover_iqr wilcox\r\n##          <dbl> <chr>              <dbl> <chr>        <dbl>\r\n## 1           13 6, 23                 14 6, 24       0.0798"},{"path":"descriptive-analysis.html","id":"kruskal-wallis-test-2","chapter":"1 Descriptive analysis","heading":"1.5.1.3 Kruskal-wallis test","text":"","code":"\nlinelist %>% \n  ## only keep variables of interest\n  select(age, outcome) %>% \n  ## drop those missing outcome \n  filter(!is.na(outcome)) %>% \n  ## specify the grouping variable\n  group_by(outcome) %>% \n  ## create a subset of data for each group (as a list)\n  nest() %>% \n  ## spread in to wide format\n  pivot_wider(names_from = outcome, values_from = data) %>% \n  mutate(\n    ## calculate the median age for the death group\n    Death_median = map(Death, ~median(.x$age, na.rm = TRUE)),\n    ## calculate the sd among dead \n    Death_iqr = map(Death, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## calculate the median age for the recover group\n    Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), \n    ## calculate the sd among recovered \n    Recover_iqr = map(Recover, ~str_c(\n      quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), \n      collapse = \", \"\n      )),\n    ## using the original data set compare age distribution with a kruskal test\n    ## keep only the p.value\n    kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value\n  ) %>% \n  ## drop datasets \n  select(-Death, -Recover) %>% \n  ## return a dataset with the medians and p.value (drop missing)\n  unnest(cols = everything())## # A tibble: 1 x 5\r\n##   Death_median Death_iqr Recover_median Recover_iqr kruskal\r\n##          <dbl> <chr>              <dbl> <chr>         <dbl>\r\n## 1           13 6, 23                 14 6, 24        0.0798"},{"path":"descriptive-analysis.html","id":"chi-squared-test-2","chapter":"1 Descriptive analysis","heading":"1.5.1.4 Chi-squared test","text":"","code":"\nlinelist %>% \n  ## do everything by gender \n  group_by(outcome) %>% \n  ## count the variable of interest\n  count(gender) %>% \n  ## calculate proportion \n  ## note that the denominator here is the sum of each gender\n  mutate(percentage = n / sum(n) * 100) %>% \n  pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>% \n  filter(!is.na(gender)) %>% \n  mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value)## # A tibble: 2 x 8\r\n##   gender n_Death n_Recover  n_NA percentage_Death percentage_Recover percentage_NA  pval\r\n##   <chr>    <int>     <int> <int>            <dbl>              <dbl>         <dbl> <dbl>\r\n## 1 f         1246       946   623             48.3               47.7          47.1     1\r\n## 2 m         1231       933   625             47.7               47.0          47.2     1"},{"path":"descriptive-analysis.html","id":"correlations","chapter":"1 Descriptive analysis","heading":"1.6 Correlations","text":"Correlation numeric variables can investigated using tidyversecorrr package. allows compute correlations using Pearson, Kendall\r\ntau Spearman rho. package creates table also function \r\nautomatically plot values.","code":"\ncorrelation_tab <- linelist %>% \n  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # keep numeric variables of interest\n  correlate()      # create correlation table (using default pearson)\n\ncorrelation_tab    # print## # A tibble: 6 x 7\r\n##   term            generation       age ct_blood days_onset_hosp    wt_kg    ht_cm\r\n##   <chr>                <dbl>     <dbl>    <dbl>           <dbl>    <dbl>    <dbl>\r\n## 1 generation       NA         0.000371   0.195          -0.275   0.00715  0.00486\r\n## 2 age               0.000371 NA          0.0150         -0.0139  0.832    0.877  \r\n## 3 ct_blood          0.195     0.0150    NA              -0.601   0.0193   0.0226 \r\n## 4 days_onset_hosp  -0.275    -0.0139    -0.601          NA      -0.0210  -0.0266 \r\n## 5 wt_kg             0.00715   0.832      0.0193         -0.0210 NA        0.876  \r\n## 6 ht_cm             0.00486   0.877      0.0226         -0.0266  0.876   NA\n## remove duplicate entries (the table above is mirrored) \ncorrelation_tab <- correlation_tab %>% \n  shave()\n\n## view correlation table \ncorrelation_tab## # A tibble: 6 x 7\r\n##   term            generation     age ct_blood days_onset_hosp  wt_kg ht_cm\r\n##   <chr>                <dbl>   <dbl>    <dbl>           <dbl>  <dbl> <dbl>\r\n## 1 generation       NA        NA       NA              NA      NA        NA\r\n## 2 age               0.000371 NA       NA              NA      NA        NA\r\n## 3 ct_blood          0.195     0.0150  NA              NA      NA        NA\r\n## 4 days_onset_hosp  -0.275    -0.0139  -0.601          NA      NA        NA\r\n## 5 wt_kg             0.00715   0.832    0.0193         -0.0210 NA        NA\r\n## 6 ht_cm             0.00486   0.877    0.0226         -0.0266  0.876    NA\n## plot correlations \nrplot(correlation_tab)"},{"path":"descriptive-analysis.html","id":"resources","chapter":"1 Descriptive analysis","heading":"1.7 Resources","text":"Much information page adapted resources vignettes online:gtsummary\r\ndplyr\r\ncorrr\r\nsthda correlation","code":""}]
