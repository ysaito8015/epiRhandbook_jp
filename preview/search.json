[{"path":"index.html","id":"welcome---this-is-a-draft","chapter":"Welcome - THIS IS A DRAFT","heading":"Welcome - THIS IS A DRAFT","text":"","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"About this handbook","text":"free open-access R reference guide intended applied epidemiologists.book strives :Serve quick reference guide - textbookAddress common epidemiological problems via task-centered examplesBe accessible settings limited technical support low internet-connectivity (downloadable version)Contain clear simple language, step--step instructions many commentsBe living document, growing adapting new best practicesWhat gaps book address?Many epidemiologists formal training R data science, transitioning R SAS, STATA, statistical software.R universe changes frequently - place best practice code catered toward common epidemiologist user.Epidemiologists often must read dozens online forum pages answers, epidemiology-oriented.epidemiologists work low internet-connectivity environments limited technical support.different R books?handbook written epidemiologists, epidemiologists. Examples taken lived experience local, national, academic, emergency settings. book also offered download-able format bring settings unreliable internet.\r\naddition core R concepts tools, book covers:epidemic curvestransmission chains epidemic modelingage sex pyramidsage sex standardizationprobabilistic matching records name similarity, age, sex, birthdate, etc.outbreak detection methodssurvey analysiscausal diagramssurvival analysisGIS basicsphylogenetic treesmissing data imputationautomated routine reports Rmarkdown","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “clipboard” “copy” icon copy codeSee “Resources” section page links trainingClick download offline versionIf use handbook suggestions, let us know SURVEY LINK!","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"Welcome - THIS IS A DRAFT","heading":"Edit or contribute","text":"suggestions want contribute content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome - THIS IS A DRAFT","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"Welcome - THIS IS A DRAFT","heading":"Contributors","text":"handbook collaborative team production. conceived, written, edited epidemiologists public health practitioners around world, drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), UNHCR, WFP, hospital systems, academic institutions.team members:Editor--Chief:Editorial core team: …(list)…Authors: …(list)…Reviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"Welcome - THIS IS A DRAFT","heading":"Funding and programmatic support","text":"Training Programs Epidemiology Public Health Interventions Network (TEPHINET)EPIET Alumni Network (EAN)","code":""},{"path":"index.html","id":"data-sources","chapter":"Welcome - THIS IS A DRAFT","heading":"Data sources","text":"linelist used much handbook adapted simulated Ebola outbreak linelist outbreaks package","code":""},{"path":"index.html","id":"inspiration","chapter":"Welcome - THIS IS A DRAFT","heading":"Inspiration","text":"“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R Markdown\r\nspecific tutorials vignettes credited relevant pages","code":""},{"path":"index.html","id":"image-credits","chapter":"Welcome - THIS IS A DRAFT","heading":"Image credits","text":"Logo: CDC Public Health Image library, R Graph Gallery2013 Yemen looking mosquito breeding sitesEbola virusSurvey RajasthanNetwork","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"Welcome - THIS IS A DRAFT","heading":"License and Terms of Use","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.book licensed Creative Commons license TBD…","code":""},{"path":"joining-matching-datasets.html","id":"joining-matching-datasets","chapter":"1 Joining & matching datasets","heading":"1 Joining & matching datasets","text":"","code":""},{"path":"joining-matching-datasets.html","id":"overview","chapter":"1 Joining & matching datasets","heading":"1.1 Overview","text":"page describes common “joins” also probabilistic matching dataframes.","code":""},{"path":"joining-matching-datasets.html","id":"preparation","chapter":"1 Joining & matching datasets","heading":"1.2 Preparation","text":"Load packagesBecause traditional joins (non-probabilistic) can specific, requiring exact string matches, may need cleaning datasets prior join (e.g. change spellings, change case lower upper).Load dataLoad data","code":"\npacman::p_load(\n  rio,            # import/export\n  here,           # relative filepaths\n  tidyverse,      # data management/viz\n  RecordLinkage,  # probabilistic matches\n  fastLink        # probabilistic matches\n)\nlinelist <- rio::import(\"linelist_cleaned.csv\")"},{"path":"joining-matching-datasets.html","id":"datasets","chapter":"1 Joining & matching datasets","heading":"1.2.1 Datasets","text":"joining examples, ’ll use following datasets:“miniature” version linelist, containing columns case_id, date_onset, hospital, first 10 rowsA separate dataframe named hosp_info, contains details hospital“miniature” linelistBelow miniature linelist used demonstration purposes:Hospital Information dataframeBelow separate dataframe additional information hospital.","code":"\nlinelist_mini <- linelist %>%                 # start with original linelist\n  select(case_id, date_onset, hospital) %>%   # select columns\n  head(10)                                    # keep only the first 10 rows"},{"path":"joining-matching-datasets.html","id":"pre-cleaning","chapter":"1 Joining & matching datasets","heading":"1.2.2 Pre-cleaning","text":"traditional (non-probabilistic) joins case-sensitive require exact string matches, clean-hosp_info dataset prior joins.Identify differencesWe need values hosp_name column hosp_info dataframe match values hospital column linelist dataframe.values linelist_mini:values hosp_info:Align matching valuesWe begin cleaning values hosp_name. use logic code values new column using case_when() (LINK). correct hospital names exist dataframes, leave others (see TRUE ~ hosp_name).CAUTION: Typically, one create new column (e.g. hosp_name_clean), ease demonstration show modification old columnWe now see hospital names appear dataframe aligned. hospitals hosp_info present linelist - deal later, join.need convert values UPPER lower case, use functions stringr, shown page characters/strings (LINK).str_to_upper()str_to_upper()str_to_title()","code":"\nunique(linelist_mini$hospital)## [1] \"Missing\"           \"Other\"             \"Military Hospital\" \"Central Hospital\"  \"Port Hospital\"\nunique(hosp_info$hosp_name)## [1] \"central hospital\" \"military\"         \"port\"             \"St. Mark's\"       \"ignace\"           \"sisters\"\nhosp_info <- hosp_info %>% \n  mutate(\n    hosp_name = case_when(\n      hosp_name == \"military\"          ~ \"Military Hospital\",\n      hosp_name == \"port\"              ~ \"Port Hospital\",\n      hosp_name == \"St. Mark's\"        ~ \"St. Mark's Maternity Hospital (SMMH)\",\n      hosp_name == \"central hospital\"  ~ \"Central Hospital\",\n      TRUE                             ~ hosp_name\n      )\n    )\nunique(hosp_info$hosp_name)## [1] \"Central Hospital\"                     \"Military Hospital\"                    \"Port Hospital\"                       \r\n## [4] \"St. Mark's Maternity Hospital (SMMH)\" \"ignace\"                               \"sisters\""},{"path":"joining-matching-datasets.html","id":"dplyr-joins","chapter":"1 Joining & matching datasets","heading":"1.3 dplyr joins","text":"dplyr offers several different joins. described, simple use cases. Many thanks https://github.com/gadenbuie moving images!","code":""},{"path":"joining-matching-datasets.html","id":"general-syntax","chapter":"1 Joining & matching datasets","heading":"1.3.1 General syntax","text":"General function structureAny join commands can run independently, like .object created, re-defined: dataframe 2 joined dataframe 1, basis matches “ID” column df1 “identifier” column df2. example uses left_join(), rows df2 match df1 dropped.join commands can also run within pipe chain. first dataframe df1 known dataframe passed pipes. example shown , context additional non-important mutate() filter() commands join.Join columns (=)must specify columns dataset values must match, using arguemnt =. options:Specify one column name (= \"ID\") - works exact column name present dataframes!Specify different names (= c(\"ID\" = \"Identifier\") - use column names different 2 dataframesSpecify multiple columns match (= c(\"ID\" = \"Identifier\", \"date_onset\" = \"Date_of_Onset\")) - require exact matches multiple columns rows join.CAUTION: Joins case-specific! Therefore useful convert values lowercase uppercase prior joining. See page characters/strings.","code":"\nobject <- left_join(df1, df2, by = c(\"ID\" = \"identifier\"))\nobject <- df1 %>%\n  filter(var1 == 2) %>%        # for demonstration only\n  mutate(lag = day + 7) %>%    # for demonstration only\n  left_join(df1, by = c(\"ID\" = \"identifier\"))  # join df2 to df1"},{"path":"joining-matching-datasets.html","id":"section","chapter":"1 Joining & matching datasets","heading":"1.3.2 ","text":"","code":""},{"path":"joining-matching-datasets.html","id":"add-columns-left-right-joins","chapter":"1 Joining & matching datasets","heading":"1.3.3 Add columns: left & right joins","text":"left right join commonly used add information dataframe - new information added rows already exist baseline dataframe.common joins epidemiological work - used add information one dataset another.order dataframes important.left join, first (left) dataframe listed baselineIn right join, second (right) dataframe listed baselineAll rows baseline dataframe kept. Information secondary dataframe joined baseline dataframe match via identifier column(s). addition:\r\n* Rows secondary dataframe match dropped.\r\n* many baseline rows match one row secondary dataframe (many--one), baseline information added matching baseline row.\r\n* baseline row matches multiple rows secondary dataframe (one--many), combinations given, meaning new rows may added returned dataframe!ExampleBelow output left_join() hosp_info (secondary dataframe) linelist_mini (baseline dataframe). Note following:original rows baseline dataframe linelist_mini keptOne original row linelist_mini duplicated (“Military Hospital”) matched two rows secondary dataframe, combinations returnedThe join identifier column secondary dataset (hosp_name) disappeared redundant identifier column primary dataset (hospital)baseline row match secondary row (e.g. hospital “” “Missing”), NA fills columns secondary dataframeRows secondary dataframe match baseline dataframe (“sisters” “ignace”) dropped“use right join, left join?”\r\nimportant ask “dataframe retain rows?” - use one baseline.two commands achieve output - 10 rows hosp_info joined linelist_mini baseline. However, column order differ based whether hosp_info arrives right (left join) arrives left (right join). order rows may also shift consequently.Also consider whether use-case within pipe chain (%>%). dataset pipes baseline, likely use left join add data .","code":"\nlinelist_mini %>% \n  left_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n# The two commands below achieve the same data, but with differently ordered rows and columns\nleft_join(linelist_mini, hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nright_join(hosp_info, linelist_mini, by = c(\"hosp_name\" = \"hospital\"))"},{"path":"joining-matching-datasets.html","id":"full-join","chapter":"1 Joining & matching datasets","heading":"1.3.4 Full join","text":"full join inclusive joins - returns rows dataframes.rows present one (match found), dataframe become wider NA values added fill-. Watch number columns rows carefully troubleshoot case-sensitivity exact string matches.Adjustment “baseline” (first) dataframe impact records returned, impact column order, row order, identifier column retained.ExampleBelow output full_join() hosp_info linelist_mini. Note following:baseline rows (linelist_mini) keptOne baseline row duplicated (“Military Hospital”) matched two secondary rows combinations returnedOnly identifier column baseline kept (hospital)NA fills baseline rows match secondary rows (hospital “” “Missing”), opposite (hosp_name “ignace” “sisters”)","code":"\nlinelist_mini %>% \n  full_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))"},{"path":"joining-matching-datasets.html","id":"inner-join","chapter":"1 Joining & matching datasets","heading":"1.3.5 Inner join","text":"inner join restrictive joins - returns rows matches across dataframes.\r\nmeans original dataset may reduce number rows. Adjustment “baseline” (first) dataframe impact records returned, impact column order, row order, identifier column retained.ExampleBelow output inner_join() linelist_mini (baseline) hosp_info (secondary). Note following:baseline rows kept (rows hospital “Missing” “” removed match secondary dataframeLikewise, secondary rows hosp_name “sisters” “ignace” removed match baseline dataframeOnly identifier column baseline kept (hospital)","code":"\nlinelist_mini %>% \n  inner_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nhosp_info %>% \n  inner_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))"},{"path":"joining-matching-datasets.html","id":"semi-join","chapter":"1 Joining & matching datasets","heading":"1.3.6 Semi join","text":"semi join “filtering join” uses another dataset add rows columns, perform filtering.\r\nsemi-join keeps observations dataframe 1 match dataframe 2 (add new columns duplicate rows multiple matches). Read filtering joins .code return 0 rows, two dataframes completely different - rows .","code":"\nhosp_info %>% \n  semi_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))"},{"path":"joining-matching-datasets.html","id":"anti-join","chapter":"1 Joining & matching datasets","heading":"1.3.7 Anti join","text":"anti join “filtering join” returns rows dataframe 1 match dataframe 2.Read filtering joins .Common scenarios anti-join include identifying records present another dataframe, troubleshooting spelling join (catching records matched), examining records excluded another join.right_join() left_join(), baseline dataframe (listed first) important. returned rows . Notice gif row non-baseline dataframe (purple 4) returned even though match.Simple exampleFor example, let’s find hosp_info hospitals cases present linelist_mini. list hosp_info first, baseline dataframe. two hospitals present linelist_mini returned.Example 2For another example, let us say ran inner_join() linelist_mini hosp_info. returns 8 original 11 linelist_mini records.review 3 linelist_mini records excluded inner join, can run anti-join linelist_mini baseline dataframe.see hosp_info records excluded inner join, also run anti-join hosp_info baseline dataframe.","code":"\nhosp_info %>% \n  anti_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))\nlinelist_mini %>% \n  inner_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nlinelist_mini %>% \n  anti_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))"},{"path":"joining-matching-datasets.html","id":"probabalistic-matching","chapter":"1 Joining & matching datasets","heading":"1.4 Probabalistic matching","text":"construction - TBDIf unique identifier common across datasets join , consider using probabilistic matching algorithm. find matches records based similarity (e.g. Jaro–Winkler string distance, numeric distance). simple example using package fastLink .Load packagesHere two small example datasets use demonstrate probabilistic matching:cases “baseline” dataframe containing patients awaiting test results.test_results records, contains column result, want add cases based probabilistic matching records.","code":"\npacman::p_load(\n               tidyverse,      # data manipulation and visualization\n               fastLink        # record matching\n               )"},{"path":"joining-matching-datasets.html","id":"probabilistic-matching","chapter":"1 Joining & matching datasets","heading":"1.4.1 Probabilistic matching","text":"fastLink() function fastLink package can used apply matching algorithm. useful functions:Define two dataframes dfA dfBGive column names used matching varnames = - columns must exist dfA dfB.Give columns names evaluated string “distance” stringdist.match =. must also varnames.Give names columns evaluated numeric matching numeric.match =. must also varnames.Missing values ignoredBy default, row either dataframe matched one row dataframe. want see evaluated matches, set dedupe.matches = FALSE. deduplication done using Winkler’s linear assignment solution (see function help details).Tip: split one date column three separate numeric columns using day(), month(), year() lubridate packageThe default threshold matches 0.94 (threshold.match =) can adjust higher lower. define threshold, consider higher thresholds yield false-negatives (rows match actually match) likewise lower threshold yield false-positive matches., data matched string distance across name district columns, numeric distance year, month, day birth. threshold 95% probability set.Review matchesThe object returned fastLink() class list, actually contains several dataframes within . One dataframes matches, contains links.matches printed, see two column vectors: pairs row numbers (also called “rownames”) dfA dfB representing best matches. row number dfA missing, match found dfB specified match threshold.Things note:Matches occurred despite slight differences name spelling dates birth:\r\n“Tony” matched “Anthony”\r\n“Maria” matched “Marialisa”\r\n“Betty” matched “Elizabeth”\r\n“Olivier Laurent De Bordeaux” matched “Oliver Laurent De Bordow” (missing date birth ignored)\r\n“Tony” matched “Anthony”“Maria” matched “Marialisa”“Betty” matched “Elizabeth”“Olivier Laurent De Bordeaux” matched “Oliver Laurent De Bordow” (missing date birth ignored)One row dfA (“Blessing Adebayo”) good match, row number 9 present matches.Join based probabilistic matchesTo use matches join results cases, one strategy :Use left_join() join matches cases (matching rownames cases “inds.” match)use another left_join() join results cases (matching newly-acquired “inds.b” cases rownames `results``)joins, clean three datasets:dfA dfB row numbers (“rowname”) converted proper columnBoth columns match converted class character, can joined character rownamesAs performed using code , resulting dataframe complete contain columns cases results. Many appended suffixes “.x” “.y”, column names otherwise duplicated.Alternatively, joining can use select() results contains rownames columns want add cases (e.g. column result).want subset either dataset rows matched, can use codes :, see rows match:","code":"\nfl_output <- fastLink::fastLink(\n  dfA = cases,\n  dfB = results,\n  varnames = c(\"gender\", \"first\", \"middle\", \"last\", \"yr\", \"mon\", \"day\", \"district\"),\n  stringdist.match = c(\"first\", \"middle\", \"last\", \"district\"),\n  numeric.match = c(\"yr\", \"mon\", \"day\"),\n  threshold.match = 0.95)## \r\n## ==================== \r\n## fastLink(): Fast Probabilistic Record Linkage\r\n## ==================== \r\n## \r\n## If you set return.all to FALSE, you will not be able to calculate a confusion table as a summary statistic.\r\n## Calculating matches for each variable.\r\n## Getting counts for parameter estimation.\r\n##     Parallelizing calculation using OpenMP. 1 threads out of 4 are used.\r\n## Running the EM algorithm.\r\n## Getting the indices of estimated matches.\r\n##     Parallelizing calculation using OpenMP. 1 threads out of 4 are used.\r\n## Deduping the estimated matches.\r\n## Getting the match patterns for each estimated match.\n# print matches\nmatches <- fl_output$matches\nmatches##   inds.a inds.b\r\n## 1      1      1\r\n## 2      2      2\r\n## 3      3      3\r\n## 4      4      4\r\n## 5      8      8\r\n## 6      7      9\r\n## 7      6     10\r\n## 8      5     12\n# Clean data prior to joining\n#############################\n\n# convert cases rownames to a column \ncases_clean <- cases %>% rownames_to_column()\n\n# convert test_results rownames to a column\nresults_clean <- results %>% rownames_to_column()  \n\n# convert all columns in matches dataset to character, so they can be joined to the rownames\nmatches_clean <- matches %>%\n  mutate(across(everything(), as.character))\n\n\n\n# Join matches to dfA, then add dfB\n###################################\n# column \"inds.b\" is added to dfA\ncomplete <- left_join(cases_clean, matches_clean, by = c(\"rowname\" = \"inds.a\"))\n\n# column(s) from dfB are added \ncomplete <- left_join(complete, results_clean, by = c(\"inds.b\" = \"rowname\"))\ncases_clean <- cases %>% rownames_to_column()\n\nresults_clean <- results %>%\n  rownames_to_column() %>% \n  select(rowname, result)    # select only certain columns \n\nmatches_clean <- matches %>%\n  mutate(across(everything(), as.character))\n\n# joins\ncomplete <- left_join(cases_clean, matches_clean, by = c(\"rowname\" = \"inds.a\"))\ncomplete <- left_join(complete, results_clean, by = c(\"inds.b\" = \"rowname\"))\ncases_matched <- cases[matches$inds.a,]  # Rows in cases that matched to a row in results\nresults_matched <- results[matches$inds.b,]  # Rows in results that matched to a row in cases\ncases_not_matched <- cases[!rownames(cases) %in% matches$inds.a,]  # Rows in cases that did NOT match to a row in results\nresults_not_matched <- results[!rownames(results) %in% matches$inds.b,]  # Rows in results that did NOT match to a row in cases"},{"path":"joining-matching-datasets.html","id":"probabilistic-deduplication","chapter":"1 Joining & matching datasets","heading":"1.4.2 Probabilistic deduplication","text":"Probabilistic matching can used deduplicate dataset well. See page deduplication many methods deduplication.begin cases dataset, 2 rows likely duplicates (100% duplicates): “Tony” “Anthony”, “Marialisa Rodrigues” “Maria Rodriguez”.run fastLink() command , dataframe compared . two datasets identical, function assumes want deduplicate.fl.must class fastLink.dedupe, words, result either fastLink() matchesLink().Now, can review potential duplicates getMatches(). Provide dataset dfA dfB, provide output fastLink() function fl..See left-column, indicates duplicate IDs - final two rows identified likely duplicates rows 2 3.return rows likely duplicates:inspect whole rows likely duplicates, put row number command:","code":"\n## Run fastLink on the same dataset\ndedupe_output <- fastLink(\n  dfA = cases_dup,\n  dfB = cases_dup,\n  varnames = c(\"gender\", \"first\", \"middle\", \"last\", \"yr\", \"mon\", \"day\", \"district\")\n)## \r\n## ==================== \r\n## fastLink(): Fast Probabilistic Record Linkage\r\n## ==================== \r\n## \r\n## If you set return.all to FALSE, you will not be able to calculate a confusion table as a summary statistic.\r\n## dfA and dfB are identical, assuming deduplication of a single data set.\r\n## Setting return.all to FALSE.\r\n## \r\n## Calculating matches for each variable.\r\n## Getting counts for parameter estimation.\r\n##     Parallelizing calculation using OpenMP. 1 threads out of 4 are used.\r\n## Running the EM algorithm.\r\n## Getting the indices of estimated matches.\r\n##     Parallelizing calculation using OpenMP. 1 threads out of 4 are used.\r\n## Calculating the posterior for each pair of matched observations.\r\n## Getting the match patterns for each estimated match.\n## Run getMatches\ncases_dedupe <- getMatches(\n  dfA = cases_dup,\n  dfB = cases_dup,\n  fl.out = dedupe_output)\ncases_dedupe %>% \n  count(dedupe.ids) %>% \n  filter(n > 1)##   dedupe.ids n\r\n## 1          2 2\r\n## 2          3 2\n# displays row 2 and all likely duplicates of it\ncases_dedupe[cases_dedupe$dedupe.ids == 2,]   ##    gender   first middle  last   yr mon day district dedupe.ids\r\n## 2       M Anthony     B. Smith 1970   9  19    River          2\r\n## 10      M    Tony     B. Smith 1970   9  19    River          2"},{"path":"joining-matching-datasets.html","id":"resources","chapter":"1 Joining & matching datasets","heading":"1.5 Resources","text":"dplyr page joinsSee vignette fastLink package’s Github page\r\nPublication describing methodolgy fastLinkPublication describing RecordLinkage package","code":""}]
