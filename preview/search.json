[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-for-applied-epidemiology-and-public-health","chapter":"","heading":"R for applied epidemiology and public health","text":"handbook strives :Serve quick ‘epi’ R code reference manualProvide task-centered examples addressing common epidemiological problemsAssist epidemiologists transitioning RBe accessible settings low internet-connectivity via offline version \r\nWritten epis, episWe applied epidemiologists around world, writing spare time offer resource community. encouragement feedback welcome:Structured feedback formEmail epiRhandbook@gmail.com tweet @epiRhandbookSubmit issues Github repository","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page material“Follow-along” [downloading example data][Download handbook data]Offline versionSee instructions download offline version [Download handbook data] page.LanguagesWe want translate languages English. can help, please contact us.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world drawing upon experience organizations including local, state, provincial, national health agencies, World Health Organization (), Médecins Sans Frontières / Doctors without Borders (MSF), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinReviewers: Pat Keating, Annick Lenglet, Margot Charette, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook received supportive funding via COVID-19 emergency capacity-building grant TEPHINET, global network Field Epidemiology Training Programs (FETPs).Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.Special thanks Médecins Sans Frontières (MSF) Operational Centre Amsterdam (OCA) support development handbook.publication supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Academic courses epidemiologist training programs welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"tables-for-presentation.html","id":"tables-for-presentation","chapter":"1 Tables for presentation","heading":"1 Tables for presentation","text":"HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22This page demonstrates convert summary data frames presentation-ready tables flextable package. tables can inserted powerpoint slides, HTML pages, PDF Word documents, etc.Understand using flextable, must create summary table data frame. Use methods [Descriptive tables] [Pivoting data] pages tabulations, cross-tabulations, pivoting, calculating descriptive statistics. resulting data frame can passed flextable display formatting.many R packages can used craft tables presentation - chose highlight flextable page. example using knitr package kable() function can found [Contact Tracing] page. Likewise, DT package highlighted page [Dashboards Shiny]. Others GT huxtable mentione [Suggested packages] page.","code":""},{"path":"tables-for-presentation.html","id":"preparation","chapter":"1 Tables for presentation","heading":"1.1 Preparation","text":"","code":""},{"path":"tables-for-presentation.html","id":"load-packages","chapter":"1 Tables for presentation","heading":"Load packages","text":"Install load flextable. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,            # import/export\n  here,           # file pathways\n  flextable,      # make HTML tables \n  officer,        # helper functions for tables\n  tidyverse)      # data management, summary, and visualization"},{"path":"tables-for-presentation.html","id":"import-data","chapter":"1 Tables for presentation","heading":"Import data","text":"begin, import cleaned linelist cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). Import data import() function rio package (handles many file types like .xlsx, .csv, .rds - see [Import export] page details).first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.rds\")"},{"path":"tables-for-presentation.html","id":"prepare-table","chapter":"1 Tables for presentation","heading":"Prepare table","text":"beginning use flextable need create table data frame. See page [Descriptive tables] [Pivoting data] learn create data frame using packages janitor dplyr. must arrange content rows columns want displayed. , data frame passed flextable display colors, headers, fonts, etc.example [Descriptive tables] page converting case linelist data frame summarises patient outcomes CT values hospital, Totals row bottom. output saved table.","code":"\ntable <- linelist %>% \n  \n  # Get summary values per hospital-outcome group\n  ###############################################\n  group_by(hospital, outcome) %>%                      # Group data\n  summarise(                                           # Create new summary columns of indicators of interest\n    N = n(),                                            # Number of rows per hospital-outcome group     \n    ct_value = median(ct_blood, na.rm=T)) %>%           # median CT value per group\n  \n  # add totals\n  ############\n  bind_rows(                                           # Bind the previous table with this mini-table of totals\n    linelist %>% \n      filter(!is.na(outcome) & hospital != \"Missing\") %>%\n      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    \n      summarise(\n        N = n(),                                       # Number of rows for whole dataset     \n        ct_value = median(ct_blood, na.rm=T))) %>%     # Median CT for whole dataset\n  \n  # Pivot wider and format\n  ########################\n  mutate(hospital = replace_na(hospital, \"Total\")) %>% \n  pivot_wider(                                         # Pivot from long to wide\n    values_from = c(ct_value, N),                       # new values are from ct and count columns\n    names_from = outcome) %>%                           # new column names are from outcomes\n  mutate(                                              # Add new columns\n    N_Known = N_Death + N_Recover,                               # number with known outcome\n    Pct_Death = scales::percent(N_Death / N_Known, 0.1),         # percent cases who died (to 1 decimal)\n    Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>% # percent who recovered (to 1 decimal)\n  select(                                              # Re-order columns\n    hospital, N_Known,                                   # Intro columns\n    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns\n    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns\n  arrange(N_Known)                                    # Arrange rows from lowest to highest (Total row at bottom)\n\ntable  # print## # A tibble: 7 x 8\r\n## # Groups:   hospital [7]\r\n##   hospital                             N_Known N_Recover Pct_Recover ct_value_Recover N_Death Pct_Death ct_value_Death\r\n##   <chr>                                  <int>     <int> <chr>                  <dbl>   <int> <chr>              <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMMH)     325       126 38.8%                     22     199 61.2%                 22\r\n## 2 Central Hospital                         358       165 46.1%                     22     193 53.9%                 22\r\n## 3 Other                                    685       290 42.3%                     21     395 57.7%                 22\r\n## 4 Military Hospital                        708       309 43.6%                     22     399 56.4%                 21\r\n## 5 Missing                                 1125       514 45.7%                     21     611 54.3%                 21\r\n## 6 Port Hospital                           1364       579 42.4%                     21     785 57.6%                 22\r\n## 7 Total                                   3440      1469 42.7%                     22    1971 57.3%                 22"},{"path":"tables-for-presentation.html","id":"basic-flextable","chapter":"1 Tables for presentation","heading":"1.2 Basic flextable","text":"","code":""},{"path":"tables-for-presentation.html","id":"create-a-flextable","chapter":"1 Tables for presentation","heading":"Create a flextable","text":"create manage flextable objects, first pass data frame flextable() function. save result my_table.hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22After , can progressively pipe my_table object flextable formatting functions.page sake clarity save table intermediate steps my_table, adding flextable functions bit--bit. want see code beginning end written one chunk, visit code together section .general syntax line flextable code follows:function(table, = X, j = X, part = \"X\"), :\r\n‘function’ can one many different functions, width() determine column widths, bg() set background colours, align() set whether text centre/right/left aligned, .\r\ntable = name data frame, although need stated data frame piped function.\r\npart = refers part table function applied . E.g. “header”, “body” “”.\r\n= specifies row apply function , ‘X’ row number. multiple rows, e.g. first third rows, one can specify: = c(1:3). Note ‘body’ selected, first row starts underneath header section.\r\nj = specifies column apply function , ‘x’ column number name. multiple columns, e.g. fifth sixth, one can specify: j = c(5,6).\r\n‘function’ can one many different functions, width() determine column widths, bg() set background colours, align() set whether text centre/right/left aligned, .table = name data frame, although need stated data frame piped function.part = refers part table function applied . E.g. “header”, “body” “”.= specifies row apply function , ‘X’ row number. multiple rows, e.g. first third rows, one can specify: = c(1:3). Note ‘body’ selected, first row starts underneath header section.j = specifies column apply function , ‘x’ column number name. multiple columns, e.g. fifth sixth, one can specify: j = c(5,6).can find complete list flextable formatting function review documentation entering ?flextable.","code":"\nmy_table <- flextable(table) \nmy_table"},{"path":"tables-for-presentation.html","id":"column-width","chapter":"1 Tables for presentation","heading":"Column width","text":"can use autofit() function, nicely stretches table cell one row text. function qflextable() convenient shorthand flextable() autofit().hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22However, might always appropriate, especially long values within cells, meaning table might fit page.Instead, can specify widths width() function. can take playing around know width value put. example , specify different widths column 1, column 2, columns 4 8.hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table %>% autofit()\nmy_table <- my_table %>% \n  width(j=1, width = 2.7) %>% \n  width(j=2, width = 1.5) %>% \n  width(j=c(4,5,7,8), width = 1)\n\nmy_table"},{"path":"tables-for-presentation.html","id":"column-headers","chapter":"1 Tables for presentation","heading":"Column headers","text":"want clearer headers easier interpretation table contents.table, want add second header layer columns covering subgroups can grouped together. add_header_row() function top = TRUE. provide new name column values =, leaving empty values \"\" columns know merge together later.also rename header names now-second header separate set_header_labels() command.Finally, “combine” certain column headers top header use merge_at() merge column headers top header row.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table <- my_table %>% \n  \n  add_header_row(\n    top = TRUE,                # New header goes on top of existing header row\n    values = c(\"Hospital\",     # Header values for each column below\n               \"Total cases with known outcome\", \n               \"Recovered\",    # This will be the top-level header for this and two next columns\n               \"\",\n               \"\",\n               \"Died\",         # This will be the top-level header for this and two next columns\n               \"\",             # Leave blank, as it will be merged with \"Died\"\n               \"\")) %>% \n    \n  set_header_labels(         # Rename the columns in original header row\n      hospital = \"\", \n      N_Known = \"\",                  \n      N_Recover = \"Total\",\n      Pct_Recover = \"% of cases\",\n      ct_value_Recover = \"Median CT values\",\n      N_Death = \"Total\",\n      Pct_Death = \"% of cases\",\n      ct_value_Death = \"Median CT values\")  %>% \n  \n  merge_at(i = 1, j = 3:5, part = \"header\") %>% # Horizontally merge columns 3 to 5 in new header row\n  merge_at(i = 1, j = 6:8, part = \"header\")     # Horizontally merge columns 6 to 8 in new header row\n\nmy_table  # print"},{"path":"tables-for-presentation.html","id":"borders-and-background","chapter":"1 Tables for presentation","heading":"Borders and background","text":"can adjust borders, internal lines, etc. various flextable functions. often easier start removing existing borders border_remove()., can apply default border themes passing table theme_box(), theme_booktabs(), theme_alafoli().can add vertical horizontal lines variety functions. hline() vline() add lines specified row column, respectively. Within , must specify part = either “”, “body”, “header”. vertical lines, specify column j =, horizontal lines row =. functions like vline_right(), vline_left(), hline_top(), hline_bottom() add lines outsides .functions, actual line style must specified border = must output separate command using fp_border() function officer package. function helps define width color line. can define table commands, shown .HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\n# define style for border line\nborder_style = officer::fp_border(color=\"black\", width=1)\n\n# add border lines to table\nmy_table <- my_table %>% \n\n  # Remove all existing borders\n  border_remove() %>%  \n  \n  # add horizontal lines via a pre-determined theme setting\n  theme_booktabs() %>% \n  \n  # add vertical lines to separate Recovered and Died sections\n  vline(part = \"all\", j = 2, border = border_style) %>%   # at column 2 \n  vline(part = \"all\", j = 5, border = border_style)       # at column 5\n\nmy_table"},{"path":"tables-for-presentation.html","id":"font-and-alignment","chapter":"1 Tables for presentation","heading":"Font and alignment","text":"centre-align columns aside left-column hospital names, using align() function flextable.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Additionally, can increase header font size change bold. can also change total row bold.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22We can ensure proportion columns display one decimal place using function colformat_num(). Note also done data management stage round() function.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table <- my_table %>% \n   flextable::align(align = \"center\", j = c(2:8), part = \"all\") \nmy_table\nmy_table <-  my_table %>%  \n  fontsize(i = 1, size = 12, part = \"header\") %>%   # adjust font size of header\n  bold(i = 1, bold = TRUE, part = \"header\") %>%     # adjust bold face of header\n  bold(i = 7, bold = TRUE, part = \"body\")           # adjust bold face of total row (row 7 of body)\n\nmy_table\nmy_table <- colformat_num(my_table, j = c(4,7), digits = 1)\nmy_table"},{"path":"tables-for-presentation.html","id":"merge-cells","chapter":"1 Tables for presentation","heading":"Merge cells","text":"Just merge cells horizontally header row, can also merge cells vertically using merge_at() specifying rows () column (j). merge “Hospital” “Total cases known outcome” values vertically give space.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table <- my_table %>% \n  merge_at(i = 1:2, j = 1, part = \"header\") %>% \n  merge_at(i = 1:2, j = 2, part = \"header\")\n\nmy_table"},{"path":"tables-for-presentation.html","id":"background-color","chapter":"1 Tables for presentation","heading":"Background color","text":"distinguish content table headers, may want add additional formatting. e.g. changing background color. example change table body gray.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table <- my_table %>% \n    bg(part = \"body\", bg = \"gray95\")  \n\nmy_table "},{"path":"tables-for-presentation.html","id":"conditional-formatting","chapter":"1 Tables for presentation","heading":"1.3 Conditional formatting","text":"can highlight values column meet certain rule, e.g. 55% cases died. Simply put criteria = j = argument, preceded tilde ~. Reference column data frame, display heading values.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Or, can highlight entire row meeting certain criterion, hospital interest. just remove column (j) specification criteria apply columns.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table %>% \n  bg(j = 7, i = ~ Pct_Death >= 55, part = \"body\", bg = \"red\") \nmy_table %>% \n  bg(., i= ~ hospital == \"Military Hospital\", part = \"body\", bg = \"#91c293\") "},{"path":"tables-for-presentation.html","id":"tbl_pres_all","chapter":"1 Tables for presentation","heading":"1.4 All code together","text":"show code sections together.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nborder_style = officer::fp_border(color=\"black\", width=1)\n\npacman::p_load(\n  rio,            # import/export\n  here,           # file pathways\n  flextable,      # make HTML tables \n  officer,        # helper functions for tables\n  tidyverse)      # data management, summary, and visualization\n\ntable <- linelist %>% \n\n  # Get summary values per hospital-outcome group\n  ###############################################\n  group_by(hospital, outcome) %>%                      # Group data\n  summarise(                                           # Create new summary columns of indicators of interest\n    N = n(),                                            # Number of rows per hospital-outcome group     \n    ct_value = median(ct_blood, na.rm=T)) %>%           # median CT value per group\n  \n  # add totals\n  ############\n  bind_rows(                                           # Bind the previous table with this mini-table of totals\n    linelist %>% \n      filter(!is.na(outcome) & hospital != \"Missing\") %>%\n      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    \n      summarise(\n        N = n(),                                       # Number of rows for whole dataset     \n        ct_value = median(ct_blood, na.rm=T))) %>%     # Median CT for whole dataset\n  \n  # Pivot wider and format\n  ########################\n  mutate(hospital = replace_na(hospital, \"Total\")) %>% \n  pivot_wider(                                         # Pivot from long to wide\n    values_from = c(ct_value, N),                       # new values are from ct and count columns\n    names_from = outcome) %>%                           # new column names are from outcomes\n  mutate(                                              # Add new columns\n    N_Known = N_Death + N_Recover,                               # number with known outcome\n    Pct_Death = scales::percent(N_Death / N_Known, 0.1),         # percent cases who died (to 1 decimal)\n    Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>% # percent who recovered (to 1 decimal)\n  select(                                              # Re-order columns\n    hospital, N_Known,                                   # Intro columns\n    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns\n    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns\n  arrange(N_Known) %>%                                 # Arrange rows from lowest to highest (Total row at bottom)\n\n  # formatting\n  ############\n  flextable() %>%              # table is piped in from above\n  add_header_row(\n    top = TRUE,                # New header goes on top of existing header row\n    values = c(\"Hospital\",     # Header values for each column below\n               \"Total cases with known outcome\", \n               \"Recovered\",    # This will be the top-level header for this and two next columns\n               \"\",\n               \"\",\n               \"Died\",         # This will be the top-level header for this and two next columns\n               \"\",             # Leave blank, as it will be merged with \"Died\"\n               \"\")) %>% \n    set_header_labels(         # Rename the columns in original header row\n      hospital = \"\", \n      N_Known = \"\",                  \n      N_Recover = \"Total\",\n      Pct_Recover = \"% of cases\",\n      ct_value_Recover = \"Median CT values\",\n      N_Death = \"Total\",\n      Pct_Death = \"% of cases\",\n      ct_value_Death = \"Median CT values\")  %>% \n  merge_at(i = 1, j = 3:5, part = \"header\") %>% # Horizontally merge columns 3 to 5 in new header row\n  merge_at(i = 1, j = 6:8, part = \"header\") %>%  \n  border_remove() %>%  \n  theme_booktabs() %>% \n  vline(part = \"all\", j = 2, border = border_style) %>%   # at column 2 \n  vline(part = \"all\", j = 5, border = border_style) %>%   # at column 5\n  merge_at(i = 1:2, j = 1, part = \"header\") %>% \n  merge_at(i = 1:2, j = 2, part = \"header\") %>% \n  width(j=1, width = 2.7) %>% \n  width(j=2, width = 1.5) %>% \n  width(j=c(4,5,7,8), width = 1) %>% \n  flextable::align(., align = \"center\", j = c(2:8), part = \"all\") %>% \n  bg(., part = \"body\", bg = \"gray95\")  %>% \n  bg(., j=c(1:8), i= ~ hospital == \"Military Hospital\", part = \"body\", bg = \"#91c293\") %>% \n  colformat_num(., j = c(4,7), digits = 1) %>%\n  bold(i = 1, bold = TRUE, part = \"header\") %>% \n  bold(i = 7, bold = TRUE, part = \"body\")## `summarise()` has grouped output by 'hospital'. You can override using the `.groups` argument.\ntable"},{"path":"tables-for-presentation.html","id":"saving-your-table","chapter":"1 Tables for presentation","heading":"1.5 Saving your table","text":"different ways table can integrated output.","code":""},{"path":"tables-for-presentation.html","id":"save-single-table","chapter":"1 Tables for presentation","heading":"Save single table","text":"can export tables Word, PowerPoint HTML image (PNG) files. , use one following functions:save_as_docx()save_as_pptx()save_as_image()save_as_html()instance save table word document. Note syntax first argument - can just provide name flextable object e.g. my_table, can give “name” shown (name “table”). name, appear title table Word. also demonstrate code save PNG image.Note packages webshot webshot2 required save flextable image. Images may come transparent backgrounds.want view ‘live’ version flextable output intended document format, use print() specify one preview =. document “pop-” open computer specified software program, saved. can useful check table fits one page/slide can quickly copy another document, can use print method argument preview set “pptx” “docx”.","code":"\n# Edit the 'my table' as needed for the title of table.  \nsave_as_docx(\"my table\" = my_table, path = \"file.docx\")\n\nsave_as_image(my_table, path = \"file.png\")\nprint(my_table, preview = \"docx\") # Word document example\nprint(my_table, preview = \"pptx\") # Powerpoint example"},{"path":"tables-for-presentation.html","id":"print-table-in-r-markdown","chapter":"1 Tables for presentation","heading":"Print table in R markdown","text":"table can integrated automated document, R markdown output, table object called within R markdown chunk. means table can updated part report data might change, numbers can refreshed.See detail [Reports R Markdown] page handbook.","code":""},{"path":"tables-for-presentation.html","id":"resources","chapter":"1 Tables for presentation","heading":"1.6 Resources","text":"full flextable book : https://ardata-fr.github.io/flextable-book/\r\nGithub site \r\nmanual flextable functions can found hereA gallery beautiful example flextable tables code can accessed ","code":""}]
