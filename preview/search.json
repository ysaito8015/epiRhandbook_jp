[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download book data]Offline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link , email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"handbook produced collaboration epidemiologists around world, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Wen Lin, Sara Hollis,Reviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybuke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Adam Vaughan, Lionel Monteiro, Joao Muianga.","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"descriptive-tables.html","id":"descriptive-tables","chapter":"1 Descriptive tables","heading":"1 Descriptive tables","text":"page demonstrates use janitor, dplyr, gtsummary, base R produce tables descriptive statistics. tools advantages disadvantages areas code simplicity, accessibility outputs, quality printed outputs. Use page decide approach works scenario.","code":""},{"path":"descriptive-tables.html","id":"preparation","chapter":"1 Descriptive tables","heading":"1.1 Preparation","text":"","code":""},{"path":"descriptive-tables.html","id":"load-packages","chapter":"1 Descriptive tables","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,          # File import\n  here,         # File locator\n  skimr,        # get overview of data\n  tidyverse,    # data management + ggplot2 graphics, \n  gtsummary,    # summary statistics and tests\n  janitor,      # adding totals and percents to tables\n  scales,       # easily convert proportions to percents  \n  flextable     # converting tables to HTML\n  )"},{"path":"descriptive-tables.html","id":"import-data","chapter":"1 Descriptive tables","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"descriptive-tables.html","id":"browse-data","chapter":"1 Descriptive tables","heading":"1.2 Browse data","text":"","code":""},{"path":"descriptive-tables.html","id":"skimr-package","chapter":"1 Descriptive tables","heading":"skimr package","text":"Using skimr package can get detailed aesthetically pleasing overview variables dataset. Read skimr github page., function skim() applied entire linelist data frame. overview data frame summary every column (class) produced.Table 1.1: Data summaryVariable type: characterVariable type: DateVariable type: factorVariable type: numericYou can also use summary() function, base R, get information entire dataset, output can difficult read using skimr. Therefore output shown , conserve page space.","code":"\n## get information about each variable in a dataset \nskim(linelist)\n## get information about each column in a dataset \nsummary(linelist)"},{"path":"descriptive-tables.html","id":"summary-statistics","chapter":"1 Descriptive tables","heading":"Summary statistics","text":"can use base R functions return summary statistics numeric column. can return useful summary statistics numeric column using summary(), . Note data frame name must also specified shown .can access save one specific part index brackets [ ]:can return individual statistics base R functions like max(), min(), median(), mean(), quantile(), sd(), range(). See [R basics] page complete list.CAUTION: data contain missing values, R wants know return NA unless specify mathematical functions want R ignore missing values, via argument na.rm = TRUE.","code":"\nsummary(linelist$age_years)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##    0.00    6.00   13.00   16.02   23.00   84.00      86\nsummary(linelist$age_years)[[2]]            # return only the 2nd element## [1] 6\n# summary(linelist$age_years)[[\"1st Qu.\"]]  # equivalent, alternative to above by element name"},{"path":"descriptive-tables.html","id":"descriptive-tables-1","chapter":"1 Descriptive tables","heading":"1.3 Descriptive tables","text":"several choices producing tabulation cross-tabulation summary tables. factors consider include code simplicity ease, desired output (printed R console, pretty HTML), can data afterward. Consider points choose tool situation.Use tabyl() janitor produce “adorn” tabulations cross-tabulations.\r\nCons: requires post-processing (e.g flextable) publication ready tables. accept multiple variables (need use purrr iterate)\r\nCons: requires post-processing (e.g flextable) publication ready tables. accept multiple variables (need use purrr iterate)Use summarise() count() dplyr calculating complex statistics preparing data ggplot()\r\nCons: similar requires even manipulation\r\nCons: similar requires even manipulationUse tbl_summary() gtsummary produce detailed publication-ready tables\r\nCons: missings automatically included percentage calculations. use plotting need extract tibble list output.\r\nCons: missings automatically included percentage calculations. use plotting need extract tibble list output.Use table() base R access packages\r\nCons: requires manipulation post-processing\r\nCons: requires manipulation post-processing","code":""},{"path":"descriptive-tables.html","id":"janitor-package","chapter":"1 Descriptive tables","heading":"1.4 janitor package","text":"janitor packages offers tabyl() function produce tabulations cross-tabulations, can “adorned” modified helper functions display percents, proportions, counts, etc., pipe linelist data frame janitor functions print result. desired, can also save resulting tables assignment operator <-.","code":""},{"path":"descriptive-tables.html","id":"simple-tabyl","chapter":"1 Descriptive tables","heading":"Simple tabyl","text":"default use tabyl() specific column produces unique values, counts, column-wise “percents” (actually proportions). proportions may many digits. can adjust number decimals adorn_rounding() described .can see , missing values display row labeled <NA>. can suppress show_na = FALSE. missing values, row appear. missing values, proportions given raw (denominator inclusive NA counts) “valid” (denominator excludes NA counts).column class Factor certain levels present data, levels still appear table. can suppress feature specifying show_missing_levels = FALSE.","code":"\nlinelist %>% tabyl(age_cat)##  age_cat    n     percent valid_percent\r\n##      0-4 1095 0.185971467   0.188728025\r\n##      5-9 1095 0.185971467   0.188728025\r\n##    10-14  941 0.159816576   0.162185453\r\n##    15-19  743 0.126188859   0.128059290\r\n##    20-29 1073 0.182235054   0.184936229\r\n##    30-49  754 0.128057065   0.129955188\r\n##    50-69   95 0.016134511   0.016373664\r\n##      70+    6 0.001019022   0.001034126\r\n##     <NA>   86 0.014605978            NA"},{"path":"descriptive-tables.html","id":"cross-tabulation","chapter":"1 Descriptive tables","heading":"Cross-tabulation","text":"Cross-tabulation counts achieved adding one additional columns within tabyl(). Note counts returned - proportions percents can added additional steps shown .","code":"\nlinelist %>% tabyl(age_cat, gender)##  age_cat   f   m NA_\r\n##      0-4 640 416  39\r\n##      5-9 641 412  42\r\n##    10-14 518 383  40\r\n##    15-19 359 364  20\r\n##    20-29 468 575  30\r\n##    30-49 179 557  18\r\n##    50-69   2  91   2\r\n##      70+   0   5   1\r\n##     <NA>   0   0  86"},{"path":"descriptive-tables.html","id":"adorning-the-tabyl","chapter":"1 Descriptive tables","heading":"“Adorning” the tabyl","text":"Use janitor’s “adorn” functions add totals convert proportions, percents, otherwise adjust display. Often, pipe tabyl multiple functions.conscious order apply functions. examples.simple one-way table percents instead default proportions.cross-tabulation total row row percents.cross-tabulation adjusted counts percents displayed.","code":"\nlinelist %>%               # case linelist\n  tabyl(age_cat) %>%       # tabulate counts and proportions by age category\n  adorn_pct_formatting()   # convert proportions to percents##  age_cat    n percent valid_percent\r\n##      0-4 1095   18.6%         18.9%\r\n##      5-9 1095   18.6%         18.9%\r\n##    10-14  941   16.0%         16.2%\r\n##    15-19  743   12.6%         12.8%\r\n##    20-29 1073   18.2%         18.5%\r\n##    30-49  754   12.8%         13.0%\r\n##    50-69   95    1.6%          1.6%\r\n##      70+    6    0.1%          0.1%\r\n##     <NA>   86    1.5%             -\nlinelist %>%                                  \n  tabyl(age_cat, gender) %>%                  # counts by age and gender\n  adorn_totals(where = \"row\") %>%             # add total row\n  adorn_percentages(denominator = \"row\") %>%  # convert counts to proportions\n  adorn_pct_formatting(digits = 1)            # convert proportions to percents##  age_cat     f     m    NA_\r\n##      0-4 58.4% 38.0%   3.6%\r\n##      5-9 58.5% 37.6%   3.8%\r\n##    10-14 55.0% 40.7%   4.3%\r\n##    15-19 48.3% 49.0%   2.7%\r\n##    20-29 43.6% 53.6%   2.8%\r\n##    30-49 23.7% 73.9%   2.4%\r\n##    50-69  2.1% 95.8%   2.1%\r\n##      70+  0.0% 83.3%  16.7%\r\n##     <NA>  0.0%  0.0% 100.0%\r\n##    Total 47.7% 47.6%   4.7%\nlinelist %>%                                  # case linelist\n  tabyl(age_cat, gender) %>%                  # cross-tabulate counts\n  adorn_totals(where = \"row\") %>%             # add a total row\n  adorn_percentages(denominator = \"col\") %>%  # convert to proportions\n  adorn_pct_formatting() %>%                  # convert to percents\n  # adorn_ns(position = \"front\") %>%            # display as: \"count (percent)\"\n  adorn_title(                                # adjust titles\n    row_name = \"Age Category\",\n    col_name = \"Gender\")##               Gender              \r\n##  Age Category      f      m    NA_\r\n##           0-4  22.8%  14.8%  14.0%\r\n##           5-9  22.8%  14.7%  15.1%\r\n##         10-14  18.5%  13.7%  14.4%\r\n##         15-19  12.8%  13.0%   7.2%\r\n##         20-29  16.7%  20.5%  10.8%\r\n##         30-49   6.4%  19.9%   6.5%\r\n##         50-69   0.1%   3.2%   0.7%\r\n##           70+   0.0%   0.2%   0.4%\r\n##          <NA>   0.0%   0.0%  30.9%\r\n##         Total 100.0% 100.0% 100.0%"},{"path":"descriptive-tables.html","id":"printing-the-tabyl","chapter":"1 Descriptive tables","heading":"Printing the tabyl","text":"default, tabyl print raw R console. Alternatively, can pass tabyl flextable package print HTML RStudio Viewer. Note using adorn_titles(), must specify placement = \"combined\" order print manner.Age Category/GenderfmNA_Total0-4640 (22.8%)416 (14.8%)39 (14.0%)1095 (18.6%)5-9641 (22.8%)412 (14.7%)42 (15.1%)1095 (18.6%)10-14518 (18.5%)383 (13.7%)40 (14.4%) 941 (16.0%)15-19359 (12.8%)364 (13.0%)20  (7.2%) 743 (12.6%)20-29468 (16.7%)575 (20.5%)30 (10.8%)1073 (18.2%)30-49179  (6.4%)557 (19.9%)18  (6.5%) 754 (12.8%)50-69  2  (0.1%) 91  (3.2%) 2  (0.7%)  95  (1.6%)70+  0  (0.0%)  5  (0.2%) 1  (0.4%)   6  (0.1%)  0  (0.0%)  0  (0.0%)86 (30.9%)  86  (1.5%)","code":"\nlinelist %>%\n  tabyl(age_cat, gender) %>% \n  adorn_totals(where = \"col\") %>% \n  adorn_percentages(denominator = \"col\") %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\") %>% \n  adorn_title(\n    row_name = \"Age Category\",\n    col_name = \"Gender\",\n    placement = \"combined\") %>% # this is necessary to print to HTML \n  flextable::flextable() %>%    # convert to HTML\n  flextable::autofit()          # format to one line per row "},{"path":"descriptive-tables.html","id":"use-on-other-tables","chapter":"1 Descriptive tables","heading":"Use on other tables","text":"can use janitor’s adorn_*() functions tables, created summarise(), count(), table().","code":""},{"path":"descriptive-tables.html","id":"saving-the-tabyl","chapter":"1 Descriptive tables","heading":"Saving the tabyl","text":"convert table HTML package like flextable, can save functions save_as_html(), save_as_word(), save_as_ppt(), save_as_image(), discussed extensively Tables presentation page. , table saved Word document, can hand-edited.","code":"\nlinelist %>%\n  tabyl(age_cat, gender) %>% \n  adorn_totals(where = \"col\") %>% \n  adorn_percentages(denominator = \"col\") %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\") %>% \n  adorn_title(\n    row_name = \"Age Category\",\n    col_name = \"Gender\",\n    placement = \"combined\") %>% \n  flextable::flextable() %>%                     # convert to HTML flextable\n  flextable::autofit() %>%                       # ensure only one line per row\n  flextable::save_as_docx(path = \"tabyl.docx\")   # save as Word document"},{"path":"descriptive-tables.html","id":"statistics","chapter":"1 Descriptive tables","heading":"Statistics","text":"can apply statistical tests tabyls, like chisq.test() fisher.test() stats package, shown . Note missing values allowed excluded tabyl show_na = FALSE.","code":"\nage_by_outcome <- linelist %>% \n  tabyl(age_cat, outcome, show_na = FALSE) \n\nchisq.test(age_by_outcome)## \r\n##  Pearson's Chi-squared test\r\n## \r\n## data:  age_by_outcome\r\n## X-squared = 6.4931, df = 7, p-value = 0.4835"},{"path":"descriptive-tables.html","id":"other-tips","chapter":"1 Descriptive tables","heading":"Other tips","text":"Include argument na.rm = TRUE exclude missing values calculations.applying adorn_*() helper functions tables created tabyl(), can specify particular column(s) apply like adorn_percentage(,,,c(cases,deaths)) (specify 4th unnamed argument). syntax simple. Consider using summarise() instead.can read detail janitor page tabyl vignette.","code":""},{"path":"descriptive-tables.html","id":"dplyr-package","chapter":"1 Descriptive tables","heading":"1.5 dplyr package","text":"dplyr part tidyverse packages common data management tool. Creating tables dplyr functions summarise() count() useful approach calculating summary statistics, summarize group, pass tables ggplot().summarise() creates new, summary data frame. data ungrouped, return one-row dataframe specified summary statistics entire data frame. data grouped, new data frame one row per group (see [Grouping data] page).Within summarise() parentheses, provide names new summary column followed equals sign statistical function apply.TIP: summarise function works UK US spelling (summarise() summarize()).","code":""},{"path":"descriptive-tables.html","id":"get-counts","chapter":"1 Descriptive tables","heading":"Get counts","text":"simple function apply within summarise() n(). Leave parentheses empty count number rows.gets interesting grouped data beforehand.command can shortened using count() function instead. count() groups data columns provided , summarises n() (creating column n), finishes un-grouping data.Tabulations two columns manner still returned “long” format, counts n column.","code":"\nlinelist %>%                 # begin with linelist\n  summarise(n_rows = n())    # return new summary dataframe with column n_rows##   n_rows\r\n## 1   5888\nlinelist %>% \n  group_by(age_cat) %>%     # group data by unique values in column age_cat\n  summarise(n_rows = n())   # return number of rows *per group*## # A tibble: 9 x 2\r\n##   age_cat n_rows\r\n##   <fct>    <int>\r\n## 1 0-4       1095\r\n## 2 5-9       1095\r\n## 3 10-14      941\r\n## 4 15-19      743\r\n## 5 20-29     1073\r\n## 6 30-49      754\r\n## 7 50-69       95\r\n## 8 70+          6\r\n## 9 <NA>        86\nlinelist %>% \n  count(age_cat)##   age_cat    n\r\n## 1     0-4 1095\r\n## 2     5-9 1095\r\n## 3   10-14  941\r\n## 4   15-19  743\r\n## 5   20-29 1073\r\n## 6   30-49  754\r\n## 7   50-69   95\r\n## 8     70+    6\r\n## 9    <NA>   86\nlinelist %>% \n  count(age_cat, outcome)##    age_cat outcome   n\r\n## 1      0-4   Death 471\r\n## 2      0-4 Recover 364\r\n## 3      0-4    <NA> 260\r\n## 4      5-9   Death 476\r\n## 5      5-9 Recover 391\r\n## 6      5-9    <NA> 228\r\n## 7    10-14   Death 438\r\n## 8    10-14 Recover 303\r\n## 9    10-14    <NA> 200\r\n## 10   15-19   Death 323\r\n## 11   15-19 Recover 251\r\n## 12   15-19    <NA> 169\r\n## 13   20-29   Death 477\r\n## 14   20-29 Recover 367\r\n## 15   20-29    <NA> 229\r\n## 16   30-49   Death 329\r\n## 17   30-49 Recover 238\r\n## 18   30-49    <NA> 187\r\n## 19   50-69   Death  33\r\n## 20   50-69 Recover  38\r\n## 21   50-69    <NA>  24\r\n## 22     70+   Death   3\r\n## 23     70+ Recover   3\r\n## 24    <NA>   Death  32\r\n## 25    <NA> Recover  28\r\n## 26    <NA>    <NA>  26"},{"path":"descriptive-tables.html","id":"proportions","chapter":"1 Descriptive tables","heading":"Proportions","text":"Proportions can added piping table mutate() create new column. Define new column counts column (n default) divided sum() counts column (return proportion). easily get percents, can wrap result function percent() package scales.method calculate proportions within groups. relies different levels data grouping selectively applied removed. First, data grouped outcome via group_by(). , count() applied. function groups data age_cat returns counts outcome-age-cat combination. Importantly - finishes process, count() also ungroups age_cat grouping, remaining data grouping original grouping outcome. Thus, final step calculating percents (sum(n)) still grouped outcome.","code":"\nage_summary <- linelist %>% \n  count(age_cat) %>%                     # group and count by gender (produces \"n\" column)\n  mutate(                                # get percent of column - note the denominator\n    percent = scales::percent(n / sum(n))) \n\n# print\nage_summary##   age_cat    n percent\r\n## 1     0-4 1095  18.60%\r\n## 2     5-9 1095  18.60%\r\n## 3   10-14  941  15.98%\r\n## 4   15-19  743  12.62%\r\n## 5   20-29 1073  18.22%\r\n## 6   30-49  754  12.81%\r\n## 7   50-69   95   1.61%\r\n## 8     70+    6   0.10%\r\n## 9    <NA>   86   1.46%\nage_by_outcome <- linelist %>%                  # begin with linelist\n  group_by(outcome) %>%                         # group by outcome \n  count(age_cat) %>%                            # group and count by age_cat, and then remove age_cat grouping\n  mutate(percent = scales::percent(n / sum(n))) # calculate percent - note the denominator is by outcome group"},{"path":"descriptive-tables.html","id":"plotting","chapter":"1 Descriptive tables","heading":"Plotting","text":"display “long” table output like ggplot() relatively straight-forward. data naturally “long” format, naturally accepted ggplot(). See examples pages [Plot categorical data] [ggplot tips].","code":"\nlinelist %>%                      # begin with linelist\n  count(age_cat, outcome) %>%     # group and tabulate counts by two columns\n  ggplot()+                       # pass new data frame to ggplot\n    geom_bar(                     # create bar plot\n      mapping = aes(   \n        x = outcome,              # map outcome to x-axis\n        fill = age_cat,           # map age_cat to the fill\n        y = n),                   # map the counts column `n` to the height\n      stat = \"identity\")          # set height from the y value, not the number of rows"},{"path":"descriptive-tables.html","id":"summary-statistics-1","chapter":"1 Descriptive tables","heading":"Summary statistics","text":"One major advantage dplyr summarise() ability return advanced statistical summaries like median(), mean(), max(), min(), sd() (standard deviation), percentiles. can also use sum() return number rows meet certain logical criteria. , outputs can produced whole data frame set, group.noted , within summarise() parentheses provide names new summary column followed equals sign statistical function apply. Within statistical function, give column operated relevant arguments (e.g. na.rm = TRUE mathematical functions).can also use sum() return number rows meet logical criteria. expression within counted evaluates TRUE. example: sum(age_years < 18, na.rm=T) sum(gender == \"male\", na.rm=T)., linelist data summarised describe days delay symptom onset hospital admission (column days_onset_hosp), hospital.tips:Use sum() logic statement “count” rows meet certain criteria (==)Note use na.rm = TRUE within mathematical functions like sum(), otherwise NA returned missing valuesUse function percent() scales package easily convert percentsUse round() base R specify decimalsTo calculate statistics entire dataset, use summarise() without group_by()","code":"\nsummary_table <- linelist %>%                                        # begin with linelist, save out as new object\n  group_by(hospital) %>%                                             # group all calculations by hospital\n  summarise(                                                         # only the below summary columns will be returned\n    cases       = n(),                                                # number of rows per group\n    delay_max   = max(days_onset_hosp, na.rm = T),                    # max delay\n    delay_mean  = round(mean(days_onset_hosp, na.rm=T), digits = 1),  # mean delay, rounded\n    delay_sd    = round(sd(days_onset_hosp, na.rm = T), digits = 1),  # standard deviation of delays, rounded\n    delay_3     = sum(days_onset_hosp >= 3, na.rm = T),               # number of rows with delay of 3 or more days\n    pct_delay_3 = scales::percent(delay_3 / cases)                    # convert previously-defined delay column to percent \n  )\n\nsummary_table  # print## # A tibble: 6 x 7\r\n##   hospital                             cases delay_max delay_mean delay_sd delay_3 pct_delay_3\r\n##   <chr>                                <int>     <dbl>      <dbl>    <dbl>   <int> <chr>      \r\n## 1 Central Hospital                       454        12        1.9      1.9     108 24%        \r\n## 2 Military Hospital                      896        15        2.1      2.4     253 28%        \r\n## 3 Missing                               1469        22        2.1      2.3     399 27%        \r\n## 4 Other                                  885        18        2        2.2     234 26%        \r\n## 5 Port Hospital                         1762        16        2.1      2.2     470 27%        \r\n## 6 St. Mark's Maternity Hospital (SMMH)   422        18        2.1      2.3     116 27%"},{"path":"descriptive-tables.html","id":"glueing-together","chapter":"1 Descriptive tables","heading":"Glueing together","text":"can also use str_glue() stringr combine columns one new column - typically used summarise() command., summary_table data frame created mutated columns delay_mean delay_sd combined, parentheses formating added new column, respective old columns removed., make table presentable, total row added adorn_totals() janitor (ignores non-numeric columns). Lastly, use rename() dplyr make column names nicer.Now pass flextable print table Word, HTML, Powerpoint, RMarkdown, etc.! (see janitor section Tables presentation page).","code":"\nsummary_table %>% \n  mutate(delay = str_glue(\"{delay_mean} ({delay_sd})\")) %>%  # combine and format other values\n  select(-c(delay_mean, delay_sd)) %>%                       # remove two old columns   \n  adorn_totals(where = \"row\") %>%                            # add total row\n  rename(                                                    # rename cols\n    \"Hospital Name\"   = hospital,\n    \"Cases\"           = cases,\n    \"Max delay\"       = delay_max,\n    \"Mean (sd)\"       = delay,\n    \"Delay 3+ days\"   = delay_3,\n    \"% delay 3+ days\" = pct_delay_3\n    )##                         Hospital Name Cases Max delay Delay 3+ days % delay 3+ days Mean (sd)\r\n##                      Central Hospital   454        12           108             24% 1.9 (1.9)\r\n##                     Military Hospital   896        15           253             28% 2.1 (2.4)\r\n##                               Missing  1469        22           399             27% 2.1 (2.3)\r\n##                                 Other   885        18           234             26%   2 (2.2)\r\n##                         Port Hospital  1762        16           470             27% 2.1 (2.2)\r\n##  St. Mark's Maternity Hospital (SMMH)   422        18           116             27% 2.1 (2.3)\r\n##                                 Total  5888       101          1580               -         -"},{"path":"descriptive-tables.html","id":"percentiles","chapter":"1 Descriptive tables","heading":"Percentiles","text":"Percentiles deserve special mention. return percentiles, use quantile() defaults specify value(s) like probs =.","code":"\n# get default percentile values of age (0%, 25%, 50%, 75%, 100%)\nlinelist %>% \n  summarise(age_percentiles = quantile(age_years, na.rm = TRUE))##   age_percentiles\r\n## 1               0\r\n## 2               6\r\n## 3              13\r\n## 4              23\r\n## 5              84\n# get manually-specified percentile values of age (5%, 50%, 75%, 98%)\nlinelist %>% \n  summarise(\n    age_percentiles = quantile(\n      age_years,\n      probs = c(.05, 0.5, 0.75, 0.98), \n      na.rm=TRUE)\n    )##   age_percentiles\r\n## 1               1\r\n## 2              13\r\n## 3              23\r\n## 4              48"},{"path":"descriptive-tables.html","id":"on-aggregated-data","chapter":"1 Descriptive tables","heading":"On aggregated data","text":"begin aggregated data, use sum() data’s counts column. example, let’s say beginning data frame counts , called linelist_agg - shows “long” format case counts outcome gender.create example data frame linelist case counts outcome gender (missing values removed clarity).sum counts (e.g. column n) group can use summarise() set new column equal sum(n, na.rm=T). add subset criteria sum operation, can use subset bracket [ ] syntax counts column shown create male female columns.","code":"\nlinelist_agg <- linelist %>% \n  filter(!is.na(gender),\n         !is.na(outcome)) %>% \n  count(outcome, gender)\n\nlinelist_agg##   outcome gender    n\r\n## 1   Death      f 1227\r\n## 2   Death      m 1228\r\n## 3 Recover      f  953\r\n## 4 Recover      m  950\nlinelist_agg %>% \n  group_by(outcome) %>% \n  summarise(\n    total_cases  = sum(n, na.rm=T),\n    male_cases   = sum(n[gender == \"m\"], na.rm=T),\n    female_cases = sum(n[gender == \"f\"], na.rm=T))## # A tibble: 2 x 4\r\n##   outcome total_cases male_cases female_cases\r\n##   <chr>         <int>      <int>        <int>\r\n## 1 Death          2455       1228         1227\r\n## 2 Recover        1903        950          953"},{"path":"descriptive-tables.html","id":"across-multiple-columns","chapter":"1 Descriptive tables","heading":"across() multiple columns","text":"can use summarise across multiple columns using across(). makes life easier want calculate statistics many columns. specify columns operate across, either:provide .cols = either vector column names c() select() semantic helper functions (explained )provide .fns = function perform (parenthese) - can provide multiple within list(), mean() applied several numeric columns. vector columns named explicitly single function mean specified (parentheses). additional arguments function (e.g. na.rm=TRUE) provided afterwards.can difficult get order parentheses commas correct using across(). Remember within across() must include columns, functions, extra arguments needed functions.Multiple functions can run . functions mean sd provided .fns = within list(). opportunity provide character names (e.g. “mean” “sd”) appended new column names.select() helper functions can place within across():helper functions available assist specifying columns:everything() - columns mentionedlast_col() - last columnwhere() - applies function columns selects TRUEstarts_with() - matches specified prefix. Example: starts_with(\"date\")ends_with() - matches specified suffix. Example: ends_with(\"_end\")contains() - columns containing character string. Example: contains(\"time\")matches() - apply regular expression (regex). Example: contains(\"[pt]al\")num_range() -any_of() - matches column named. Useful name might exist. Example: any_of(date_onset, date_death, cardiac_arrest)example, return mean every numeric column. () command takes place vector column names c(). Everything still within across() command.","code":"\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),  # columns\n                   .fns = mean,                               # function\n                   na.rm=T))                                  # extra arguments## # A tibble: 3 x 5\r\n##   outcome age_years  temp wt_kg ht_cm\r\n##   <chr>       <dbl> <dbl> <dbl> <dbl>\r\n## 1 Death        15.9  38.6  52.6  125.\r\n## 2 Recover      16.1  38.6  52.5  125.\r\n## 3 <NA>         16.2  38.6  53.0  125.\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm), # columns\n                   .fns = list(\"mean\" = mean, \"sd\" = sd),    # multiple functions \n                   na.rm=T))                                 # extra arguments## # A tibble: 3 x 9\r\n##   outcome age_years_mean age_years_sd temp_mean temp_sd wt_kg_mean wt_kg_sd ht_cm_mean ht_cm_sd\r\n##   <chr>            <dbl>        <dbl>     <dbl>   <dbl>      <dbl>    <dbl>      <dbl>    <dbl>\r\n## 1 Death             15.9         12.3      38.6   0.962       52.6     18.4       125.     48.7\r\n## 2 Recover           16.1         13.0      38.6   0.997       52.5     18.6       125.     50.1\r\n## 3 <NA>              16.2         12.8      38.6   0.976       53.0     18.9       125.     50.4\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(\n    .cols = where(is.numeric),  # all numeric columns in the data frame\n    .fns = mean,\n    na.rm=T))## # A tibble: 3 x 12\r\n##   outcome generation   age age_years   lon   lat wt_kg ht_cm ct_blood  temp   bmi days_onset_hosp\r\n##   <chr>        <dbl> <dbl>     <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl> <dbl>           <dbl>\r\n## 1 Death         16.7  15.9      15.9 -13.2  8.47  52.6  125.     21.3  38.6  45.6            1.84\r\n## 2 Recover       16.4  16.2      16.1 -13.2  8.47  52.5  125.     21.1  38.6  47.7            2.34\r\n## 3 <NA>          16.5  16.3      16.2 -13.2  8.47  53.0  125.     21.2  38.6  48.3            2.07"},{"path":"descriptive-tables.html","id":"pivot-wider","chapter":"1 Descriptive tables","heading":"Pivot wider","text":"prefer table “wide” format can transform using tidyr pivot_wider() function. likely need re-name columns rename(). information see page [Pivoting data].example begins “long” table age_by_outcome . new column names specified names_from = values specified come column n. column mentioned outcome, remains far left.","code":"\nage_by_outcome %>% \n  select(-percent) %>%   # keep only counts for simplicity\n  pivot_wider(names_from = age_cat, values_from = n)  ## # A tibble: 3 x 10\r\n## # Groups:   outcome [3]\r\n##   outcome `0-4` `5-9` `10-14` `15-19` `20-29` `30-49` `50-69` `70+`  `NA`\r\n##   <chr>   <int> <int>   <int>   <int>   <int>   <int>   <int> <int> <int>\r\n## 1 Death     471   476     438     323     477     329      33     3    32\r\n## 2 Recover   364   391     303     251     367     238      38     3    28\r\n## 3 <NA>      260   228     200     169     229     187      24    NA    26"},{"path":"descriptive-tables.html","id":"total-rows","chapter":"1 Descriptive tables","heading":"Total rows","text":"summarise() operates grouped data automatically produce “total” statistics. , two approaches adding total row presented:","code":""},{"path":"descriptive-tables.html","id":"janitors-adorn_totals","chapter":"1 Descriptive tables","heading":"janitor’s adorn_totals()","text":"table consists counts proportions/percents can summed total, can add sum totals using janitor’s adorn_totals() described section . Note function can sum numeric columns - want calculate total summary statistics see next section., linelist grouped gender summarised table described numer cases known outcome, deaths, recovered. Piping table adorn_totals() adds total row bottom reflecting sum column. adorn_*() functions adjust display noted code.","code":"\nlinelist %>% \n  group_by(gender) %>%\n  summarise(\n    known_outcome = sum(!is.na(outcome)),           # Number of rows in group where outcome is not missing\n    n_death  = sum(outcome == \"Death\", na.rm=T),    # Number of rows in group where outcome is Death\n    n_recover = sum(outcome == \"Recover\", na.rm=T), # Number of rows in group where outcome is Recovered\n  ) %>% \n  adorn_totals() %>%                                # Adorn total row (sums of each numeric column)\n  adorn_percentages(\"col\") %>%                      # Get column proportions\n  adorn_pct_formatting() %>%                        # Convert proportions to percents\n  adorn_ns(position = \"front\")                      # display % and counts (with counts in front)##  gender known_outcome       n_death     n_recover\r\n##       f 2180  (47.8%) 1227  (47.5%)  953  (48.1%)\r\n##       m 2178  (47.7%) 1228  (47.6%)  950  (47.9%)\r\n##    <NA>  207   (4.5%)  127   (4.9%)   80   (4.0%)\r\n##   Total 4565 (100.0%) 2582 (100.0%) 1983 (100.0%)"},{"path":"descriptive-tables.html","id":"summarise-on-total-data-and-then-bind_rows","chapter":"1 Descriptive tables","heading":"summarise() on “total” data and then bind_rows()","text":"table consists summary statistics median(), mean(), etc, adorn_totals() approach shown sufficient. Instead, get summary statistics entire dataset must calculate separate summarise() command bind results original grouped summary table. binding can use bind_rows() dplyr. example:can make summary table outcome hospital group_by() summarise() like :get totals, run summarise() command group data outcome (hospital), like :can bind two data frames together. Note by_hospital 4 columns whereas totals 3 columns. using bind_rows(), columns combined name, extra space filled NA (e.g column hospital values two new totals rows). binding rows, convert empty spaces “Total” using replace_na() (see [Cleaning data core functions] page).new table “Total” rows bottom.table “long” format, may want. Optionally, can pivot table wider make readable. See section pivoting wider , [Pivoting data] page. can also add columns, arrange nicely.can print nicely HTML - output printed flextable. can read depth example achieve nice table Tables presentation page.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.769232219961.2307722Central Hospital35816546.089392219353.9106122Other68529042.335772139557.6642322Military Hospital70830943.644072239956.3559321Port Hospital1,36457942.448682178557.5513222Total3,4401,46942.70349221,97157.2965122","code":"\nby_hospital <- linelist %>% \n  filter(!is.na(outcome) & hospital != \"Missing\") %>%  # Remove cases with missing outcome or hospital\n  group_by(hospital, outcome) %>%                      # Group data\n  summarise(                                           # Create new summary columns of indicators of interest\n    N = n(),                                            # Number of rows per hospital-outcome group     \n    ct_value = median(ct_blood, na.rm=T))               # median CT value per group\n  \nby_hospital # print table## # A tibble: 10 x 4\r\n## # Groups:   hospital [5]\r\n##    hospital                             outcome     N ct_value\r\n##    <chr>                                <chr>   <int>    <dbl>\r\n##  1 Central Hospital                     Death     193       22\r\n##  2 Central Hospital                     Recover   165       22\r\n##  3 Military Hospital                    Death     399       21\r\n##  4 Military Hospital                    Recover   309       22\r\n##  5 Other                                Death     395       22\r\n##  6 Other                                Recover   290       21\r\n##  7 Port Hospital                        Death     785       22\r\n##  8 Port Hospital                        Recover   579       21\r\n##  9 St. Mark's Maternity Hospital (SMMH) Death     199       22\r\n## 10 St. Mark's Maternity Hospital (SMMH) Recover   126       22\ntotals <- linelist %>% \n      filter(!is.na(outcome) & hospital != \"Missing\") %>%\n      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    \n      summarise(\n        N = n(),                                       # These statistics are now by outcome only     \n        ct_value = median(ct_blood, na.rm=T))\n\ntotals # print table## # A tibble: 2 x 3\r\n##   outcome     N ct_value\r\n##   <chr>   <int>    <dbl>\r\n## 1 Death    1971       22\r\n## 2 Recover  1469       22\ntable_long <- bind_rows(by_hospital, totals) %>% \n  mutate(hospital = replace_na(hospital, \"Total\"))\ntable_long %>% \n  \n  # Pivot wider and format\n  ########################\n  mutate(hospital = replace_na(hospital, \"Total\")) %>% \n  pivot_wider(                                         # Pivot from long to wide\n    values_from = c(ct_value, N),                       # new values are from ct and count columns\n    names_from = outcome) %>%                           # new column names are from outcomes\n  mutate(                                              # Add new columns\n    N_Known = N_Death + N_Recover,                      # number with known outcome\n    Pct_Death = N_Death / N_Known * 100,               # percent cases who died\n    Pct_Recover = N_Recover/N_Known * 100) %>%         # percent who recovered\n  select(                                              # Re-order columns\n    hospital, N_Known,                                   # Intro columns\n    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns\n    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns\n  arrange(N_Known)                                  # Arrange rows from lowest to highest (Total row at bottom)## # A tibble: 6 x 8\r\n## # Groups:   hospital [6]\r\n##   hospital                            N_Known N_Recover Pct_Recover ct_value_Recover N_Death Pct_Death ct_value_Death\r\n##   <chr>                                 <int>     <int>       <dbl>            <dbl>   <int>     <dbl>          <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMM~     325       126        38.8               22     199      61.2             22\r\n## 2 Central Hospital                        358       165        46.1               22     193      53.9             22\r\n## 3 Other                                   685       290        42.3               21     395      57.7             22\r\n## 4 Military Hospital                       708       309        43.6               22     399      56.4             21\r\n## 5 Port Hospital                          1364       579        42.4               21     785      57.6             22\r\n## 6 Total                                  3440      1469        42.7               22    1971      57.3             22"},{"path":"descriptive-tables.html","id":"gtsummary-package","chapter":"1 Descriptive tables","heading":"1.6 gtsummary package","text":"want print summary statistics pretty, publication-ready graphic, can use gtsummary package function tbl_summary(). code can seem complex first, outputs look nice print RStudio Viewer panel HTML. Read vignette .introduce tbl_summary() show basic behavior first, actually produces large beautiful table. , examine detail make adjustments tailored tables.","code":""},{"path":"descriptive-tables.html","id":"summary-table","chapter":"1 Descriptive tables","heading":"Summary table","text":"default behavior tbl_summary() quite incredible - takes columns provide creates summary table one command. function prints statistics appropriate column class: median inter-quartile range (IQR) numeric columns, counts (%) categorical columns. Missing values converted “Unknown”. Footnotes added bottom explain statistics, total N shown top.\r\n          1\r\n          \r\n           \r\n          Median (IQR); n (%)\r\n          ","code":"\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>%  # keep only the columns of interest\n  tbl_summary()                                                  # default"},{"path":"descriptive-tables.html","id":"adjustments","chapter":"1 Descriptive tables","heading":"Adjustments","text":"Now explain function works make adjustments. key arguments detailed :=\r\ncan stratify table column (e.g. outcome), creating 2-way table.statistic =\r\nIndicate statistics show display equation. two sides equation, separated tilde ~. right quotes statistical display desired, left columns display apply.right side equation uses syntax str_glue() stringr (see [Characters Strings]), desired display string quotes statistics within curly brackets. can include statistics like “n” (counts), “N” (denominator), “mean”, “median”, “sd”, “max”, “min”, percentiles “p##” like “p25”, percent total “p”. See ?tbl_summary details.left side equation, can specify columns name (e.g. age c(age, gender)) using helpers all_continuous(), all_categorical(), contains(), starts_with(), etc.simple example statistic = equation might look like , print mean column age_years:\r\n          1\r\n          \r\n           \r\n          Mean\r\n          slightly complex equation might look like \"({min}, {max})\", incorporating max min values within parentheses separated comma:can also differentiate syntax separate columns types columns. complex example , value provided statistc = list indicating continuous columns table print mean standard deviation parentheses, categorical columns print n, denominator, percent.digits =\r\nAdjust digits rounding. Optionally, can specified continuous columns ().label =\r\nAdjust column name displayed. Provide column name desired label separated tilde. default column name.missing_text =\r\nAdjust missing values displayed. default “Unknown”.type =\r\nused adjust many levels statistics shown. syntax similar statistic = provide equation columns left value right. Two common scenarios include:type = all_categorical() ~ \"categorical\" Forces dichotomous columns (e.g. fever) show levels instead “yes” rowtype = all_continuous() ~ \"continuous2\" Allows multi-line statistics per variable, shown later sectionIn example , arguments used modify original summary table:\r\n          1\r\n          \r\n           \r\n          Mean (SD); n / N (%)\r\n          ","code":"\nlinelist %>% \n  select(age_years) %>%         # keep only columns of interest \n  tbl_summary(                  # create summary table\n    statistic = age_years ~ \"{mean}\") # print mean of age\nlinelist %>% \n  select(age_years) %>%                       # keep only columns of interest \n  tbl_summary(                                # create summary table\n    statistic = age_years ~ \"({min}, {max})\") # print min and max of age\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>% # keep only columns of interest\n  tbl_summary(     \n    by = outcome,                                               # stratify entire table by outcome\n    statistic = list(all_continuous() ~ \"{mean} ({sd})\",        # stats and format for continuous columns\n                     all_categorical() ~ \"{n} / {N} ({p}%)\"),   # stats and format for categorical columns\n    digits = all_continuous() ~ 1,                              # rounding for continuous columns\n    type   = all_categorical() ~ \"categorical\",                 # force all categorical levels to display\n    label  = list(                                              # display labels for column names\n      outcome   ~ \"Outcome\",                           \n      age_years ~ \"Age (years)\",\n      gender    ~ \"Gender\",\n      temp      ~ \"Temperature\",\n      hospital  ~ \"Hospital\"),\n    missing_text = \"Missing\"                                    # how missing values should display\n  )## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-tables.html","id":"multi-line-stats-for-continuous-variables","chapter":"1 Descriptive tables","heading":"Multi-line stats for continuous variables","text":"want print multiple lines statistics continuous variables, can indicate setting type = “continuous2”. can combine previously shown elements one table choosing statistics want show. need tell function want get table back entering type “continuous2”. number missing values shown “Unknown”.many ways modify tables, including adding p-values, adjusting color headings, etc. Many described documentation (enter ?tbl_summary Console), given section statistical tests.","code":"\nlinelist %>% \n  select(age_years, temp) %>%                      # keep only columns of interest\n  tbl_summary(                                     # create summary table\n    type = all_continuous() ~ \"continuous2\",       # indicate that you want to print multiple statistics \n    statistic = all_continuous() ~ c(\n      \"{mean} ({sd})\",                             # line 1: mean and SD\n      \"{median} ({p25}, {p75})\",                   # line 2: median and IQR\n      \"{min}, {max}\")                              # line 3: min and max\n    )"},{"path":"descriptive-tables.html","id":"base-r","chapter":"1 Descriptive tables","heading":"1.7 base R","text":"can use function table() tabulate cross-tabulate columns. Unlike options , must specify dataframe, shown .CAUTION: NA (missing) values tabulated unless include argument useNA = \"always\" (also set “” “ifany”).TIP: can use %$% magrittr remove need repeating dataframe calls within base functions. example written linelist %$% table(outcome, useNA = \"always\") Multiple columns can cross-tabulated listing one , separated commas. Optionally, can assign column “name” like Outcome = linelist$outcome.","code":"\ntable(linelist$outcome, useNA = \"always\")## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\nage_by_outcome <- table(linelist$age_cat, linelist$outcome, useNA = \"always\") # save table as object\nage_by_outcome   # print table##        \r\n##         Death Recover <NA>\r\n##   0-4     471     364  260\r\n##   5-9     476     391  228\r\n##   10-14   438     303  200\r\n##   15-19   323     251  169\r\n##   20-29   477     367  229\r\n##   30-49   329     238  187\r\n##   50-69    33      38   24\r\n##   70+       3       3    0\r\n##   <NA>     32      28   26"},{"path":"descriptive-tables.html","id":"proportions-1","chapter":"1 Descriptive tables","heading":"Proportions","text":"return proportions, passing table function prop.table(). Use margins = argument specify whether want proportions rows (1), columns (2), whole table (3). clarity, pipe table round() function base R, specifying 2 digits.","code":"\n# get proportions of table defined above, by rows, rounded\nprop.table(age_by_outcome, 1) %>% round(2)##        \r\n##         Death Recover <NA>\r\n##   0-4    0.43    0.33 0.24\r\n##   5-9    0.43    0.36 0.21\r\n##   10-14  0.47    0.32 0.21\r\n##   15-19  0.43    0.34 0.23\r\n##   20-29  0.44    0.34 0.21\r\n##   30-49  0.44    0.32 0.25\r\n##   50-69  0.35    0.40 0.25\r\n##   70+    0.50    0.50 0.00\r\n##   <NA>   0.37    0.33 0.30"},{"path":"descriptive-tables.html","id":"totals","chapter":"1 Descriptive tables","heading":"Totals","text":"add row column totals, pass table addmargins(). works counts proportions.","code":"\naddmargins(age_by_outcome)##        \r\n##         Death Recover <NA>  Sum\r\n##   0-4     471     364  260 1095\r\n##   5-9     476     391  228 1095\r\n##   10-14   438     303  200  941\r\n##   15-19   323     251  169  743\r\n##   20-29   477     367  229 1073\r\n##   30-49   329     238  187  754\r\n##   50-69    33      38   24   95\r\n##   70+       3       3    0    6\r\n##   <NA>     32      28   26   86\r\n##   Sum    2582    1983 1323 5888"},{"path":"descriptive-tables.html","id":"convert-to-data-frame","chapter":"1 Descriptive tables","heading":"Convert to data frame","text":"Converting table() object directly data frame straight-forward. One approach demonstrated :Create table, without using useNA = \"always\". Instead convert NA values “(Missing)” fct_explicit_na() forcats.Add totals (optional) piping addmargins()Pipe base R function .data.frame.matrix()Pipe table tibble function rownames_to_column(), specifying name first columnPrint, View, export desired. example use flextable() package flextable described Tables presentation page. print RStudio viewer pane pretty HTML.Age CategoryDeathRecover(Missing)Sum0-44713642601,0955-94763912281,09510-1443830320094115-1932325116974320-294773672291,07330-4932923818775450-693338249570+3306(Missing)32282686Sum2,5821,9831,3235,888","code":"\ntable(fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>% \n  addmargins() %>% \n  as.data.frame.matrix() %>% \n  tibble::rownames_to_column(var = \"Age Category\") %>% \n  flextable::flextable()"},{"path":"descriptive-tables.html","id":"resources","chapter":"1 Descriptive tables","heading":"1.8 Resources","text":"Much information page adapted resources vignettes online:gtsummarydplyr","code":""},{"path":"tables-for-presentation.html","id":"tables-for-presentation","chapter":"2 Tables for presentation","heading":"2 Tables for presentation","text":"section demonstrates convert summary data frames presentation-ready tables flextable package. tables can inserted powerpoint slides, HTML pages, PDF Word documents, etc.Understand using flextable, must create summary table data frame. Use methods Descriptive tables [Pivoting data] pages tabulations, cross-tabulations, pivoting, calculating descriptive statistics. resulting data frame can passed flextable display formatting.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":""},{"path":"tables-for-presentation.html","id":"preparation-1","chapter":"2 Tables for presentation","heading":"2.1 Preparation","text":"","code":""},{"path":"tables-for-presentation.html","id":"load-packages-1","chapter":"2 Tables for presentation","heading":"Load packages","text":"Install load flextable. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,            # import/export\n  here,           # file pathways\n  flextable,      # make HTML tables \n  officer,        # helper functions for tables\n  tidyverse)      # data management, summary, and visualization"},{"path":"tables-for-presentation.html","id":"import-data-1","chapter":"2 Tables for presentation","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"tables-for-presentation.html","id":"prepare-table","chapter":"2 Tables for presentation","heading":"Prepare table","text":"beginning use flextable need create table data frame. See page Descriptive tables [Pivoting data] learn create data frame using packages janitor dplyr. must arrange content rows columns want displayed. , data frame passed flextable display colors, headers, fonts, etc.example Descriptive tables page converting case linelist data frame summarises patient outcomes CT values hospital.","code":"\ntable <- linelist %>% \n  # filter\n  ########\n  #filter(!is.na(outcome) & hospital != \"Missing\") %>%  # Remove cases with missing outcome or hospital\n  \n  # Get summary values per hospital-outcome group\n  ###############################################\n  group_by(hospital, outcome) %>%                      # Group data\n  summarise(                                           # Create new summary columns of indicators of interest\n    N = n(),                                            # Number of rows per hospital-outcome group     \n    ct_value = median(ct_blood, na.rm=T)) %>%           # median CT value per group\n  \n  # add totals\n  ############\n  bind_rows(                                           # Bind the previous table with this mini-table of totals\n    linelist %>% \n      filter(!is.na(outcome) & hospital != \"Missing\") %>%\n      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    \n      summarise(\n        N = n(),                                       # Number of rows for whole dataset     \n        ct_value = median(ct_blood, na.rm=T))) %>%     # Median CT for whole dataset\n  \n  # Pivot wider and format\n  ########################\n  mutate(hospital = replace_na(hospital, \"Total\")) %>% \n  pivot_wider(                                         # Pivot from long to wide\n    values_from = c(ct_value, N),                       # new values are from ct and count columns\n    names_from = outcome) %>%                           # new column names are from outcomes\n  mutate(                                              # Add new columns\n    N_Known = N_Death + N_Recover,                               # number with known outcome\n    Pct_Death = scales::percent(N_Death / N_Known, 0.1),         # percent cases who died (to 1 decimal)\n    Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>% # percent who recovered (to 1 decimal)\n  select(                                              # Re-order columns\n    hospital, N_Known,                                   # Intro columns\n    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns\n    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns\n  arrange(N_Known)                                    # Arrange rows from lowest to highest (Total row at bottom)\n\ntable  # print## # A tibble: 7 x 8\r\n## # Groups:   hospital [7]\r\n##   hospital                            N_Known N_Recover Pct_Recover ct_value_Recover N_Death Pct_Death ct_value_Death\r\n##   <chr>                                 <int>     <int> <chr>                  <dbl>   <int> <chr>              <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMM~     325       126 38.8%                     22     199 61.2%                 22\r\n## 2 Central Hospital                        358       165 46.1%                     22     193 53.9%                 22\r\n## 3 Other                                   685       290 42.3%                     21     395 57.7%                 22\r\n## 4 Military Hospital                       708       309 43.6%                     22     399 56.4%                 21\r\n## 5 Missing                                1125       514 45.7%                     21     611 54.3%                 21\r\n## 6 Port Hospital                          1364       579 42.4%                     21     785 57.6%                 22\r\n## 7 Total                                  3440      1469 42.7%                     22    1971 57.3%                 22"},{"path":"tables-for-presentation.html","id":"basic-flextable","chapter":"2 Tables for presentation","heading":"2.2 Basic flextable","text":"Creating flextableTo create manage flextable objects, pass table object flextable() function progressively pipe object flextable formatting functions. general syntax line flextable code follows:function(table, = X, j = X, part = \"X\"), :\r\ntable = name table object, although need stated table piped function.\r\n‘function’ can one many different functions, width() determine column widths, bg() set background colours, align() set whether text centre/right/left aligned, .\r\npart = refers part table function applied . E.g. “header”, “body” “”.\r\n= specifies row apply function , ‘X’ row number. multiple rows, e.g. first third rows, one can specify: = c(1:3). Note ‘body’ selected, first row starts underneath header section.\r\nj = specifies column apply function , ‘x’ column number name. multiple columns, e.g. fifth sixth, one can specify: j = c(5,6).\r\ntable = name table object, although need stated table piped function.‘function’ can one many different functions, width() determine column widths, bg() set background colours, align() set whether text centre/right/left aligned, .part = refers part table function applied . E.g. “header”, “body” “”.= specifies row apply function , ‘X’ row number. multiple rows, e.g. first third rows, one can specify: = c(1:3). Note ‘body’ selected, first row starts underneath header section.j = specifies column apply function , ‘x’ column number name. multiple columns, e.g. fifth sixth, one can specify: j = c(5,6).can find complete list flextable formatting function review documentation ?flextable.hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Formatting cell contentWe can ensure proportion columns display one decimal place using function colformat_num(). Note also done data management stage round() function.hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Formatting column widthWe can use autofit() function, nicely stretches table cell one row text. function qflextable() convenient shorthand flextable() autofit().hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22However, might always appropriate, especially long values within cells, meaning table might fit page.Instead, can specify widths width() function. can take playing around know width value put. example , specify different widths column 1, column 2, columns 4 8.hospitalN_KnownN_RecoverPct_Recoverct_value_RecoverN_DeathPct_Deathct_value_DeathSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Column headersWe want clearer headers easier interpretation table contents.First can add extra header layer clarity. add_header_row() function top = set TRUE, columns covering subgroups can grouped together. provide new name column values =, leaving empty values \"\" column know merge together later.also rename now-second header. Finally use merge_at() merge column headers top header row.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Formatting borders background can adjust borders, internal lines, etc. various flextable functions. often easier start removing existing borders border_remove()., can apply default border themes passing table theme_box(), theme_booktabs(), theme_alafoli().can add vertical horizontal lines variety functions. hline() vline() add lines specified row column, respectively. Within , must specify part = either “”, “body”, “header”. vertical lines, specify j = column, horizontal line =. functions like vline_right(), vline_left(), hline_top(), hline_bottom() add lines outsides .functions, actual line style must specified border = must output fp_border() function officer package. function helps define width color line. can define outside table, shown .HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Font alignmentWe centre-align columns aside left-column hospital names, using align() function flextable.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Additionally, can increase header font size change bold. can also change total row bold.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Merged cellsJust merge cells horizontally header row, can also merge cells vertically using merge_at() specifying rows () column (j).BackgroundTo distinguish content table headers, may want add additional formatting. e.g. changing background colour. example change table body gray.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table <- flextable(table) \nmy_table\nmy_table <- colformat_num(my_table, j = c(4,7), digits = 1)\nmy_table\nmy_table %>% autofit()\nmy_table <- my_table %>% \n  width(j=1, width = 2.7) %>% \n  width(j=2, width = 1.5) %>% \n  width(j=c(4,5,7,8), width = 1)\n\nmy_table\nmy_table <- my_table %>% \n  add_header_row(\n    top = TRUE,                # New header goes on top of existing header row\n    values = c(\"Hospital\",     # Header values for each column below\n               \"Total cases with known outcome\", \n               \"Recovered\",    # This will be the top-level header for this and two next columns\n               \"\",\n               \"\",\n               \"Died\",         # This will be the top-level header for this and two next columns\n               \"\",             # Leave blank, as it will be merged with \"Died\"\n               \"\")) %>% \n    set_header_labels(         # Rename the columns in original header row\n      hospital = \"\", \n      N_Known = \"\",                  \n      N_Recover = \"Total\",\n      Pct_Recover = \"% of cases\",\n      ct_value_Recover = \"Median CT values\",\n      N_Death = \"Total\",\n      Pct_Death = \"% of cases\",\n      ct_value_Death = \"Median CT values\")  %>% \n  merge_at(i = 1, j = 3:5, part = \"header\") %>% # Horizontally merge columns 3 to 5 in new header row\n  merge_at(i = 1, j = 6:8, part = \"header\")     # Horizontally merge columns 6 to 8 in new header row\n\nmy_table  # print\n# define style for border line\nborder_style = officer::fp_border(color=\"black\", width=1)\n\n# add border lines to table\nmy_table <- my_table %>% \n\n  # Remove all existing borders\n  border_remove() %>%  \n  \n  # add horizontal lines via a pre-determined theme setting\n  theme_booktabs() %>% \n  \n  # add vertical lines to separate Recovered and Died sections\n  vline(part = \"all\", j = 2, border = border_style) %>%   # at column 2 \n  vline(part = \"all\", j = 5, border = border_style)       # at column 5\n\nmy_table\nmy_table <- my_table %>% \n   flextable::align(align = \"center\", j = c(2:8), part = \"all\") \nmy_table\nmy_table <-  my_table %>%  \n  fontsize(i = 1, size = 12, part = \"header\") %>%   # adjust font size of header\n  bold(i = 1, bold = TRUE, part = \"header\") %>%     # adjust bold face of header\n  bold(i = 6, bold = TRUE, part = \"body\")           # adjust bold face of total row (row 6)\n\nmy_table\nmy_table <- my_table %>% \n  merge_at(i = 1:2, j = 1, part = \"header\") %>% \n  merge_at(i = 1:2, j = 2, part = \"header\")\nmy_table <- my_table %>% \n    bg(part = \"body\", bg = \"gray95\")  \n\nmy_table "},{"path":"tables-for-presentation.html","id":"conditional-flextable-formatting","chapter":"2 Tables for presentation","heading":"2.3 Conditional flextable formatting","text":"can highlight values column meet certain rule, e.g. 55% cases died.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22Or, can highlight entire row meeting certain criterion, hospital interest. just remove column (j) specification criteria apply columns.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nmy_table %>% \n  bg(j = 7, i= ~ Pct_Death >=55, part = \"body\", bg = \"red\") \nmy_table %>% \n  bg(., i= ~ hospital == \"Military Hospital\", part = \"body\", bg = \"#91c293\") "},{"path":"tables-for-presentation.html","id":"all-code-together","chapter":"2 Tables for presentation","heading":"2.4 All code together","text":"show code sections together command.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesSt. Mark's Maternity Hospital (SMMH)32512638.8%2219961.2%22Central Hospital35816546.1%2219353.9%22Other68529042.3%2139557.7%22Military Hospital70830943.6%2239956.4%21Missing1,12551445.7%2161154.3%21Port Hospital1,36457942.4%2178557.6%22Total3,4401,46942.7%221,97157.3%22","code":"\nborder_style = officer::fp_border(color=\"black\", width=1)\n\npacman::p_load(\n  rio,            # import/export\n  here,           # file pathways\n  flextable,      # make HTML tables \n  officer,        # helper functions for tables\n  tidyverse)      # data management, summary, and visualization\n\ntable <- linelist %>% \n  # filter\n  ########\n  #filter(!is.na(outcome) & hospital != \"Missing\") %>%  # Remove cases with missing outcome or hospital\n  \n  # Get summary values per hospital-outcome group\n  ###############################################\n  group_by(hospital, outcome) %>%                      # Group data\n  summarise(                                           # Create new summary columns of indicators of interest\n    N = n(),                                            # Number of rows per hospital-outcome group     \n    ct_value = median(ct_blood, na.rm=T)) %>%           # median CT value per group\n  \n  # add totals\n  ############\n  bind_rows(                                           # Bind the previous table with this mini-table of totals\n    linelist %>% \n      filter(!is.na(outcome) & hospital != \"Missing\") %>%\n      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    \n      summarise(\n        N = n(),                                       # Number of rows for whole dataset     \n        ct_value = median(ct_blood, na.rm=T))) %>%     # Median CT for whole dataset\n  \n  # Pivot wider and format\n  ########################\n  mutate(hospital = replace_na(hospital, \"Total\")) %>% \n  pivot_wider(                                         # Pivot from long to wide\n    values_from = c(ct_value, N),                       # new values are from ct and count columns\n    names_from = outcome) %>%                           # new column names are from outcomes\n  mutate(                                              # Add new columns\n    N_Known = N_Death + N_Recover,                               # number with known outcome\n    Pct_Death = scales::percent(N_Death / N_Known, 0.1),         # percent cases who died (to 1 decimal)\n    Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>% # percent who recovered (to 1 decimal)\n  select(                                              # Re-order columns\n    hospital, N_Known,                                   # Intro columns\n    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns\n    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns\n  arrange(N_Known) %>%                                 # Arrange rows from lowest to highest (Total row at bottom)\n\n  # formatting\n  ############\n  flextable() %>% \n  add_header_row(\n    top = TRUE,                # New header goes on top of existing header row\n    values = c(\"Hospital\",     # Header values for each column below\n               \"Total cases with known outcome\", \n               \"Recovered\",    # This will be the top-level header for this and two next columns\n               \"\",\n               \"\",\n               \"Died\",         # This will be the top-level header for this and two next columns\n               \"\",             # Leave blank, as it will be merged with \"Died\"\n               \"\")) %>% \n    set_header_labels(         # Rename the columns in original header row\n      hospital = \"\", \n      N_Known = \"\",                  \n      N_Recover = \"Total\",\n      Pct_Recover = \"% of cases\",\n      ct_value_Recover = \"Median CT values\",\n      N_Death = \"Total\",\n      Pct_Death = \"% of cases\",\n      ct_value_Death = \"Median CT values\")  %>% \n  merge_at(i = 1, j = 3:5, part = \"header\") %>% # Horizontally merge columns 3 to 5 in new header row\n  merge_at(i = 1, j = 6:8, part = \"header\") %>%  \n  border_remove() %>%  \n  theme_booktabs() %>% \n  vline(part = \"all\", j = 2, border = border_style) %>%   # at column 2 \n  vline(part = \"all\", j = 5, border = border_style) %>%   # at column 5\n  merge_at(i = 1:2, j = 1, part = \"header\") %>% \n  merge_at(i = 1:2, j = 2, part = \"header\") %>% \n  width(j=1, width = 2.7) %>% \n  width(j=2, width = 1.5) %>% \n  width(j=c(4,5,7,8), width = 1) %>% \n  flextable::align(., align = \"center\", j = c(2:8), part = \"all\") %>% \n  bg(., part = \"body\", bg = \"gray95\")  %>% \n  bg(., j=c(1:8), i= ~ hospital == \"Military Hospital\", part = \"body\", bg = \"#91c293\") %>% \n  colformat_num(., j = c(4,7), digits = 1) %>%\n  bold(i = 1, bold = TRUE, part = \"header\") %>% \n  bold(i = 6, bold = TRUE, part = \"body\")## `summarise()` has grouped output by 'hospital'. You can override using the `.groups` argument.\ntable"},{"path":"tables-for-presentation.html","id":"saving-your-table","chapter":"2 Tables for presentation","heading":"2.5 Saving your table","text":"different ways table can integrated output.Save single tableYou can export tables Word, PowerPoint HTML image (PNG) files. , one following functions used:save_as_docx()save_as_pptx()save_as_image()save_as_html()instance:Note packages webshot webshot2 required save flextable image. Images may come transparent backgrounds.want view ‘live’ versions flextable output intended document format, instance can see fits page can copy another document, can use print method argument preview set “pptx” “docx”. document pop .Save table R markdown documentThis table can integrated automated document, R markdown output, table object called within R markdown chunk. means table can updated part report data might change, numbers can refreshed.See detail [R Markdown reports] page handbook.","code":"\nsave_as_docx(\"my table\" = my_table, path = \"file.docx\")\n# Edit the 'my table' as needed for the title of table. If not specified the whole file will be blank. \n\nsave_as_image(my_table, path = \"file.png\")\nprint(my_table, preview = \"docx\") # Word document example\nprint(my_table, preview = \"pptx\") # Powerpoint example"},{"path":"tables-for-presentation.html","id":"resources-1","chapter":"2 Tables for presentation","heading":"2.6 Resources","text":"full flextable book : https://ardata-fr.github.io/flextable-book/\r\nGithub site \r\nmanual flextable functions can found hereA gallery beautiful example flextable tables code can accessed ","code":""}]
