[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link, email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Emma Buajitti, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Wayne Enanoria, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Molly Mantus, Adam Vaughan, Lionel Monteiro, Joao Muianga","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"contact-tracing.html","id":"contact-tracing","chapter":"1 Contact tracing","heading":"1 Contact tracing","text":"PAGE CONSTRUCTIONThis page walks key considerations analyzing visualizing contact tracing data. Many core R competencies tools covered sections desired functionalities apply (.e. data cleaning; pivoting; tables; time-series analyses) highlight key examples specific contact tracing useful operational decision making. include things like visualizing contact tracing follow-data time across geographic areas, producing clean Key Performance Indicator (KPI) tables contact tracing supervisors.demonstration purposes reading sample contact tracing data Go.Data platform; although principles apply structured contact tracing data. can read Go.Data project Github Documentation site Community Practice.","code":""},{"path":"contact-tracing.html","id":"preparation","chapter":"1 Contact tracing","heading":"1.1 Preparation","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,        # importing data  \n  here,       # relative file pathways  \n  janitor,    # data cleaning and tables\n  lubridate,  # working with dates\n  epikit,     # age_categories() function\n  apyramid,   # age pyramids\n  tidyverse,  # data manipulation and visualization\n  RColorBrewer, # color palettes\n  formattable, # fancy tables\n  kableExtra # table formatting\n)"},{"path":"contact-tracing.html","id":"import-data","chapter":"1 Contact tracing","heading":"Import data","text":"import sample datasets contacts contact followups retrieved un-nested Go.Data API stored .rds output files.want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data. full steps retrieve data collections Go.Data instance, view Github documentation hereBelow import .rds files. use () specify file path, provide file path specific computer. also use select() select certain columns data, simplify purposes demonstration.","code":""},{"path":"contact-tracing.html","id":"case-data","chapter":"1 Contact tracing","heading":"Case data","text":"56 cases:","code":""},{"path":"contact-tracing.html","id":"contacts-data","chapter":"1 Contact tracing","heading":"Contacts data","text":"first 50 rows 66-row contacts dataset:","code":"\ncontacts <- rio::import(here::here(\"data\", \"godata\", \"contacts_clean.rds\")) %>% \n  mutate(age_class = forcats::fct_rev(age_class)) %>% \n  select(contact_id, contact_status, firstName, lastName, gender, age, age_class, occupation, date_of_reporting, date_of_data_entry, date_of_last_exposure = date_of_last_contact, date_of_followup_start, date_of_followup_end, risk_level, was_case, admin_2_name) %>% \n  mutate(admin_2_name = replace_na(admin_2_name, \"Djembe\"))"},{"path":"contact-tracing.html","id":"follow-up-data","chapter":"1 Contact tracing","heading":"Follow-up data","text":"first 50 rows 437-row followups dataset (row follow-interaction, outcome status followup_status column):","code":"\nfollowups <- rio::import(here::here(\"data\", \"godata\", \"followups_clean.rds\")) %>% \n  select(contact_id, followup_status, followup_number, date_of_followup, admin_2_name, admin_1_name) %>% \n  mutate(followup_status = str_to_lower(followup_status))"},{"path":"contact-tracing.html","id":"relationships-data","chapter":"1 Contact tracing","heading":"Relationships data","text":"first 50 rows relationships dataset, records relationships cases contacts.","code":"\nrelationships <- rio::import(here::here(\"data\", \"godata\", \"relationships_clean.rds\")) %>% \n  select(source_visualid, source_gender, source_age, date_of_last_contact, date_of_data_entry, target_visualid, target_gender, target_age, exposure_type)"},{"path":"contact-tracing.html","id":"descriptive-analyses","chapter":"1 Contact tracing","heading":"1.2 Descriptive analyses","text":"can use techniques covered pages handbook conduct descriptive analyses cases, contacts, relationships.\r\nexamples.","code":""},{"path":"contact-tracing.html","id":"demographics","chapter":"1 Contact tracing","heading":"Demographics","text":"demonstrated page covering [Demographic pyramids][Demographic pyramids Likert-scales], can visualise age gender distribution (use apyramid package).","code":""},{"path":"contact-tracing.html","id":"age-and-gender-of-contacts","chapter":"1 Contact tracing","heading":"Age and Gender of contacts","text":"pyramid compares age gender contacts. Note contacts missing age included bar top. can change default behavior, consider listing number missing caption.Go.Data data structure, relationships dataset contains ages cases contacts, use dataset create age pyramid showing differences:can also view characteristics occupational breakdown (e.g. form pie chart).","code":"\napyramid::age_pyramid(\n  data = contacts,                                   # use contacts dataset\n  age_group = \"age_class\",                           # categorical age column\n  split_by = \"gender\") +                             # gender for halfs of pyramid\n  labs(\n    fill = \"Gender\",                                 # title of legend\n    title = \"Age/Sex Pyramid of COVID-19 contacts\")+ # title of the plot\n  theme_minimal()                                    # simple background\nrelation_age <- relationships %>% \n  select(source_age, target_age) %>% \n  transmute(                              # transmute is like mutate() but removes all other columns\n    source_age_class = epikit::age_categories(source_age, breakers = seq(0, 80, 5)),\n    target_age_class = epikit::age_categories(target_age, breakers = seq(0, 80, 5)),\n    ) %>% \n  pivot_longer(cols = contains(\"class\"), names_to = \"category\", values_to = \"age_class\")  # pivot longer\n\n\nrelation_age## # A tibble: 200 x 2\r\n##    category         age_class\r\n##    <chr>            <fct>    \r\n##  1 source_age_class 80+      \r\n##  2 target_age_class 15-19    \r\n##  3 source_age_class <NA>     \r\n##  4 target_age_class 50-54    \r\n##  5 source_age_class <NA>     \r\n##  6 target_age_class 20-24    \r\n##  7 source_age_class 30-34    \r\n##  8 target_age_class 45-49    \r\n##  9 source_age_class 40-44    \r\n## 10 target_age_class 30-34    \r\n## # ... with 190 more rows\napyramid::age_pyramid(\n  data = relation_age,                               # use modified relationship dataset\n  age_group = \"age_class\",                           # categorical age column\n  split_by = \"category\") +                           # by cases and contacts\n  scale_fill_manual(\n    values = c(\"orange\", \"purple\"),                  # to specify colors AND labels\n    labels = c(\"Case\", \"Contact\"))+\n  labs(\n    fill = \"Legend\",                                           # title of legend\n    title = \"Age/Sex Pyramid of COVID-19 contacts and cases\")+ # title of the plot\n  theme_minimal()                                              # simple background\n# Clean dataset and get counts by occupation\nocc_plot_data <- cases %>% \n  mutate(occupation = forcats::fct_explicit_na(occupation),  # make NA missing values a category\n         occupation = forcats::fct_infreq(occupation)) %>%   # order factor levels in order of frequency\n  count(occupation)                                          # get counts by occupation\n  \n# Make pie chart\nggplot(data = occ_plot_data, mapping = aes(x = \"\", y = n, fill = occupation))+\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(\"y\", start = 0) +\n  labs(\n    fill = \"Occupation\",\n    title = \"Known occupations of COVID-19 cases\")+\n  theme_minimal() +                    \n  theme(axis.line = element_blank(),\n        axis.title = element_blank(),\n        axis.text = element_blank())"},{"path":"contact-tracing.html","id":"contacts-per-case","chapter":"1 Contact tracing","heading":"Contacts per case","text":"number contacts per case can important metric assess quality contact enumeration compliance population toward public health response.Depending data structure, can assessed dataset contains cases contacts. Go.Data datasets, links cases (“sources”) contacts (“targets”) stored relationships dataset.dataset, row contact, source case listed row. contacts relationships multiple cases, exists may need account plotting (explore !).begin counting number rows (contacts) per source case. saved data frame.use geom_histogram() plot data histogram.","code":"\ncontacts_per_case <- relationships %>% \n  count(source_visualid)\n\ncontacts_per_case## # A tibble: 23 x 2\r\n##    source_visualid     n\r\n##    <chr>           <int>\r\n##  1 CASE-2020-0001     13\r\n##  2 CASE-2020-0002      5\r\n##  3 CASE-2020-0003      2\r\n##  4 CASE-2020-0004      4\r\n##  5 CASE-2020-0005      5\r\n##  6 CASE-2020-0006      3\r\n##  7 CASE-2020-0008      3\r\n##  8 CASE-2020-0009      3\r\n##  9 CASE-2020-0010      3\r\n## 10 CASE-2020-0012      3\r\n## # ... with 13 more rows\nggplot(data = contacts_per_case)+        # begin with count data frame created above\n  geom_histogram(mapping = aes(x = n))+  # print histogram of number of contacts per case\n  scale_y_continuous(expand = c(0,0))+   # remove excess space below 0 on y-axis\n  theme_light()+                         # simplify background\n  labs(\n    title = \"Number of contacts per case\",\n    y = \"Cases\",\n    x = \"Contacts per case\"\n  )"},{"path":"contact-tracing.html","id":"contact-follow-up","chapter":"1 Contact tracing","heading":"1.3 Contact Follow Up","text":"Contact tracing data often contain “follow-” data, record outcomes daily symptom checks persons quarantine. Analysis data can inform response strategy, identify contacts -risk loss--follow--risk developing disease.","code":""},{"path":"contact-tracing.html","id":"data-cleaning","chapter":"1 Contact tracing","heading":"Data cleaning","text":"data can exist variety formats. may exist “wide” format Excel sheet one row per contact, one column per follow-“day”. See [Pivoting data] descriptions “long” “wide” data pivot data wider longer.Go.Data example, data stored followups data frame, “long” format one row per follow-interaction. first 50 rows look like :CAUTION: Beware duplicates dealing followup data; several erroneous followups day given contact. Perhaps seems error reflects reality - e.g. contact tracer submit follow-form early day reach contact, submit second form later reached. depend operational context want handle duplicates - just make sure document approach clearly. Let’s see many instances “duplicate” rows :example data, records applies ones missing ID! can remove . , purposes demonstration go show steps de-duplication one follow-encoutner per person per day. See page [De-duplication] detail. assume recent encounter record correct one. also take opportunity clean followup_number column (“day” follow-range 1 - 14).follow-encounter, follow-status (whether encounter occurred , contact symptoms ). see values can run quick tabyl() (janitor) table() (base R) (see [Descriptive tables]). followup_status see frequency outcomes.dataset, “seen_not_ok” means “seen symptoms”, “seen_ok” means “seen without symptoms”. !!! SARA (explain remaining values)","code":"\nfollowups %>% \n  count(contact_id, date_of_followup) %>%   # get unique contact_days\n  filter(n > 1)                             # view records where count is more than 1  ## # A tibble: 3 x 3\r\n##   contact_id date_of_followup     n\r\n##   <chr>      <date>           <int>\r\n## 1 <NA>       2020-09-03           2\r\n## 2 <NA>       2020-09-04           2\r\n## 3 <NA>       2020-09-05           2\nfollowups_clean <- followups %>%\n  \n  # De-duplicate\n  group_by(contact_id, date_of_followup) %>%        # group rows per contact-day\n  arrange(contact_id, desc(date_of_followup)) %>%   # arrange rows, per contact-day, by date of follow-up (most recent at top)\n  slice_head() %>%                                  # keep only the first row per unique contact id  \n  ungroup() %>% \n  \n  # Other cleaning\n  mutate(followup_number = replace(followup_number, followup_number > 14, NA)) %>% # clean erroneous data\n  filter(!is.na(contact_id))                        # remove rows with missing contact_id\nfollowups_clean %>% \n  tabyl(followup_status)##  followup_status   n    percent\r\n##           missed  10 0.02325581\r\n##    not_attempted   5 0.01162791\r\n##    not_performed 319 0.74186047\r\n##      seen_not_ok   6 0.01395349\r\n##          seen_ok  90 0.20930233"},{"path":"contact-tracing.html","id":"plot-over-time","chapter":"1 Contact tracing","heading":"Plot over time","text":"dates data continuous, use histogram plot date_of_followup assigned x-axis. can achieve “stacked” histogram specifying fill = argument within aes(), assign column followup_status. Consequently, can set legend title using fill = argument labs().can see contacts identified waves (presumably corresponding epidemic waves cases), follow-completion improve course epidemic.CAUTION: preparing many plots (e.g. multiple jurisdictions) want legends appear identically even varying levels data completion data composition. may plots follow-statuses present data, still want categories appear legends. ggplots (like ), can specify drop = FALSE argument scale_x_discrete() (“x” either fill color, etc.). tables, use tabyl() shows counts factor levels, using count() dplyr add argument .drop = FALSE include counts factor levels.","code":"\nggplot(data = followups_clean)+\n  geom_histogram(mapping = aes(x = date_of_followup, fill = followup_status)) +\n  scale_fill_discrete(drop = FALSE)+   # show all factor levels (followup_status) in the legend, even those not used\n  theme_classic() +\n  labs(\n    x = \"\",\n    y = \"Number of contacts\",\n    title = \"Daily Contact Followup Status\",\n    fill = \"Followup Status\",\n    subtitle = str_glue(\"Data as of {max(followups$date_of_followup, na.rm=T)}\"))   # dynamic subtitle"},{"path":"contact-tracing.html","id":"daily-individual-tracking","chapter":"1 Contact tracing","heading":"Daily individual tracking","text":"outbreak small enough, may want look contact individually see status course follow-. Fortunately, followups dataset already contains column day “number” follow-(1-14). exist data, create calculating difference encounter date date follow-intended begin.convenient visualisation mechanism (number cases large) can heat plot, made geom_tile(). See details [heat plot] page.","code":"\nggplot(data = followups_clean)+\n  geom_tile(mapping = aes(x = followup_number, y = contact_id, fill = followup_status),\n            color = \"grey\")+       # grey gridlines\n  theme_minimal()+\n  scale_x_continuous(breaks = seq(from = 1, to = 14, by = 1))"},{"path":"contact-tracing.html","id":"analyse-by-group","chapter":"1 Contact tracing","heading":"Analyse by group","text":"Perhaps data viewed daily weekly basis operational decision-making. may want meaningful disaggregations geographic area contact-tracing team. can adjusting columns provided group_by().disaggregated contact tracer, perhaps want add threshold line display total # contacts normally one person area/team can handle, current workload compares. just using geom_hline() function.","code":"\nplot_by_region <- followups_clean %>%                                        # begin with follow-up dataset\n  count(admin_1_name, admin_2_name, followup_status) %>%   # get counts by unique region-status (creates column 'n' with counts)\n  \n  # begin ggplot()\n  ggplot(                                         # begin ggplot\n    mapping = aes(x = reorder(admin_2_name, n),     # reorder admin factor levels by the numeric values in column 'n'\n                  y = n,                            # heights of bar from column 'n'\n                  fill = followup_status,           # color stacked bars by their status\n                  label = n))+                      # to pass to geom_label()              \n  geom_col()+                                     # stacked bars, mapping inherited from above \n  geom_text(                                      # add text, mapping inherited from above\n    size = 3,                                         \n    position = position_stack(vjust = 0.5), \n    color = \"white\",           \n    check_overlap = TRUE,\n    fontface = \"bold\")+\n  coord_flip()+\n  labs(\n    x = \"\",\n    y = \"Number of contacts\",\n    title = \"Contact Followup Status, by Region\",\n    fill = \"Followup Status\",\n    subtitle = str_glue(\"Data as of {max(followups_clean$date_of_followup, na.rm=T)}\")) +\n  theme_classic()+                                                                      # Simplify background\n  facet_wrap(~admin_1_name, strip.position = \"right\", scales = \"free_y\", ncol = 1)      # introduce facets \n\nplot_by_region\nplot_by_region + \n     geom_hline(aes(yintercept=25), color=\"#C70039\", linetype = \"dashed\") # fictitious threshold at 25 contacts"},{"path":"contact-tracing.html","id":"kpi-tables","chapter":"1 Contact tracing","heading":"1.4 KPI Tables","text":"number different Key Performance Indicators (KPIs) can calculated tracked varying levels disaggregations across different time periods monitor contact tracing performance. calculations basic table format; fairly easy swap different KPIs.numerous sources contact tracing KPIs, one ResolveToSaveLives.org. majority work walking data structure thinking inclusion/exclusion criteria. show examples ; using Go.Data metadata structure:walk sample exercise creating nice table visual show contact follow-across admin areas. end, make fit presentation formattable package (use packages like flextable - see [Tables presentation]).create table like depend structure contact tracing data. Use [Descriptive tables] page learn summarise data using dplyr functions.create table dynamic change data change. make results interesting, set report_date allow us simulate running table certain day (pick 10th June 2020). data filtered date.Now, based data structure, following:Begin followups data summarise contain, unique contact:date latest record (matter status encounter)date latest encounter contact “seen”encounter status final “seen” encounter (e.g. symptoms, without symptoms)Join data contacts data, contains information overall contact status, date last exposure case, etc. Also calculate metrics interest contact days since last exposureWe group enhanced contact data geographic region (admin_2_name) calculate summary statistics per regionFinally, format table nicely presentationFirst summarise follow-data get information interest:data look:Now add information contacts dataset, calculate additional columns.data look. Note contacts column right, new calculated column far right.Next summarise contacts data region, achieve concise data frame summary statistic columns.now apply styling formattable knitr packages, including footnote shows “” date.","code":"\n# Set \"Report date\" to simulate running the report with data \"as of\" this date\nreport_date <- as.Date(\"2020-06-10\")\n\n# Create follow-up data to reflect the report date.\ntable_data <- followups_clean %>% \n  filter(date_of_followup <= report_date)\nfollowup_info <- table_data %>% \n  group_by(contact_id) %>% \n  summarise(\n    date_last_record = max(date_of_followup, na.rm=T),\n    date_last_seen = max(date_of_followup[followup_status %in% c(\"seen_ok\", \"seen_not_ok\")], na.rm=T),\n    status_last_record = followup_status[which(date_of_followup == date_last_record)]) %>% \n  ungroup()\ncontacts_info <- followup_info %>% \n  right_join(contacts, by = \"contact_id\") %>% \n  mutate(\n    database_date = max(date_last_record, na.rm=T),\n    days_since_seen = database_date - date_last_seen,\n    days_since_exposure = database_date - date_of_last_exposure\n    )\ncontacts_table <- contacts_info %>% \n  group_by(`Admin 2` = admin_2_name) %>%\n  summarise(\n    `Registered contacts` = n(),\n    `Active contacts` = sum(contact_status == \"UNDER_FOLLOW_UP\", na.rm=T),\n    `In first week` = sum(days_since_exposure < 8, na.rm=T),\n    `In second week` = sum(days_since_exposure >= 8 & days_since_exposure < 15, na.rm=T),\n    `Became case` = sum(contact_status == \"BECAME_CASE\", na.rm=T),\n    `Lost to follow up` = sum(days_since_seen >= 3, na.rm=T),\n    `Never seen` = sum(is.na(date_last_seen)),\n    `Followed up - signs` = sum(status_last_record == \"Seen_not_ok\" & date_last_record == database_date, na.rm=T),\n    `Followed up - no signs` = sum(status_last_record == \"Seen_ok\" & date_last_record == database_date, na.rm=T),\n    `Not Followed up` = sum(\n      (status_last_record == \"NOT_ATTEMPTED\" | status_last_record == \"NOT_PERFORMED\") &\n        date_last_record == database_date, na.rm=T)) %>% \n    arrange(desc(`Registered contacts`))\ncontacts_table %>%\n  mutate(\n    `Admin 2` = formatter(\"span\", style = ~ formattable::style(\n      color = ifelse(`Admin 2` == NA, \"red\", \"grey\"),\n      font.weight = \"bold\",font.style = \"italic\"))(`Admin 2`),\n    `Followed up - signs`= color_tile(\"white\", \"orange\")(`Followed up - signs`),\n    `Followed up - no signs`= color_tile(\"white\", \"#A0E2BD\")(`Followed up - no signs`),\n    `Became case`= color_tile(\"white\", \"grey\")(`Became case`),\n    `Lost to follow up`= color_tile(\"white\", \"grey\")(`Lost to follow up`), \n    `Never seen`= color_tile(\"white\", \"red\")(`Never seen`),\n    `Active contacts` = color_tile(\"white\", \"#81A4CE\")(`Active contacts`)\n  ) %>%\n  kable(\"html\", escape = F, align =c(\"l\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\")) %>%\n  kable_styling(\"hover\", full_width = FALSE) %>%\n  add_header_above(c(\" \" = 3, \n                     \"Of contacts currently under follow up\" = 5,\n                     \"Status of last visit\" = 3)) %>% \n  footnote(general = str_glue(\"Data are current to {format(report_date, '%b %d %Y')}\"))"},{"path":"contact-tracing.html","id":"transmission-matrices","chapter":"1 Contact tracing","heading":"1.5 Transmission Matrices","text":"discussed [Heat plots] page, can create matrix “infected ” using geom_tile().new contacts created, Go.Data stores relationship information relationships API endpoint; can see first 50 rows dataset . means can create heat plot relatively steps given contact already joined ’s source case.done age pyramid comparing cases contacts, can select variables need create columns categorical age groupings sources (cases) targets (contacts).described previously, create cross-tabulation;convert long format proportions;create heat-map age.","code":"\n# display the first 50 rows of relationships data as a table\nDT::datatable(head(relationships, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\nheatmap_ages <- relationships %>% \n  select(source_age, target_age) %>% \n  mutate(                              # transmute is like mutate() but removes all other columns\n    source_age_class = epikit::age_categories(source_age, breakers = seq(0, 80, 5)),\n    target_age_class = epikit::age_categories(target_age, breakers = seq(0, 80, 5))) \ncross_tab <- table(\n  source_cases = heatmap_ages$source_age_class,\n  target_cases = heatmap_ages$target_age_class)\n\ncross_tab##             target_cases\r\n## source_cases 0-4 5-9 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64 65-69 70-74 75-79 80+\r\n##        0-4     0   0     0     0     0     0     0     0     0     1     0     1     0     0     0     0   0\r\n##        5-9     0   0     1     0     0     0     0     1     0     0     0     1     0     0     0     0   0\r\n##        10-14   0   0     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        15-19   0   0     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        20-24   1   1     0     1     2     0     2     1     0     0     0     1     0     0     0     0   1\r\n##        25-29   1   2     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        30-34   0   0     0     0     0     0     0     0     1     1     0     1     0     0     0     0   0\r\n##        35-39   0   2     0     0     0     0     0     0     0     1     0     0     0     0     0     0   0\r\n##        40-44   0   0     0     0     1     0     2     1     0     3     1     1     0     0     0     1   1\r\n##        45-49   1   2     2     0     0     0     3     0     1     0     3     2     1     0     0     0   1\r\n##        50-54   1   2     1     2     0     0     1     0     0     3     4     1     0     1     0     0   1\r\n##        55-59   0   1     0     0     1     1     2     0     0     0     0     0     0     0     0     0   0\r\n##        60-64   0   0     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        65-69   0   0     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        70-74   0   0     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        75-79   0   0     0     0     0     0     0     0     0     0     0     0     0     0     0     0   0\r\n##        80+     1   0     0     2     1     0     0     0     1     0     0     0     0     0     0     0   0\nlong_prop <- data.frame(prop.table(cross_tab))\nggplot(data = long_prop)+       # use long data, with proportions as Freq\n  geom_tile(                    # visualize it in tiles\n    aes(\n      x = target_cases,         # x-axis is case age\n      y = source_cases,     # y-axis is infector age\n      fill = Freq))+            # color of the tile is the Freq column in the data\n  scale_fill_gradient(          # adjust the fill color of the tiles\n    low = \"blue\",\n    high = \"orange\")+\n  labs(                         # labels\n    x = \"Target case age\",\n    y = \"Source case age\",\n    title = \"Who infected whom\",\n    subtitle = \"Frequency matrix of transmission events\",\n    fill = \"Proportion of all\\ntranmsission events\"     # legend title\n  )"},{"path":"contact-tracing.html","id":"resources","chapter":"1 Contact tracing","heading":"1.6 Resources","text":"https://github.com/WorldHealthOrganization/godata/tree/master/analytics/r-reportinghttps://worldhealthorganization.github.io/godata/https://community-godata..int/","code":""}]
