[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via offline version (instructions )gaps book address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareLet’s avoid hours online searching repository best-practice code common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see “Datasets used” pageTo download offline version follow steps:Click html file Github repositoryClick “Download” button. window open HTML source code.“Save ” webpage, via right-click (windows) Cmd-s (mac) - ensure file type “Webpage, Complete”file large (>40MB) content may take time appear. displays one long page, search Ctrl+f (Cmd-f).","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions. can submit issue pull request Github repository, provide feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha BerryReviewers:Advisers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET).Programmatic support provided EPIET Alumni Network (EAN) MSF’s Manson Unit.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"","heading":"License and Terms of Use","text":"handbook approved product specific organization.Although strive accuracy, provide guarantee content book.work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"working-with-dates.html","id":"working-with-dates","chapter":"1 Working with dates","heading":"1 Working with dates","text":"","code":""},{"path":"working-with-dates.html","id":"overview","chapter":"1 Working with dates","heading":"1.1 Overview","text":"Working dates R notoriously difficult compared object classes. R often interprets dates character objects - means used general date operations making time series calculating time intervals. make matters difficult, many date formats, can confused formats. Luckily, dates can wrangled easily practice, set helpful packages.Dates R class object - Date class. noted also class stores objects date time. Date time objects formally referred /POSIXt, POSIXct, /POSIXlt classes (difference isn’t important). objects informally referred datetime classes.important make R recognize column contains dates.Dates object class can tricky work .present several ways convert date columns Date class.","code":""},{"path":"working-with-dates.html","id":"packages-and-data","chapter":"1 Working with dates","heading":"1.2 Packages and data","text":"following packages recommended working dates:page occasionally use case linelist demonstration.","code":"\n# Checks if package is installed, installs if necessary, and loads package for current session\n\npacman::p_load(aweek,      # flexibly converts dates to weeks, and vis-versa\n               lubridate,  # for conversions to months, years, etc.\n               linelist,   # function to guess messy dates\n               ISOweek,    # another option for creating weeks\n               tidyverse)  # data management and visualization  \nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"working-with-dates.html","id":"current-date-and-time","chapter":"1 Working with dates","heading":"1.3 Current date and time","text":"can get system date system datetime following base R.lubridate package can also returned today() now(), respectively. date() returns current date time weekday month names.","code":"\n# get the system date - this is a DATE class\nSys.Date()## [1] \"2021-03-10\"\n# get the system time - this is a DATETIME class\nSys.time()## [1] \"2021-03-10 19:58:51 EST\""},{"path":"working-with-dates.html","id":"convert-to-date-class","chapter":"1 Working with dates","heading":"1.4 Convert to Date class","text":"","code":""},{"path":"working-with-dates.html","id":"as.date","chapter":"1 Working with dates","heading":"as.Date()","text":"standard, base R function convert object column class Date .Date() (note capitalization “D”)..Date() requires user specify existing format date, can understand, convert, store element (day, month, year, etc.) correctly. Read online .Date().used column, .Date() therefore requires character date values format converting. data messy varying date formats column, try cleaning manually consider using guess_dates() linelist package.unsure confused class data (e.g. POSIXct, etc.) can easiest first convert column class Character .character(), convert class Date.Now, data may look like “1989-12-30” “05/06/2014”, still character values class Date. convert column character values date values, using base R function .Date().Within .Date() function, use format = argument tell R current format date components - characters refer month, day, year, separated. values already one R’s standard date formats (YYYY-MM-DD YYYY/MM/DD) format = argument necessary.Specify format = pattern using special abbreviations , character string (quotes).example, character dates format DD/MM/YYYY, like “24/04/1968”, command turn values dates . Putting format quotation marks necessary.abbreviations listed :%d = Day number month (5, 17, 28, etc.)\r\n%j = Day number year (Julian day 001-366)\r\n%= Abbreviated weekday (Mon, Tue, Wed, etc.)\r\n%= Full weekday (Monday, Tuesday, etc.)\r\n%w = Weekday number (0-6, Sunday 0)\r\n%u = Weekday number (1-7, Monday 1)\r\n%W = Week number (00-53, Monday week start)\r\n%U = Week number (01-53, Sunday week start)\r\n%m = Month number (e.g. 01, 02, 03, 04)\r\n%b = Abbreviated month (Jan, Feb, etc.)\r\n%B = Full month (January, February, etc.)\r\n%y = 2-digit year (e.g. 89)\r\n%Y = 4-digit year (e.g. 1989)\r\n%h = hours (24-hr clock)\r\n%m = minutes\r\n%s = seconds\r\n%z = offset GMT\r\n%Z = Time zone (character)TIP: format = argument telling R format want dates , rather identify date parts run command.TIP: sure format = argument use date-part separator (e.g. /, -, space) present dates.values class Date, R default display standard format, YYYY-MM-DD.","code":"\n# With pipes\nlinelist <- linelist %>% \n  mutate(date_onset = as.character(date_onset))\n\n# In base R\nlinelist$date_onset <- as.character(linelist$date_onset)# Using pipes\r\nlinelist <- linelist %>% \r\n  mutate(date_onset = as.Date(date_of_onset, format = \"%d/%m/%Y\"))\r\n\r\n# Using base R\r\nlinelist$date_onset <- as.Date(linelist$date_of_onset, format = \"%d/%m/%Y\"))"},{"path":"working-with-dates.html","id":"lubridate","chapter":"1 Working with dates","heading":"lubridate","text":"Converting character objects dates can made far easier using lubridate package. tidyverse package designed make working dates times simple consistent base R. reasons, lubridate often considered gold-standard package dates time, recommended whenever working .lubridate package provides several different helper functions designed convert character objects dates intuitive, lenient way specifying format .Date(). functions specific rough date format, allow variety separators, synonyms dates (e.g. 01 vs Jan vs January) - named abbreviations date formats.ymd() function flexibly converts date values supplied year, month, day.mdy() function flexibly converts date values supplied month, day, year.dmy() function flexibly converts date values supplied day, month, year.using piping tidyverse, converting character column dates lubridate might look like :complete, can run class() verify class columnOnce values class Date, R default display standard format, YYYY-MM-DD.","code":"\n# install/load lubridate \npacman::p_load(lubridate)\n# read date in year-month-day format\nymd(\"2020-10-11\")## [1] \"2020-10-11\"\nymd(\"20201011\")## [1] \"2020-10-11\"\n# read date in month-day-year format\nmdy(\"10/11/2020\")## [1] \"2020-10-11\"\nmdy(\"Oct 11 20\")## [1] \"2020-10-11\"\n# read date in day-month-year format\ndmy(\"11 10 2020\")## [1] \"2020-10-11\"\ndmy(\"11 October 2020\")## [1] \"2020-10-11\"\nlinelist <- linelist %>%\n  mutate(date_onset = lubridate::dmy(date_onset))\n# Check the class of the column\nclass(linelist$date_onset)  "},{"path":"working-with-dates.html","id":"combine-columns","chapter":"1 Working with dates","heading":"Combine columns","text":"can use lubridate functions make_date() make_datetime() combine multiple numeric columns one date column. example numeric columns day, month, year data frame linelist:","code":"\nlinelist <- linelist %>% \n  mutate(date = make_date(year = year, month = month, day = day))"},{"path":"working-with-dates.html","id":"excel-dates","chapter":"1 Working with dates","heading":"1.5 Excel Dates","text":"Excel stores dates number days since December 30, 1899. dataset imported Excel shows dates numbers characters like “41369”… use .Date() lubridate’s as_date() function convert, instead supplying format , supply origin date. work excel date read character type, sure ensure date numeric class (convert one)!NOTE: provide origin date R’s default date format (“YYYY-MM-DD”).","code":"\n# An example of providing the Excel 'origin date' when converting Excel number dates\ndata_cleaned <- data %>% \n  mutate(date_onset = as_date(as.double(date_onset), origin = \"1899-12-30\")) # convert to numeric, then convert to date"},{"path":"working-with-dates.html","id":"messy-dates","chapter":"1 Working with dates","heading":"1.6 Messy dates","text":"function guess_dates() linelist package attempts read “messy” date column containing dates many different formats convert dates standard format. can read online guess_dates(). guess_dates() yet available CRAN R 4.0.2, try install via pacman::p_load_gh(\"reconhub/linelist\").example guess_dates see vector following character dates “03 Jan 2018”, “07/03/1982”, “08/20/85” convert class Date : 2018-01-03, 1982-03-07, 1985-08-20.optional arguments guess_dates() might include :error_tolerance - proportion entries identified dates tolerated (defaults 0.1 10%)last_date - last valid date (defaults current date)first_date - first valid date. Defaults fifty years last_date.","code":"\nlinelist::guess_dates(c(\"03 Jan 2018\",\n                        \"07/03/1982\",\n                        \"08/20/85\"))## [1] \"2018-01-03\" \"1982-03-07\" \"1985-08-20\"# An example using guess_dates on the column dater_onset\r\nlinelist <- linelist %>%                 # the dataset is called linelist\r\n  mutate(\r\n    date_onset = linelist::guess_dates(  # the guess_dates() from package \"linelist\"\r\n      date_onset,\r\n      error_tolerance = 0.1,\r\n      first_date = \"2016-01-01\"\r\n    )"},{"path":"working-with-dates.html","id":"convert-to-datetime-classes","chapter":"1 Working with dates","heading":"1.7 Convert to datetime classes","text":"previously mentioned, R also supports datetime class - column contains date time information. Date class, often need converted character objects datetime objects.","code":""},{"path":"working-with-dates.html","id":"convert-dates-with-times","chapter":"1 Working with dates","heading":"Convert dates with times","text":"standard datetime object formatted date first, followed time component - example 01 Jan 2020, 16:30. dates, many ways can formatted, numerous levels precision (hours, minutes, seconds) can supplied.Luckily, lubridate helper functions also exist help convert strings datetime objects. functions extensions date helper functions, _h (hours supplied), _hm (hours minutes supplied), _hms (hours, minutes, seconds supplied) appended end (e.g. dmy_hms()). can used shown:Convert datetime hours datetime objectConvert datetime hours minutes datetime objectConvert datetime hours, minutes, seconds datetime objectYou can supply time zone ignored. See section later page time zones.working dataframe, time date columns can combined create datetime column using str_glue() stringr package appropriate lubridate function. See page [Characters strings] details stringr.\r\nexample, linelist data frame column format “hours:minutes”. convert datetime follow steps:Create “clean” time admission column missing values filled-column median. lubridate won’t operate missing values. combine column date_hospitalisation, use function ymd_hm() convert.","code":"\nymd_h(\"2020-01-01 16hrs\")## [1] \"2020-01-01 16:00:00 UTC\"\nymd_h(\"2020-01-01 4PM\")## [1] \"2020-01-01 16:00:00 UTC\"\ndmy_hm(\"Jan 1st 2020 16:20\")## Warning: All formats failed to parse. No formats found.## [1] NA\nmdy_hms(\"01 January 20, 16:20:40\")## Warning: All formats failed to parse. No formats found.## [1] NA\nmdy_hms(\"01 January 20, 16:20:40 PST\")## Warning: All formats failed to parse. No formats found.## [1] NA# packages\r\npacman::p_load(tidyverse, lubridate, stringr)\r\n\r\n# time_admission is a column in hours:minutes\r\nlinelist <- linelist %>%\r\n  \r\n  # when time of admission is not given, assign the median admission time\r\n  mutate(\r\n    time_admission_clean = ifelse(\r\n      is.na(time_admission),\r\n      median(time_admission),\r\n      time_admission\r\n  ) %>%\r\n  \r\n    # use str_glue() to combine two columns to create a character column\r\n    # and then use ymd_hm() to convert to datetime\r\n  mutate(\r\n    date_time_of_admission = str_glue(\"{date_hospitalisation} {time_admission_clean}\") %>% \r\n      ymd_hm()\r\n  )"},{"path":"working-with-dates.html","id":"convert-times-alone","chapter":"1 Working with dates","heading":"Convert times alone","text":"data contain character time (hours minutes), can convert manipulate times using strptime() base R. example, get difference two times:Note however without date value provided, assumes date today. combine string date string time together see use stringr section just . Read strptime() .","code":"\n# raw character times\ntime1 <- \"13:45\" \ntime2 <- \"15:20\"\n\n# Times converted to a datetime class\ntime1_clean <- strptime(time1, format = \"%H:%M\")\ntime2_clean <- strptime(time2, format = \"%H:%M\")\n\n# Difference is of class \"difftime\" by default, here converted to numeric hours \nas.numeric(time2_clean - time1_clean)   # difference in hours## [1] 1.583333"},{"path":"working-with-dates.html","id":"working-with-dates-1","chapter":"1 Working with dates","heading":"1.8 Working with dates","text":"lubridate can also used variety functions, extracting aspects date/datetime, performing date arithmetic, calculating date intervalsHere define date use examples:can also extract time components datetime object column. can useful want view distribution admission times.several options retrieve weeks. See section Epidemiological weeks .","code":"\n# create object of class Date\nexample_date <- ymd(\"2020-03-01\")\n# extract the month and day from this date\nmonth(example_date)  # month number## [1] 3\nday(example_date)    # day (number)## [1] 1\nwday(example_date)   # day number of the week (1-7)## [1] 1\nexample_datetime <- ymd_hm(\"2020-03-01 14:45\")\n\nhour(example_datetime)     # extract hour\nminute(example_datetime)   # extract minute\nsecond(example_datetime)   # extract second"},{"path":"working-with-dates.html","id":"date-math","chapter":"1 Working with dates","heading":"Date math","text":"","code":"\n# add 3 days to this date\nexample_date + days(3)## [1] \"2020-03-04\"\n# add 7 weeks and subtract two days from this date\nexample_date + weeks(7) - days(2)## [1] \"2020-04-17\""},{"path":"working-with-dates.html","id":"date-intervals","chapter":"1 Working with dates","heading":"Date intervals","text":"can brought together work data - example:","code":"\n# find the interval between this date and Feb 20 2020 \nexample_date - ymd(\"2020-02-20\")## Time difference of 10 days\npacman::p_load(lubridate, tidyverse)   # load packages\n\nlinelist <- linelist %>%\n  \n  # convert date of onset from character to date objects by specifying dmy format\n  mutate(date_onset = dmy(date_onset),\n         date_hospitalisation = dmy(date_hospitalisation)) %>%\n  \n  # filter out all cases without onset in march\n  filter(month(date_onset) == 3) %>%\n    \n  # find the difference in days between onset and hospitalisation\n  mutate(onset_to_hosp_days = date_hospitalisation - date_of_onset)"},{"path":"working-with-dates.html","id":"calculate-distance-between-dates","chapter":"1 Working with dates","heading":"1.9 Calculate distance between dates","text":"difference dates can calculated :Correctly formating date column class date (see instructions )Creating new column defined one date column subtracted otherConverting result numeric class (default class “datediff”). ensures subsequent mathematical calculations can performed.dataframe format (.e. working linelist), either dates missing, operation fail row. result NA instead numeric value. using column calculations, sure set na.rm option TRUE. example:","code":"\n# define columns as date classes\ndate_of_onset <- ymd(\"2020-03-16\")\ndate_lab_confirmation <- ymd(\"2020-03-20\")\n\n# find the delay between onset and lab confirmation\ndays_to_lab_conf <- as.double(date_lab_confirmation - date_of_onset)\ndays_to_lab_conf## [1] 4\n# add a new column\n# calculating the number of days between symptom onset and patient outcome\nlinelist_delay <- linelist_cleaned %>%\n  mutate(\n    days_onset_to_outcome = as.double(date_of_outcome - date_of_onset)\n  )\n\n# calculate the median number of days to outcome for all cases where data are available\nmed_days_outcome <- median(linelist_delay$dats_onset_to_outcome, na.rm = T)\n\n# often this operation might be done only on a subset of data cases, e.g. those who died\n# this is easy to look at and will be explained later in the handbook"},{"path":"working-with-dates.html","id":"date-display","chapter":"1 Working with dates","heading":"1.10 Date display","text":"dates correct class, often want display differently (e.g. plot, graph, table). example, display “Monday 05 Jan” instead “2018-01-05”. can base R function format(), accepts date character string (quotes) specifying desired output (format = argument .Date()). Read online tutorial. common placeholders string.Using format() convert values class Character, generally used towards end analysis display purposes !%d = Day number month (5, 17, 28, etc.)\r\n%j = Day number year (Julian day 001-366)\r\n%= Abbreviated weekday (Mon, Tue, Wed, etc.)\r\n%= Full weekday (Monday, Tuesday, etc.)\r\n%w = Weekday number (0-6, Sunday 0)\r\n%u = Weekday number (1-7, Monday 1)\r\n%W = Week number (00-53, Monday week start)\r\n%U = Week number (01-53, Sunday week start)\r\n%m = Month number (e.g. 01, 02, 03, 04)\r\n%b = Abbreviated month (Jan, Feb, etc.)\r\n%B = Full month (January, February, etc.)\r\n%y = 2-digit year (e.g. 89)\r\n%Y = 4-digit year (e.g. 1989)\r\n%h = hours (24-hr clock)\r\n%m = minutes\r\n%s = seconds\r\n%z = offset GMT\r\n%Z = Time zone (character)example formatting today’s date:","code":"\n# today's date, with formatting\nformat(Sys.Date(), format = \"%d %B %Y\")## [1] \"10 March 2021\"\n# easy way to get full date and time (no formatting)\ndate()## [1] \"Wed Mar 10 19:58:53 2021\"\n# formatted date, time, and time zone (using paste0() function)\npaste0(\n  format(Sys.Date(), format = \"%A, %b %d '%y, %z  %Z, \"), \n  format(Sys.time(), format = \"%H:%M:%S\")\n)## [1] \"Wednesday, Mar 10 '21, +0000  UTC, 19:58:53\""},{"path":"working-with-dates.html","id":"converting-datestime-zones","chapter":"1 Working with dates","heading":"1.11 Converting dates/time zones","text":"data present different time time zones, can often important standardise data unified time zone. can present challenge, time zone component data must coded manually cases.R, datetime object timezone component. default, datetime objects carry local time zone computer used - generally specific location rather named timezone, time zones often change locations due daylight savings time. possible accurately compensate time zones without time component date, event date column represents attributed specific time, therefore time shifts measured hours reasonably accounted .deal time zones, number helper functions lubridate can used change time zone datetime object local time zone different time zone. Time zones set attributing valid tz database time zone datetime object. list can found - location using data list, nearby large cities time zone available serve purpose.https://en.wikipedia.org/wiki/List_of_tz_database_time_zonesThis may seem largely abstract, often needed user isn’t working across time zones. One simple example implementation :","code":"\n# assign the current time to a column\ntime_now <- Sys.time()\ntime_now## [1] \"2021-03-10 19:58:53 EST\"\n# use with_tz() to assign a new timezone to the column, while CHANGING the clock time\ntime_london_real <- with_tz(time_now, \"Europe/London\")\n\n# use force_tz() to assign a new timezone to the column, while KEEPING the clock time\ntime_london_local <- force_tz(time_now, \"Europe/London\")\n\n\n# note that as long as the computer that was used to run this code is NOT set to London time, there will be a difference in the times (the number of hours difference from the computers time zone to london)\n\ntime_london_real - time_london_local## Time difference of 5 hours\n# TODO add when time column is here\n# set the time column to time zone for ebola outbreak \n\n# \"Africa/Lubumbashi\" is the time zone for eastern DRC/Kivu Nord"},{"path":"working-with-dates.html","id":"epidemiological-weeks","chapter":"1 Working with dates","heading":"1.12 Epidemiological weeks","text":"","code":""},{"path":"working-with-dates.html","id":"lubridate-1","chapter":"1 Working with dates","heading":"lubridate","text":"generally recommend using floor_date() function lubridate, argument unit = \"week\". rounds date “start” week, defined argument week_start =. default week start 1 (Mondays) can specify day week start (e.g. 7 Sundays).floor_date() can also used round time units including “second”, “minute”, “hour”, “day”, “month”, “year”).\r\nreturned value start date week, Date class. useful plotting data, class Date easily recognized ordered correctly ggplot(), grouping can adjusted easily using scale_x_date() (e.g. date_breaks = \"3 weeks\"). described page [ggplot tips] page [Epidemic curves].See section Date display tips adjust display dates plot. can provide week column class Date (using floor_date()) format display desired providing desired “%” nomenclature date_labels = scale_x_date(). example, use “%Y-%W” “%Y-%U” return year week number (given Monday Sunday week start, respectively).","code":""},{"path":"working-with-dates.html","id":"weekly-counts","chapter":"1 Working with dates","heading":"Weekly counts","text":"See page [Epidemic curves] example aggregating data epiweeks. brief example .Create new ‘week’ column mutate(), using floor_date()Get counts rows (case) per week count(); filter cases missing dateFollow-complete() tidyr ensure weeks appear data - even rows/cases.first rows resulting data frame:","code":"\n# Make aggregated dataset of weekly case counts\nweekly_counts <- linelist %>% \n  mutate(week = floor_date(         # make new column, week of onset\n    date_onset,\n    unit = \"week\")) %>%            \n  count(week) %>%                   # group data by week and count rows per group\n  filter(!is.na(week)) %>%          # remove cases that were missing onset date\n  tidyr::complete(week = seq.Date(  # ensure all weeks are present, even those with no cases reported\n    from = min(week),               \n    to = max(week),\n    by = \"week\"))"},{"path":"working-with-dates.html","id":"alternatives","chapter":"1 Working with dates","heading":"Alternatives","text":"Note lubridate also functions week(), epiweek(), isoweek(), slightly different start dates nuances. Generally speaking though, floor_date() need. Read details functions entering ?week console reading documentation .might consider using package aweek set epidemiological weeks. can read RECON website. functions date2week() week2date() can set week start day week_start = \"Monday\". package easiest want “week”-style outputs (e.g. “2020-W12”). Another advantage aweek date2week() applied date column, returned column (week format) automatically class Factor includes levels weeks time span (avoids extra step complete() described ). However, aweek functionality round dates time units months, years, etc.\r\nAnother alternative time series also works well show “week” format (“2020 W12”) yearweek() package tsibble, demonstrated page [Time series outbreak detection].","code":""},{"path":"working-with-dates.html","id":"lagging-and-leading-calculations","chapter":"1 Working with dates","heading":"1.13 Lagging and leading calculations","text":"lead() lag() functions dplyr package help find previous (lagged) subsequent (leading) values vector - typically numeric date vector. useful calculations change/difference time units.Let’s say want calculate difference cases current week previous one. data initially provided weekly counts shown . learn aggregate counts daily weekly see page aggregating (LINK).using lag() lead() order rows dataframe important! - pay attention whether dates/numbers ascending descendingFirst, create new column containing value previous (lagged) week.Control number units back/forward n = (must non-negative integer)Use default = define value placed non-existing rows (e.g. first row lagged value). default NA.Use order_by = TRUE reference column orderedNext, create new column difference two cases columns:can read lead() lag() documentation entering ?lag console.","code":"\ncounts <- counts %>% \n  mutate(cases_prev_wk = lag(cases_wk, n = 1))\ncounts <- counts %>% \n  mutate(cases_prev_wk = lag(cases_wk, n = 1),\n         case_diff = cases_wk - cases_prev_wk)"},{"path":"working-with-dates.html","id":"dates-miscellaneous","chapter":"1 Working with dates","heading":"1.14 Dates miscellaneous","text":"Sys.Date( ) base R returns current date computerSys.Time() base R returns current time computerdate() lubridate returns current date time.","code":""},{"path":"working-with-dates.html","id":"resources","chapter":"1 Working with dates","heading":"1.15 Resources","text":"lubridate tidyverse pagelubridate RStudio cheatsheet\r\nR Data Science page dates timesOnline tutorial\r\nDate formats","code":""}]
