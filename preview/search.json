[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.BOOK REVIEWERS: PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"open-access R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiological problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download book data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"Want share use book? Want offer fix addition?\r\nEmail us epiRhandbook@gmail.com. welcome comments suggestions.can also submit issue pull request Github repository, provide structured feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local, state, provincial, national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha Berry, Wen LinReviewers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"1 R Basics","heading":"1 R Basics","text":"","code":""},{"path":"r-basics.html","id":"overview","chapter":"1 R Basics","heading":"1.1 Overview","text":"page intended comprehensive “learn R” tutorial. However, cover fundamentals can useful reference refreshing memory. See section recommended training links comprehensive tutorials.Much page adapted permission R Basics section R4Epis project.See page [Transition R] tips switching R STATA, SAS, Excel.","code":""},{"path":"r-basics.html","id":"why-use-r","chapter":"1 R Basics","heading":"1.2 Why use R?","text":"stated R project website, R programming language environment statistical computing graphics. highly versatile, extensible, community-driven.CostR free use! strong ethic community free open-source material.ReproducibilityConducting data management analysis programming language (compared Excel another primarily point-click/manual tool) enhances reproducibility, makes error-detection easier, eases workload.CommunityThe R community users enormous collaborative. New packages tools address real-life problems developed daily, vetted community users. one example, R-Ladies worldwide organization whose mission promote gender diversity R community, one largest organizations R users. likely chapter near !","code":""},{"path":"r-basics.html","id":"key-terms","chapter":"1 R Basics","heading":"1.3 Key terms","text":"RStudio - RStudio interface (GUI) easier use R. Read section.Objects - Everything store R - datasets, variables, list village names, total population number, even outputs graphs - objects assigned name can referenced later commands. Read section.Functions - function code operation accept inputs returns transformed output. Read section.Packages - R package shareable bundle functions. Read section.Scripts - Scripts document files hold commands. Read section","code":""},{"path":"r-basics.html","id":"recommended-training","chapter":"1 R Basics","heading":"1.4 Recommended training","text":"","code":""},{"path":"r-basics.html","id":"resources-within-rstudio","chapter":"1 R Basics","heading":"Resources within RStudio","text":"Help documentationSearch RStudio “Help” tab documentation R packages specific functions. within pane also contains Files, Plots, Packages (typically lower-right pane). shortcut, can also type name package function R console question-mark open relevant Help page. example: ?filter ?diagrammeR.Interactive tutorialsRStudio built-interative tutorials via learnr package. package installed, can go tutorials via “Tutorial” tab upper-right RStudio pane (also contains Environment History tabs).","code":""},{"path":"r-basics.html","id":"cheatsheets","chapter":"1 R Basics","heading":"Cheatsheets","text":"many PDF “cheatsheets” available RStudio website, example:Factors forcats packageDates times lubridate packageStrings stringr package“apply” functions purrr packageData import cheatsheetData transformation cheatsheet dplyr packageR MarkdownShinyData visualization ggplot2 packageCartographyleaflet package (interactive maps)Python R (reticulate package)online R resource specifically Excel users","code":""},{"path":"r-basics.html","id":"twitter","chapter":"1 R Basics","heading":"Twitter","text":"R vibrant twitter community can learn tips, shortcuts, news - follow accounts:R Function Day @rfuntionaday incredible resourceR Data Science @rstats4dsRStudio @RStudioRStudio Tips @rstudiotipsR-Bloggers @RbloggersR-ladies @RLadiesGlobalHadley Wickham @hadleywickhamAlso:#epitwitter #rstats","code":""},{"path":"r-basics.html","id":"free-online-resources","chapter":"1 R Basics","heading":"Free online resources","text":"definitive text R Data Science book Garrett Grolemund Hadley WickhamThe R4Epis project website aims “develop standardised data cleaning, analysis reporting tools cover common types outbreaks population-based surveys conducted MSF emergency response setting.” can find R basics training materials, templates RMarkdown reports outbreaks surveys, tutorials help set .","code":""},{"path":"r-basics.html","id":"installation","chapter":"1 R Basics","heading":"1.5 Installation","text":"install RVisit website https://www.r-project.org/ download latest version R suitable computer.install RStudioVisit website https://rstudio.com/products/rstudio/download/ download latest free Desktop version RStudio suitable computer.Permissions\r\nNote install R RStudio drive read write permissions. Otherwise, ability install R packages (frequent occurrence) impacted. encounter problems, try opening RStudio right-clicking icon selecting “Run administrator”. tips can found page [R network drives].update R RStudioYour version R printed R Console start-. can also run sessionInfo().update R, go website mentioned re-install R. Alternatively, can use installr package (Windows) running installr::updateR(). open dialog boxes help download latest R version update packages new R version. details can found installr documentation.aware old R version still exist computer. can temporarily run older version (older “installation”) R clicking “Tools” -> “Global Options” RStudio choosing R version. can useful want use package updated work newest version R.update RStudio, can go website re-download RStudio. Another option click “Help” -> “Check Updates” within RStudio, may show latest updates.see versions R, RStudio, packages used Handbook made, see page [Datasets version used].","code":""},{"path":"r-basics.html","id":"other-software-you-may-need-to-install","chapter":"1 R Basics","heading":"Other software you may need to install","text":"TinyTeX (compiling RMarkdown document PDF)Pandoc (compiling RMarkdown documents)RTools (building packages R)phantomjs (saving still images animated networks, transmission chains)","code":""},{"path":"r-basics.html","id":"tinytex","chapter":"1 R Basics","heading":"TinyTex","text":"TinyTex custom LaTeX distribution, useful trying produce PDFs R.\r\nSee https://yihui.org/tinytex/ informaton.install TinyTex R:","code":"\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n# to uninstall TinyTeX, run tinytex::uninstall_tinytex()"},{"path":"r-basics.html","id":"pandoc","chapter":"1 R Basics","heading":"Pandoc","text":"Pandoc document converter, separate software R. comes bundled RStudio need downloaded. helps process converting Rmarkdown documents formats like .pdf adding complex functionality.","code":""},{"path":"r-basics.html","id":"rtools","chapter":"1 R Basics","heading":"RTools","text":"RTools collection software building packages RInstall website: https://cran.r-project.org/bin/windows/Rtools/","code":""},{"path":"r-basics.html","id":"phantomjs","chapter":"1 R Basics","heading":"phantomjs","text":"often used take “screenshots” webpages. example make transmission chain epicontacts package, HTML file produced interactive dynamic. want static image, can useful use webshot package automate process. require external program “phantomjs”. can install phantomjs via webshot package command webshot::install_phantomjs().","code":""},{"path":"r-basics.html","id":"rstudio","chapter":"1 R Basics","heading":"1.6 RStudio","text":"","code":""},{"path":"r-basics.html","id":"rstudio-orientation","chapter":"1 R Basics","heading":"RStudio Orientation","text":"First, open RStudio. icons can look similar, sure opening RStudio R.RStudio work must also R installed computer (see installation instructions).RStudio interface (GUI) easier use R. can think R engine vehicle, crucial work, RStudio body vehicle (seats, accessories, etc.) helps actually use engine move forward! can see complete RStudio user-interface cheatsheet (PDF) hereBy default RStudio displays four rectangle panes.TIP: RStudio displays one left pane scripts open yet.R Console PaneThe R Console, default left lower-left pane R Studio, home R “engine”. commands actually run non-graphic outputs error/warning messages appear. can directly enter run commands R Console, realize commands saved running commands script.familiar Stata, R Console like Command Window also Results Window.Source Pane\r\npane, default upper-left, space edit, run, save scripts, write commands want run. pane can also display datasets (data frames) viewing.Stata users, pane similar -file Data Editor windows.Environment Pane\r\npane, default upper-right, often used see brief summaries objects R Environment current session. objects include imported, modified, created datasets, parameters defined (e.g. specific epi week analysis), vectors lists defined analysis (e.g. names regions). Click arrow next data frame name see variables.Stata, similar Variables Manager window.pane also contains History can see commands can previously. also “Tutorial” tab can complete interactive R tutorials learnr package installed. also “Connections” pane external connections, can “Git” pane choose interface Github.Plots, Viewer, Packages, Help Pane\r\nlower-right pane includes several tabs. Typical plot graphics including maps display Plot pane. Interactive HTML outputs display Viewer pane. Help pane can display documentation help files. Files pane browser can used open delete files. Packages pane allows see, install, update, delete, load/unload R packages, see version package . learn packages see packages section .pane contains Stata equivalents Plots Manager Project Manager windows.","code":""},{"path":"r-basics.html","id":"rstudio-settings","chapter":"1 R Basics","heading":"RStudio settings","text":"Change RStudio settings appearance Tools drop-menu, selecting Global Options. can change default settings, including appearance/background color.RestartIf R freezes, can re-start R going Session menu clicking “Restart R”. avoids hassle closing opening RStudio. Everything R environment removed .","code":""},{"path":"r-basics.html","id":"keyboard-shortcuts","chapter":"1 R Basics","heading":"Keyboard shortcuts","text":"useful keyboard shortcuts . See keyboard shortcuts Windows, Max, Linux second page RStudio user interface cheatsheet.","code":""},{"path":"r-basics.html","id":"functions","chapter":"1 R Basics","heading":"1.7 Functions","text":"Functions core using R. Functions perform tasks operations. Many functions come installed R, many available download packages (explained next section), can even write custom functions!basics section functions explains:function workWhat function arguments areHow get help understanding functionA quick note syntax: handbook, functions written code-text open parentheses, like : filter(). explained packages section, functions downloaded within packages. handbook, package names written bold, like dplyr. Sometimes example code may see function name linked explicitly name package two colons (::) like : dplyr::filter(). purpose linkage explained packages section.learn write functions, see page [Writing functions].","code":""},{"path":"r-basics.html","id":"simple-functions","chapter":"1 R Basics","heading":"Simple functions","text":"function like machine receives inputs, action inputs, produces output. output depends function.Functions typically operate upon object placed within function’s parentheses. example, function sqrt() calculates square root number:object provided function also can column dataset. Read objects section detail kinds objects. example, function summary() applied numeric column age dataset linelist, output summary columns’s numeric missing values.NOTE: Behind scenes, function represents complex additional code wrapped user one easy command.","code":"\nsqrt(49)## [1] 7\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##     0.0     6.0    13.0    16.1    23.0    84.0      86"},{"path":"r-basics.html","id":"functions-with-multiple-arguments","chapter":"1 R Basics","heading":"Functions with multiple arguments","text":"Functions often ask several inputs, called arguments, located within parentheses function, usually separated commas.arguments required function work correctly, others optionalOptional arguments default settingsArguments can take character, numeric, logical (TRUE/FALSE), inputsHere fun fictional function, called oven_bake(), example typical function. takes input object (e.g. dataset, example “dough”) performs operations specified additional arguments (minutes = temperature =). output can printed console, saved object using assignment operator <-.realistic example, age_pyramid() command produces age pyramid plot based defined age groups binary split column, gender. function given three arguments within parentheses, separated commas. values supplied arguments establish linelist dataframe use, age_cat5 column count, gender binary column use splitting pyramid color.command can equivalently written , newlines. can easier read write # comments. run command can highlight entire command click “Run”, just place cursor first line press Ctrl Enter keys simultaneously.first half argument assignment (e.g. data =) need specified arguments written specific order (specified function’s documentation). code produces exact pyramid , function expects argument order: data frame, age_group variable, split_by variable.complex age_pyramid() command might include optional arguments :Show proportions instead counts (set proportional = TRUE default FALSE)Specify two colors use (pal = short “palette” supplied vector two color names. See objects page function c() makes vector)NOTE: arguments specify parts argument (e.g. proportional = TRUE), order among arguments matter.","code":"\n# Create an age pyramid\nage_pyramid(data = linelist, age_group = \"age_cat5\", split_by = \"gender\")\n# Create an age pyramid\nage_pyramid(\n  data = linelist,        # case linelist\n  age_group = \"age_cat5\", # age group column\n  split_by = \"gender\"     # two sides to pyramid\n  )\n# This command will produce the exact same graphic as above\nage_pyramid(linelist, \"age_cat5\", \"gender\")\nage_pyramid(\n  linelist,                    # use case linelist\n  \"age_cat5\",                  # age group column\n  \"gender\",                    # split by gender\n  proportional = TRUE,         # percents instead of counts\n  pal = c(\"orange\", \"purple\")  # colors\n  )"},{"path":"r-basics.html","id":"packages","chapter":"1 R Basics","heading":"1.8 Packages","text":"Packages contain functions.R package shareable bundle code documentation contains pre-defined functions. Users R community develop share packages time, chances likely solution exists ! install use hundreds packages use R.installation, R contains “base” packages functions perform common elementary tasks. many R users create specialized functions, verified R community can download package use. handbook, package names written bold. One challenging aspects R often many functions packages choose complete given task.","code":""},{"path":"r-basics.html","id":"install-and-load","chapter":"1 R Basics","heading":"Install and load","text":"Functions contained within packages can downloaded (“installed”) computer internet. package downloaded, can access functions current R session loading package library() command (base R) beginning R session. handbook, advocate use p_load() instead library(), library() still common approach.Think R personal library: download package, library gains new book functions, time want use function book, must borrow book library.libraryYour “library” actually folder computer, containing folder package installed. Find R installed computer, look folder called “win-library”. example: R\\win-library\\4.0 (4.0 R version - ’ll different library R version ’ve downloaded). last-case measure, can remove package manually deleting (better use remove.packages(\"packagename\")).CRANCRAN (Comprehensive R Archive Network) public warehouse R packages published R community members. often, R users download packages CRAN.Install vs. LoadTo use package, 2 steps must implemented:package must installed (), andThe package must loaded (R session)base R function installing package install.packages(), name package provided quotes. can also accomplished point--click going RStudio “Packages” pane clicking “Install” typing package name. Note case-sensitive.basic function load package use (installed) library(), name package quotes.check whether package installed loaded, can view Packages pane RStudio. package installed, shown version number. box checked, loaded current session.suggest using pacmanThis handbook emphasizes use package pacman (abbreviation “package manager”), offers useful function p_load(). function combines two steps one - installs /loads packages, depending needed. package yet installed, attempt install CRAN, load use. really useful sharing script someone else may packages., use p_load() three packages often used handbook. Note used syntax pacman::p_load() explicitly writes package name prior function name, connected two colons ::. syntax useful also functions load package (pacman case), command can stand alone top script. need load pacman running command load three packages.Install GithubSometimes, need install package yet available CRAN. perhaps package available CRAN want development version new features yet offered stable published CRAN version. often hosted website Github public-facing code “repository”.download packages, can use p_load_gh() pacman. may also see guidance use remotes devtools packages. background, pacman function utilizes install_github() devtools.install github, provide different information function. must provide Github ID repository owner, name code repository contains package.examples , first name listed quotation marks Github ID repository owner, slash name repository. want install branch main/master branch, add branch name “@” repository name.Read pacman online vignetteInstall ZIP TARYou install package URL:, download computer zipped file:Option 1: using install_local() remotes packageOption 2: using install.packages() base R, providing file path ZIP file setting type = \"source repos = NULL.","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\npacman::p_load(tidyverse, rio, here)\n# install/load package from github repository\np_load_gh(\"reconhub/epicontacts\")\n\n# load development version of package which you had downloaded from github repository\np_load_gh(\"reconhub/epicontacts\")\n\n# install development version of package, but not the main branch\np_install_gh(\"reconhub/epicontacts@timeline\")\npackageurl <- \"https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz\"\ninstall.packages(packageurl, repos=NULL, type=\"source\")\nremotes::install_local(\"~/Downloads/dplyr-master.zip\")\ninstall.packages(\"~/Downloads/dplyr-master.zip\", repos=NULL, type=\"source\")"},{"path":"r-basics.html","id":"code-syntax","chapter":"1 R Basics","heading":"Code syntax","text":"clarity handbook, functions sometimes preceded name package using :: symbol following way: package_name::function_name()package loaded session, explicit style necessary. One can just use function_name(). However writing package name useful function name common may exist multiple packages (e.g. plot()). Writing package name also load package already loaded.","code":"\n# This command uses the package \"rio\" and its function \"import()\" to import a dataset\nlinelist <- rio::import(\"linelist.xlsx\", which = \"Sheet1\")"},{"path":"r-basics.html","id":"function-help","chapter":"1 R Basics","heading":"Function help","text":"read function, can search Help tab lower-right RStudio. can also run command like ?thefunctionname (put name function question mark) Help page appear Help pane. Finally, try searching online resources.","code":""},{"path":"r-basics.html","id":"update-packages","chapter":"1 R Basics","heading":"Update packages","text":"can update packages re-installing . can also click green “Update” button RStudio Packages pane see packages new versions install. aware old code may need updated major revision function works!","code":""},{"path":"r-basics.html","id":"delete-packages","chapter":"1 R Basics","heading":"Delete packages","text":"Use p_delete() pacman, remove.packages() base R. Alternatively, go find folder contains library manually delete folder.","code":""},{"path":"r-basics.html","id":"dependencies","chapter":"1 R Basics","heading":"Dependencies","text":"Packages often depend packages work. called dependencies. dependency fails install, package depending may also fail install.See dependencies package p_depends(), see packages depend p_depends_reverse()","code":""},{"path":"r-basics.html","id":"masked-functions","chapter":"1 R Basics","heading":"Masked functions","text":"uncommon two packages contain function name. example, package dplyr filter() function, package stats. default filter() function depends order packages first loaded R session - later one default command filter().can check order Environment pane R Studio - click drop-“Global Environment” see order packages. Functions packages lower drop-list mask functions name packages appear higher drop-list. first loading package, R warn console masking occurring, can easy miss.ways can fix masking:Specify package name command. example, use dplyr::filter()Re-arrange order packages loaded (e.g. within p_load()), start new R session","code":""},{"path":"r-basics.html","id":"detach-unload","chapter":"1 R Basics","heading":"Detach / unload","text":"detach (unload) package, use command, correct package name one colon. Note may resolve masking.","code":"\ndetach(package:PACKAGE_NAME_HERE, unload=TRUE)"},{"path":"r-basics.html","id":"install-older-version","chapter":"1 R Basics","heading":"Install older version","text":"See guide install older version particular package.","code":""},{"path":"r-basics.html","id":"suggested-packages","chapter":"1 R Basics","heading":"Suggested packages","text":"See page Suggested packages listing packages recommend everyday epidemiology.","code":""},{"path":"r-basics.html","id":"scripts","chapter":"1 R Basics","heading":"1.9 Scripts","text":"Scripts fundamental part programming. documents hold commands (e.g. functions create modify datasets, print visualizations, etc). can save script run later. many advantages storing running commands script (vs. typing commands one--one R console “command line”):Portability - can share work others sending scriptsReproducibility - others know exactly didVersion control - can track changes made colleaguesCommenting/annotation - explain colleagues done","code":""},{"path":"r-basics.html","id":"commenting","chapter":"1 R Basics","heading":"Commenting","text":"script can also annotate (“comment”) around R code. Commenting helpful explain readers . can add comment typing hash symbol (#) writing comment . commented text appear different color R code. code written # run. Therefore, placing # code useful way temporarily run line code (perhaps want run line, also want delete ).","code":"\n# A comment can be on a line by itself\n# import data\nlinelist <- import(\"linelist_raw.xlsx\")  # a comment can also come after code"},{"path":"r-basics.html","id":"style","chapter":"1 R Basics","heading":"Style","text":"important conscious coding style - especially working team. advocate tidyverse style guide. also packages styler lintr help conform style.basic points make code readable others:\r\n* naming objects, use lowercase letters, numbers, underscores _, e.g. my_data\r\n* Use frequent spaces, including around operators, e.g. n = 1 age_new <- age_old + 3","code":""},{"path":"r-basics.html","id":"example-script","chapter":"1 R Basics","heading":"Example Script","text":"example short R script. Remember, better succinctly explain code comments, colleagues like !","code":""},{"path":"r-basics.html","id":"r-markdown","chapter":"1 R Basics","heading":"R markdown","text":"R markdown script type R script script becomes output document (PDF, Word, HTML, Powerpoint, etc.). incredibly useful versatile tools often used create dynamic automated reports. Even website handbook produced R markdown scripts!learn , see handbook page [R Markdown reports] documents.","code":""},{"path":"r-basics.html","id":"r-notebooks","chapter":"1 R Basics","heading":"R notebooks","text":"difference writing Rmarkdown vs R notebook. However execution document differs slightly. See site details.","code":""},{"path":"r-basics.html","id":"shiny","chapter":"1 R Basics","heading":"Shiny","text":"Shiny apps/websites contained within one script, must named app.R. file three components:user interface (ui)server functionA call shinyApp functionSee handbook page [Shiny dashboards], online tutorial: Shiny tutorialIn older times, file split two files (ui.R server.R)","code":""},{"path":"r-basics.html","id":"code-folding","chapter":"1 R Basics","heading":"Code folding","text":"can collapse portions code make script easier read., create text header #, write header, follow least 4 either dashes (-), hashes (#) equals (=). done , small arrow appear “gutter” left (row number). can click arrow code next header collapse dual-arrow icon appear place.expand code, either click arrow gutter , dual-arrow icon. also keyboard shortcuts explained RStudio section page.creating headers #, also activate Table Contents bottom script (see ) can use navigate script. can create sub-headers adding # symbols, example # primary, ## seconary, ### tertiary headers.two versions example script. left original commented headers. right, four dashes written header, making collapsible. Two collapsed, can see Table Contents bottom now shows section.areas code automatically eligible folding include “braced” regions brackets { } function definitions conditional blocks (else statements). can read code folding RStudio site.","code":""},{"path":"r-basics.html","id":"working-directory","chapter":"1 R Basics","heading":"1.10 Working directory","text":"working directory root folder location used R work - R looks saves files default. default, save new files outputs location, look files import (e.g. datasets) well.working directory appears grey text top RStudio Console pane. can also print current working directory running getwd() (leave parentheses empty).","code":""},{"path":"r-basics.html","id":"recommended-approach","chapter":"1 R Basics","heading":"Recommended approach","text":"See page [R projects] details recommended approach managing working directory.\r\ncommon, efficient, trouble-free way manage working directory file paths combine 3 elements:R Project store filesThe package locate filesThe rio package import/export files","code":""},{"path":"r-basics.html","id":"set-by-command","chapter":"1 R Basics","heading":"Set by command","text":"Although recommend approach circumstances, can use command setwd() desired folder file path quotations, example:DANGER: Setting working directory setwd() can “brittle” file path specific one computer. Instead, use file paths relative R Project root directory (package). ","code":"\nsetwd(\"C:/Documents/R Files/My analysis\")"},{"path":"r-basics.html","id":"set-manually","chapter":"1 R Basics","heading":"Set manually","text":"set working directory manually (point--click equivalent setwd()), click Session drop-menu go “Set Working Directory” “Choose Directory”. set working directory specific R session. Note: using approach, manually time open RStudio.","code":""},{"path":"r-basics.html","id":"within-an-r-project","chapter":"1 R Basics","heading":"Within an R project","text":"using R project, working directory default R project root folder contains “.rproj” file. apply open RStudio clicking open R Project (file “.rproj” extension).","code":""},{"path":"r-basics.html","id":"working-directory-in-an-r-markdown","chapter":"1 R Basics","heading":"Working directory in an R markdown","text":"R markdown script, default working directory folder Rmarkdown file (.Rmd) saved within. using R project package, apply working directory () explained [R projects] page.want change working directory stand-alone R markdown (R project), use setwd() apply specific code chunk. make change code chunks R markdown, edit setup chunk add root.dir = parameter, :much easier just use R markdown within R project use package.","code":"\nknitr::opts_knit$set(root.dir = 'desired/directorypath')"},{"path":"r-basics.html","id":"providing-file-paths","chapter":"1 R Basics","heading":"Providing file paths","text":"Perhaps common source frustration R beginner (least Windows machine) typing file path import export data. thorough explanation best input file paths [Import export] page, key points:Broken pathsBelow example “absolute” “full address” file path. likely break used another computer. One exception using shared/network drive.Slash directionIf typing file path, aware direction slashes. Use forward slashes (/) separate components (“data/provincial.csv”). Windows users, default way file paths displayed back slashes (\\) - need change direction slash. use package described [R projects] page slash direction issue.Relative file pathsWe generally recommend providing “relative” filepaths instead - , path relative root R Project. can using package explained [R projects] page. relativel filepath might look like :Even using relative file paths within R project, can still use absolute paths import/export data outside R project.","code":"C:/Users/Name/Document/Analytic Software/R/Projects/Analysis2019/data/March2019.csv  \n# Import csv linelist from the data/linelist/clean/ sub-folders of a R project\nlinelist <- import(here(\"data\", \"clean\", \"linelists\", \"marin_country.csv\"))"},{"path":"r-basics.html","id":"objects","chapter":"1 R Basics","heading":"1.11 Objects","text":"Everything R object, R “object-oriented” language. sections explain:create objects (<-)Types objects (e.g. data frames, vectors..)access subparts objects (e.g. variables dataset)Classes objects (e.g. numeric, logical, integer, double, character, factor)","code":""},{"path":"r-basics.html","id":"everything-is-an-object","chapter":"1 R Basics","heading":"Everything is an object","text":"section adapted R4Epis project.\r\nEverything store R - datasets, variables, list village names, total population number, even outputs graphs - objects assigned name can referenced later commands.object exists assigned value (see assignment section ). assigned value, object appears Environment (see upper right pane RStudio). can operated upon, manipulated, changed, re-defined.","code":""},{"path":"r-basics.html","id":"defining-objects--","chapter":"1 R Basics","heading":"Defining objects (<-)","text":"Create objects assigning value <- operator.\r\ncan think assignment operator <- words “defined ”. Assignment commands generally follow standard order:object_name <- value (process/calculation produce value)example, may want record current epidemiological reporting week object reference later code. example, object current_week created assigned character value \"2018-W10\" (quote marks make character value). object current_week appear RStudio Environment pane (upper-right) can referenced later commands.See R commands output boxes .NOTE: Note [1] R console output simply indicating viewing first item outputCAUTION: object’s value can -written time running assignment command re-define value. Thus, order commands run important.following command re-define value current_week:Equals signs =also see equals signs R code:double equals sign == two objects values asks logical question: “equal ?”.also see equals signs within functions used specify values function arguments (read sections ), example max(age, na.rm = TRUE).can use single equals sign = place <- create define objects, discouraged. can discouraged .DatasetsDatasets also objects (typically “dataframes”) must assigned names imported. code , object linelist created assigned value CSV file imported rio package import() function.can read importing exporting datasets section [Import export].CAUTION: quick note naming objects:Object names must contain spaces, use underscore (_) period (.) instead space.Object names case-sensitive (meaning Dataset_A different dataset_A).Object names must begin letter (begin number like 1, 2 3).OutputsOutputs like tables plots provide example outputs can saved objects, just printed without saved. cross-tabulation gender outcome using base R function table() can printed directly R console (without saved).table can saved named object. , optionally, can printed.ColumnsColumns dataset also objects can defined, -written, created described section Columns.can use assignment operator base R create new column. , new column bmi (Body Mass Index) created, row new value result mathematical operation row’s value wt_kg ht_cm columns.However, handbook, emphasize different approach defining columns, uses function mutate() dplyr package piping pipe operator (%>%). syntax easier read advantages explained page [Cleaning data core functions]. can read piping Piping section .","code":"\ncurrent_week <- \"2018-W10\"   # this command creates the object current_week by assigning it a value\ncurrent_week                 # this command prints the current value of current_week object in the console## [1] \"2018-W10\"\ncurrent_week <- \"2018-W51\"   # assigns a NEW value to the object current_week\ncurrent_week                 # prints the current value of current_week in the console## [1] \"2018-W51\"\n# linelist is created and assigned the value of the imported CSV file\nlinelist <- import(\"my_linelist.csv\")\n# printed to R console only\ntable(linelist$gender, linelist$outcome)##    \r\n##     Death Recover\r\n##   f  1227     953\r\n##   m  1228     950\n# save\ngen_out_table <- table(linelist$gender, linelist$outcome)\n\n# print\ngen_out_table##    \r\n##     Death Recover\r\n##   f  1227     953\r\n##   m  1228     950\n# create new \"bmi\" column using base R syntax\nlinelist$bmi <- linelist$wt_kg / (linelist$ht_cm/100)^2\n# create new \"bmi\" column using dplyr syntax\nlinelist <- linelist %>% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)"},{"path":"r-basics.html","id":"object-structure","chapter":"1 R Basics","heading":"Object structure","text":"Objects can single piece data (e.g. my_number <- 24), can consist structured data.graphic borrowed online R tutorial. shows common data structures names. included image spatial data, discussed [GIS basics] page.epidemiology (particularly field epidemiology), commonly encounter data frames vectors:Note create vector “stands alone” (part data frame) function c() used combine different elements. example, creating vector colors plot’s color scale:\r\nvector_of_colors <- c(\"blue\", \"red2\", \"orange\", \"grey\")","code":""},{"path":"r-basics.html","id":"object-classes","chapter":"1 R Basics","heading":"Object classes","text":"objects stored R class tells R handle object. many possible classes, common ones include:can test class object providing name function class(). Note: can reference specific column within dataset using $ notation separate name dataset name column.Sometimes, column converted different class automatically R. Watch ! example, vector column numbers, character value inserted… entire column change class character.One common example manipulating data frame order print table - make total row try paste/glue together percents cell numbers (e.g. 23 (40%)), entire numeric column convert character can longer used mathematical calculations.Sometimes, need convert objects columns another class.Likewise, base R functions check whether object specific class, .numeric(), .character(), .double(), .factor(), .integer()online material classes data structures R.","code":"\nclass(linelist)         # class should be a data frame or tibble## [1] \"data.frame\"\nclass(linelist$age)     # class should be numeric## [1] \"numeric\"\nclass(linelist$gender)  # class should be character## [1] \"character\"\nnum_vector <- c(1,2,3,4,5) # define vector as all numbers\nclass(num_vector)          # vector is numeric class## [1] \"numeric\"\nnum_vector[3] <- \"three\"   # convert the third element to a character\nclass(num_vector)          # vector is now character class## [1] \"character\""},{"path":"r-basics.html","id":"columnsvariables","chapter":"1 R Basics","heading":"Columns/Variables ($)","text":"column data frame technically “vector” (see table ) - series values must class (either character, numeric, logical, etc).vector can exist independent data frame, example vector column names want include explanatory variables model. create “stand alone” vector, use c() function :Columns data frame also vectors can called, referenced, extracted, created using $ symbol. $ symbol connects name column name data frame. handbook, try use word “column” instead “variable”.typing name dataframe followed $ also see drop-menu columns data frame. can scroll using arrow key, select one Enter key, avoid spelling mistakes!ADVANCED TIP: complex objects (e.g. list, epicontacts object) may multiple levels can accessed multiple dollar signs. example epicontacts$linelist$date_onset","code":"\n# define the stand-alone vector of character values\nexplanatory_vars <- c(\"gender\", \"fever\", \"chills\", \"cough\", \"aches\", \"vomit\")\n\n# print the values in this named vector\nexplanatory_vars## [1] \"gender\" \"fever\"  \"chills\" \"cough\"  \"aches\"  \"vomit\"\n# Retrieve the length of the vector age_years\nlength(linelist$age) # (age is a column in the linelist data frame)"},{"path":"r-basics.html","id":"accessindex-with-brackets","chapter":"1 R Basics","heading":"Access/index with brackets ([ ])","text":"may need view parts objects, also called “indexing”, often done using square brackets [ ]. Using $ dataframe access column also type indexing.Square brackets also work return specific parts returned output, output summary() function:Brackets also work data frames view specific rows columns. can using syntax dataframe[rows, columns]:Note can also achieve row/column indexing data frames tibbles using dplyr syntax (functions filter() rows, select() columns). Read core functions [Cleaning data core functions] page.filter based “row number”, can use dplyr function row_number() open parentheses part logical filtering statement. Often use %% operator range numbers part logical statement, shown . see first N rows, can also use special dplyr function head().indexing object class list, single brackets always return class list, even single object returned. Double brackets, however, can used access single element return different class list.\r\nBrackets can also written one another, demonstrated .visual explanation lists indexing, pepper shakers humorous helpful.list looks printed console. See two named elements:hospitals, character vectoraddresses, data frame addressesNow extract, using various methods:","code":"\nmy_vector <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")  # define the vector\nmy_vector[5]                                  # print the 5th element## [1] \"e\"\n# All of the summary\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##     0.0     6.0    13.0    16.1    23.0    84.0      86\n# Just the second element of the summary, with name (using only single brackets)\nsummary(linelist$age)[2]## 1st Qu. \r\n##       6\n# Just the second element, without name (using double brackets)\nsummary(linelist$age)[[2]]## [1] 6\n# Extract an element by name, without showing the name\nsummary(linelist$age)[[\"Median\"]]## [1] 13\n# View a specific row (2) from dataset, with all columns (don't forget the comma!)\nlinelist[2,]\n\n# View all rows, but just one column\nlinelist[, \"date_onset\"]\n\n# View values from row 2 and columns 5 through 10\nlinelist[2, 5:10] \n\n# View values from row 2 and columns 5 through 10 and 18\nlinelist[2, c(5:10, 18)] \n\n# View rows 2 through 20, and specific columns\nlinelist[2:20, c(\"date_onset\", \"outcome\", \"age\")]\n\n# View rows and columns based on criteria\n# *** Note the dataframe must still be named in the criteria!\nlinelist[linelist$age > 25 , c(\"date_onset\", \"outcome\", \"age\")]\n\n# Use View() to see the outputs in the RStudio Viewer pane (easier to read) \n# *** Note the capital \"V\" in View() function\nView(linelist[2:20, \"date_onset\"])\n\n# Save as a new object\nnew_table <- linelist[2:20, c(\"date_onset\")] \n# View first 100 rows\nlinelist %>% head(100)\n\n# Show row 5 only\nlinelist %>% filter(row_number() == 5)\n\n# View rows 2 through 20, and three specific columns (note no quotes necessary on column names)\nlinelist %>% filter(row_number() %in% 2:20) %>% select(date_onset, outcome, age)\n# define demo list\nmy_list <- list(\n  # First element in the list is a character vector\n  hospitals = c(\"Central\", \"Empire\", \"Santa Anna\"),\n  \n  # second element in the list is a data frame of addresses\n  addresses   = data.frame(\n    street = c(\"145 Medical Way\", \"1048 Brown Ave\", \"999 El Camino\"),\n    city   = c(\"Andover\", \"Hamilton\", \"El Paso\")\n    )\n  )\nmy_list## $hospitals\r\n## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\r\n## \r\n## $addresses\r\n##            street     city\r\n## 1 145 Medical Way  Andover\r\n## 2  1048 Brown Ave Hamilton\r\n## 3   999 El Camino  El Paso\nmy_list[1] # this returns the element in class \"list\" - the element name is still displayed## $hospitals\r\n## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\nmy_list[[1]] # this returns only the (unnamed) character vector## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\nmy_list[[\"hospitals\"]] # you can also index by name of the list element## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\nmy_list[[1]][3] # this returns the third element of the \"hospitals\" character vector## [1] \"Santa Anna\"\nmy_list[[2]][1] # This returns the first column (\"street\") of the address data frame##            street\r\n## 1 145 Medical Way\r\n## 2  1048 Brown Ave\r\n## 3   999 El Camino"},{"path":"r-basics.html","id":"remove-objects","chapter":"1 R Basics","heading":"Remove objects","text":"can remove individual objects R environment putting name rm() function (quote marks):can remove objects (clear workspace) running:","code":"\nrm(object_name)\nrm(list = ls(all = TRUE))"},{"path":"r-basics.html","id":"piping","chapter":"1 R Basics","heading":"1.12 Piping (%>%)","text":"Two general approaches working objects :Pipes/tidyverse - pipes send object function function - emphasis action, objectDefine intermediate objects - object re-defined - emphasis object","code":""},{"path":"r-basics.html","id":"pipes","chapter":"1 R Basics","heading":"Pipes","text":"Simply explained, pipe operator (%>%) passes intermediate output one function next.\r\ncan think saying “”. Many functions can linked together %>%.Piping emphasizes sequence actions, object actions performed onPipes best sequence actions must performed one objectPipes come package magrittr, automatically included packages dplyr tidyversePipes can make code clean easier read, intuitiveRead approach tidyverse style guideHere fake example comparison, using fictional functions “bake cake”. First, pipe method:another link describing utility pipes.Piping base function. use piping, magrittr package must installed loaded (typically done loading tidyverse dplyr package include ). can read piping magrittr documentation.Note just like R commands, pipes can used just display result, save/re-save object, depending whether assignment operator <- involved. See :%<>%\r\n“assignment pipe” magrittr package, pipes object forward also re-defines object. must first pipe operator chain. shorthand. two commands equivalent:","code":"\n# A fake example of how to bake a care using piping syntax\n\ncake <- flour %>%       # to define cake, start with flour, and then...\n  left_join(eggs) %>%   # add eggs\n  left_join(oil) %>%    # add oil\n  left_join(water) %>%  # add water\n  mix_together(         # mix together\n    utensil = spoon,\n    minutes = 2) %>%    \n  bake(degrees = 350,   # bake\n       system = \"fahrenheit\",\n       minutes = 35) %>%  \n  let_cool()            # let it cool down\n# Create or overwrite object, defining as aggregate counts by age category (not printed)\nlinelist_summary <- linelist %>% \n  count(age_cat)\n# Print the table of counts in the console, but don't save it\nlinelist %>% \n  count(age_cat)##   age_cat    n\r\n## 1     0-4 1095\r\n## 2     5-9 1095\r\n## 3   10-14  941\r\n## 4   15-19  743\r\n## 5   20-29 1073\r\n## 6   30-49  754\r\n## 7   50-69   95\r\n## 8     70+    6\r\n## 9    <NA>   86\nlinelist %<>% \n  count() %>%\n  filter(n > 10)\n\nsobject <- object %>%\n  count() %>%\n  filter(n > 10)"},{"path":"r-basics.html","id":"define-intermediate-objects","chapter":"1 R Basics","heading":"Define intermediate objects","text":"approach changing objects/dataframes may better :need manipulate multiple objectsThere intermediate steps meaningful deserve separate object namesRisks:Creating new objects step means creating lots objects. use wrong one might realize !Naming objects can confusingErrors may easily detectableEither name intermediate object, overwrite original, combine functions together. come risks.fake “cake” example , using style:Combine functions together - difficult read:","code":"\n# a fake example of how to bake a cake using this method (defining intermediate objects)\nbatter_1 <- left_join(flour, eggs)\nbatter_2 <- left_join(batter_1, oil)\nbatter_3 <- left_join(batter_2, water)\n\nbatter_4 <- mix_together(object = batter_3, utensil = spoon, minutes = 2)\n\ncake <- bake(batter_4, degrees = 350, system = \"fahrenheit\", minutes = 35)\n\ncake <- let_cool(cake)\n# an example of combining/nesting mutliple functions together - difficult to read\ncake <- let_cool(bake(mix_together(batter_3, utensil = spoon, minutes = 2), degrees = 350, system = \"fahrenheit\", minutes = 35))"},{"path":"r-basics.html","id":"operators","chapter":"1 R Basics","heading":"1.13 Key operators and functions","text":"section details operators R, :Definitional operatorsRelational operators (less , equal ..)Logical operators (, …)Handling missing valuesMathematical operators functions (+/-, >, sum(), median(), …)%% operator","code":""},{"path":"r-basics.html","id":"assignment-operators","chapter":"1 R Basics","heading":"Assignment operators","text":"<-basic assignment operator R <-. object_name <- value.\r\nassignment operator can also written =. advise use <- general R use.\r\nalso advise surrounding operators spaces, readability.<<-[Writing functions], using R interactive way sourced scripts, may need use assignment operator <<- (base R). operator used define object higher ‘parent’ R Environment. See online reference.%<>%“assignment pipe” magrittr package, pipes object forward also re-defines object. must first pipe operator chain. shorthand, shown two equivalent examples:equivalent :%<+%used add data phylogenetic trees ggtree package. See page [Phylogenetic trees] online resource book.","code":"\nlinelist <- linelist %>% \n  mutate(age_months = age_years * 12)\nlinelist %<>% mutate(age_months = age_years * 12)"},{"path":"r-basics.html","id":"relational-and-logical-operators","chapter":"1 R Basics","heading":"Relational and logical operators","text":"Relational operators compare values often used defining new variables subsets datasets. common relational operators R:Logical operators, , often used connect relational operators create complicated criteria. Complex statements might require parentheses ( ) grouping order application.example, , linelist two variables want use create case definition, hep_e_rdt, test result other_cases_in_hh, tell us cases household. command uses function case_when() create new variable case_def :Note R case-sensitive, “Positive” different “positive”…","code":"\nlinelist_cleaned <- linelist %>%\n  mutate(case_def = case_when(\n    is.na(rdt_result) & is.na(other_case_in_home)            ~ NA_character_,\n    rdt_result == \"Positive\"                                 ~ \"Confirmed\",\n    rdt_result != \"Positive\" & other_cases_in_home == \"Yes\"  ~ \"Probable\",\n    TRUE                                                     ~ \"Suspected\"\n  ))"},{"path":"r-basics.html","id":"missing-values","chapter":"1 R Basics","heading":"Missing values","text":"R, missing values represented special value NA (“reserved” value) (capital letters N - quotation marks). import data records missing data another way (e.g. 99, “Missing”, .), may want re-code values NA. addressed [Import export] page.test whether value NA, use special function .na(), returns TRUE FALSE.Read missing, infinite, NULL, impossible values page [Missing data]. Learn convert missing values importing data page [Import export].","code":"\nrdt_result <- c(\"Positive\", \"Suspected\", \"Positive\", NA)   # two positive cases, one suspected, and one unknown\nis.na(rdt_result)  # Tests whether the value of rdt_result is NA## [1] FALSE FALSE FALSE  TRUE"},{"path":"r-basics.html","id":"mathematics-and-statistics","chapter":"1 R Basics","heading":"Mathematics and statistics","text":"operators functions page automatically available using base R.","code":""},{"path":"r-basics.html","id":"mathematical-operators","chapter":"1 R Basics","heading":"Mathematical operators","text":"often used perform addition, division, create new columns, etc. common mathematical operators R. Whether put spaces around operators important.","code":""},{"path":"r-basics.html","id":"mathematical-functions","chapter":"1 R Basics","heading":"Mathematical functions","text":"","code":""},{"path":"r-basics.html","id":"scientific-notation","chapter":"1 R Basics","heading":"Scientific notation","text":"turn scientific notation R session, run command:","code":"\noptions(scipen=999)"},{"path":"r-basics.html","id":"rounding","chapter":"1 R Basics","heading":"Rounding","text":"DANGER: round() uses “banker’s rounding” rounds .5 upper number even. Use round_half_up() janitor consistently round halves nearest whole number. See explanation ","code":"\n# use the appropriate rounding function for your work\nround(c(2.5, 3.5))## [1] 2 4\njanitor::round_half_up(c(2.5, 3.5))## [1] 3 4"},{"path":"r-basics.html","id":"statistical-functions","chapter":"1 R Basics","heading":"1.13.0.1 Statistical functions:","text":"CAUTION: functions default include missing values calculations. Missing values result output NA, unless argument na.rm=TRUE specifiedNotes:quantile(): x numeric vector examine, probs = numeric vector probabilities within 0 1.0, e.g c(0.5, 0.8, 0.85)summary(): gives summary numeric vector including mean, median, common percentilesDANGER: providing vector numbers one functions, sure wrap numbers within c() .","code":"\n# If supplying raw numbers to a function, wrap them in c()\nmean(1, 6, 12, 10, 5, 0)    # !!! INCORRECT !!!  ## [1] 1\nmean(c(1, 6, 12, 10, 5, 0)) # CORRECT## [1] 5.67"},{"path":"r-basics.html","id":"other-useful-functions","chapter":"1 R Basics","heading":"1.13.0.2 Other useful functions:","text":"","code":""},{"path":"r-basics.html","id":"in","chapter":"1 R Basics","heading":"%in%","text":"useful operator matching values, quickly assessing value within vector dataframe.ask value %% vector, put exclamation mark (!) front logic statement:%% useful using dplyr function case_when(). can define vector previously, reference later. example:Note: want detect partial string, perhaps using str_detect() stringr, accept character vector like c(\"1\", \"Yes\", \"yes\", \"y\"). Instead, must given regular expression - one condensed string bars, “1|Yes|yes|y”. example, str_detect(hospitalized, \"1|Yes|yes|y\"). See page [Characters strings] information.can convert character vector named regular expression command:","code":"\nmy_vector <- c(\"a\", \"b\", \"c\", \"d\")\n\"a\" %in% my_vector## [1] TRUE\n\"h\" %in% my_vector## [1] FALSE\n# to negate, put an exclamation in front\n!\"a\" %in% my_vector## [1] FALSE\n!\"h\" %in% my_vector## [1] TRUE\naffirmative <- c(\"1\", \"Yes\", \"YES\", \"yes\", \"y\", \"Y\", \"oui\", \"Oui\", \"Si\")\n\nlinelist <- linelist %>% \n  mutate(child_hospitaled = case_when(\n    hospitalized %in% affirmative & age < 18 ~ \"Hospitalized Child\",\n    TRUE                                      ~ \"Not\"))\naffirmative <- c(\"1\", \"Yes\", \"YES\", \"yes\", \"y\", \"Y\", \"oui\", \"Oui\", \"Si\")\naffirmative## [1] \"1\"   \"Yes\" \"YES\" \"yes\" \"y\"   \"Y\"   \"oui\" \"Oui\" \"Si\"\n# condense to \naffirmative_str_search <- paste0(affirmative, collapse = \"|\")  # option with base R\naffirmative_str_search <- str_c(affirmative, collapse = \"|\")   # option with stringr package\n\naffirmative_str_search## [1] \"1|Yes|YES|yes|y|Y|oui|Oui|Si\""},{"path":"r-basics.html","id":"errors-warnings","chapter":"1 R Basics","heading":"1.14 Errors & warnings","text":"section explains:difference errors warningsGeneral syntax tips writing R codeCode assistsCommon errors warnings troubleshooting tips can found page [Errors help].","code":""},{"path":"r-basics.html","id":"error-versus-warning","chapter":"1 R Basics","heading":"Error versus Warning","text":"command run, R Console may show warning error messages red text.warning means R completed command, take additional steps produced unusual output aware .warning means R completed command, take additional steps produced unusual output aware .error means R able complete command.error means R able complete command.Look clues:error/warning message often include line number problem.error/warning message often include line number problem.object “unknown” “found”, perhaps spelled incorrectly, forgot call package library(), forgot re-run script making changes.object “unknown” “found”, perhaps spelled incorrectly, forgot call package library(), forgot re-run script making changes.else fails, copy error message Google along key terms - chances someone else worked already!","code":""},{"path":"r-basics.html","id":"general-syntax-tips","chapter":"1 R Basics","heading":"General syntax tips","text":"things remember writing commands R, avoid errors warnings:Always close parentheses - tip: count number opening “(” closing parentheses “)” code chunkAvoid spaces column object names. Use underscore ( _ ) periods ( . ) insteadKeep track remember separate function’s arguments commasR case-sensitive, meaning Variable_A different variable_A","code":""},{"path":"r-basics.html","id":"code-assists","chapter":"1 R Basics","heading":"Code assists","text":"script (RMarkdown otherwise) give clues made mistake. example, forgot write comma needed, close parentheses, RStudio raise flag line, right side script, warn .","code":""}]
