[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"contact-us","chapter":"","heading":"Contact us","text":"Structured feedback formEmail us epiRhandbook@gmail.comSubmit issues pull requests Github repositoryTwitter handle @epirhandbook","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Emma Buajitti, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Wayne Enanoria, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Molly Mantus, Adam Vaughan, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.Contributor code","code":""},{"path":"pivoting-data.html","id":"pivoting-data","chapter":"1 Pivoting data","heading":"1 Pivoting data","text":"managing data, pivoting can understood refer one two processes:creation pivot tables, tables statistics summarise data extensive tableThe conversion table long wide format, vice versa.page, focus latter definition. former crucial step data analysis, covered elsewhere [Grouping data] [Descriptive tables] pages.page discusses formats data. useful aware idea “tidy data”, variable ’s column, observation ’s row, value ’s cell. topic can found online chapter R Data Science.","code":""},{"path":"pivoting-data.html","id":"preparation","chapter":"1 Pivoting data","heading":"1.1 Preparation","text":"","code":""},{"path":"pivoting-data.html","id":"load-packages","chapter":"1 Pivoting data","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,          # File import\n  here,         # File locator\n  tidyverse)    # data management + ggplot2 graphics"},{"path":"pivoting-data.html","id":"import-data","chapter":"1 Pivoting data","heading":"Import data","text":"","code":""},{"path":"pivoting-data.html","id":"malaria-count-data","chapter":"1 Pivoting data","heading":"Malaria count data","text":"page, use fictional dataset daily malaria cases, facility age group. want follow along, click download (.rds file). Import data import() function rio package (handles many file types like .xlsx, .csv, .rds - see [Import export] page details).first 50 rows displayed .","code":"\n# Import data\ncount_data <- import(\"malaria_facility_count_data.rds\")"},{"path":"pivoting-data.html","id":"linelist-case-data","chapter":"1 Pivoting data","heading":"Linelist case data","text":"later part page, also use dataset cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). Import data import() function rio package (accepts many file types like .xlsx, .rds, .csv - see [Import export] page details).","code":"\n# import your dataset\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"pivoting-data.html","id":"wide-to-long","chapter":"1 Pivoting data","heading":"1.2 Wide-to-long","text":"","code":""},{"path":"pivoting-data.html","id":"wide-format","chapter":"1 Pivoting data","heading":"“Wide” format","text":"Data often entered stored “wide” format - subject’s characteristics responses stored single row. may useful presentation, ideal types analysis.Let us take count_data dataset imported Preparation section example. can see row represents “facility-day”. actual case counts (right-columns) stored “wide” format information every age group given facility-day stored single row.observation dataset refers malaria counts one 65 facilities given date, ranging 2020-05-16 2020-08-12. facilities located one Province (North) four Districts (Spring, Bolo, Dingo, Barnard). dataset provides overall counts malaria, well age-specific counts three age groups - <4 years, 5-14 years, 15 years older.“Wide” data like adhering “tidy data” standards, column headers actually represent “variables” - represent values hypothetical “age group” variable.format can useful presenting information table, entering data (e.g. Excel) case report forms. However, analysis stage, data typically transformed “longer” format aligned “tidy data” standards. plotting R package ggplot2 particular works best data “long” format.Visualising total malaria counts time poses difficulty data ’s current format:However, wanted display relative contributions age group total count? case, need ensure variable interest (age group), appears dataset single column can passed ggplot2’s “mapping aesthetics” aes() argument.","code":"\nggplot(count_data) +\n  geom_col(aes(x = data_date, y = malaria_tot), width = 1)"},{"path":"pivoting-data.html","id":"pivot_longer","chapter":"1 Pivoting data","heading":"pivot_longer()","text":"tidyr function pivot_longer() makes data “longer”. tidyr part tidyverse R packages.accepts range columns transform (specified cols =). Therefore, can operate part dataset. useful malaria data, want pivot case count columns.process, end two “new” columns - one categories (former column names), one corresponding values (e.g. case counts). can accept default names new columns, can specify names_to = values_to = respectively.Let’s see pivot_longer() action…","code":""},{"path":"pivoting-data.html","id":"standard-pivoting","chapter":"1 Pivoting data","heading":"Standard pivoting","text":"want use tidyr’s pivot_longer() function convert “wide” data “long” format. Specifically, convert four numeric columns data malaria counts two new columns: one holds age groups one holds corresponding values.Notice newly created data frame (df_long) rows (12,152 vs 3,038); become longer. fact, precisely four times long, row original dataset now represents four rows df_long, one malaria count observations (<4y, 5-14y, 15y+, total).addition becoming longer, new dataset fewer columns (8 vs 10), data previously stored four columns (beginning prefix malaria_) now stored two.Since names four columns begin prefix malaria_, made use handy “tidyselect” function starts_with() achieve result (see page [Cleaning data core functions] helper functions).position:named range:two new columns given default names name value, can override defaults provide meaningful names, can help remember stored within, using names_to values_to arguments. Let’s use names age_group counts:can now pass new dataset ggplot2, map new column count y-axis new column age_group fill = argument (column internal color). display malaria counts stacked bar chart, age group:Examine new plot, compare plot created earlier - gone wrong?encountered common problem wrangling surveillance data - also included total counts malaria_tot column, magnitude bar plot twice high .can handle number ways. simply filter totals dataset pass ggplot():Alternatively, excluded variable ran pivot_longer(), thereby maintaining dataset separate variable. See values “expand” fill new rows.","code":"\ndf_long <- count_data %>% \n  pivot_longer(\n    cols = c(`malaria_rdt_0-4`, `malaria_rdt_5-14`, `malaria_rdt_15`, `malaria_tot`)\n  )\n\ndf_long\n# provide column with a tidyselect helper function\ncount_data %>% \n  pivot_longer(\n    cols = starts_with(\"malaria_\")\n  )## # A tibble: 12,152 x 8\r\n##    location_name data_date  submitted_date Province District newid name             value\r\n##    <chr>         <date>     <date>         <chr>    <chr>    <int> <chr>            <int>\r\n##  1 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_rdt_0-4     11\r\n##  2 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_rdt_5-14    12\r\n##  3 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_rdt_15      23\r\n##  4 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_tot         46\r\n##  5 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_rdt_0-4     11\r\n##  6 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_rdt_5-14    10\r\n##  7 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_rdt_15       5\r\n##  8 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_tot         26\r\n##  9 Facility 3    2020-08-11 2020-08-12     North    Dingo        3 malaria_rdt_0-4      8\r\n## 10 Facility 3    2020-08-11 2020-08-12     North    Dingo        3 malaria_rdt_5-14     5\r\n## # ... with 12,142 more rows\n# provide columns by position\ncount_data %>% \n  pivot_longer(\n    cols = 6:9\n  )\n# provide range of consecutive columns\ncount_data %>% \n  pivot_longer(\n    cols = `malaria_rdt_0-4`:malaria_tot\n  )\ndf_long <- \n  count_data %>% \n  pivot_longer(\n    cols = starts_with(\"malaria_\"),\n    names_to = \"age_group\",\n    values_to = \"counts\"\n  )\n\ndf_long## # A tibble: 12,152 x 8\r\n##    location_name data_date  submitted_date Province District newid age_group        counts\r\n##    <chr>         <date>     <date>         <chr>    <chr>    <int> <chr>             <int>\r\n##  1 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_rdt_0-4      11\r\n##  2 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_rdt_5-14     12\r\n##  3 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_rdt_15       23\r\n##  4 Facility 1    2020-08-11 2020-08-12     North    Spring       1 malaria_tot          46\r\n##  5 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_rdt_0-4      11\r\n##  6 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_rdt_5-14     10\r\n##  7 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_rdt_15        5\r\n##  8 Facility 2    2020-08-11 2020-08-12     North    Bolo         2 malaria_tot          26\r\n##  9 Facility 3    2020-08-11 2020-08-12     North    Dingo        3 malaria_rdt_0-4       8\r\n## 10 Facility 3    2020-08-11 2020-08-12     North    Dingo        3 malaria_rdt_5-14      5\r\n## # ... with 12,142 more rows\nggplot(data = df_long) +\n  geom_col(\n    mapping = aes(x = data_date, y = counts, fill = age_group),\n    width = 1\n  )\ndf_long %>% \n  filter(age_group != \"malaria_tot\") %>% \n  ggplot() +\n  geom_col(\n    aes(x = data_date, y = counts, fill = age_group),\n    width = 1\n  )\ncount_data %>% \n  pivot_longer(\n    cols = `malaria_rdt_0-4`:malaria_rdt_15,   # does not include the totals column\n    names_to = \"age_group\",\n    values_to = \"counts\"\n  )## # A tibble: 9,114 x 9\r\n##    location_name data_date  submitted_date Province District malaria_tot newid age_group        counts\r\n##    <chr>         <date>     <date>         <chr>    <chr>          <int> <int> <chr>             <int>\r\n##  1 Facility 1    2020-08-11 2020-08-12     North    Spring            46     1 malaria_rdt_0-4      11\r\n##  2 Facility 1    2020-08-11 2020-08-12     North    Spring            46     1 malaria_rdt_5-14     12\r\n##  3 Facility 1    2020-08-11 2020-08-12     North    Spring            46     1 malaria_rdt_15       23\r\n##  4 Facility 2    2020-08-11 2020-08-12     North    Bolo              26     2 malaria_rdt_0-4      11\r\n##  5 Facility 2    2020-08-11 2020-08-12     North    Bolo              26     2 malaria_rdt_5-14     10\r\n##  6 Facility 2    2020-08-11 2020-08-12     North    Bolo              26     2 malaria_rdt_15        5\r\n##  7 Facility 3    2020-08-11 2020-08-12     North    Dingo             18     3 malaria_rdt_0-4       8\r\n##  8 Facility 3    2020-08-11 2020-08-12     North    Dingo             18     3 malaria_rdt_5-14      5\r\n##  9 Facility 3    2020-08-11 2020-08-12     North    Dingo             18     3 malaria_rdt_15        5\r\n## 10 Facility 4    2020-08-11 2020-08-12     North    Bolo              49     4 malaria_rdt_0-4      16\r\n## # ... with 9,104 more rows"},{"path":"pivoting-data.html","id":"pivoting-data-of-multiple-classes","chapter":"1 Pivoting data","heading":"Pivoting data of multiple classes","text":"example works well situations columns want “pivot longer” class (character, numeric, logical…).However, many cases , field epidemiologist, working data prepared non-specialists follow non-standard logic - Hadley Wickham noted (referencing Tolstoy) seminal article Tidy Data principles: “Like families, tidy datasets alike every messy dataset messy way.”One particularly common problem encounter need pivot columns contain different classes data. pivot result storing different data types single column, good situation. various approaches one can take separate mess creates, important step can take using pivot_longer() avoid creating situation .Take situation series observations different time steps three items , B C. Examples items individuals (e.g. contacts Ebola case traced day 21 days) remote village health posts monitored per year ensure still functional. Let’s use contact tracing example. Imagine data stored follows:can seen, data bit complicated. row stores information one item, time series running away right time progresses. Moreover, column classes alternate date character values.One particularly bad example encountered author involved cholera surveillance data, 8 new columns observations added day course 4 years. Simply opening Excel file data stored took >10 minuntes laptop!order work data, need transform data frame long format, keeping separation date column character (status) column, observation item. don’t, might end mixture variable types single column (big “-” comes data management tidy data):, pivot merged dates characters single value column. R react converting entire column class character, utility dates lost.prevent situation, can take advantage syntax structure original column names. common naming structure, observation number, underscore, either “status” “date”. can leverage syntax keep two data types separate columns pivot.:Providing character vector names_to = argument, second item (\".value\" ). special term indicates pivoted columns split based character name…must also provide “splitting” character names_sep = argument. case, underscore \"_\".Thus, naming split new columns based around underscore existing variable names.Finishing touches:Note date column currently character class - can easily convert ’s proper date class using mutate() as_date() functions described [Working dates] page.may also want convert observation column numeric format dropping “obs” prefix converting numeric. cando str_remove_all() stringr package (see [Characters strings] page).now, can start work data format, e.g. plotting descriptive heat tile:","code":"\ndf %>% \n  pivot_longer(\n    cols = -id,\n    names_to = c(\"observation\")\n  )## # A tibble: 18 x 3\r\n##    id    observation value     \r\n##    <chr> <chr>       <chr>     \r\n##  1 A     obs1_date   2021-04-23\r\n##  2 A     obs1_status Healthy   \r\n##  3 A     obs2_date   2021-04-24\r\n##  4 A     obs2_status Healthy   \r\n##  5 A     obs3_date   2021-04-25\r\n##  6 A     obs3_status Unwell    \r\n##  7 B     obs1_date   2021-04-23\r\n##  8 B     obs1_status Healthy   \r\n##  9 B     obs2_date   2021-04-24\r\n## 10 B     obs2_status Healthy   \r\n## 11 B     obs3_date   2021-04-25\r\n## 12 B     obs3_status Healthy   \r\n## 13 C     obs1_date   2021-04-23\r\n## 14 C     obs1_status Missing   \r\n## 15 C     obs2_date   2021-04-24\r\n## 16 C     obs2_status Healthy   \r\n## 17 C     obs3_date   2021-04-25\r\n## 18 C     obs3_status Healthy\ndf_long <- \n  df %>% \n  pivot_longer(\n    cols = -id,\n    names_to = c(\"observation\", \".value\"),\n    names_sep = \"_\"\n  )\n\ndf_long## # A tibble: 9 x 4\r\n##   id    observation date       status \r\n##   <chr> <chr>       <chr>      <chr>  \r\n## 1 A     obs1        2021-04-23 Healthy\r\n## 2 A     obs2        2021-04-24 Healthy\r\n## 3 A     obs3        2021-04-25 Unwell \r\n## 4 B     obs1        2021-04-23 Healthy\r\n## 5 B     obs2        2021-04-24 Healthy\r\n## 6 B     obs3        2021-04-25 Healthy\r\n## 7 C     obs1        2021-04-23 Missing\r\n## 8 C     obs2        2021-04-24 Healthy\r\n## 9 C     obs3        2021-04-25 Healthy\ndf_long <- \n  df_long %>% \n  mutate(\n    date = date %>% lubridate::as_date(),\n    observation = \n      observation %>% \n      str_remove_all(\"obs\") %>% \n      as.numeric()\n  )\n\ndf_long## # A tibble: 9 x 4\r\n##   id    observation date       status \r\n##   <chr>       <dbl> <date>     <chr>  \r\n## 1 A               1 2021-04-23 Healthy\r\n## 2 A               2 2021-04-24 Healthy\r\n## 3 A               3 2021-04-25 Unwell \r\n## 4 B               1 2021-04-23 Healthy\r\n## 5 B               2 2021-04-24 Healthy\r\n## 6 B               3 2021-04-25 Healthy\r\n## 7 C               1 2021-04-23 Missing\r\n## 8 C               2 2021-04-24 Healthy\r\n## 9 C               3 2021-04-25 Healthy\nggplot(data = df_long, mapping = aes(x = date, y = id, fill = status)) +\n  geom_tile(colour = \"black\") +\n  scale_fill_manual(\n    values = \n      c(\"Healthy\" = \"lightgreen\", \n        \"Unwell\" = \"red\", \n        \"Missing\" = \"orange\")\n  )"},{"path":"pivoting-data.html","id":"long-to-wide","chapter":"1 Pivoting data","heading":"1.3 Long-to-wide","text":"instances, may wish convert dataset wider format. , can use pivot_wider() function.typical use-case want transform results analysis format digestible reader ([Table presentation][Tables presentation]). Usually, involves transforming dataset information one subject spread multiple rows format information stored single row.","code":""},{"path":"pivoting-data.html","id":"data","chapter":"1 Pivoting data","heading":"Data","text":"section page, use case linelist (see Preparation section), contains one row per case.first 50 rows:Suppose want know counts individuals different age groups, gender:gives us long dataset great producing visualisations ggplot2, ideal presentation table:","code":"\ndf_wide <- \n  linelist %>% \n  count(age_cat, gender)\n\ndf_wide##    age_cat gender   n\r\n## 1      0-4      f 640\r\n## 2      0-4      m 416\r\n## 3      0-4   <NA>  39\r\n## 4      5-9      f 641\r\n## 5      5-9      m 412\r\n## 6      5-9   <NA>  42\r\n## 7    10-14      f 518\r\n## 8    10-14      m 383\r\n## 9    10-14   <NA>  40\r\n## 10   15-19      f 359\r\n## 11   15-19      m 364\r\n## 12   15-19   <NA>  20\r\n## 13   20-29      f 468\r\n## 14   20-29      m 575\r\n## 15   20-29   <NA>  30\r\n## 16   30-49      f 179\r\n## 17   30-49      m 557\r\n## 18   30-49   <NA>  18\r\n## 19   50-69      f   2\r\n## 20   50-69      m  91\r\n## 21   50-69   <NA>   2\r\n## 22     70+      m   5\r\n## 23     70+   <NA>   1\r\n## 24    <NA>   <NA>  86\nggplot(df_wide) +\n  geom_col(aes(x = age_cat, y = n, fill = gender))"},{"path":"pivoting-data.html","id":"pivot-wider","chapter":"1 Pivoting data","heading":"Pivot wider","text":"Therefore, can use pivot_wider() transform data better format inclusion tables reports.argument names_from specifies column generate new column names, argument values_from specifies column take values populate cells. argument id_cols = optional, can provided vector column names pivoted, thus identify row.table much reader-friendly, therefore better inclusion reports. can convert pretty table several packages including flextable knitr. process elaborated page [Tables presentation].","code":"\ntable_wide <- \n  df_wide %>% \n  pivot_wider(\n    id_cols = age_cat,\n    names_from = gender,\n    values_from = n\n  )\n\ntable_wide## # A tibble: 9 x 4\r\n##   age_cat     f     m  `NA`\r\n##   <fct>   <int> <int> <int>\r\n## 1 0-4       640   416    39\r\n## 2 5-9       641   412    42\r\n## 3 10-14     518   383    40\r\n## 4 15-19     359   364    20\r\n## 5 20-29     468   575    30\r\n## 6 30-49     179   557    18\r\n## 7 50-69       2    91     2\r\n## 8 70+        NA     5     1\r\n## 9 <NA>       NA    NA    86\ntable_wide %>% \n  janitor::adorn_totals(c(\"row\", \"col\")) %>% # adds row and column totals\n  knitr::kable() %>% \n  kableExtra::row_spec(row = 10, bold = TRUE) %>% \n  kableExtra::column_spec(column = 5, bold = TRUE) "},{"path":"pivoting-data.html","id":"fill","chapter":"1 Pivoting data","heading":"1.4 Fill","text":"situations pivot, commonly bind, left gaps cells like fill.","code":""},{"path":"pivoting-data.html","id":"data-1","chapter":"1 Pivoting data","heading":"Data","text":"example, take two datasets, observations measurement number, name facility, case count time. However, second dataset also variable Year.perform bind_rows() join two datasets together, Year variable filled NA rows prior information (.e. first dataset):","code":"\ndf1 <- \n  tibble::tribble(\n       ~Measurement, ~Facility, ~Cases,\n                  1,  \"Hosp 1\",     66,\n                  2,  \"Hosp 1\",     26,\n                  3,  \"Hosp 1\",      8,\n                  1,  \"Hosp 2\",     71,\n                  2,  \"Hosp 2\",     62,\n                  3,  \"Hosp 2\",     70,\n                  1,  \"Hosp 3\",     47,\n                  2,  \"Hosp 3\",     70,\n                  3,  \"Hosp 3\",     38,\n       )\n\ndf1 ## # A tibble: 9 x 3\r\n##   Measurement Facility Cases\r\n##         <dbl> <chr>    <dbl>\r\n## 1           1 Hosp 1      66\r\n## 2           2 Hosp 1      26\r\n## 3           3 Hosp 1       8\r\n## 4           1 Hosp 2      71\r\n## 5           2 Hosp 2      62\r\n## 6           3 Hosp 2      70\r\n## 7           1 Hosp 3      47\r\n## 8           2 Hosp 3      70\r\n## 9           3 Hosp 3      38\ndf2 <- \n  tibble::tribble(\n    ~Year, ~Measurement, ~Facility, ~Cases,\n     2000,            1,  \"Hosp 4\",     82,\n     2001,            2,  \"Hosp 4\",     87,\n     2002,            3,  \"Hosp 4\",     46\n  )\n\ndf2## # A tibble: 3 x 4\r\n##    Year Measurement Facility Cases\r\n##   <dbl>       <dbl> <chr>    <dbl>\r\n## 1  2000           1 Hosp 4      82\r\n## 2  2001           2 Hosp 4      87\r\n## 3  2002           3 Hosp 4      46\ndf_combined <- \n  bind_rows(df1, df2) %>% \n  arrange(Measurement, Facility)\n\ndf_combined## # A tibble: 12 x 4\r\n##    Measurement Facility Cases  Year\r\n##          <dbl> <chr>    <dbl> <dbl>\r\n##  1           1 Hosp 1      66    NA\r\n##  2           1 Hosp 2      71    NA\r\n##  3           1 Hosp 3      47    NA\r\n##  4           1 Hosp 4      82  2000\r\n##  5           2 Hosp 1      26    NA\r\n##  6           2 Hosp 2      62    NA\r\n##  7           2 Hosp 3      70    NA\r\n##  8           2 Hosp 4      87  2001\r\n##  9           3 Hosp 1       8    NA\r\n## 10           3 Hosp 2      70    NA\r\n## 11           3 Hosp 3      38    NA\r\n## 12           3 Hosp 4      46  2002"},{"path":"pivoting-data.html","id":"fill-1","chapter":"1 Pivoting data","heading":"fill()","text":"case, Year useful variable include, particularly want explore trends time. Therefore, use fill() fill empty cells, specifying column fill direction (case ):Alternatively, can rearrange data need fill downward direction:now useful dataset plotting:less useful presenting table, let’s practice converting long, untidy dataframe wider, tidy dataframe:N.B. case, specify include three variables Facility, Year, Cases additional variable Measurement interfere creation table:","code":"\ndf_combined %>% \n  fill(Year, .direction = \"up\")## # A tibble: 12 x 4\r\n##    Measurement Facility Cases  Year\r\n##          <dbl> <chr>    <dbl> <dbl>\r\n##  1           1 Hosp 1      66  2000\r\n##  2           1 Hosp 2      71  2000\r\n##  3           1 Hosp 3      47  2000\r\n##  4           1 Hosp 4      82  2000\r\n##  5           2 Hosp 1      26  2001\r\n##  6           2 Hosp 2      62  2001\r\n##  7           2 Hosp 3      70  2001\r\n##  8           2 Hosp 4      87  2001\r\n##  9           3 Hosp 1       8  2002\r\n## 10           3 Hosp 2      70  2002\r\n## 11           3 Hosp 3      38  2002\r\n## 12           3 Hosp 4      46  2002\ndf_combined <- \n  df_combined %>% \n  arrange(Measurement, desc(Facility))\n\ndf_combined## # A tibble: 12 x 4\r\n##    Measurement Facility Cases  Year\r\n##          <dbl> <chr>    <dbl> <dbl>\r\n##  1           1 Hosp 4      82  2000\r\n##  2           1 Hosp 3      47    NA\r\n##  3           1 Hosp 2      71    NA\r\n##  4           1 Hosp 1      66    NA\r\n##  5           2 Hosp 4      87  2001\r\n##  6           2 Hosp 3      70    NA\r\n##  7           2 Hosp 2      62    NA\r\n##  8           2 Hosp 1      26    NA\r\n##  9           3 Hosp 4      46  2002\r\n## 10           3 Hosp 3      38    NA\r\n## 11           3 Hosp 2      70    NA\r\n## 12           3 Hosp 1       8    NA\ndf_combined <- \n  df_combined %>% \n  fill(Year, .direction = \"down\")\n\ndf_combined## # A tibble: 12 x 4\r\n##    Measurement Facility Cases  Year\r\n##          <dbl> <chr>    <dbl> <dbl>\r\n##  1           1 Hosp 4      82  2000\r\n##  2           1 Hosp 3      47  2000\r\n##  3           1 Hosp 2      71  2000\r\n##  4           1 Hosp 1      66  2000\r\n##  5           2 Hosp 4      87  2001\r\n##  6           2 Hosp 3      70  2001\r\n##  7           2 Hosp 2      62  2001\r\n##  8           2 Hosp 1      26  2001\r\n##  9           3 Hosp 4      46  2002\r\n## 10           3 Hosp 3      38  2002\r\n## 11           3 Hosp 2      70  2002\r\n## 12           3 Hosp 1       8  2002\nggplot(df_combined) +\n  aes(Year, Cases, fill = Facility) +\n  geom_col()\ndf_combined %>% \n  pivot_wider(\n    id_cols = c(Facility, Year, Cases),\n    names_from = \"Year\",\n    values_from = \"Cases\"\n  ) %>% \n  arrange(Facility) %>% \n  janitor::adorn_totals(c(\"row\", \"col\")) %>% \n  knitr::kable() %>% \n  kableExtra::row_spec(row = 5, bold = TRUE) %>% \n  kableExtra::column_spec(column = 5, bold = TRUE) \ndf_combined %>% \n  pivot_wider(\n    names_from = \"Year\",\n    values_from = \"Cases\"\n  ) %>% \n  knitr::kable()"},{"path":"pivoting-data.html","id":"resources","chapter":"1 Pivoting data","heading":"1.5 Resources","text":"helpful tutorial","code":""}]
