[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download book data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link , email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"handbook produced collaboration epidemiologists around world, drawing upon experiences organizations including local, state, provincial, national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybuke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Adam Vaughan, Lionel Monteiro, Joao Muianga.","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"plotting-with-ggplot.html","id":"plotting-with-ggplot","chapter":"1 Plotting with ggplot","heading":"1 Plotting with ggplot","text":"ggplot2 popular data visualisation package R generally used instead base R creating figures. “gg” name represents “grammar graphics”. ggplot2 benefits wide variety supplementary R packages enhance functionality.syntax significantly different base R plotting, learning curve associated . Using ggplot2 generally requires user format data way highly tidyverse compatible, ultimately makes using packages together effective.page cover:fundamentals plotting ggplot2Tips tricks make plots sharpThere several extensive ggplot2 tutorials linked resources section. can also download data visualization ggplot cheatsheet RStudio website. want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"plotting-with-ggplot.html","id":"preparation","chapter":"1 Plotting with ggplot","heading":"1.1 Preparation","text":"","code":""},{"path":"plotting-with-ggplot.html","id":"load-packages","chapter":"1 Plotting with ggplot","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"plotting-with-ggplot.html","id":"import-data","chapter":"1 Plotting with ggplot","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"plotting-with-ggplot.html","id":"general-cleaning","chapter":"1 Plotting with ggplot","heading":"General cleaning","text":"preparing data plot, best make data adhere “tidy” data standards much possible. achieve expanded data management pages handbook, [Cleaning data core functions].simple ways can prepare data make better plotting can include making contents data better display - necessarily mean better data manipulation! example:Replace NA values character column string “Unknown”Clean columns “data friendly” values underscores etc changed normal text title case (see [Characters strings])examples action:","code":"\nlinelist <- linelist %>%\n  # make display version of columns with more friendly names\n  mutate(\n    # f to Male, f to Female, NA to Unknown\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",\n                            gender == \"f\" ~ \"Female\",\n                            is.na(gender) ~ \"Unknown\"),\n    # replace NA with unknown for outcome\n    outcome_disp = replace_na(outcome, \"Unknown\")\n  )"},{"path":"plotting-with-ggplot.html","id":"pivoting-longer","chapter":"1 Plotting with ggplot","heading":"Pivoting longer","text":"matter data structure, ggplot2 often also want pivot data longer formats, allow us use set variables single variable. Read page [Pivoting data].example, say “wide” data case symptoms (shown shown , style linelist).first 50 rows look:wanted show number cases specific symptoms, limited fact symptom specific column. However, can pivot symptoms columns longer format like :first 50 rows. Note case 5 rows - one possibly symptom. Scroll right see new columns symptom_name symptom_is_present. Note format useful operations, just used plot made .","code":"\nsymptoms_data <- linelist %>% \n  select(c(case_id, fever, chills, cough, aches, vomit))\nsymptoms_data_long <- symptoms_data %>%\n  pivot_longer(cols = -case_id,\n               names_to = \"symptom_name\",\n               values_to = \"symptom_is_present\") %>%\n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\"))"},{"path":"plotting-with-ggplot.html","id":"basics-of-ggplot","chapter":"1 Plotting with ggplot","heading":"1.2 Basics of ggplot","text":"“Grammar graphics” - ggplot2Plotting ggplot2 based “adding” plot layers attribute specifications top one another, sub-command added plus symbol (+). result multi-layer plot object can saved, modified, printed, exported, etc.ggplot objects can highly complex, basic order layers usually look like :Begin baseline ggplot() command - establish coordinate base specify datasetAdd “geom” layers - geometric functions visualize data bar graph, line plot, scatter plot, histogram, etc (combination!). functions start geom_ prefix.Add adjustments plot specify axis labels, title, fonts, sizes, color schemes, legends, rotate axes, etc.simple example skeleton code follows. explain component sections .","code":"\nggplot(data = my_data)+  \n  geom_XXXX(mapping = aes(x = col1, y = col2), fill = \"color\")+\n  labs()+\n  theme()"},{"path":"plotting-with-ggplot.html","id":"ggplot","chapter":"1 Plotting with ggplot","heading":"1.3 ggplot()","text":"opening command ggplot2 plot ggplot(). command simply creates blank canvas upon add layers. “opens” way layers added + symbol.Typically, command ggplot() includes data = argument plot. sets default dataset used subsequent layers plot.Finally, command end + closing parentheses. leaves command “open”. plot execute/appear command includes final layer without + end.","code":"\n# This will create plot that is a blank canvas\nggplot(data = linelist)"},{"path":"plotting-with-ggplot.html","id":"geoms","chapter":"1 Plotting with ggplot","heading":"Geoms","text":"blank canvas sufficient! need create geometries data! Bar plots, histograms, scatter plots, box plots!done adding layers geometry initial ggplot() command. many ggplot2 functions create “geoms”. functions begins “geom_”, refer generically geom_XXXX(). 40 geoms ggplot2 many others created fans. View ggplot2 gallery. common geoms listed :Histograms - geom_histogram()Bar charts - geom_bar()Box plots - geom_boxplot()Points (e.g. scatter plots) - geom_point()Line graphs - geom_line() geom_path()Trend lines - geom_smooth()one plot can display one multiple geoms. added +, plotted sequentially later geoms plotted top previous ones.simply knowing geom functions sufficient produce plot! must also map data plot…","code":""},{"path":"plotting-with-ggplot.html","id":"mapping-plot-aesthetics-to-data","chapter":"1 Plotting with ggplot","heading":"Mapping plot aesthetics to data","text":"next core component ggplot() object plot “aesthetics” mapped columns data. plot “aesthetic”, mean visual property object plot. two essential “aesthetics” x-axis, (necessary) y-axis.aesthetics “mapped” columns data given mapping = argument, actual assignments listed within aes(), shown ., ggplot() command data set case linelist, column age mapped x-axis, column wt_kg mapped y-axis. + continues plotting command leads geom_point(). geom inherits mapped aesthetics ggplot() command - know axis-column assignments proceeds visualize relationships points canvas.following command utilizes data, slightly different aesthetic mapping different geom. produces histogram geom_histogram(), nature requires column mapped x-axis. count y-axis generated automatically.Aesthetic mapping can defined several places, even multiple times!mapping = aes() can written several places, . can written top ggplot() command, /individual geom_XXXX() beneath. nuances include:Mapping assignments specified top ggplot() command apply defaults across geom .Mapping assignments specified within one geom_XXXX() apply geom.Likewise, data = specified top ggplot() apply default geom , can also specify data geom, desired (one way create plot combines multiple datasets).Thus, following commands create plot:","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))"},{"path":"plotting-with-ggplot.html","id":"other-aesthetics","chapter":"1 Plotting with ggplot","heading":"Other aesthetics","text":"aesthetics, can specific type geom. examples:shape = Display point (geom_point()) dot, star, triangle, square, etc.fill = interior color (e.g. bar boxplot)color = exterior line(s) bar, boxplot, etc. (point color using geom_point())size = Size (e.g. line thickness, point size)alpha = Transparency (1 = opaque, 0 = invisible)binwidth = Width histogram binslinetype = Line type (e.g. solid, dashed, dotted)Assignments kinds aesthetics (non-axes) can placed inside outside aes(). depends whether want value static scaled/depend values row data.want value static, write assignment within geom_XXXX() outside mapping = aes() statement (may even one geom). assignment values unchanging - example, size = 1 color = \"blue\".two examples. first, mapping assignments axes set ggplot() command, color, size, alpha alone geom_point(). Note written ggplot(). second example, axis mapping done within geom (just example - make difference), binwidth, color, fill, alpha outside aes() set static values.can instead map aesthetics columns data. case, display scaled depends value row data. Essentially, data grouped values column. column continuous, examples , aesthetic scale continuous. column assign discrete, groups/colors/sizes/etc. display group (read grouping section).case, assign aesthetics within aes(), alongside axes assignments. assignments now made column names, static values. finally, like axes assignments, choose put aes() top ggplot() command assignments apply default geoms .Two examples .Note first example color point reflects age value - scale appeared legend! now just note scale exists - show modify later sections. second example highlights two new mapped aesthetics (color size), shape alpha remain mapped static values outside aes().becomes important track layers aesthetics making complex plots - like multiple geoms.example , size = aesthetic assigned twice - geom_point() geom_smooth() - times static value.Note propoerly aligning axes plot multiple dataset top one another can difficult. Consider instead using cowplot similar package combine two plots - described section ggplot tips page.","code":"\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"red\", size = 0.5, alpha = 0.1)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist)+       # set data\n  geom_histogram(              # display histogram\n    mapping = aes(x = age),      # axis mapping for histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()            # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = age_years)) + # map aesthetics to columns\n  geom_point(size = 1, alpha = 0.5) +  # add points for each row of data\n  geom_smooth(method = \"lm\", size = 2) # add a trend line with linear method, width of 2## Warning: Removed 86 rows containing non-finite values (stat_smooth).## Warning: Removed 86 rows containing missing values (geom_point)."},{"path":"plotting-with-ggplot.html","id":"storing-plots","chapter":"1 Plotting with ggplot","heading":"1.4 Storing plots","text":"","code":""},{"path":"plotting-with-ggplot.html","id":"saving-plots","chapter":"1 Plotting with ggplot","heading":"Saving plots","text":"Plots can printed Plots RStudio pane, done now, simply beginning command ggplot(). However, can also save plot object using assignment operator <- giving name. print unless object name run. can also print wrapping plot name print(), necessary certain circumstances like plot created inside loop.","code":"\n# define plot\nage_by_wt <- ggplot(data = linelist, mapping = aes(x = age_years, y = wt_kg, color = age_years))+\n  geom_point(alpha = 0.1)\n\nage_by_wt    # print"},{"path":"plotting-with-ggplot.html","id":"modifying-saved-plots","chapter":"1 Plotting with ggplot","heading":"Modifying saved plots","text":"One nice thing ggplot2 can define plot (), add layers starting name. repeat commands created original plot!example, modify plot age_by_wt defined , include vertical line age 50, just add + continue….","code":"\nage_by_wt+\n  geom_vline(xintercept = 50)"},{"path":"plotting-with-ggplot.html","id":"labels","chapter":"1 Plotting with ggplot","heading":"Labels","text":"Surely want add adjust plot’s labels. easily done labs() function, added + just geoms .Within labs() can provide character strings arguements:x = y = x-axis y-axis title (labels)title = main plot titlesubtitle = subtitle plot, smaller text titlecaption = caption plot, bottom-right defaultHere plot made earlier, nicer labels:\r\nNote caption assignment used str_glue() stringr package implant dynamic R code within string text. caption display maximum hospitalization date linelist. Read page [Characters strings].can also use labs() adjust legend title(s), bit complicated. See section legends ggplot tips page.","code":"\nage_by_wt <- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt"},{"path":"plotting-with-ggplot.html","id":"themes","chapter":"1 Plotting with ggplot","heading":"Themes","text":"One best parts ggplot2 amount control plot - can define anything! Generally done adjusting “theme” arguments plot. done one two ways:Adding pre-defined theme_XXXX() functions make sweeping adjustments\r\ninclude theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() others\r\ninclude theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() othersAdjusting tiny aspect plot individually within theme()mention pre-defined theme_XXXX() functions , demonstrate , describe .theme() function can take large number arguments, edits specific aspects plot. won’t go examples, describe general pattern show find argument need. basic syntax :Add theme() geom labs()Within theme(), provide specific argument name element want edit (e.g. plot.title = plot title)Supply element_XXXX() function value argumentMost time element_text(), versions include element_rect() editing plot canvas background colors, even element_blank() remove plot elementsWithin element_XXXX() give arguments make fine adjustmentsThat quite abstract convoluted, examples.plot looks quite silly, serves show variety ways can adjust plot. begin plot age_by_wt (defined ), add + theme_classic() (empty parentheses) enact several adjustments one command. , finer adjustments, add theme() command. Within , list arguments aspect want adjust - case many. can nice organize sub-grounds new lines.describe just : legend.position = unique accepts simple values like “bottom”, generally text-related arguements require place details within element_text(). See adjust title size size =, caption horizontal alignment hjust = 0 (right left), make subtitle italicized face =.especially common theme() arguments. recognize patterns, appending .x .y apply change one axis.many theme arguments! remember ??? worry - impossible remember . Luckily tools help :See tidyverse documentation modifying theme complete list.TIP: Run theme_get() ggplot2 print list 90+ theme() arguments console.TIP: ever want remove element plot, can also theme()! Just pass element_blank() argument disappear completely!","code":"\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     "},{"path":"plotting-with-ggplot.html","id":"ggplotgroups","chapter":"1 Plotting with ggplot","heading":"1.5 Groups","text":"can easily group data “plot group”. demonstrated extensively pages Plot continuous data [Plot discrete data], describe mechanism briefly .simple way group data add color = fill = arguments within mapping = aes(), assign discrete column name group data . unique value grouping column plotted separately (NA missing values appear group).fact, already done ! , moved color = argument within aes() assigned column age. effectively grouped data age, continuous scale. contrast, discuss grouping discrete columns.show scatter plot age weight, set color = column gender. legend automatically appears.\r\nNote depending geom, may need use different arguments group data. fill = color = appropriate cases, also adjust shape = etc.basic way grouping data adding group = argument within mapping = aes() assigning discrete column. However, change colors, fill, shapes. create legend. Yet good aware argument case want use .many examples grouped plot pages plotting continuous discrete variables.adjust order presentaton groups plot, see ggplot tips page page [Working factors].","code":"\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)"},{"path":"plotting-with-ggplot.html","id":"facets-multiple-plots","chapter":"1 Plotting with ggplot","heading":"Facets / Multiple plots","text":"Often useful show multiple graphs one page, one super-figure. ways achieve lot packages can help facilitate . However, external packages nice, often easier use faceting alternative prebuilt ggplot2. Faceting plots extremely easy terms code, produces plots predictable aesthetics - wont wrangle legends ensure axes aligned etc.Faceting specific way obtain multiple plots - definition, facet show type plot facet, every plot specific level variable. done one two functions:facet_wrap() used want show different graph level single variable. One example showing different epidemic curve hospital region.facet_wrap() used want show different graph level single variable. One example showing different epidemic curve hospital region.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.can quickly become overwhelming amount information - good ensure don’t many levels variable choose facet ! quick examples malaria dataset:can also use facet_grid() approach different age groups - need data transformations first however, age groups columns - want single column. pass two variables facet_grid(), can use formula notation (e.g. x ~ y) wrap variables vars(). reference, : facet_grid(x ~ y) equivalent facet_grid(rows = vars(x), cols = vars(y)) ’s can :","code":"\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) \n\n# show a wrapped plot with facets by district\n\nggplot(malaria_data, aes(x = data_date, y = malaria_tot, fill = District)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"date of data collection\",\n    y = \"malaria cases\",\n    title = \"Malaria cases by district\"\n  ) +\n  facet_wrap(~District) +\n  theme_minimal()\nmalaria_age <- malaria_data %>%\n  pivot_longer(\n    # choose all the columns that start with malaria rdt (age group specific)\n    cols = starts_with(\"malaria_rdt_\"),\n    # column names become age group\n    names_to = \"age_group\",\n    # values to a single column (num_cases)\n    values_to = \"num_cases\"\n  ) %>%\n  # clean up age group column - replace \"malaria_rdt_\" to leave only age group\n  # then replace 15 with 15+\n  # then refactor the age groups so they are in order\n  mutate(age_group = str_replace(age_group, \"malaria_rdt_\", \"\") %>%\n           ifelse(. == \"15\", \"15+\", .) %>%\n           forcats::fct_relevel(., \"5-14\", after = 1))\n\n\n# make the same plot as before, but show in a grid\nggplot(malaria_age, aes(x = data_date, y = num_cases, fill = age_group)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"date of data collection\",\n    y = \"malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(rows = vars(District), cols = vars(age_group)) +\n  theme_minimal()"},{"path":"plotting-with-ggplot.html","id":"piping-into-ggplot2","chapter":"1 Plotting with ggplot","heading":"Piping into ggplot2","text":"using pipes clean transform data, easy pass transformed data ggplot(). pipes pass dataset function--function transition + ggplot() function called. Note case, need specify data = argument, automatically defined piped-dataset.might look:","code":"\nlinelist %>%                                                     # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )"},{"path":"plotting-with-ggplot.html","id":"exporting-plots","chapter":"1 Plotting with ggplot","heading":"Exporting plots","text":"Exporting ggplots made easy ggsave() function ggplot2. can work two ways, either:Specify name plot object, file path name extension\r\nexample: ggsave(my_plot, \"Documents/work/plots/my_plot.png\")\r\nexample: ggsave(my_plot, \"Documents/work/plots/my_plot.png\")Save last plot printed\r\nexample: ggsave(\"Documents/work/plots/my_plot.png\")\r\nexample: ggsave(\"Documents/work/plots/my_plot.png\")can export png, pdf, jpeg, tiff, bmp, svg, several file types, specifying file extension file path.can also specify arguments width =, height =, units = (either “”, “cm”, “mm”). can also specify dpi = number plot resolution (e.g. 300). See function details entering ?ggsave reading documentation online.","code":""},{"path":"plotting-with-ggplot.html","id":"resources","chapter":"1 Plotting with ggplot","heading":"1.6 Resources","text":"R Data Science pages data visualization graphics communicaton","code":""},{"path":"plot-continuous-data.html","id":"plot-continuous-data","chapter":"2 Plot continuous data","heading":"2 Plot continuous data","text":"page discuss appropriate plotting continuous data, age, clinical measurements, distance. ggplot2, part tidyverse family packages, fantastic versatile package visualising continuous data. usual, R also built-base functions, can helpful quick looks data.Visualisations covered include:Plots one continuous variable:\r\nHistograms, classic graph present distribution continuous variable.\r\nBox plots (also called box whisker), box represents 25th, 50th, 75th percentile continuous variable, line outside represent tail ends distribution continuous variable, dots represent outliers.\r\nViolin plots, similar histograms show distribution continuous variable based symettrical width ‘violin’.\r\nJitter plots, visualise distribution continuous variable showing values dots, rather collectively one larger shape. dot ‘jittered’ can (mostly) seen, even two value.\r\nSina plots, cross jitter violin plots, individual points can seen symmetrical shape distribution (note brings ggforce package).\r\nHistograms, classic graph present distribution continuous variable.Box plots (also called box whisker), box represents 25th, 50th, 75th percentile continuous variable, line outside represent tail ends distribution continuous variable, dots represent outliers.Violin plots, similar histograms show distribution continuous variable based symettrical width ‘violin’.Jitter plots, visualise distribution continuous variable showing values dots, rather collectively one larger shape. dot ‘jittered’ can (mostly) seen, even two value.Sina plots, cross jitter violin plots, individual points can seen symmetrical shape distribution (note brings ggforce package).Scatter plots two continuous variables.","code":""},{"path":"plot-continuous-data.html","id":"preparation-1","chapter":"2 Plot continuous data","heading":"2.1 Preparation","text":"","code":""},{"path":"plot-continuous-data.html","id":"load-packages-1","chapter":"2 Plot continuous data","heading":"Load packages","text":"Preparation includes loading relevant packages, ggplot2 dplyr, ensuring data correct class format.code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.Note: also load tidyverse, includes ggplot2 dplyr among packages (e.g. stringr, tidyr, forcats instance).","code":"\npacman::p_load(ggplot2, dplyr)"},{"path":"plot-continuous-data.html","id":"import-data-1","chapter":"2 Plot continuous data","heading":"Import data","text":"","code":""},{"path":"plot-continuous-data.html","id":"import-data-2","chapter":"2 Plot continuous data","heading":"Import data","text":"examples section, use dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"plot-continuous-data.html","id":"column-class","chapter":"2 Plot continuous data","heading":"Column class","text":"use mutate() confirm class columns important analysis.conducted various data checks point, including checking missingness data.","code":"\nlinelist <- linelist %>%  \n  mutate(age = as.numeric(age),       # Ensure vars are class numeric\n         ct_blood = as.numeric(ct_blood),\n         days_onset_hosp = as.numeric(days_onset_hosp),\n         wt_kg = as.numeric(wt_kg))  "},{"path":"plot-continuous-data.html","id":"one-continuous-variable","chapter":"2 Plot continuous data","heading":"One continuous variable","text":"","code":""},{"path":"plot-continuous-data.html","id":"box-plots","chapter":"2 Plot continuous data","heading":"Box plots","text":"code creating box plots, show distribution CT values Ebola patients entire dataset sub group. Note subgroup breakdowns, ‘NA’ values also removed using dplyr, otherwise ggplot plots age distribution ‘NA’ separate boxplot.","code":"\n# A) Simple boxplot of one numeric variable\nggplot(data = linelist, aes(y = ct_blood))+  # only y variable given (no x variable)\n  geom_boxplot()+\n  labs(title = \"A) Simple ggplot2 boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = ct_blood,                            # Continous variable\n           x = outcome)) +                          # Grouping variable\n  geom_boxplot(fill = \"gold\")+                      # Create the boxplot and specify colour\n  labs(title = \"B) ggplot2 boxplot by gender\")      "},{"path":"plot-continuous-data.html","id":"histograms","chapter":"2 Plot continuous data","heading":"Histograms","text":"code generating histograms, show distribution CT values Ebola patients. Within aes() bracket, specify variable want see distribution . can supply either x y, change direction plot. y x respectively show count, represented columns referred ‘bins’.examples , R guessed appropriate way present data, issues message tell many bins (columns) went , prompt customise :used 30 bins, look spaced 0 values. relates way values rounded.change , can specify binwidth (e.g. range values bin counting) bins (number bins) within geom_histogram argument. evenly grouped, minimum maximum values histogram.Rather counts, can change stats within aes() bracket specify proportions - see (plot ) . can also layer different histograms different settings (plot B).","code":"\n# A) Regular histogram\nggplot(data = linelist, aes(x = ct_blood))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Simple ggplot2 histogram\")\n\n# B) Histogram with values across y axis\nggplot(data = linelist, aes(y = ct_blood))+  # provide y variable \n  geom_histogram()+\n  labs(title = \"B) Simple ggplot2 histogram with axes swapped\")## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# A) Histogram with specified bin number\nggplot(data = linelist, aes(x = ct_blood))+   # Provide x variable\n  geom_histogram(bins=10,                     # Add bin number\n                 color = \"white\")+            # Add white outline so bars can easily be distinguished\n  labs(title = \"A) Ggplot histogram with 10 bins\")\n\n# B) Histogram with specified bin width\nggplot(data = linelist, aes(x = ct_blood))+   # Provide y variable \n  geom_histogram(binwidth = 1,                # Each bar includes a CT value range of 1\n                 color = \"white\")+            # Add white outline so bars can easily be distinguished\n  labs(title = \"B) Ggplot histogram with bindwidth of 1\")\n# A) Histogram with proportion\nggplot(data = linelist, aes(x = ct_blood,           # provide x variable\n                            y = stat(density)))+    # Calculate proportion\n  geom_histogram(bins=10,                           # Add bin number\n                 color = \"white\")+ # Add white outline so bars can easily be distinguished\n  labs(title = \"A) Ggplot histogram showing proportion\")\n\n# B) Layered histograms with different bin widths\nggplot(data = linelist, aes(x = ct_blood))+         # provide x variable \n  geom_histogram(binwidth = 2) +                    # Underlying layer has binwidth of 2\n  geom_histogram(binwidth = 1,                      # Top layer has binwidth of 1\n                 alpha = 0.4,                       # Set top layer to be slightly see through\n                 fill = \"blue\")+ \n  labs(title = \"B) Layered ggplot histograms\")"},{"path":"plot-continuous-data.html","id":"violin-jitter-and-sina-plots","chapter":"2 Plot continuous data","heading":"Violin, jitter, and sina plots","text":"code creating violin plots (geom_violin) jitter plots (geom_jitter) show age distributions. One can specify ‘fill’ ’color’also determined data, thereby inserting options within aes bracket.One can combine two using geom_sina option, actually part ggforce package. can easier visually interpret. ) left shows basic layering geom_violin geom_sina. B) shows slightly effort put appearance ggplot (see -line comments).","code":"\n# A) Violin plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,                                # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color of boxes)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"A) ggplot2 violin plot by gender\")    \n\n\n# B) Jitter plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,                               # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+ # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"B) ggplot2 jitter plot by gender\")     \npacman::p_load(ggforce)\n\n# A) Sina plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,             # numeric variable\n           x = outcome)) +      # group variable\n  geom_violin()+                # create the violin plot\n  geom_sina()+\n  labs(title = \"A) ggplot() violin and sina plot by gender\")      \n\n\n# A) Sina plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,             # numeric variable\n           x = outcome)) +      # group variable\n  geom_violin(aes(fill = outcome), # fill variable (color of violin background)\n              color = \"white\",  # Plot has white outline rather than default black \n              alpha = 0.2)+     # Alpha value where 0 transparent to 1 opaque\n  geom_sina(size=1,             # Change the size of the jitter\n            aes(color = outcome))+ # color variable (color of dots)\n  scale_fill_manual(values = c(\"Death\" = \"#bf5300\", \n                        \"Recover\" = \"#11118c\")) + # Define colours for death/recover \n                                                  # (but note they will come out a bit transparent)\n  scale_color_manual(values = c(\"Death\" = \"#bf5300\", \n                         \"Recover\" = \"#11118c\")) + # Define colours for death/recover\n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) ggplot() violin and sina plot by gender with formatting\")      "},{"path":"plot-continuous-data.html","id":"one-continuous-variable-within-facets","chapter":"2 Plot continuous data","heading":"One continuous variable within facets","text":"Faceting basicsTo examine subgroups, one can ‘facet’ graph. means plot recreated within specified subgroups. One can use:facet_wrap() - recreate sub-graphs present alphabetically (typically, unless stated otherwise). can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within. See plot .facet_grid() - suited seeing subgroups particular combinations discrete variables. See plot B . nrow ncol relevant, subgroups presented grid, subgroups always x y axis (see notes code )can stipulate two faceting variables, ‘~’ . one faceting variable, ‘.’ used placeholder non-used second faceting variable - see code examples.faceting optionsThe scales used facetting consistent across subgroups, helpful comparisons, always appropriate optimal.using facet_wrap facet_grid, can add scales = \"free_y\" (plot ) heights faceted histograms standardised shapes easier compare. particularly useful actual counts small one subcategories trends otherwise hard see. Instead free_y can also write free_x x axis free axes. Note facet_grid, y scales facets row, x scales facets column.using facet_grid , can add space = \"free_y\" space = \"free_x\" actual height width facet weighted values figure within. works scales = \"free\" (y x) already applies.","code":"\n# A) Histogram of hospitalisation dates faceted by hospital\nggplot(data = linelist %>% \n         filter(hospital != \"Missing\"),               # filter removes unknown hospital\n       aes(x = date_hospitalisation ))+\n  geom_histogram(binwidth=7) +                        # Bindwidth = 7 days\n  labs(title = \"A) Ggplot 2 histogram of hospitalisation dates by hospital\")+\n  facet_wrap(hospital~.,                              # Facet by just hospital\n            ncol = 2)                                 # Facet in two columns\n\n# B) Boxplot of age faceted in a grid with two variables, gender and outcome\nggplot(data = linelist %>% \n         filter(!is.na(gender) & !is.na(outcome)),    # filter retains non-missing gender/outcome\n       aes(y = age))+\n  geom_boxplot()+\n  labs(title = \"A) A Ggplot2 boxplot by gender and outcome\")+\n  facet_grid(outcome~gender)                          # Outcome is the row, gender is the column\n# A) Facet hospitalsation date by hospital, free y axis\nggplot(data = linelist %>% filter(hospital != \"Missing\"), # filter removes unknown hospital\n       aes(x = date_hospitalisation ))+\n  geom_histogram(binwidth=7) + # Bindwidth = 7 days\n  labs(title = \"A) Histogram with free y axis scales\")+\n  facet_grid(hospital~., # Facet with hospital as the row \n             scales = \"free_y\") # Free the y scale of each facet\n\n# B) Facet hospitalisation date by hospital, free y axis and vertical spacing\nggplot(data = linelist %>% filter(hospital != \"Missing\"), # filter removes unknown hospital\n       aes(x = date_hospitalisation ))+\n  geom_histogram(binwidth=7) + # Bindwidth = 7 days\n  labs(title = \"B) Histogram with free y axis scales and spacing\")+\n  facet_grid(hospital~., # Facet with hospital as the row \n             scales = \"free_y\", # Free the y scale of each facet\n             space = \"free_y\") # Free the vertical spacing of each facet to optimise space"},{"path":"plot-continuous-data.html","id":"two-continuous-variables","chapter":"2 Plot continuous data","heading":"Two continuous variables","text":"Following similar syntax, geom_point() allow one plot two continuous variables eachother scatter plot. useful showing actual values rather distributions.basic scatter plot age vs weight shown (). (B) use facet_grid() show relationship two continuous variables linelist.","code":"\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender~outcome) "},{"path":"plot-continuous-data.html","id":"three-continuous-variables","chapter":"2 Plot continuous data","heading":"Three continuous variables","text":"","code":""},{"path":"plot-continuous-data.html","id":"plotting-with-base-graphics","chapter":"2 Plot continuous data","heading":"2.2 Plotting with base graphics","text":"Using base graphics can sometimes quicker ggplot, helpful initial first look.","code":""},{"path":"plot-continuous-data.html","id":"one-continuous-variable-1","chapter":"2 Plot continuous data","heading":"One continuous variable","text":"","code":""},{"path":"plot-continuous-data.html","id":"box-plots-and-histograms","chapter":"2 Plot continuous data","heading":"Box plots and histograms","text":"-built graphics package comes boxplot() hist() functions, allowing straight-forward visualisation continuous variable.customisationSubgroups can also shown, subgroup crossed groups. Note plot B , outcome gender written outcome*gender boxplots four combinations two columns. get facetted across different rows columns like ggplot2.specify linelist dataset need write age linelist$ageSome options boxplot() shown :Boxplot width proportional sample size ()Violin plots, notched representing median x around (B)Horizontal (C)","code":"\n# Boxplot\nboxplot(linelist$wt_kg,\n                  main = \"A) Base boxplot\") \n\n\n# Histogram\nhist(linelist$wt_kg,\n                  main = \"B) Base histogram\") \n# Box plot by subgroup\nboxplot(age ~ outcome,\n                  data = linelist, \n                  main = \"A) Base boxplot by subgroup\")\n\n# Box plot by crossed subgroups\nboxplot(age ~ outcome*gender,\n                  data = linelist, \n                  main = \"B) Base boxplot) by crossed groups\")\n# Varying width by sample size \nboxplot(linelist$age ~ linelist$outcome,\n                  varwidth = TRUE, # width varying by sample size\n                  main=\"A) Proportional boxplot() widths\")\n\n                  \n# Notched (violin plot), and varying width\nboxplot(age ~ outcome,\n        data=linelist,\n        notch=TRUE,      # notch at median\n        main=\"B) Notched boxplot()\",\n        col=(c(\"gold\",\"darkgreen\")),\n        xlab=\"Suppliment and Dose\")\n\n# Horizontal\nboxplot(age ~ outcome,\n        data=linelist,\n        horizontal=TRUE,  # flip to horizontal\n        col=(c(\"gold\",\"darkgreen\")),\n        main=\"C) Horizontal boxplot()\",\n        xlab=\"Suppliment and Dose\")"},{"path":"plot-continuous-data.html","id":"two-continuous-variables-1","chapter":"2 Plot continuous data","heading":"Two continuous variables","text":"Using base R, can quickly visualise relationship two continuous variables plot function.","code":"\nplot(linelist$age, linelist$wt_kg)"},{"path":"plot-continuous-data.html","id":"resources-1","chapter":"2 Plot continuous data","heading":"2.3 Resources","text":"huge amount help online, especially ggplot. See:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"plot-categorical-data.html","id":"plot-categorical-data","chapter":"3 Plot categorical data","heading":"3 Plot categorical data","text":"appropriate plotting categorical data, e.g. distribution sex, symptoms, ethnic group, etc.","code":""},{"path":"plot-categorical-data.html","id":"overview","chapter":"3 Plot categorical data","heading":"3.1 Overview","text":"section cover use R’s built-functions functions ggplot2 package visualise categorical/categorical data. additional functionality ggplot2 compared R means recommend presentation-ready visualisations.cover visualising distributions categorical values, counts proportions.","code":""},{"path":"plot-categorical-data.html","id":"preparation-2","chapter":"3 Plot categorical data","heading":"3.2 Preparation","text":"Preparation includes loading relevant packages, namely ggplot2 examples covered . also load data.","code":""},{"path":"plot-categorical-data.html","id":"load-packages-2","chapter":"3 Plot categorical data","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\n# Load packages we will be using repeatedly\npacman::p_load(ggplot2, # Package for visualisation\n       dplyr,           # Package for data management\n       forcats)         # Package for factors"},{"path":"plot-categorical-data.html","id":"import-data-3","chapter":"3 Plot categorical data","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"plot-categorical-data.html","id":"clean-columns","chapter":"3 Plot categorical data","heading":"Clean columns","text":"examples section, use simulated Ebola linelist, focusing categorical variables hospital, outcome. need correct class format.Let’s take look hospital column.can see values within characters, hospital names, default ordered alphabetically. ‘’ ‘missing’ values, prefer last subcategories presenting breakdowns. change column factor re-order . covered detail ‘factors’ data management section.","code":"\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)## [1] \"character\"\n# Look at values held within hospital column\ntable(linelist$hospital)## \r\n##                     Central Hospital                    Military Hospital                              Missing \r\n##                                  454                                  896                                 1469 \r\n##                                Other                        Port Hospital St. Mark's Maternity Hospital (SMMH) \r\n##                                  885                                 1762                                  422\n# Change hospital to factor variable\nlinelist <- linelist %>% \n  mutate(hospital = factor(hospital))\n\n# Define the levels of factor with forcats - so other and missing are last\nlinelist <- linelist %>% \n  mutate(hospital = fct_relevel(hospital, \n                                c(\"St. Mark's Maternity Hospital (SMMH)\", \n                                  \"Port Hospital\", \n                                  \"Central Hospital\",\n                                  \"Military Hospital\",\n                                  \"Other\",\n                                  \"Missing\")))"},{"path":"plot-categorical-data.html","id":"ensure-correct-data-structure","chapter":"3 Plot categorical data","heading":"Ensure correct data structure","text":"displaying frequencies distributions categorical variables, option creating plots based :linelist data, one row per observation, orA summary table based linelist, one row per category. example show use dplyr create table case counts per hospital.Tables can created using ‘table’ method built-graphics. useNA = \"ifany\" arguments ensures missing values included, table otherwise automatically excludes .using data management packages dplyr. example add percentage column.","code":"\n#Table method\n  outcome_nbar <- table(linelist$outcome, \n                        useNA = \"ifany\")\n\n  outcome_nbar # View full table## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\n#Dplyr method\n  outcome_n <- linelist %>% \n    group_by(outcome) %>% \n    count %>% \n    ungroup() %>% # Ungroup so proportion is out of total\n    mutate(proportion = n/sum(n)*100) # Caculate percentage\n  \n  \n   outcome_n #View full table## # A tibble: 3 x 3\r\n##   outcome     n proportion\r\n##   <chr>   <int>      <dbl>\r\n## 1 Death    2582       43.9\r\n## 2 Recover  1983       33.7\r\n## 3 <NA>     1323       22.5"},{"path":"plot-categorical-data.html","id":"filter-data","chapter":"3 Plot categorical data","heading":"Filter data","text":"may consider dropping rows needed analysis. instance, next examples want understand trends amongst persons known outcome, drop rows missing outcome column values.","code":"\n#Drop missing from full linelist\nlinelist <- linelist %>% \n  filter(!is.na(outcome))\n\n#Drop missing from dplyr table\noutcome_n <- outcome_n %>% \n  filter(!is.na(outcome))"},{"path":"plot-categorical-data.html","id":"plotting-with-ggplot2","chapter":"3 Plot categorical data","heading":"3.3 Plotting with ggplot2","text":"See Plotting ggplot page fundamentals, ggplot tips page advanced techniques.","code":""},{"path":"plot-categorical-data.html","id":"bar-charts-using-raw-data","chapter":"3 Plot categorical data","heading":"Bar charts using raw data","text":"code using geom_bar creating simple bar charts show frequencies Ebola patient outcomes: ) cases, B) hospital.aes bracket, x needs specified - y want bars presented horizontally. Ggplot knows unspecified y (x) number observations fall categories.","code":"\n# A) Outcomes in all cases\nggplot(linelist) + \n  geom_bar(aes(x=outcome)) +\n  labs(title = \"A) Number of recovered and dead Ebola cases\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist) + \n  geom_bar(aes(x=outcome, fill = hospital)) +\n  theme(axis.text.x = element_text(angle = 90)) + # Add preference to rotate the x axis text\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\")"},{"path":"plot-categorical-data.html","id":"bar-charts-using-processed-data","chapter":"3 Plot categorical data","heading":"Bar charts using processed data","text":"code using geom_col creating simple bar charts show distribution Ebola patient outcomes. geom_col, x y need specified. x categorical variable along x axis, y generated proportions column proportion.show breakdowns hospital, additional table needs created frequencies combined categories outcome hospital.create ggplot added formatting:Axis flip: Swapped axis around coord_flip() can read hospital names.Columns side--side: Added position = \"dodge\" argument bars death recover presented side side rather stacked. Note stacked bars default.Column width: Specified ‘width’, columns half thin full possible width.Column order: Reversed order categories y axis ‘’ ‘Missing’ bottom, scale_x_discrete(limits=rev). Note used rather scale_y_discrete hospital stated x argument aes(), even visually y axis. Ggplot seems present categories backwards unless tell .details: Labels/titles colours added within labs scale_fill_color respectively.Note proportions binary, may prefer drop ‘recover’ just show proportion died. just illustration purposes though.","code":"\n# Outcomes in all cases\nggplot(outcome_n) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\noutcome_n2 <- linelist %>% \n  group_by(hospital, outcome) %>% \n  count() %>% \n  group_by(hospital) %>% # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100)\n\nhead(outcome_n2) #Preview data## # A tibble: 6 x 4\r\n## # Groups:   hospital [3]\r\n##   hospital                             outcome     n proportion\r\n##   <fct>                                <chr>   <int>      <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\r\n## 2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\r\n## 3 Port Hospital                        Death     785       57.6\r\n## 4 Port Hospital                        Recover   579       42.4\r\n## 5 Central Hospital                     Death     193       53.9\r\n## 6 Central Hospital                     Recover   165       46.1\n# Outcomes in all cases by hospital\nggplot(outcome_n2) +  \n  geom_col(aes(x=hospital, \n               y = proportion, \n               fill = outcome),\n           width = 0.5,          # Make bars a bit thinner (out of 1)\n           position = \"dodge\") + # Bars are shown side by side, not stacked\n  scale_x_discrete(limits=rev) + # Reverse the order of the categories\n  theme_minimal() +              # Minimal theme \n  coord_flip() +\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",        # Legend title\n       x = \"Count\",             # X axis title\n       y = \"Hospital of admission\")  + # Y axis title\n  scale_fill_manual(values = c(\"Death\"= \"#3B1c8C\",\n                               \"Recover\" = \"#21908D\" )) "},{"path":"plot-categorical-data.html","id":"facetting","chapter":"3 Plot categorical data","heading":"Facetting","text":"can also use faceting create futher mini-graphs, detailed examples continuous data visualisation section. Specifically, one can use:facet_wrap() - recreate sub-graphs present alphabetically (typically, unless stated otherwise). can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within.facet_grid() - suited seeing subgroups particular combinations categorical variables.","code":""},{"path":"plot-categorical-data.html","id":"plotting-with-base-graphics-1","chapter":"3 Plot categorical data","heading":"3.4 Plotting with base graphics","text":"Bar chartsTo create bar plots R, create frequency table using table function. creates object table class, R can recognise plotting. can create simple frequency graph showing Ebola case outcomes (), add colours present outcomes gender (B).Note NA values excluded plots default.","code":"\n# A) Outcomes in all cases\noutcome_nbar <- table(linelist$outcome)\nbarplot(outcome_nbar, main= \"A) Outcomes\")\n\n# B) Outcomes in all cases by gender of case\noutcome_nbar2 <- table(linelist$outcome, linelist$gender) # The first column is for groupings within a bar, the second is for the separate bars\nbarplot(outcome_nbar2, legend.text=TRUE, main = \"B) Outcomes by gender\") # Specify inclusion of legend"},{"path":"plot-categorical-data.html","id":"resources-2","chapter":"3 Plot categorical data","heading":"3.5 Resources","text":"huge amount help online, especially ggplot. see:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"ggplot-tips.html","id":"ggplot-tips","chapter":"4 ggplot tips","heading":"4 ggplot tips","text":"page cover tips tricks make plots sharp fancy. See page Plotting ggplot fundamentals.several extensive ggplot2 tutorials linked resources section. can also download data visualization ggplot cheatsheet RStudio website. want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-tips.html","id":"preparation-3","chapter":"4 ggplot tips","heading":"4.1 Preparation","text":"","code":""},{"path":"ggplot-tips.html","id":"load-packages-3","chapter":"4 ggplot tips","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"ggplot-tips.html","id":"import-data-4","chapter":"4 ggplot tips","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"ggplot-tips.html","id":"colour-schemes","chapter":"4 ggplot tips","heading":"4.2 Colour schemes","text":"One thing can initially difficult understand ggplot2 control colour schemes passing colour fill variable rather defining explicitly within geom. simple tricks can used achieve however. Remember setting colours, can use colour names (long recognised) like \"red\", specific hex colour \"#ff0505\".One useful tricks using manual scaling functions explicitly define colours. functions syntax scale_xxx_manual() (e.g. scale_colour_manual() scale_fill_manual()). function can explicitly define colours map value using values = argument. can control legend title name = argument, order factors breaks =.want predefined palettes, can use scale_xxx_brewer scale_xxx_viridis_y functions.‘brewer’ functions can draw colorbrewer.org palettes.\r\n‘viridis’ functions draw viridis (colourblind friendly!) palettes, “provide colour maps perceptually uniform colour black--white. also designed perceived viewers common forms colour blindness.” (read ). Define palette discrete, continuous, binned specifying end function (e.g. discrete scale_xxx_viridis_d).Test image color blindness simulator. red/green color scheme, try “hot-cold” (red-blue) scheme instead described hereHere example Plotting ggplot page, saved ```using various color schemes.","code":"\nsymp_plot <- linelist %>%                                         # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  theme(legend.position = \"bottom\")+\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot  # print with default colors\n\n#################################\n# print with manually-specified colors\nsymp_plot +\n  scale_fill_manual(\n    values = c(\"yes\" = \"black\",         # explicitly define colours\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    breaks = c(\"yes\", \"no\", \"unknown\"), # order the factors correctly\n    name = \"\"                           # set legend to no title\n\n  ) \n\n#################################\n# print with viridis discrete colors\nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )"},{"path":"ggplot-tips.html","id":"change-order-of-discrete-variables","chapter":"4 ggplot tips","heading":"4.3 Change order of discrete variables","text":"Changing order discrete variables appear often difficult understand people new ggplot2 graphs. ’s easy understand however understand ggplot2 handles discrete variables hood. Generally speaking, discrete varaible used, automatically converted factor type - orders factors alphabetical order default. handle , simply reorder factor levels reflect order like appear chart. detailed information reorder factor objects, see factor section guide.can look common example using age groups - default 5-9 age group placed middle age groups (given alphabetical order), can move behind 0-4 age group chart releveling factors.","code":"\n# remove the instances of age_cat5 where data is missing\nggplot(linelist %>%\n         filter(!is.na(age_cat5)),\n       # relevel the factor within the ggplot call (can do externally as well)\n       aes(x = forcats::fct_relevel(age_cat5, \"5-9\", after = 1))) +\n  geom_histogram(stat = \"count\") +\n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  theme_minimal()"},{"path":"ggplot-tips.html","id":"combining-multiple-plots","chapter":"4 ggplot tips","heading":"4.4 Combining multiple plots","text":"Faceting described Plotting ggplot page.faceting convenient approach plotting, sometimes possible get results want relatively restrictive approach. , may choose combine plots sticking together larger plot. three well known packages great - cowplot, gridExtra, patchwork. However, packages largely things, ’ll focus cowplot section.cowplot package fairly wide range functions, easiest use can achieved use plot_grid(). effectively way arrange predefined plots grid formation. can work another example malaria dataset - can plot total cases district, also show epidemic curve time.","code":"\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) \n\n# bar chart of total cases by district\np1 <- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 <- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))"},{"path":"ggplot-tips.html","id":"marginal-distributions","chapter":"4 ggplot tips","heading":"4.5 Marginal distributions","text":"show distributions edges geom_point() scatterplot, can use ggExtra package function ggMarginal(). Save original ggplot object, pass ggMarginal() shown . key arguments:must specify type = either “histogram”, “density” “boxplot”, “violin”, “densigram”.default, marginal plots appear axes. can set margins = “x” “y” want one.optional arguments include fill = (bar color), color = (line color), size = (plot size relative margin size, larger number makes marginal plot smaller).can provide axis-specific arguments xparams = yparams =. example, different histogram bin sizes, shown .can marginal plots reflect groups (columns assigned color = ggplot() mapped aesthetics). case, set ggMarginal() argument groupColour = groupFill = TRUE, shown .Read vignette, R Graph Gallery function R documentation ?ggMarginal.add marginal histograms:Marginal histograms grouped/colored values:Marginal density curve, demonstration size color arguments:Marginal boxplots, demonstration margins argument:","code":"\n# Install/load ggExtra\npacman::p_load(ggExtra)\n\n# Basic scatter plot of weight and age\nscatter_plot <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age)) +\n  labs(title = \"Scatter plot of weight and age\")\n# with histograms\nggMarginal(\n  scatter_plot,                     # add marginal histograms\n  type = \"histogram\",               # specify histograms\n  fill = \"lightblue\",               # bar fill\n  xparams = list(binwidth = 10),    # other parameters for x-axis marginal\n  yparams = list(binwidth = 5))     # other parameters for y-axis marginal\n# Scatter plot, colored by outcome\n# Outcome column is assigned as color in ggplot. groupFill in ggMarginal set to TRUE\nscatter_plot_color <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age, color = outcome)) +\n  labs(title = \"Scatter plot of weight and age\")+\n  theme(legend.position = \"bottom\")\n\nggMarginal(scatter_plot_color, type = \"histogram\", groupFill = TRUE)\n# with density curves\nggMarginal(\n  scatter_plot,\n  type = \"density\",\n  color = \"red\",                    # line color\n  size = 4)                         # smaller number makes larger marginal plots\n# with boxplot \nggMarginal(\n  scatter_plot,\n  margins = \"x\",      # only show x-axis marginal plot\n  type = \"boxplot\")   "},{"path":"ggplot-tips.html","id":"smart-labeling","chapter":"4 ggplot tips","heading":"4.6 Smart Labeling","text":"ggplot2, also possible add text plots. However, comes notable limitation text labels often clash data points plot, making look messy hard read. ideal way deal base package, ggplot2 add-, known ggrepel makes dealing simple!ggrepel package provides two new functions, geom_label_repel() geom_text_repel(), replace geom_label() geom_text(). Simply use functions instead base functions produce neat labels. Within function, map aesthetics aes() always, include argument label = provide column name containing values want display (e.g. patient id, name, etc.). can make complex labels combining columns newlines (\\n) within str_glue() shown .tips:Use min.segment.length = 0 always draw line segments, min.segment.length = Inf never draw themUse size = outside aes() set text sizeUse force = change degree repulsion labels respective points (default 1)Include fill = within aes() label colored value\r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove \r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove itSee -depth tutorial .can label subset data points - using standard ggplot() syntax provide different data = geom layer plot. , cases plotted, labeled.","code":"\npacman::p_load(ggrepel)\n\nlinelist %>%                                               # start with linelist\n  group_by(hospital) %>%                                   # group by hospital\n  summarise(                                               # create new dataset with summary values per hospital\n    n_cases = n(),                                           # number of cases per hospital\n    delay_mean = round(mean(days_onset_hosp, na.rm=T),1),    # mean delay per hospital\n  ) %>% \n  ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # send data frame to ggplot\n  geom_point(size = 2)+                                    # add points\n  geom_label_repel(                                        # add point labels\n    mapping = aes(\n      label = stringr::str_glue(\n        \"{hospital}\\n{n_cases} cases, {delay_mean} days\")  # how label displays\n      ), \n    size = 3,                                              # text size in labels\n    min.segment.length = 0)+                               # show all line segments                \n  labs(                                                    # add axes labels\n    title = \"Mean delay to admission, by hospital\",\n    x = \"Number of cases\",\n    y = \"Mean delay (days)\")\nggplot()+\n  # All points in grey\n  geom_point(\n    data = linelist,                                   # all data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    color = \"grey\",\n    alpha = 0.5)+                                              # grey and semi-transparent\n  \n  # Few points in black\n  geom_point(\n    data = linelist %>% filter(days_onset_hosp > 15),  # filtered data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    alpha = 1)+                                                # default black and not transparent\n  \n  # point labels for few points\n  geom_label_repel(\n    data = linelist %>% filter(days_onset_hosp > 15),  # filter the data for the labels\n    mapping = aes(\n      x = ht_cm,\n      y = wt_kg,\n      fill = outcome,                                          # label color by outcome\n      label = stringr::str_glue(\"Delay: {days_onset_hosp}d\")), # label created with str_glue()\n    min.segment.length = 0) +                                  # show line segments for all\n  \n  # remove letter \"a\" from inside legend boxes\n  guides(fill = guide_legend(override.aes = aes(color = NA)))+\n  \n  # axis labels\n  labs(\n    title = \"Cases with long delay to admission\",\n    y = \"weight (kg)\",\n    x = \"height(cm)\")"},{"path":"ggplot-tips.html","id":"time-axes","chapter":"4 ggplot tips","heading":"4.7 Time axes","text":"Working time axes ggplot can seem daunting, made easy key functions. Remember working time date ensure correct variables formatted date datetime class - see [Working dates] page information , [Epidemic curves] page (ggplot section) examples.single useful set functions working dates ggplot2 scale functions (scale_x_date(), scale_x_datetime(), cognate y-axis functions). functions let define often axis labels, format axis labels. find format dates, see working dates section ! can use date_breaks date_labels arguments specify dates look:date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):","code":"\n# make epi curve by date of onset when available\nggplot(linelist, aes(x = date_onset)) +\n  geom_bar(stat = \"count\") +\n  scale_x_date(\n    # 1 break every 1 month\n    date_breaks = \"1 months\",\n    # labels should show month then date\n    date_labels = \"%b %d\"\n  ) +\n  theme_classic()"},{"path":"ggplot-tips.html","id":"highlighting","chapter":"4 ggplot tips","heading":"4.8 Highlighting","text":"Highlighting specific elements chart useful way draw attention specific instance variable also providing information dispersion full dataset. easily done base ggplot2, external package can help known gghighlight. easy use within ggplot syntax.gghighlight package uses gghighlight() function achieve effect. use function, supply logical statement function - can quite flexible outcomes, ’ll show example age distribution cases linelist, highlighting outcome.also works well faceting functions - allows user produce facet plots background data highlighted doesn’t apply facet!","code":"\n# load gghighlight\nlibrary(gghighlight)\n\n# replace NA values with unknown in the outcome variable\nlinelist <- linelist %>%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  gghighlight::gghighlight(outcome == \"Death\")     # highlight instances where the patient has died.\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() +                                # make the histogram\n  gghighlight::gghighlight() +                      # highlight instances where the patient has died\n  facet_wrap(~outcome)                              # make facets by outcome"},{"path":"ggplot-tips.html","id":"dual-axes","chapter":"4 ggplot tips","heading":"4.9 Dual axes","text":"secondary y-axis often requested addition ggplot2 graph. robust debate validity graphs data visualization community, often recommended, manager may still want . , present two methods achieve .Using cowplot package combine two separate plotsUsing statistical transformation data primary axis","code":""},{"path":"ggplot-tips.html","id":"using-cowplot","chapter":"4 ggplot tips","heading":"Using cowplot","text":"approach involves creating two separate plots - one y-axis left, y-axis right. use specific theme_cowplot() must x-axis. third command two plots aligned overlaid top . functionalities cowplot, one, described depth site.demonstrate technique overlay epidemic curve line weekly percent patients died. use example alignment dates x-axis complex say, aligning bar chart another plot. things note:epicurve line aggregated weeks prior plotting date_breaks date_labels identical - x-axes two plots overlaid.y-axis moved right-side plot 2 position = argument scale_y_continuous().plots make use theme_cowplot()Note another example technique [Epicurves] page - overlaying cumulative incidence top epicurve.Make plot 1\r\nessentially epicurve. use geom_area() just demonstrate use (area line, default)Make plot 2\r\nCreate second plot showing line weekly percent cases died.Now align plot using function align_plots(), specifying horizontal vertical alignment (“hv”, also “h”, “v”, “none”). specify alignment axes well (top, bottom, left, right) “tblr”. output class list (2 elements).draw two plots together using ggdraw() (cowplot) referencing two parts aligned_plots object.","code":"\npacman::p_load(cowplot)            # load/install cowplot\n\np1 <- linelist %>%                 # save plot as object\n     count(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     ggplot()+\n          geom_area(aes(x = epiweek, y = n), fill = \"grey\")+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n     theme_cowplot()+\n     labs(\n       y = \"Weekly cases\"\n     )\n\np1                                      # view plot \np2 <- linelist %>%         # save plot as object\n     group_by(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     summarise(\n       n = n(),\n       pct_death = 100*sum(outcome == \"Death\", na.rm=T) / n) %>% \n     ggplot(aes(x = epiweek, y = pct_death))+\n          geom_line()+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n          scale_y_continuous(\n               position = \"right\")+\n          theme_cowplot()+\n          labs(\n            x = \"Epiweek of symptom onset\",\n            y = \"Weekly percent of deaths\",\n            title = \"Weekly case incidence and percent deaths\"\n          )\n\np2     # view plot\naligned_plots <- align_plots(p1, p2, align=\"hv\", axis=\"tblr\")                  # align the two plots and save them as list\naligned_plotted <- ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])  # overlay them and save the visual plot\naligned_plotted                                                                # print the overlayed plots"},{"path":"ggplot-tips.html","id":"statistical-transformation","chapter":"4 ggplot tips","heading":"Statistical transformation","text":"Unfortunately, secondary axes well supported ggplot syntax. reason, ’re fairly limited terms can shown secondary axis - second axis direct transformation secondary axis.Differences axis values purely cosmetic - want show two different variables one graph, different y-axis scales variable, work without work behind scenes. obtain effect, transform one variables data, apply transformation reverse specifying axis labels. Based , can either specify transformation explicitly (e.g. variable around 10x large variable b) calculate code (e.g. ratio maximum values dataset).syntax adding secondary axis straightforward! calling scale_xxx_xxx() function (e.g. scale_y_continuous()), use sec.axis argument call sec_axis() function. trans argument function allows specify label transformation axis - provide standard tidyverse syntax.example, want show number positive RDTs malaria dataset facility 1, showing 0-4 year olds cases chart:","code":"\n# take malaria data from facility 1\nmalaria_facility_1 <- malaria_data %>%\n  filter(location_name == \"Facility 1\")\n\n# calculate the ratio between malaria_rdt_0-4 and malaria_tot \n\ntf_ratio <- max(malaria_facility_1$malaria_tot, na.rm = T) / max(malaria_facility_1$`malaria_rdt_0-4`, na.rm = T)\n\n# transform the values in the dataset\n\nmalaria_facility_1 <- malaria_facility_1 %>%\n  mutate(malaria_rdt_0_4_tf = `malaria_rdt_0-4` * tf_ratio)\n  \n\n# plot the graph with dual axes\n\nggplot(malaria_facility_1, aes(x = data_date)) +\n  geom_line(aes(y = malaria_tot, col = \"Total cases\")) +\n  geom_line(aes(y = malaria_rdt_0_4_tf, col = \"Cases: 0-4 years old\")) +\n  scale_y_continuous(\n    name = \"Total cases\",\n    sec.axis = sec_axis(trans = ~ . / tf_ratio, name = \"Cases: 0-4 years old\")\n  ) +\n  labs(x = \"date of data collection\") +\n  theme_minimal() +\n  theme(legend.title = element_blank())"},{"path":"ggplot-tips.html","id":"combine-plots","chapter":"4 ggplot tips","heading":"4.10 Combine plots","text":"CONSTRUCTIONcowplotpatchwork","code":""},{"path":"ggplot-tips.html","id":"packages-to-help-you","chapter":"4 ggplot tips","heading":"4.11 Packages to help you","text":"CONSTRUCTIONThere really neat R packages specifically designed help navigate ggplot2:","code":""},{"path":"ggplot-tips.html","id":"gghelp-from-ggx","chapter":"4 ggplot tips","heading":"4.11.1 gghelp() from ggx","text":"Converts normal language query ggplot command.https://rdrr.io/github/brandmaier/ggx/man/gghelp.html","code":""},{"path":"ggplot-tips.html","id":"point-and-click-with-equisse","chapter":"4 ggplot tips","heading":"4.11.2 Point-and-click with equisse","text":"https://github.com/dreamRs/esquisse“addin allows interactively explore data visualizing ggplot2 package. allows draw bar plots, curves, scatter plots, histograms, boxplot sf objects, export graph retrieve code reproduce graph.”Documentation:https://dreamrs.github.io/esquisse/index.htmlInstall launch addin via RStudio menu esquisse::esquisser().","code":""},{"path":"ggplot-tips.html","id":"miscellaneous","chapter":"4 ggplot tips","heading":"4.12 Miscellaneous","text":"","code":""},{"path":"ggplot-tips.html","id":"numeric-display","chapter":"4 ggplot tips","heading":"Numeric display","text":"can disable scientific notation running command prior plotting.apply number_format() scales package specific value column, shown .Use functions package scales easily adjust numbers displayed. can applied columns data frame, shown individual numbers purpose example.","code":"\noptions(scipen=999)\nscales::number(6.2e5)## [1] \"620 000\"\nscales::number(1506800.62,  accuracy = 0.1,)## [1] \"1 506 800.6\"\nscales::comma(1506800.62, accuracy = 0.01)## [1] \"1,506,800.62\"\nscales::comma(1506800.62, accuracy = 0.01,  big.mark = \".\" , decimal.mark = \",\")## [1] \"1.506.800,62\"\nscales::percent(0.1)## [1] \"10%\"\nscales::dollar(56)## [1] \"$56\"\nscales::scientific(100000)## [1] \"1e+05\""},{"path":"ggplot-tips.html","id":"resources-3","chapter":"4 ggplot tips","heading":"4.13 Resources","text":"Inspiration\r\nggplot graph galleryPresentation data\r\nEuropean Centre Disease Prevention Control Guidelines presentation surveillance dataFacets labellers\r\nUsing labellers facet strips\r\nLabellersAdjusting order factors\r\nfct_reorderfct_inorderHow reorder boxplotReorder variable ggplot2R Data Science - FactorsLegendsAdjust legend orderCaptions\r\nCaption alignmentLabelsggrepelCheatsheetsBeautiful plotting ggplot2TO - constructionStraight horizontal, vertical, lineYou can also add straight lines plot geom_hline() (horizontal), geom_vline() (vertical) geom_abline() (specified y intercept slope)Using option label_wrap_gen facet_wrap multiple strip lines\r\nlabels colors stripsAxis text vertical adjustment\r\nrotation\r\nLabellerslimit range limit() coord_cartesian(), ylim(), scale_x_continuous()\r\ntheme_classic()expand = c(0,0)\r\ncoord_flip()\r\ntick marksggrepel\r\nanimationsremove\r\nremove title\r\nusing fill = color = labs()\r\nflip order / don’t flip order\r\nmove location\r\ncolor? theme(legend.title = element_text(colour=“chocolate”, size=16, face=“bold”))+ scale_color_discrete(name=“color ischocolate!?”)\r\nColor boxes behind points legend\r\ntheme(legend.key=element_rect(fill=‘pink’)) use fill = NA remove . http://zevross.com/blog/2014/08/04/beautiful-plotting--r--ggplot2-cheatsheet-3/\r\nChange size symbols legend guides(colour = guide_legend(override.aes = list(size=4)))Turn layer legend\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp)), size=4)\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp), size=4), show_guide=FALSE)Force legend even aes().\r\nggplot(nmmaps, aes(x=date, y=o3))+\r\ngeom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“points”))\r\nControl shape legend guides - list linetype shape\r\nggplot(nmmaps, aes(x=date, y=o3))+geom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“Point values”))+\r\nscale_colour_manual(name=’‘, values=c(’Important line’=‘grey’, ‘Point values’=‘red’), guide=‘legend’) +\r\nguides(colour = guide_legend(override.aes = list(linetype=c(1,0)\r\n, shape=c(NA, 16))))","code":""}]
