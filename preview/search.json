[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link, email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Emma Buajitti, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Brianna Bradley, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Molly Mantus, Adam Vaughan, Lionel Monteiro, Joao Muianga","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"reports-with-r-markdown.html","id":"reports-with-r-markdown","chapter":"1 Reports with R Markdown","heading":"1 Reports with R Markdown","text":"R Markdown widely-used tool creating automated, reproducible, share-worthy outputs, reports. can generate static interactive outputs, Word, pdf, html, powerpoint, formats.R Markdown script intersperces R code text script actually becomes output document. can create entire formatted document, including narrative text (can dynamic change based data), tables, figures, bullets/numbers, bibliographies, etc.documents can produced update routine basis (e.g. daily surveillance reports) /run subsets data (e.g. reports jurisdiction).pages handbook expand topic:page [Organizing routine reports] demonstrates routinize report production auto-generated time-stamped folders.page [Dashboards M Markdown] explains format R Markdown report dashboard.","code":""},{"path":"reports-with-r-markdown.html","id":"preparation","chapter":"1 Reports with R Markdown","heading":"1.1 Preparation","text":"Background R MarkdownTo explain concepts packages involved:Markdown “language” allows write document using plain text, can converted html formats. specific R. Files written Markdown ‘.md’ extension.R Markdown: variation markdown specific R - allows write document using markdown produce text embed R code display outputs. R Markdown files ‘.Rmd’ extension.rmarkdown - package: used R render .Rmd file desired output. ’s focus converting markdown (text) syntax, also need…knitr: R package read code chunks, execute , ‘knit’ back document. tables graphs included alongside text.Pandoc: Finally, pandoc actually convert output word/pdf/powerpoint etc. software separate R installed automatically RStudio.sum, process involves feeding .Rmd file knitr, executes R code chunks creates new .md (markdown) file includes R code rendered output. .md file processed pandoc create finished product: Microsoft Word document, HTML file, powerpoint document, pdf, etc.(source: https://rmarkdown.rstudio.com/authoring_quick_tour.html):InstallationTo create R Markdown output, need following installed:rmarkdown package (knitr also installed automatically)Pandoc, come installed RStudio. using RStudio, can download : http://pandoc.org.want generate PDF output (bit trickier), need install LaTeX. R Markdown users installed LaTeX , recommend install TinyTeX (https://yihui.name/tinytex/). can use following commands:","code":"\npacman::p_load(tinytex)     # install tinytex package\ntinytex::install_tinytex()  # R command to install TinyTeX software"},{"path":"reports-with-r-markdown.html","id":"getting-started","chapter":"1 Reports with R Markdown","heading":"1.2 Getting started","text":"","code":""},{"path":"reports-with-r-markdown.html","id":"install-rmarkdown-r-package","chapter":"1 Reports with R Markdown","heading":"Install rmarkdown R package","text":"Install rmarkdown R package. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(rmarkdown)"},{"path":"reports-with-r-markdown.html","id":"starting-a-new-rmd-file","chapter":"1 Reports with R Markdown","heading":"Starting a new Rmd file","text":"RStudio, open new R markdown file, starting ‘File’, ‘New file’ ‘R markdown…’.R Studio give output options pick . example select “HTML” want create html document. title author names important. output document type want one , don’t worry - can just pick one change script later.open new .Rmd script.","code":""},{"path":"reports-with-r-markdown.html","id":"important-to-know","chapter":"1 Reports with R Markdown","heading":"Important to know","text":"working directoryThe working directory markdown file wherever Rmd file saved. instance, R project within ~/Documents/projectX Rmd file subfolder ~/Documents/projectX/markdownfiles/markdown.Rmd, code read.csv(“data.csv”) within markdown look csv file markdownfiles folder, root project folder scripts within projects normally automatically look.refer files elsewhere, either need use full file path use package. package sets working directory root folder R project explained detail [R projects] [Import export] pages handbook. instance, import file called “data.csv” within projectX folder, code import((“data.csv”)).Note use setwd() R Markdown scripts recommended – applies code chunk written .Working drive vs computerBecause R Markdown can run pandoc issues running shared network drive, recommended folder local machine, e.g. project within ‘Documents’. use Git (much recommended!), familiar. details, see handbook pages [R network drives] [Errors help].","code":""},{"path":"reports-with-r-markdown.html","id":"r-markdown-components","chapter":"1 Reports with R Markdown","heading":"1.3 R Markdown components","text":"R Markdown document can edited RStudio just like standard R script. start new R Markdown script, RStudio tries helpful showing template explains different section R Markdown script.appears starting new Rmd script intended produce html output (per previous section).can see, three basic components Rmd file: YAML, Markdown text, R code chunks.create become document output. See diagram :","code":""},{"path":"reports-with-r-markdown.html","id":"yaml-metadata","chapter":"1 Reports with R Markdown","heading":"YAML metadata","text":"Referred ‘YAML metadata’ just ‘YAML’, top R Markdown document. section script tell Rmd file type output produce, formatting preferences, metadata document title, author, date. uses mentioned (referred ‘Producing output’). Note indentation matters; tabs accepted spaces .section must begin line containing just three dashes --- must close line containing just three dashes ---. YAML parameters comes key:value pairs. placement colons YAML important - key:value pairs separated colons (equals signs!).YAML begin metadata document. order primary YAML parameters (indented) matter. example:can use R code YAML values writing -line code (preceded r within back-ticks) also within quotes (see example date:).image , clicked default output html file, can see YAML says output: html_document. However can also change say powerpoint_presentation word_document even pdf_document.","code":"title: \"My document\"\r\nauthor: \"Me\"\r\ndate: \"2021-04-29\""},{"path":"reports-with-r-markdown.html","id":"text","chapter":"1 Reports with R Markdown","heading":"Text","text":"narrative document, including titles headings. written “markdown” language, used across many different software.core ways write text. See extensive documentation available R Markdown “cheatsheet” RStudio website.","code":""},{"path":"reports-with-r-markdown.html","id":"new-lines","chapter":"1 Reports with R Markdown","heading":"New lines","text":"Uniquely R Markdown, initiate new line, enter *two spaces** end previous line Enter/Return.","code":""},{"path":"reports-with-r-markdown.html","id":"case","chapter":"1 Reports with R Markdown","heading":"Case","text":"Surround normal text character change appears output.Underscores (_text_) single asterisk (*text*) italiciseDouble asterisks (**text**) bold textBack-ticks (text) display text codeThe actual appearance font can set using specific templates (specified YAML metadata; see example tabs).","code":""},{"path":"reports-with-r-markdown.html","id":"color","chapter":"1 Reports with R Markdown","heading":"Color","text":"simple mechanism change color text R Markdown. One work-around, output HTML file, add HTML line markdown text. HTML code print line text bold red.","code":"<span style=\"color: red;\">**_DANGER:_** This is a warning.<\/span>  "},{"path":"reports-with-r-markdown.html","id":"titles-and-headings","chapter":"1 Reports with R Markdown","heading":"Titles and headings","text":"hash symbol text portion R Markdown script creates heading. different chunk R code script, hash symbol mechanism comment/annotate/de-activate, normal R script.Different heading levels established different numbers hash symbols start new line. One hash symbol title primary heading. Two hash symbols second-level heading. Third- fourth-level headings can made successively hash symbols.","code":"# First-level heading / title\r\n\r\n## Second level heading  \r\n\r\n### Third-level heading"},{"path":"reports-with-r-markdown.html","id":"bullets-and-numbering","chapter":"1 Reports with R Markdown","heading":"Bullets and numbering","text":"Use asterisks (*) created bullets list. Finish previous sentence, enter two spaces, Enter/Return twice, start bullets. Include space asterisk bullet text. bullet enter two spaces Enter/Return. Sub-bullets work way indented. Numbers work way instead asterisk, write 1), 2), etc. R Markdown script text might look.","code":"Here are my bullets (there are two spaces after this colon):  \r\n\r\n* Bullet 1 (followed by two spaces and Enter/Return)  \r\n* Bullet 2 (followed by two spaces and Enter/Return)  \r\n  * Sub-bullet 1 (followed by two spaces and Enter/Return)  \r\n  * Sub-bullet 2 (followed by two spaces and Enter/Return)  \r\n  "},{"path":"reports-with-r-markdown.html","id":"comment-out-text","chapter":"1 Reports with R Markdown","heading":"Comment out text","text":"can “comment ” R Markdown text just can use “#” comment line R code R chunk. Simply highlight text press Ctrl+Shift+c (Cmd+Shift+c Mac). text surrounded arrows turn green. appear output.","code":""},{"path":"reports-with-r-markdown.html","id":"code-chunks","chapter":"1 Reports with R Markdown","heading":"Code chunks","text":"Sections script dedicated running R code called “chunks”. may load packages, import data, perform actual data management visualisation. may many code chunks, can help organize R code parts, perhaps interspersed text. note:\r\n‘chunks’ appear slightly different background colour narrative part document.chunk opened line starts three back-ticks, curly brackets contain parameters chunk ({ }). chunk ends three back-ticks.can create new chunk typing , using keyboard shortcut “Ctrl + Alt + ” (Cmd + Shift + r Mac), clicking green ‘insert new code chunk’ icon top script editor.notes contents curly brackets { }:start ‘r’ indicate language name within chunk RAfter r can optionally write chunk “name” – necessary can help organise work. Note name chunks, ALWAYS use unique names else R complain try render.curly brackets can include options , written tag=value, :eval = FALSE run R codeecho = FALSE print chunk’s R source code output documentwarning = FALSE print warnings produced R codemessage = FALSE print messages produced R codeinclude = either TRUE/FALSE whether include chunk outputs (e.g. plots) documentout.width = .height = - provide style .width = \"75%\"fig.align = \"center\" adjust figure aligned across pagefig.show='hold' chunk prints multiple figures want printed next (pair .width = c(\"33%\", \"67%\"). Can also set fig.show='asis' show code generates , 'hide' hide, 'animate' concatenate multiple animation.chunk header must written one lineTry avoid periods, underscores, spaces. Use hyphens ( - ) instead need separator.Read extensively knitr options .options can configured point--click using setting buttons top right chunk. , can specify parts chunk want rendered document include, namely code, outputs, warnings. come written preferences within curly brackets, e.g. ‘echo=FALSE’ specify want ‘Show output ’.also two arrows top right chunk, useful run code within chunk, code prior chunks. Hover see .global options applied chunks script, can set within first R code chunk script. instance, outputs shown code chunk code , can include command R code chunk:","code":"\nknitr::opts_chunk$set(echo = FALSE) "},{"path":"reports-with-r-markdown.html","id":"in-text-r-code","chapter":"1 Reports with R Markdown","heading":"In-text R code","text":"can also include minimal R code within back-ticks. Within back-ticks, begin code “r” space, RStudio knows evaluate code R code. See example .example shows multiple heading levels, bullets, uses R code current date (Sys.Date()) evaluate printed date.example, script calculates proportion cases aged less 18 years old, using tidyverse functions, creates objects less18, total, less18prop. dynamic value inserted subsequent text. see looks knitted word document.","code":""},{"path":"reports-with-r-markdown.html","id":"images","chapter":"1 Reports with R Markdown","heading":"Images","text":"can include images R Markdown one two ways:work, try using knitr::include_graphics()(remember, file path written using package)","code":"![](\"path/to/image.png\")  \nknitr::include_graphics(\"path/to/image.png\")\nknitr::include_graphics(here::here(\"path\", \"to\", \"image.png\"))"},{"path":"reports-with-r-markdown.html","id":"tables","chapter":"1 Reports with R Markdown","heading":"Tables","text":"Create table using hyphens ( - ) bars ( | ). number hyphens /bars allow number spaces cell text begins wrap.code produces table :","code":"Column 1 |Column  2 |Column 3\r\n---------|----------|--------\r\nCell A   |Cell B    |Cell C\r\nCell D   |Cell E    |Cell F"},{"path":"reports-with-r-markdown.html","id":"tabbed-sections","chapter":"1 Reports with R Markdown","heading":"Tabbed sections","text":"HTML outputs, can arrange sections “tabs”. Simply add .tabset curly brackets { } placed heading. sub-headings beneath heading (another heading level) appear tabs user can click . Read hereYou can add additional option .tabset-pills .tabset give tabs “pilled” appearance. aware viewing tabbed HTML output, Ctrl+f search functionality search “active” tabs, hidden tabs.","code":""},{"path":"reports-with-r-markdown.html","id":"file-structure","chapter":"1 Reports with R Markdown","heading":"1.4 File structure","text":"several ways structure R Markdown associated R scripts. advantages disadvantages:Self-contained R Markdown - everything needed report imported created within R Markdown\r\nSource files - can run external R scripts source() command use outputs Rmd\r\nChild scripts - alternate mechanism source()\r\nSource files - can run external R scripts source() command use outputs RmdChild scripts - alternate mechanism source()Utilize “runfile” - Run commands R script prior rendering R Markdown","code":""},{"path":"reports-with-r-markdown.html","id":"self-contained-rmd","chapter":"1 Reports with R Markdown","heading":"Self-contained Rmd","text":"relatively simple report, may elect organize R Markdown script “self-contained” involve external scripts.Everything need run R markdown imported created within Rmd file, including code chunks package loading. “self-contained” approach appropriate need much data processing (e.g. brings clean semi-clean data file) rendering R Markdown take long.scenario, one logical organization R Markdown script might :Set global knitr optionsLoad packagesImport dataProcess dataProduce outputs (tables, plots, etc.)Save outputs, applicable (.csv, .png, etc.)","code":""},{"path":"reports-with-r-markdown.html","id":"source-other-files","chapter":"1 Reports with R Markdown","heading":"Source other files","text":"One variation “self-contained” approach R Markdown code chunks “source” (run) R scripts. can make R Markdown script less cluttered, simple, easier organize. can also help want display final figures beginning report. approach, final R Markdown script simply combines pre-processed outputs document.One way providing R scripts (file path name extension) base R command source().Note using source() within R Markdown, external files still run course rendering Rmd file. Therefore, script run every time render report. Thus, source() commands within R Markdown speed run time, greatly assist de-bugging, error produced still printed producing R Markdown.alternative utilize child = knitr option. EXPLAIN DOYou must aware various R environments. Objects created within environment necessarily available environment used R Markdown.","code":"\nsource(\"your-script.R\", local = knitr::knit_global())\n# or sys.source(\"your-script.R\", envir = knitr::knit_global())"},{"path":"reports-with-r-markdown.html","id":"runfile","chapter":"1 Reports with R Markdown","heading":"Runfile","text":"approach involves utilizing R script contains render() command(s) pre-process objects feed R markdown.instance, can load packages, load clean data, even create graphs interest prior render(). steps can occur R script, scripts sourced. long commands occur RStudio session objects saved environment, objects can called within Rmd content. R markdown used final step - produce output pre-processed objects. much easier de-bug something goes wrong.approach helpful following reasons:informative error messages - messages generated R script, R Markdown. R Markdown errors tend tell chunk problem, tell line.applicable, can run long processing steps advance render() command - run .example , separate R script pre-process data object R Environment render “create_output.Rmd” using render().","code":"\ndata <- import(\"datafile.csv\") %>%       # Load data and save to environment\n  select(age, hospital, weight)          # Select limited columns\n\nrmarkdown::render(input = \"create_output.Rmd\")   # Create Rmd file"},{"path":"reports-with-r-markdown.html","id":"folder-strucutre","chapter":"1 Reports with R Markdown","heading":"Folder strucutre","text":"Workflow also concerns overall folder structure, ‘output’ folder created documents figures, ‘data’ ‘inputs’ folders cleaned data. go detail , check [Organizing routine reports] page.","code":""},{"path":"reports-with-r-markdown.html","id":"producing-the-document","chapter":"1 Reports with R Markdown","heading":"1.5 Producing the document","text":"can produce document following ways:Manually pressing “Knit” button top RStudio script editor (fast easy)Run render() command (executed outside R Markdown script)","code":""},{"path":"reports-with-r-markdown.html","id":"option-1-knit-button","chapter":"1 Reports with R Markdown","heading":"Option 1: “Knit” button","text":"Rmd file open, press ‘Knit’ icon/button top file.R Studio show progress within ‘R Markdown’ tab near R console. document automatically open complete.document saved folder R markdown script, file name (aside extension). obviously ideal version control (-written tim knit, unless moved manually), may need rename file (e.g. add date).RStudio’s shortcut button render() function rmarkdown. approach compatible self-contained R markdown, needed components exist sourced within file.","code":""},{"path":"reports-with-r-markdown.html","id":"option-2-render-command","chapter":"1 Reports with R Markdown","heading":"Option 2: render() command","text":"Another way produce R Markdown output run render() function (rmarkdown package). must execute command outside R Markdown script - either separate R script (often called “run file”), stand-alone command R Console.“knit”, default settings save Rmd output folder Rmd script, file name (aside file extension). instance “my_report.Rmd” knitted create “my_report.docx” knitting word document. However, using render() option use different settings. render() can accept arguments including:output_format = output format convert (e.g. \"html_document\", \"pdf_document\", \"word_document\", \"\"). can also specify YAML inside R Markdown script.output_file = name output file (file path). can created via R functions like () str_glue() demonstrated .output_dir = output directory (folder) save file. allows chose alternative directory Rmd file saved .output_options = can provide list options override script YAML (e.g. )output_yaml = can provide path .yml file contains YAML specificationsparams = See section parameters belowSee complete list hereAs one example, improve version control, following command save output file within ‘outputs’ sub-folder, current date file name. create file name, function str_glue() stringr package use ‘glue’ together static strings (written plainly) dynamic R code (written curly brackets). instance April 10th 2021, file name “Report_2021-04-10.docx”. See page [Characters strings] details str_glue().file renders, RStudio Console show rendering progress 100%, final message indicate rendering complete.","code":"\nrmarkdown::render(input = \"my_report.Rmd\")\nrmarkdown::render(\n  input = \"create_output.Rmd\",\n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\")) "},{"path":"reports-with-r-markdown.html","id":"options-3-reportfactory-package","chapter":"1 Reports with R Markdown","heading":"Options 3: reportfactory package","text":"R package reportfactory offers alternative method organising compiling R Markdown reports catered scenarios run reports routinely (e.g. daily, weekly…). eases compilation multiple R Markdown files organization outputs. essence, provides “factory” can run R Markdown reports, get automatically date- time-stamped folders outputs, “light” version control.Read work flow page [Organizing routine reports].","code":""},{"path":"reports-with-r-markdown.html","id":"parameterised-reports","chapter":"1 Reports with R Markdown","heading":"1.6 Parameterised reports","text":"can use parameterisation make report dynamic, can run specific setting (e.g. specific date place certain knitting options). , focus basics, detail online parameterized reports.Using Ebola linelist example, let’s say want run standard surveillance report hospital day. show one can using parameters.Important: dynamic reports also possible without formal parameter structure (without params:), using simple R objects adjacent R script. explained end section.","code":""},{"path":"reports-with-r-markdown.html","id":"setting-parameters","chapter":"1 Reports with R Markdown","heading":"Setting parameters","text":"several options specifying parameter values R Markdown output.","code":""},{"path":"reports-with-r-markdown.html","id":"option-1-set-parameters-within-yaml","chapter":"1 Reports with R Markdown","heading":"Option 1: Set parameters within YAML","text":"Edit YAML include params: option, indented statements parameter want define. example create parameters date hospital, specify values. values subject change time report run. use “Knit” button produce output, parameters default values. Likewise, use render() parameters default values unless otherwise specified render() command.background, parameter values contained within read-list called params. Thus, can insert parameter values R code another R object/value environment. Simply type params$ followed parameter name. example params$hospital represent hospital name (“Central Hospital” default).Note parameters can also hold values true false, can included knitr options R chunk. example, can set {r, eval=params$run} instead {r, eval=FALSE}, now whether chunk runs depends value parameter run:.Note parameters dates, input string. params$date interpreted R code likely need wrapped .Date() similar function convert class Date.","code":"---\r\ntitle: Surveillance report\r\noutput: html_document\r\nparams:\r\n date: 2021-04-10\r\n hospital: Central Hospital\r\n---"},{"path":"reports-with-r-markdown.html","id":"option-2-set-parameters-within-render","chapter":"1 Reports with R Markdown","heading":"Option 2: Set parameters within render()","text":"mentioned , alternative pressing “Knit” button produce output execute render() function separate script. later case, can specify parameters used rendering params = argument render().Note parameter values provided overwrite default values written within YAML. write values quotation marks case defined character/string values.command renders “surveillance_report.Rmd”, specifies dynamic output file name folder, provides list() two parameters values argument params =.","code":"\nrmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = list(date = \"2021-04-10\", hospital  = \"Central Hospital\"))"},{"path":"reports-with-r-markdown.html","id":"option-3-set-parameters-using-a-graphical-user-interface","chapter":"1 Reports with R Markdown","heading":"Option 3: Set parameters using a Graphical User Interface","text":"interactive feel, can also use Graphical User Interface (GUI) manually select values parameters. can click drop-menu next ‘Knit’ button choose ‘Knit parameters’.pop-appear allowing type values parameters established document’s YAML.can achieve render() command specifying params = \"ask\", demonstrated .However, typing values pop-window subject error spelling mistakes. may prefer add restrictions values can entered drop-menus. can adding YAML several specifications params: entry.label: title particular drop-menuvalue: default (starting) valueinput: set select drop-menuchoices: Give eligible values drop-menuBelow, specifications written hospital parameter.knitting (either via ‘knit parameters’ button render()), pop-window drop-options select .","code":"rmarkdown::render(\r\n  input = \"surveillance_report.Rmd\",  \r\n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\r\n  params = “ask”)---\r\ntitle: Surveillance report\r\noutput: html_document\r\nparams:\r\n date: 2021-04-10\r\n hospital: \r\n  label: “Town:”\r\n  value: Central Hospital\r\n  input: select\r\n  choices: [Central Hospital, Military Hospital, Port Hospital, St. Mark's Maternity Hospital (SMMH)]\r\n---"},{"path":"reports-with-r-markdown.html","id":"parameterized-example","chapter":"1 Reports with R Markdown","heading":"Parameterized example","text":"following code creates parameters date hospital, used R Markdown params$date params$hospital, respectively.resulting report output, see data filtered specific hospital, plot title refers correct hospital date. use “linelist_cleaned.rds” file , particularly appropriate linelist also datestamp within align parameterised date.Knitting produces final output default font layout.","code":""},{"path":"reports-with-r-markdown.html","id":"parameterisation-without-params","chapter":"1 Reports with R Markdown","heading":"Parameterisation without params","text":"rendering R Markdown file render() separate script, can actually create impact parameterization without using params: functionality.instance, R script contains render() command, can simply define hospital date two R objects (values) render() command. R Markdown, need params: section YAML, refer date object rather params$date hospital rather params$hospital.Following approach means means can “knit parameters”, use GUI, include knitting options within parameters. However allows simpler code, may advantageous.","code":"\n# This is a R script that is separate from the R Markdown\n\n# define R objects\nhospital <- \"Central Hospital\"\ndate <- \"2021-04-10\"\n\n# Render the R markdown\nrmarkdown::render(input = \"create_output.Rmd\") "},{"path":"reports-with-r-markdown.html","id":"looping-reports","chapter":"1 Reports with R Markdown","heading":"1.7 Looping reports","text":"may want run report multiple times, varying input parameters, produce report jurisdictions/unit. can done using tools iteration, explained detail thepage [Loops, iteration, lists]. Options include purrr package, use loop explained ., use simple loop generate surveillance report hospitals interest. done one command (instead manually changing hospital parameter one---time). command render reports must exist separate script outside report Rmd. script also contain defined objects “loop ” - today’s date, vector hospital names loop .feed values one---time render() command using loop, runs command value hospitals vector. letter represents index position (1 4) hospital currently used iteration, hospital_list[1] “Central Hospital”. information supplied two places render() command:file name, file name first iteration produced 10th April 2021 “Report_Central Hospital_2021-04-10.docx”, saved ‘output’ subfolder working directory.params = Rmd uses hospital name internally whenever params$hospital value called (e.g. filter dataset particular hospital ). example, four files created - one hospital.","code":"\nhospitals <- c(\"Central Hospital\",\n                \"Military Hospital\", \n                \"Port Hospital\",\n                \"St. Mark's Maternity Hospital (SMMH)\") \nfor(i in 1:length(hospitals)){\n  rmarkdown::render(\n    input = \"surveillance_report.Rmd\",\n    output_file = str_glue(\"output/Report_{hospitals[i]}_{Sys.Date()}.docx\"),\n    params = list(hospital  = hospitals[i]))\n}       "},{"path":"reports-with-r-markdown.html","id":"templates","chapter":"1 Reports with R Markdown","heading":"1.8 Templates","text":"using template document contains desired formatting, can adjust aesthetics Rmd output look. can create instance MS Word Powerpoint file contains pages/slides desired dimensions, watermarks, backgrounds, fonts.","code":""},{"path":"reports-with-r-markdown.html","id":"word-documents","chapter":"1 Reports with R Markdown","heading":"Word documents","text":"create template, start new word document (use existing output formatting suits ), edit fonts defining Styles. Style,Headings 1, 2, 3 refer various markdown header levels (# Header 1, ## Header 2 ### Header 3 respectively). Right click style click ‘modify’ change font formatting well paragraph (e.g. can introduce page breaks certain styles can help spacing). aspects word document margins, page size, headers etc, can changed like usual word document working directly within.","code":""},{"path":"reports-with-r-markdown.html","id":"powerpoint-documents","chapter":"1 Reports with R Markdown","heading":"Powerpoint documents","text":", create new slideset use existing powerpoint file desired formatting. editing, click ‘View’ ‘Slide Master’. can change ‘master’ slide appearance editing text formatting text boxes, well background/page dimensions overall page.Unfortunately, editing powerpoint files slightly less flexible:first level header (# Header 1) automatically become title new slide,## Header 2 text come subtitle text within slide’s main textbox (unless find way maniuplate Master view).Outputted plots tables automatically go new slides. need combine , instance patchwork function combine ggplots, show page.See officer package tool work -depth powerpoint presentations.","code":""},{"path":"reports-with-r-markdown.html","id":"integrating-templates-into-the-yaml","chapter":"1 Reports with R Markdown","heading":"Integrating templates into the YAML","text":"template prepared, detail can added YAML Rmd underneath ‘output’ line underneath document type specified (goes separate line ). Note reference_doc can used powerpoint slide templates.easiest save template folder Rmd file (example ), subfolder within.","code":"---\r\ntitle: Surveillance report\r\noutput: \r\n word_document:\r\n  reference_docx: \"template.docx\"\r\nparams:\r\n date: 2021-04-10\r\n hospital: Central Hospital\r\ntemplate:\r\n \r\n---"},{"path":"reports-with-r-markdown.html","id":"formatting-html-files","chapter":"1 Reports with R Markdown","heading":"Formatting HTML files","text":"HTML files use templates, can styles configured within YAML. HTMLs interactive documents, particularly flexible. cover basic options .Table contents: can add table contents toc: true , also specify remains viewable (“floats”) scroll, toc_float: true.Table contents: can add table contents toc: true , also specify remains viewable (“floats”) scroll, toc_float: true.Themes: can refer pre-made themes, come Bootswatch theme library. example use cerulean. options include: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, yeti.Themes: can refer pre-made themes, come Bootswatch theme library. example use cerulean. options include: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, yeti.Highlight: Configuring changes look highlighted text (e.g. code within chunks shown). Supported styles include default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, textmate.Highlight: Configuring changes look highlighted text (e.g. code within chunks shown). Supported styles include default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, textmate.example integrate options YAML.two examples HTML outputs floating tables contents, different theme highlight styles selected:","code":"---\r\ntitle: \"HTML example\"\r\noutput:\r\n  html_document:\r\n    toc: true\r\n    toc_float: true\r\n    theme: cerulean\r\n    highlight: kate\r\n    \r\n---"},{"path":"reports-with-r-markdown.html","id":"dynamic-content","chapter":"1 Reports with R Markdown","heading":"1.9 Dynamic content","text":"HTML output, report content can dynamic. examples:","code":""},{"path":"reports-with-r-markdown.html","id":"tables-1","chapter":"1 Reports with R Markdown","heading":"Tables","text":"HTML report, can print data frame / tibbles content dynamic, filters scroll bars. several packages offer capability.DT package, used throughout handbook, can insert code chunk like :function datatable() print provided data frame dynamic table reader. can set rownames = FALSE simplify far left-side table. filter = \"top\" provides filter column. option() argument provide list specifications. include two: pageLength = 5 set number rows appear 5 (remaining rows can viewed paging arrows), scrollX=TRUE enables scrollbar bottom table (columns extend far right).dataset large, consider showing top X rows wrapping data frame head().","code":""},{"path":"reports-with-r-markdown.html","id":"html-widgets","chapter":"1 Reports with R Markdown","heading":"HTML widgets","text":"HTML widgets R special class R packages enable increased interactivity utilizing JavaScript libraries. can embed HTML R Markdown outputs.common examples widgets include:Plotly (used handbook page [Interative plots] page)visNetwork (used [Transmission Chains] page handbook)Leaflet (used [GIS Basics] page handbook)dygraphs (useful interactively showing time series data)DT (datatable()) (used show dynamic tables filter, sort, etc.)ggplotly() function plotly particularly easy use. See Interactive plots page.","code":""},{"path":"reports-with-r-markdown.html","id":"resources","chapter":"1 Reports with R Markdown","heading":"1.10 Resources","text":"information can found via:https://bookdown.org/yihui/rmarkdown/https://rmarkdown.rstudio.com/articles_intro.htmlA good explainer markdown vs knitr vs Rmarkdown : https://stackoverflow.com/questions/40563479/relationship--r-markdown-knitr-pandoc--bookdown","code":""},{"path":"dashboards-with-r-markdown.html","id":"dashboards-with-r-markdown","chapter":"2 Dashboards with R Markdown","heading":"2 Dashboards with R Markdown","text":"page cover basic use flexdashboard package. package allows easily format R Markdown output dashboard panels pages. dashboard content can text, static figures/tables interactive graphics.Advantages flexdashboard:Requires minimal non-standard R coding - little practice can quickly create dashboardThe dashboard can usually emailed colleagues self-contained HTML file - server requiredYou can combine flexdashboard shiny, ggplotly, “html widgets” add interactivityDisadvantages flexdashboard:Less customization compared using shiny alone create dashboardVery comprehensive tutorials using flexdashboard informed page can found Resources section. describe core features give example building dashboard explore outbreak, using case linelist data.","code":""},{"path":"dashboards-with-r-markdown.html","id":"preparation-1","chapter":"2 Dashboards with R Markdown","heading":"2.1 Preparation","text":"","code":""},{"path":"dashboards-with-r-markdown.html","id":"load-packages","chapter":"2 Dashboards with R Markdown","heading":"Load packages","text":"handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,             # data import/export     \n  here,            # locate files\n  tidyverse,       # data management and visualization\n  flexdashboard,   # dashboard versions of R Markdown reports\n  shiny,           # interactive figures\n  plotly           # interactive figures\n)"},{"path":"dashboards-with-r-markdown.html","id":"import-data","chapter":"2 Dashboards with R Markdown","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"dashboards-with-r-markdown.html","id":"new-r-markdown","chapter":"2 Dashboards with R Markdown","heading":"2.2 New R Markdown","text":"installed package, create new R Markdown file clicking File > New file > R Markdown.window opens, select “Template” select “Flex Dashboard” template. prompted name document. page’s example, name R Markdown “outbreak_dashboard.Rmd”.","code":""},{"path":"dashboards-with-r-markdown.html","id":"the-script","chapter":"2 Dashboards with R Markdown","heading":"2.3 The script","text":"script R Markdown script, components organization described page Reports R Markdown. briefly re-visit highlight differences R Markdown output formats:","code":""},{"path":"dashboards-with-r-markdown.html","id":"yaml","chapter":"2 Dashboards with R Markdown","heading":"YAML","text":"top script “YAML” header. must begin three dashes --- must close three dashes ---. YAML parameters comes key:value pairs. placement colons YAML important - key:value pairs separated colons (equals signs!).YAML begin metadata document. order primary YAML parameters (indented) matter. example:can use R code YAML values putting like -line code (preceeded r within backticks) also within quotes (see Date).required YAML parameter output:, specifies type file produced (e.g. html_document, pdf_document, word_document, powerpoint_presentation). flexdashboard parameter value bit confusing - must set output:flexdashboard::flex_dashboard. Note single double colons, adn underscore. YAML output parameter often followed additional colon indented sub-parameters (see orientation: vertical_layout: parameters ).shown , indentations (2 spaces) used sub-parameters. case, forget put additional colon primary, like key:value:.appropriate, logical values given YAML lowercase (true, false, null). colon part value (e.g. title) put value quotes. See examples sections .","code":"\ntitle: \"My document\"\nauthor: \"Me\"\ndate: \"`r Sys.Date()`\"\ntitle: \"My dashboard\"\nauthor: \"Me\"\ndate: \"`r Sys.Date()`\"\noutput:\n  flexdashboard::flex_dashboard:\n    orientation: rows\n    vertical_layout: scroll"},{"path":"dashboards-with-r-markdown.html","id":"code-chunks-1","chapter":"2 Dashboards with R Markdown","heading":"Code chunks","text":"R Markdown script contain multiple code “chunks” - areas script can write multiple-line R code function just like mini R scripts.Code chunks created three back-ticks curly brackets lowercase r within. chunk closed three backticks. can create new chunk typing , using keyboard shortcut “Ctrl + Alt + ” (Cmd + Shift + r Mac), clicking green ‘insert new code chunk’ icon top script editor. Many examples given .","code":""},{"path":"dashboards-with-r-markdown.html","id":"narrative-text","chapter":"2 Dashboards with R Markdown","heading":"Narrative text","text":"Outside R code “chunk”, can write narrative text. described page Reports R Markdown, can italicize text surrounding one asterisk (*), bold surrounding two asterisks (**). Recall bullets numbering schemes sensitive newlines, indentation, finishing line two spaces.can also insert -line R code text described Reports R Markdown page, surrounding code backticks starting command “r” (see example date ).","code":""},{"path":"dashboards-with-r-markdown.html","id":"headings","chapter":"2 Dashboards with R Markdown","heading":"Headings","text":"Different heading levels established different numbers hash symbols, described Reports R Markdown page.flexdashboard, primary heading (#) creates “page” dashboard. Second-level headings (##) create column row depending orientation: parameter (see details ). Third-level headings (###) create panels plots, charts, tables, text, etc.","code":"# First-level heading (page)\r\n\r\n## Second level heading (row or column)  \r\n\r\n### Third-level heading (pane for plot, chart, etc.)"},{"path":"dashboards-with-r-markdown.html","id":"section-attributes","chapter":"2 Dashboards with R Markdown","heading":"2.4 Section attributes","text":"normal R markdown, can specify attributes apply parts dashboard including key=value options heading, within curly brackets { }. example, typical HTML R Markdown report might set organize sub-headings tabs ## heading {.tabset}.Note attributes written heading text portion script. different knitr options inserted within top R code chunks, .height =.Section attributes specific flexdashboard include:{data-orientation=} Set either rows columns. dashboard multiple pages, add attribute page indicate orientation (explained layout section).{data-width = } {data-height = } set relative size charts, columns, rows laid dimension (horizontal vertical). Absolute sizes adjusted best fill space display device thanks flexbox engine.\r\nHeight charts also depends whether set YAML parameter vertical_layout: fill vertical_layout: scroll. set scroll, figure height reflect traditional fig.height = option R code chunk.\r\nSee complete size documentation flexdashboard website\r\nHeight charts also depends whether set YAML parameter vertical_layout: fill vertical_layout: scroll. set scroll, figure height reflect traditional fig.height = option R code chunk.See complete size documentation flexdashboard website{.hidden} Use exclude specific page navigation bar{data-navbar=} Use page-level heading nest within navigation bar drop-menu. Provide name (quotes) drop-menu. See example .","code":""},{"path":"dashboards-with-r-markdown.html","id":"layout","chapter":"2 Dashboards with R Markdown","heading":"2.5 Layout","text":"Adjust layout dashboard following ways:Add pages, columns/rows, charts R Markdown headings (e.g. #, ##, ###)Adjust YAML parameter orientation: either rows columnsSpecify whether layout fills browser allows scrollingAdd tabs particular section heading","code":""},{"path":"dashboards-with-r-markdown.html","id":"pages","chapter":"2 Dashboards with R Markdown","heading":"Pages","text":"First-level headings (#) R Markdown represent “pages” dashboard. default pages appear navigation bar along top dashboard.can group pages “menu” within top navigation bar adding attribute {data-navmenu=} page heading. careful - include spaces around equals sign otherwise work!can also transfer page column “sidebar” left side dashboard adding {.sidebar} attribute. can hold text (viewable page), integrated shiny interactivity can useful hold user-input controls sliders drop-menus.","code":""},{"path":"dashboards-with-r-markdown.html","id":"orientation","chapter":"2 Dashboards with R Markdown","heading":"Orientation","text":"Set orientation: yaml parameter indicate second-level (##) R Markdown headings interpreted - either orientation: columns orientation: rows.Second-level headings (##) interpreted new columns rows based orientation setting.set orientation: columns, second-level headers create new columns dashboard. dashboard one page, containing two columns, total three panels. can adjust relative width columns {data-width=} shown .set orientation: rows, second-level headers create new rows instead columns. script , orientation: rows second-level headings produce rows instead columns. can adjust relative height rows {data-height=} shown .dashboard multiple pages, can designate orientation specific page adding {data-orientation=} attribute header page (specify either rows columns without quotes).","code":""},{"path":"dashboards-with-r-markdown.html","id":"tabs","chapter":"2 Dashboards with R Markdown","heading":"Tabs","text":"can divide content tabs {.tabset} attribute, HTML R Markdown outputs.Simply add attribute desired heading. Sub-headings heading displayed tabs. example, example script column 2 right (##) modified epidemic curve table panes (###) displayed tabs.can rows orientation rows.","code":""},{"path":"dashboards-with-r-markdown.html","id":"adding-content","chapter":"2 Dashboards with R Markdown","heading":"2.6 Adding content","text":"Let’s begin build dashboard. simple dashboard 1 page, 2 columns, 4 panels. build panels piece--piece demonstration.can easily include standard R outputs text, ggplots, tables (see [Tables presentation] page). Simply code R code chunk R Markdown script.Note: can download finished Rmd script HTML dashboard output - see [Download handbook data] page.","code":""},{"path":"dashboards-with-r-markdown.html","id":"text-1","chapter":"2 Dashboards with R Markdown","heading":"Text","text":"can type Markdown text include -line code R Markdown output. See Reports R Markdown page details.dashboard include summary text panel includes dynamic text showing latest hospitalisation date number cases reported outbreak.","code":""},{"path":"dashboards-with-r-markdown.html","id":"tables-2","chapter":"2 Dashboards with R Markdown","heading":"Tables","text":"can include R code chunks print outputs tables. output look best respond window size use kable() function knitr display tables. flextable functions may produce tables shortened / cut-.example, feed linelist() count() command produce summary table cases hospital. Ultimately, table piped knitr::kable() result scroll bar right. can read customizing table kable() kableExtra .want show dynamic table allows user filter, sort, /click “pages” data frame, use package DT ’s function datatable(), code .example code , data frame linelist printed. can set rownames = FALSE conserve horizontal space, filter=\"top\" filters top every column. list specifications can provided options =. , set pageLength = 5 rows appear scrollX = user can use scroll bar bottom scroll horizontally. argument class = 'white-space: nowrap' ensures row one line (multiple lines). can read possible arguments values entering ?datatable","code":"\nDT::datatable(linelist, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )"},{"path":"dashboards-with-r-markdown.html","id":"plots","chapter":"2 Dashboards with R Markdown","heading":"Plots","text":"can print plots dashboard pane R script. example, use incidence2 package create “epicurve” age group two simple commands (see [Epidemic curves] page). However, use ggplot() print plot manner.","code":""},{"path":"dashboards-with-r-markdown.html","id":"interactive-plots","chapter":"2 Dashboards with R Markdown","heading":"Interactive plots","text":"can also pass standard ggplot plot object ggplotly() plotly package (see Interactive plots page). make plot interactive, allow reader “zoom ”, show--hover value every data point (scenario number cases per week age group curve).looks like dashboard (gif). interactive functionality still work even email dashboard static file (online server).","code":"\nage_outbreak <- incidence(linelist, date_onset, \"week\", groups = age_cat)\nplot(age_outbreak, fill = age_cat, col_pal = muted, title = \"\") %>% \n  plotly::ggplotly()"},{"path":"dashboards-with-r-markdown.html","id":"html-widgets-1","chapter":"2 Dashboards with R Markdown","heading":"HTML widgets","text":"HTML widgets R special class R packages enable increased interactivity utilizing JavaScript libraries. can embed R Markdown outputs (flexdashboard) Shiny dashboards.common examples widgets include:Plotly (used handbook page [Interative plots] page)visNetwork (used [Transmission Chains] page handbook)Leaflet (used [GIS Basics] page handbook)dygraphs (useful interactively showing time series data)DT (datatable()) (used show dynamic tables filter, sort, etc.)demonstrate adding epidemic transmission chain uses visNetwork dashboard. script shows new code added “Column 2” section R Markdown script. can find code [Transmission chains] page handbook.","code":""},{"path":"dashboards-with-r-markdown.html","id":"code-organization","chapter":"2 Dashboards with R Markdown","heading":"2.7 Code organization","text":"may elect code within R Markdown flexdashboard script. Alternatively, clean concise dashboard script may choose call upon code/figures hosted created external R scripts. described greater detail Reports R Markdown page.","code":""},{"path":"dashboards-with-r-markdown.html","id":"shiny","chapter":"2 Dashboards with R Markdown","heading":"2.8 Shiny","text":"Integrating R package shiny can make dashboards even reactive user input. example, user select jurisdiction, date range, panels react choice (e.g. filter data displayed). embed shiny reactivity flexdashboard, need make changes flexdashboard R Markdown script.can use shiny produce apps/dashboards without flexdashboard . handbook page [Dashboards Shiny] gives overview approach, including primers shiny syntax, app file structure, options sharing/publishing (including free server options). syntax general tips translate flexdashboard context well.Embedding shiny flexdashboard however, fundamental change flexdashboard. longer produce HTML output can send email anyone open view. Instead, “app”. “Knit” button top script replaced “Run document” icon, open intstance interactive dashboard locally computer.Sharing dashboard now require either:Send Rmd script viewer, open R computer, run app, orThe app/dashboard hosted server accessible viewerThus, benefits integrating shiny, also complications. easy sharing email priority don’t need shiny reactive capabilities, consider reduced interactivity offered ggplotly() demonstrated .give simple example using “outbreak_dashboard.Rmd” . Extensive documentation integrating Shiny flexdashboard available online .","code":""},{"path":"dashboards-with-r-markdown.html","id":"settings","chapter":"2 Dashboards with R Markdown","heading":"Settings","text":"Enable shiny flexdashboard adding YAML parameter runtime: shiny indentation level output:, :also convenient enable “side bar” hold shiny input widgets collect information user. explained , create column indicate {.sidebar} option create side bar left side. Within column can add text R chunks containing shiny input commands.app/dashboard hosted server may multiple simultaneous users, name first R code chunk global. Include commands import/load data chunk. special named chunk treated differently, data imported within imported (continuously) available users. improves start-speed app.","code":"---\r\ntitle: \"Outbreak dashboard (Shiny demo)\"\r\noutput: \r\n  flexdashboard::flex_dashboard:\r\n    orientation: columns\r\n    vertical_layout: fill\r\nruntime: shiny\r\n---"},{"path":"dashboards-with-r-markdown.html","id":"worked-example","chapter":"2 Dashboards with R Markdown","heading":"Worked example","text":"adapt flexdashboard script “outbreak_dashboard.Rmd” include shiny. add capability user select hospital drop-menu, epidemic curve reflect cases hospital, dynamic plot title. following:Add runtime: shiny YAMLRe-name setup chunk globalCreate sidebar containing:\r\nCode create vector unique hospital names\r\nselectInput() command (shiny drop-menu) choice hospital names. selection saved hospital_choice, can referenced later code input$hospital_choice\r\nCode create vector unique hospital namesA selectInput() command (shiny drop-menu) choice hospital names. selection saved hospital_choice, can referenced later code input$hospital_choiceThe epidemic curve code (column 2) wrapped within renderPlot({ }), including:\r\nfilter dataset restricting column hospital current value input$hospital_choice\r\ndynamic plot title incorporates input$hospital_choice\r\nfilter dataset restricting column hospital current value input$hospital_choiceA dynamic plot title incorporates input$hospital_choiceNote code referencing input$ value must within render({}) function (reactive).top script, including YAML, global chunk, sidebar:Column 2, reactive epicurve plot:dashboard:","code":""},{"path":"dashboards-with-r-markdown.html","id":"other-examples","chapter":"2 Dashboards with R Markdown","heading":"Other examples","text":"read health-related example Shiny-flexdashboard using shiny interactivity leaflet mapping widget, see chapter online book Geospatial Health Data: Modeling Visualization R-INLA Shiny.","code":""},{"path":"dashboards-with-r-markdown.html","id":"sharing","chapter":"2 Dashboards with R Markdown","heading":"2.9 Sharing","text":"dashboards outputs save HTML file (.html), can emailed (size permits). useful, can send “dashboard” report set server host website.embedded shiny, able send output email, can send script R user, host dashboard server explained .","code":""},{"path":"dashboards-with-r-markdown.html","id":"resources-1","chapter":"2 Dashboards with R Markdown","heading":"2.10 Resources","text":"Excellent tutorials informed page can found . review , likely within hour can dashboard.https://bookdown.org/yihui/rmarkdown/dashboards.htmlhttps://rmarkdown.rstudio.com/flexdashboard/https://rmarkdown.rstudio.com/flexdashboard/using.htmlhttps://rmarkdown.rstudio.com/flexdashboard/examples.html","code":""},{"path":"shiny-and-dashboards.html","id":"shiny-and-dashboards","chapter":"3 Shiny and dashboards","heading":"3 Shiny and dashboards","text":"One largest drawbacks R usability people new experience programming languages. skills valuable, people find represents barrier sharing analyses, especially multidisciplinary environments. requires work maintain R installation, everyone comfortable running shared code, even ’s well documented easy read. especially true users change parameters code! reason dashboards often great way share results analyses others without interface code .R based dashboards also advantageous centralise code run - code run different machines, often people deal differing file paths, different R versions, different package installations. reason, dashboards great way share code others user friendly way!Despite , making dashboards R requires relatively advanced knowledge language. reason, recommended someone learning dashboards good knowledge data transformation visualisation, comfortable debugging code, writing functions. Working dashboards intuitive ’re starting, difficult understand times, great skill learn gets much easier practice!section give short overview can use R make dashboards, primarily using excellent shiny package, extensions.","code":""},{"path":"shiny-and-dashboards.html","id":"the-structure-of-a-shiny-app","chapter":"3 Shiny and dashboards","heading":"3.1 The structure of a shiny app","text":"","code":""},{"path":"shiny-and-dashboards.html","id":"basic-file-structures","chapter":"3 Shiny and dashboards","heading":"Basic file structures","text":"understand shiny, first need understand file structure app works! make brand new directory start. can actually made easier choosing New project Rstudio, choosing Shiny Web Application. create basic structure shiny app .Lets also install shiny go :opening project, ’ll notice .R file already present called app.R. essential one two basic file structures:One file called app.R, orTwo files, one called ui.R server.RIn page, use first approach one file called app.R. example script:open file, ’ll notice two objects defined - one called ui another called server. objects must defined every shiny app central structure app ! fact, difference two file structures described structure 1, ui server defined one file, whereas structure 2 defined separate files. Note: can also (larger app) .R files structure can source() app.","code":"\ninstall.packages(\"shiny\")\n# an example of app.R\n\nlibrary(shiny)\n\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"My app\"),\n\n    # Sidebar with a slider input widget\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"input_1\")\n        ),\n\n        # Show a plot \n        mainPanel(\n           plotOutput(\"my_plot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n     \n     plot_1 <- reactive({\n          plot_func(param = input_1)\n     })\n     \n    output$my_plot <- renderPlot({\n       plot_1()\n    })\n}\n\n\n# Run the application \nshinyApp(ui = ui, server = server)"},{"path":"shiny-and-dashboards.html","id":"the-server-and-the-ui","chapter":"3 Shiny and dashboards","heading":"The server and the ui","text":"next need understand server ui objects actually . Put simply, two objects interacting whenever user interacts shiny app.UI element shiny app , basic level, R code creates HTML interface. means everything displayed UI app. generally includes:“Widgets” - dropdown menus, check boxes, sliders, etc can interacted userPlots, tables, etc - outputs generated R codeNavigation aspects app - tabs, panes, etc.Generic text, hyperlinks, etcHTML CSS elements (addressed later)important thing understand UI receives inputs user displays outputs server. active code running ui time - changes seen UI passed server (less). make plots, downloads, etc serverThe server shiny app code run app starts . way works little confusing. server function effectively react user interfacing UI, run chunks code response. things change server, passed back ui, changes can seen. Importantly, code server executed non-consecutively (’s best think way). Basically, whenever ui input affects chunk code server, run automatically, output produced displayed.probably sounds abstract now, ’ll dive examples get clear idea actually works.","code":""},{"path":"shiny-and-dashboards.html","id":"before-you-start-to-build-an-app","chapter":"3 Shiny and dashboards","heading":"Before you start to build an app","text":"begin build app, immensely helpful know want build. Since UI written code, can’t really visualise ’re building unless aiming something specific. reason, immensely helpful look lots examples shiny apps get idea can make - even better can look source code behind apps! great resources :Rstudio app galleryOnce get idea possible, ’s also helpful map want look like - can paper drawing software (PowerPoint, MS paint, etc.). ’s helpful start simple first app! ’s also shame using code find online nice app template work - much easier building something scratch!","code":""},{"path":"shiny-and-dashboards.html","id":"building-a-ui","chapter":"3 Shiny and dashboards","heading":"3.2 Building a UI","text":"building app, easier work UI first can see ’re making, risk app failing server errors. mentioned previously, often good use template working UI. number standard layouts can used shiny available base shiny package, ’s worth noting also number package extensions shinydashboard. ’ll use example base shiny start .shiny UI generally defined series nested functions, following orderA function defining general layout (basic fluidPage(), available)Panels within layout :\r\nsidebar (sidebarPanel())\r\n“main” panel (mainPanel())\r\ntab (tabPanel())\r\ngeneric “column” (column())\r\nsidebar (sidebarPanel())“main” panel (mainPanel())tab (tabPanel())generic “column” (column())Widgets outputs - can confer inputs server (widgets) outputs server (outputs)\r\nWidgets generally styled xxxInput() e.g. selectInput()\r\nOutputs generally styled xxxOutput() e.g. plotOutput()\r\nWidgets generally styled xxxInput() e.g. selectInput()Outputs generally styled xxxOutput() e.g. plotOutput()’s worth stating can’t visualised easily abstract way, ’s best look example! Lets consider making basic app visualises malaria facility count data district. data lot differnet parameters, great end user apply filters see data age group/district see fit! can use simple shiny layout start - sidebar layout. layout widgets placed sidebar left, plot placed right.Lets plan app - can start selector lets us choose district want visualise data, another let us visualise age group interested . ’ll aim use filters show epicurve reflects parameters. need:Two dropdown menus let us choose district want, age group ’re interested .area can show resulting epicurve.might look something like :app.R run UI code (active code server portion app.R) layout appears looking like - note plot server render , inputs working!good opportunity discuss widgets work - note widget accepting inputId, label, series options specific widget type. inputId extremely important - IDs used pass information UI server. reason, must unique. make effort name something sensible, specific interacting cases larger apps.read documentation carefully full details widgets . Widgets pass specific types data server depending widget type, needs fully understood. example, selectInput() pass character type server:select Spring first widget , pass character object \"Spring\" server.select two items dropdown menu, come character vector (e.g. c(\"Spring\", \"Bolo\")).widgets pass different types object server! example:numericInput() pass numeric type object servercheckboxInput() pass logical type object server (TRUE FALSE)’s also worth noting named vector used age data . many widgets, using named vector choices display names vector display choices, pass selected value vector server. .e. someone can select “15+” drop-menu, UI pass \"malaria_rdt_15\" server - happens name column ’re interested !loads widgets can use lots things app. Widgets also allow upload files app, download outputs. also excellent shiny extensions give access widgets base shiny - shinyWidgets package great example . look examples can look following links:base shiny widget galleryshinyWidgets gallery","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = TRUE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\")\n    )\n    \n  )\n)"},{"path":"shiny-and-dashboards.html","id":"loading-data-into-our-app","chapter":"3 Shiny and dashboards","heading":"3.3 Loading data into our app","text":"next step app development getting server running. however, need get data app, figure calculations ’re going . shiny app straightforward debug, ’s often clear errors coming , ’s ideal get data processing visualisation code working start making server .given want make app shows epi curves change based user input, think code need run normal R script. ’ll need :Load packagesLoad dataTransform dataDevelop function visualise data based user inputsThis list pretty straightforward, shouldn’t hard . ’s now important think parts process need done parts need run response user inputs. shiny apps generally run code running, performed . help app’s performance much code can moved section. example, need load data/packages basic transformations , can put code outside server. means thing ’ll need server code visualise data. Lets develop componenets script first. However, since ’re visualising data function, can also put code function outside server function environment app runs!First lets load data. Since ’re working new project, want make clean, can create new directory called data, add malaria data . can run code testing script eventually delete clean structure app.easier work data use tidy data standards, also transform longer data format, age group column, cases another column. can easily using ’ve learned [Pivoting data] page.’ve finished preparing data! crosses items 1, 2, 3 list things develop “testing R script”. last, difficult task building function produce epicurve based user defined parameters. mentioned previously, ’s highly recommended anyone learning shiny first look section functional programming ([Writing functions]) understand works!defining function, might hard think parameters want include. functional programming shiny, every relevent parameter generally widget associated , thinking usually quite easy! example current app, want able filter district, widget , can add district parameter reflect . don’t app functionality filter facility (now), don’t need add parameter. Lets start making function three parameters:core datasetThe district choiceThe age group choiceWe won’t go great detail function, ’s relatively simple works. One thing note however, handle errors returning NULL otherwise give error. shiny server produces NULL object instead plot object, nothing shown ui! important, otherwise errors often cause app stop working.Another thing note use %% operator evaluating district input. mentioned , arrive character vector multiple values, using %% flexible say, ==.Let’s test function!function working, now understand going fit shiny app. mentioned concept startup code , lets look can actually incorporate structure app. two ways can !Put code app.R file start script (UI), orCreate new file app’s directory called global.R, put startup code file.’s worth noting point ’s generally easier, especially bigger apps, use second file structure, lets separate file structure simple way. Lets fully develop global.R script now. look like:Easy! One great feature shiny understand files named app.R, server.R, ui.R, global.R , need connect via code. just code global.R directory run start app!.also note improve app’s organisation moved plotting function file - especially helpful apps become larger. , make another directory called funcs, put function file called plot_epicurve.R. read function via following command global.RNote always specify local = TRUE shiny apps, since affect sourcing /app published server.","code":"\npacman::p_load(\"tidyverse\", \"lubridate\")\n\n# read data\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) %>% \n  as_tibble()\n\nprint(malaria_data)## # A tibble: 3,038 x 10\r\n##    location_name data_date  submitted_date Province District `malaria_rdt_0-4` `malaria_rdt_5-14` malaria_rdt_15\r\n##    <chr>         <date>     <date>         <chr>    <chr>                <int>              <int>          <int>\r\n##  1 Facility 1    2019-06-13 2019-06-14     North    Spring                  11                 12             23\r\n##  2 Facility 2    2019-06-13 2019-06-14     North    Bolo                    11                 10              5\r\n##  3 Facility 3    2019-06-13 2019-06-14     North    Dingo                    8                  5              5\r\n##  4 Facility 4    2019-06-13 2019-06-14     North    Bolo                    16                 16             17\r\n##  5 Facility 5    2019-06-13 2019-06-14     North    Bolo                     9                  2              6\r\n##  6 Facility 6    2019-06-13 2019-06-14     North    Dingo                    3                  1              4\r\n##  7 Facility 6    2019-06-12 2019-06-14     North    Dingo                    4                  0              3\r\n##  8 Facility 5    2019-06-12 2019-06-14     North    Bolo                    15                 14             13\r\n##  9 Facility 5    2019-06-11 2019-06-14     North    Bolo                    11                 11             13\r\n## 10 Facility 5    2019-06-10 2019-06-14     North    Bolo                    19                 15             15\r\n## # ... with 3,028 more rows, and 2 more variables: malaria_tot <int>, newid <int>\nmalaria_data <- malaria_data %>%\n  select(-newid) %>%\n  pivot_longer(cols = starts_with(\"malaria_\"), names_to = \"age_group\", values_to = \"cases_reported\")\n\nprint(malaria_data)## # A tibble: 12,152 x 7\r\n##    location_name data_date  submitted_date Province District age_group        cases_reported\r\n##    <chr>         <date>     <date>         <chr>    <chr>    <chr>                     <int>\r\n##  1 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_rdt_0-4              11\r\n##  2 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_rdt_5-14             12\r\n##  3 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_rdt_15               23\r\n##  4 Facility 1    2019-06-13 2019-06-14     North    Spring   malaria_tot                  46\r\n##  5 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_rdt_0-4              11\r\n##  6 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_rdt_5-14             10\r\n##  7 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_rdt_15                5\r\n##  8 Facility 2    2019-06-13 2019-06-14     North    Bolo     malaria_tot                  26\r\n##  9 Facility 3    2019-06-13 2019-06-14     North    Dingo    malaria_rdt_0-4               8\r\n## 10 Facility 3    2019-06-13 2019-06-14     North    Dingo    malaria_rdt_5-14              5\r\n## # ... with 12,142 more rows\nplot_epicurve <- function(data, district = \"All\", agegroup = \"malaria_tot\") {\n  \n  if (!(\"All\" %in% district)) {\n    data <- data %>%\n      filter(District %in% district)\n    \n    plot_title_district <- stringr::str_glue(\"{paste0(district, collapse = ', ')} districts\")\n    \n  } else {\n    \n    plot_title_district <- \"all districts\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  data <- data %>%\n    filter(age_group == agegroup)\n  \n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  if (agegroup == \"malaria_tot\") {\n      agegroup_title <- \"All ages\"\n  } else {\n    agegroup_title <- stringr::str_glue(\"{str_remove(agegroup, 'malaria_rdt')} years\")\n  }\n  \n  \n  ggplot(data, aes(x = data_date, y = cases_reported)) +\n    geom_col(width = 1, fill = \"darkred\") +\n    theme_minimal() +\n    labs(\n      x = \"date\",\n      y = \"number of cases\",\n      title = stringr::str_glue(\"Malaria cases - {plot_title_district}\"),\n      subtitle = agegroup_title\n    )\n  \n  \n  \n}\nplot_epicurve(malaria_data, district = \"Bolo\", agegroup = \"malaria_rdt_0-4\")\n# global.R script\n\npacman::p_load(\"tidyverse\", \"lubridate\", \"shiny\")\n\n# read data\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) %>% \n  as_tibble()\n\n# clean data and pivot longer\nmalaria_data <- malaria_data %>%\n  select(-newid) %>%\n  pivot_longer(cols = starts_with(\"malaria_\"), names_to = \"age_group\", values_to = \"cases_reported\")\n\n\n# define plotting function\nplot_epicurve <- function(data, district = \"All\", agegroup = \"malaria_tot\") {\n  \n  # create plot title\n  if (!(\"All\" %in% district)) {            \n    data <- data %>%\n      filter(District %in% district)\n    \n    plot_title_district <- stringr::str_glue(\"{paste0(district, collapse = ', ')} districts\")\n    \n  } else {\n    \n    plot_title_district <- \"all districts\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  # filter to age group\n  data <- data %>%\n    filter(age_group == agegroup)\n  \n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  if (agegroup == \"malaria_tot\") {\n      agegroup_title <- \"All ages\"\n  } else {\n    agegroup_title <- stringr::str_glue(\"{str_remove(agegroup, 'malaria_rdt')} years\")\n  }\n  \n  \n  ggplot(data, aes(x = data_date, y = cases_reported)) +\n    geom_col(width = 1, fill = \"darkred\") +\n    theme_minimal() +\n    labs(\n      x = \"date\",\n      y = \"number of cases\",\n      title = stringr::str_glue(\"Malaria cases - {plot_title_district}\"),\n      subtitle = agegroup_title\n    )\n  \n  \n  \n}\nsource(here(\"funcs\", \"plot_epicurve.R\"), local = TRUE)"},{"path":"shiny-and-dashboards.html","id":"developing-an-app-server","chapter":"3 Shiny and dashboards","heading":"3.4 Developing an app server","text":"Now code, just develop server. final piece app, probably hardest understand. server large R function, helpful think series smaller functions, tasks app can perform. ’s important understand functions executed linear order. order , ’s fully necessary understand starting shiny. basic level, tasks functions activate change user inputs affects , unless developer set behave differently. , quite abstract, lets first go three basic types shiny objectsReactive sources - another term user inputs. shiny server access outputs UI widgets ’ve programmed. Every time values changed, passed server.Reactive sources - another term user inputs. shiny server access outputs UI widgets ’ve programmed. Every time values changed, passed server.Reactive conductors - objects exist inside shiny server. don’t actually need simple apps, produce objects can seen inside server, used operations. generally depend reactive sources.Reactive conductors - objects exist inside shiny server. don’t actually need simple apps, produce objects can seen inside server, used operations. generally depend reactive sources.Endpoints - outputs passed server UI. example, epi curve producing.Endpoints - outputs passed server UI. example, epi curve producing.mind lets construct server step--step. ’ll show UI code just reference:code UI :Two inputs:\r\nDistrict selector (inputId select_district)\r\nAge group selector (inputId select_agegroup)\r\nDistrict selector (inputId select_district)Age group selector (inputId select_agegroup)One output:\r\nepicurve (outputId malaria_epicurve)\r\nepicurve (outputId malaria_epicurve)stated previously, unique names assigned inputs outputs crucial. must unique used pass information ui server. server, access inputs via syntax input$inputID outputs passed ui syntax output$output_name Lets look example, hard understand otherwise!server simple app like actually quite straightforward! ’ll notice server function three parameters - input, output, session - isn’t important understand now, important stick setup! server one task - renders plot based function made earlier, inputs server. Notice names input output objects correspond exactly ui.understand basics server reacts user inputs, note output know (underlying package) inputs change, rerun function create plot every time change. Note also use renderPlot() function - one family class-specific functions pass objects ui output. number functions behave similarly, need ensure function used matches class object ’re passing ui! example:renderText() - send text uirenderDataTable - send interactive table ui.Remember also need match output function used ui - renderPlot() paired plotOutput(), renderText() matched textOutput().’ve finally made functioning app! can run pressing Run App button top right script window Rstudio. note can choose run app default browser (rather Rstudio) accurately reflect app look like users.fun note R console, app “listening”! Talk reactivity!: ADD SOMETHING DOWNLOADING ZIP FILE APP?","code":"\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = TRUE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\")\n    )\n    \n  )\n)\nserver <- function(input, output, session) {\n  \n  output$malaria_epicurve <- renderPlot(\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  )\n  \n}"},{"path":"shiny-and-dashboards.html","id":"adding-more-functionality","chapter":"3 Shiny and dashboards","heading":"3.5 Adding more functionality","text":"point ’ve finally got running app, little functionality. also haven’t really scratched surface shiny can , ’s lot learn ! Lets continue build existing app adding extra features. things nice add :explanatory textA download button plot - provide user high quality version image ’re generating appA selector specific facilitiesAnother dashboard page - show table data.lot add, can use learn bunch different shiny featues way. much learn shiny (can get advanced, hopefully case users better idea use can become comfortable using external learning sources well).","code":""},{"path":"shiny-and-dashboards.html","id":"adding-static-text","chapter":"3 Shiny and dashboards","heading":"Adding static text","text":"Lets first discuss adding static text shiny app. Adding text app extremely easy, basic grasp . Since static text doesn’t change shiny app (’d like change, can use text rendering functions server!), shiny’s static text generally added ui app. wont go great detail, can add number different elements ui (even custom ones) interfacing R HTML css.HTML css languages explicitly involved user interface design. don’t need understand well, HTML creates objects UI (like text box, table), css generally used change style aesthetics objects. Shiny access large array HTML tags - present objects behave specific way, headers, paragraphs text, line breaks, tables, etc. can use examples like :h1() - header tag, make enclosed text automatically larger, change defaults pertain font face, colour etc (depending overall theme app). can access smaller smaller sub-heading h2() h6() well. Usage looks like:\r\nh1(\"header - section 1\")\r\nh1() - header tag, make enclosed text automatically larger, change defaults pertain font face, colour etc (depending overall theme app). can access smaller smaller sub-heading h2() h6() well. Usage looks like:h1(\"header - section 1\")p() - paragraph tag, make enclosed text similar text body text. text automatically wrap, relatively small size (footers smaller example.) Think text body word document. Usage looks like:\r\np(\"larger body text explaining function app\")\r\np() - paragraph tag, make enclosed text similar text body text. text automatically wrap, relatively small size (footers smaller example.) Think text body word document. Usage looks like:p(\"larger body text explaining function app\")tags$b() tags$() - used create bold tags$b() italicised tags$() whichever text enclosed!tags$b() tags$() - used create bold tags$b() italicised tags$() whichever text enclosed!tags$ul(), tags$ol() tags$li() - tags used creating lists. used within syntax , allow user create either ordered list (tags$ol(); .e. numbered) unordered list (tags$ul(), .e. bullet points). tags$li() used denote items list, regardless type list used. e.g.:tags$ul(), tags$ol() tags$li() - tags used creating lists. used within syntax , allow user create either ordered list (tags$ol(); .e. numbered) unordered list (tags$ul(), .e. bullet points). tags$li() used denote items list, regardless type list used. e.g.:br() hr() - tags create linebreaks horizontal lines (linebreak) respectively. Use separate sections app text! need pass items tags (parentheses can remain empty).br() hr() - tags create linebreaks horizontal lines (linebreak) respectively. Use separate sections app text! need pass items tags (parentheses can remain empty).div() - generic tag can contain anything, can named anything. progress ui design, can use compartmentalize ui, give specific sections specific styles, create interactions server UI elements. won’t go detail, ’re worth aware !div() - generic tag can contain anything, can named anything. progress ui design, can use compartmentalize ui, give specific sections specific styles, create interactions server UI elements. won’t go detail, ’re worth aware !Note every one objects can accessed tags$... , just function. effectively synonymous, may help use tags$... style ’d rather explicit overwrite functions accidentally. also means exhaustive list tags available. full list tags available shiny even can used inserting HTML directly ui!’re feeling confident, can also add css styling elements HTML tags style argument . won’t go works detail, one tip testing aesthetic changes UI using HTML inspector mode chrome (shiny app running browser), editing style objects !Lets add text app","code":"\ntags$ol(\n  \n  tags$li(\"Item 1\"),\n  \n  tags$li(\"Item 2\"),\n  \n  tags$li(\"Item 3\")\n  \n)\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         h4(\"Options\"),\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = TRUE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         ),\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\"),\n      br(),\n      hr(),\n      p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n    tags$ul(\n      tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n      tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n      tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n      tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n      tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n      tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n      tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n    )\n    \n  )\n)\n)"},{"path":"shiny-and-dashboards.html","id":"adding-a-download-button","chapter":"3 Shiny and dashboards","heading":"Adding a download button","text":"Lets move second three features. download button fairly common thing add app fairly easy make. need add another Widget ui, need add another output server attach . can also introduce reactive conductors example!Lets update ui first - easy shiny comes widget called downloadButton() - lets give inputId label.Note ’ve also added hr() tag - adds horizontal line separating control widgets download widgets. another one HTML tags discussed previously.Now ui ready, need add server component. Downloads done server downloadHandler() function. Similar plot, need attach output inputId download button. function takes two arguments - filename content - functions. might able guess, filename used specify name downloaded file, content used specify downloaded. content contain function use save data locally - downloading csv file use rio::export(). Since ’re downloading plot, ’ll use ggplot2::ggsave(). Lets look program (won’t add server yet).Note content function always takes file argument, put output file name specified. might also notice ’re repeating code - using plot_epicurve() function twice server, download image displayed app. wont massively affect performance, means code generate plot run user changes widgets specifying district age group, want download plot. larger apps, suboptimal decisions like one slow things , ’s good learn make app efficient sense. make sense way run epicurve code districts/age groups changes, let used renderPlot() downloadHandler() functions. reactive conductors come !Reactive conductors objects created shiny server reactive way, outputted - can just used parts server. number different kinds reactive conductors, ’ll go basic two.1.reactive() - basic reactive conductor - react whenever inputs used inside change (district/age group widgets)\r\n2. eventReactive()- rective conductor works reactive(), except user can specify inputs cause rerun. useful reactive conductor takes long time process, explained later.Lets look two examples:use eventReactive() setup, can specify inputs cause chunk code run - isn’t useful us moment, can leave now. Note can include multiple inputs c()Lets look can integrate server code:can see ’re just calling output reactive ’ve defined download plot rendering functions. One thing note often trips people use outputs reactives functions - must add empty brackets end (.e. malaria_plot() correct, malaria_plot ). Now ’ve added solution app little tidyer, faster, easier change since code runs epicurve function one place.","code":"\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = c(\n                   \"All\",\n                   \"Spring\",\n                   \"Bolo\",\n                   \"Dingo\",\n                   \"Barnard\"\n              ),\n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # horizontal line\n         hr(),\n         downloadButton(\n           outputId = \"download_epicurve\",\n           label = \"Download plot\"\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\"),\n      br(),\n      hr(),\n      p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n      tags$ul(\n        tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n        tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n        tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n        tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n        tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n        tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n        tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n      )\n      \n    )\n    \n  )\n)\nserver <- function(input, output, session) {\n  \n  output$malaria_epicurve <- renderPlot(\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n}\nmalaria_plot_r <- reactive({\n  \n  plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  \n})\n\n\n# only runs when the district selector changes!\nmalaria_plot_er <- eventReactive(input$select_district, {\n  \n  plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  \n})\nserver <- function(input, output, session) {\n  \n  malaria_plot <- reactive({\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup)\n  })\n  \n  \n  \n  output$malaria_epicurve <- renderPlot(\n    malaria_plot()\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    \n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             malaria_plot(),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n}"},{"path":"shiny-and-dashboards.html","id":"adding-a-facility-selector","chapter":"3 Shiny and dashboards","heading":"Adding a facility selector","text":"Lets move next feature - selector specific facilities. ’ll implement another parameter function can pass argument code. Lets look first - just operates principles parameters ’ve set . Lets update test function.Let’s test :facilites data, isn’t clear facilities correspond districts - end user won’t know either. might make using app quite unintuitive. reason, make facility options UI change dynamically user changes district - one filters ! Since many variables ’re using options, might also want generate options ui global.R file data. example, can add code chunk global.R ’ve read data :Let’s look :can pass new variables ui without issue, since globally visible server ui! Lets update UI:Notice ’re now passing variables choices instead hard coding ui! might make code compact well! Lastly, ’ll update server. easy update function incorporate new input (just pass argument new parameter), remember also want ui update dynamically user changes selected district. important understand can change parameters behaviour widgets app running, needs done server. need understand new way output server learn .functions need understand known observer functions, similar reactive functions behave. one key difference though:Reactive functions directly affect outputs, produce objects can seen locations serverObserver functions can affect server outputs, via side effects functions. (can also things, main function practice)Similar reactive functions, two flavours observer functions, divided logic divides reactive functions:observe() - function runs whenever inputs used inside changeobserveEvent() - function runs user-specified input changesWe also need understand shiny-provided functions update widgets. fairly straightforward run - first take session object server function (doesn’t need understood now), inputId function changed. pass new versions parameters already taken selectInput() - automatically updated widget.Lets look isolated example use server. user changes district, want filter tibble facilities district, update choices reflect available district (option facilities)’s ! can add server, behaviour now work. ’s new server look like:","code":"\nplot_epicurve <- function(data, district = \"All\", agegroup = \"malaria_tot\", facility = \"All\") {\n  \n  if (!(\"All\" %in% district)) {\n    data <- data %>%\n      filter(District %in% district)\n    \n    plot_title_district <- stringr::str_glue(\"{paste0(district, collapse = ', ')} districts\")\n    \n  } else {\n    \n    plot_title_district <- \"all districts\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  data <- data %>%\n    filter(age_group == agegroup)\n  \n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n  \n  if (agegroup == \"malaria_tot\") {\n      agegroup_title <- \"All ages\"\n  } else {\n    agegroup_title <- stringr::str_glue(\"{str_remove(agegroup, 'malaria_rdt')} years\")\n  }\n  \n    if (!(\"All\" %in% facility)) {\n    data <- data %>%\n      filter(location_name == facility)\n    \n    plot_title_facility <- facility\n    \n  } else {\n    \n    plot_title_facility <- \"all facilities\"\n    \n  }\n  \n  # if no remaining data, return NULL\n  if (nrow(data) == 0) {\n    \n    return(NULL)\n  }\n\n  \n  \n  ggplot(data, aes(x = data_date, y = cases_reported)) +\n    geom_col(width = 1, fill = \"darkred\") +\n    theme_minimal() +\n    labs(\n      x = \"date\",\n      y = \"number of cases\",\n      title = stringr::str_glue(\"Malaria cases - {plot_title_district}; {plot_title_facility}\"),\n      subtitle = agegroup_title\n    )\n  \n  \n  \n}\nplot_epicurve(malaria_data, district = \"Spring\", agegroup = \"malaria_rdt_0-4\", facility = \"Facility 1\")\nall_districts <- c(\"All\", unique(malaria_data$District))\n\n# data frame of location names by district\nfacility_list <- malaria_data %>%\n  group_by(location_name, District) %>%\n  summarise() %>% \n  ungroup()\nall_districts## [1] \"All\"     \"Spring\"  \"Bolo\"    \"Dingo\"   \"Barnard\"\nfacility_list## # A tibble: 65 x 2\r\n##    location_name District\r\n##    <chr>         <chr>   \r\n##  1 Facility 1    Spring  \r\n##  2 Facility 10   Bolo    \r\n##  3 Facility 11   Spring  \r\n##  4 Facility 12   Dingo   \r\n##  5 Facility 13   Bolo    \r\n##  6 Facility 14   Dingo   \r\n##  7 Facility 15   Barnard \r\n##  8 Facility 16   Barnard \r\n##  9 Facility 17   Barnard \r\n## 10 Facility 18   Bolo    \r\n## # ... with 55 more rows\nui <- fluidPage(\n\n  titlePanel(\"Malaria facility visualisation app\"),\n\n  sidebarLayout(\n\n    sidebarPanel(\n         # selector for district\n         selectInput(\n              inputId = \"select_district\",\n              label = \"Select district\",\n              choices = all_districts,\n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # selector for age group\n         selectInput(\n              inputId = \"select_agegroup\",\n              label = \"Select age group\",\n              choices = c(\n                   \"All ages\" = \"malaria_tot\",\n                   \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                   \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                   \"15+ yrs\" = \"malaria_rdt_15\"\n              ), \n              selected = \"All\",\n              multiple = FALSE\n         ),\n         # selector for facility\n         selectInput(\n           inputId = \"select_facility\",\n           label = \"Select Facility\",\n           choices = c(\"All\", facility_list$location_name),\n           selected = \"All\"\n         ),\n         \n         # horizontal line\n         hr(),\n         downloadButton(\n           outputId = \"download_epicurve\",\n           label = \"Download plot\"\n         )\n\n    ),\n\n    mainPanel(\n      # epicurve goes here\n      plotOutput(\"malaria_epicurve\"),\n      br(),\n      hr(),\n      p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n      tags$ul(\n        tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n        tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n        tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n        tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n        tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n        tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n        tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n      )\n      \n    )\n    \n  )\n)\nobserve({\n  \n  if (input$select_district == \"All\") {\n    new_choices <- facility_list$location_name\n  } else {\n    new_choices <- facility_list %>%\n      filter(District == input$select_district) %>%\n      pull(location_name)\n  }\n  \n  new_choices <- c(\"All\", new_choices)\n  \n  updateSelectInput(session, inputId = \"select_facility\",\n                    choices = new_choices)\n  \n})\nserver <- function(input, output, session) {\n  \n  malaria_plot <- reactive({\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup, facility = input$select_facility)\n  })\n  \n  \n  \n  observe({\n    \n    if (input$select_district == \"All\") {\n      new_choices <- facility_list$location_name\n    } else {\n      new_choices <- facility_list %>%\n        filter(District == input$select_district) %>%\n        pull(location_name)\n    }\n    \n    new_choices <- c(\"All\", new_choices)\n    \n    updateSelectInput(session, inputId = \"select_facility\",\n                      choices = new_choices)\n    \n  })\n  \n  \n  output$malaria_epicurve <- renderPlot(\n    malaria_plot()\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    \n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             malaria_plot(),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n  \n  \n}"},{"path":"shiny-and-dashboards.html","id":"adding-another-tab-with-a-table","chapter":"3 Shiny and dashboards","heading":"Adding another tab with a table","text":"Now ’ll move last component want add app. ’ll want separate ui two tabs, one interactive table user can see data making epidemic curve . , can use packaged ui elements come shiny relevant tabs. basic level, can enclose main panel general structure:Lets apply ui. also want use DT package - great package making interactive tables pre-existing data. can see used DT::datatableOutput() example.Now app arranged tabs! Lets make necessary edits server well. Since dont need manipulate dataset render actually simple - just render malaria_data dataset via DT::renderDT() ui!","code":"\n# ... the rest of ui\n\nmainPanel(\n  \n  tabsetPanel(\n    type = \"tabs\",\n    tabPanel(\n      \"Epidemic Curves\",\n      ...\n    ),\n    tabPanel(\n      \"Data\",\n      ...\n    )\n  )\n)\nui <- fluidPage(\n     \n     titlePanel(\"Malaria facility visualisation app\"),\n     \n     sidebarLayout(\n          \n          sidebarPanel(\n               # selector for district\n               selectInput(\n                    inputId = \"select_district\",\n                    label = \"Select district\",\n                    choices = all_districts,\n                    selected = \"All\",\n                    multiple = FALSE\n               ),\n               # selector for age group\n               selectInput(\n                    inputId = \"select_agegroup\",\n                    label = \"Select age group\",\n                    choices = c(\n                         \"All ages\" = \"malaria_tot\",\n                         \"0-4 yrs\" = \"malaria_rdt_0-4\",\n                         \"5-14 yrs\" = \"malaria_rdt_5-14\",\n                         \"15+ yrs\" = \"malaria_rdt_15\"\n                    ), \n                    selected = \"All\",\n                    multiple = FALSE\n               ),\n               # selector for facility\n               selectInput(\n                    inputId = \"select_facility\",\n                    label = \"Select Facility\",\n                    choices = c(\"All\", facility_list$location_name),\n                    selected = \"All\"\n               ),\n               \n               # horizontal line\n               hr(),\n               downloadButton(\n                    outputId = \"download_epicurve\",\n                    label = \"Download plot\"\n               )\n               \n          ),\n          \n          mainPanel(\n               tabsetPanel(\n                    type = \"tabs\",\n                    tabPanel(\n                         \"Epidemic Curves\",\n                         plotOutput(\"malaria_epicurve\")\n                    ),\n                    tabPanel(\n                         \"Data\",\n                         DT::dataTableOutput(\"raw_data\")\n                    )\n               ),\n               br(),\n               hr(),\n               p(\"Welcome to the malaria facility visualisation app! To use this app, manipulate the widgets on the side to change the epidemic curve according to your preferences! To download a high quality image of the plot you've created, you can also download it with the download button. To see the raw data, use the raw data tab for an interactive form of the table. The data dictionary is as follows:\"),\n               tags$ul(\n                    tags$li(tags$b(\"location_name\"), \" - the facility that the data were collected at\"),\n                    tags$li(tags$b(\"data_date\"), \" - the date the data were collected at\"),\n                    tags$li(tags$b(\"submitted_daate\"), \" - the date the data were submitted at\"),\n                    tags$li(tags$b(\"Province\"), \" - the province the data were collected at (all 'North' for this dataset)\"),\n                    tags$li(tags$b(\"District\"), \" - the district the data were collected at\"),\n                    tags$li(tags$b(\"age_group\"), \" - the age group the data were collected for (0-5, 5-14, 15+, and all ages)\"),\n                    tags$li(tags$b(\"cases_reported\"), \" - the number of cases reported for the facility/age group on the given date\")\n               )\n               \n               \n          )\n     )\n)\nserver <- function(input, output, session) {\n  \n  malaria_plot <- reactive({\n    plot_epicurve(malaria_data, district = input$select_district, agegroup = input$select_agegroup, facility = input$select_facility)\n  })\n  \n  \n  \n  observe({\n    \n    if (input$select_district == \"All\") {\n      new_choices <- facility_list$location_name\n    } else {\n      new_choices <- facility_list %>%\n        filter(District == input$select_district) %>%\n        pull(location_name)\n    }\n    \n    new_choices <- c(\"All\", new_choices)\n    \n    updateSelectInput(session, inputId = \"select_facility\",\n                      choices = new_choices)\n    \n  })\n  \n  \n  output$malaria_epicurve <- renderPlot(\n    malaria_plot()\n  )\n  \n  output$download_epicurve <- downloadHandler(\n    \n    filename = function() {\n      stringr::str_glue(\"malaria_epicurve_{input$select_district}.png\")\n    },\n    \n    content = function(file) {\n      ggsave(file, \n             malaria_plot(),\n             width = 8, height = 5, dpi = 300)\n    }\n    \n  )\n  \n  # render data table to ui\n  output$raw_data <- DT::renderDT(\n    malaria_data\n  )\n  \n  \n}"},{"path":"shiny-and-dashboards.html","id":"sharing-shiny-apps","chapter":"3 Shiny and dashboards","heading":"3.6 Sharing shiny apps","text":"Now ’ve developed app, probably want share others - main advantage shiny ! can sharing code directly, publish server. share code, others able see ’ve done build , negate one main advantages shiny - can eliminate need end-users maintain R installation. reason, ’re sharing app users comfortable R, much easier share app published server.’d rather share code, make .zip file app, better yet, publish app github add collaborators. can refer section github information .However, ’re publishing app online, need little work. Ultimately, want app able accessed via web URL others can get quick easy access . Unfortunately, publish app server, need access server publish ! number hosting options comes :shinyapps.io: easiest place publish shiny apps, smallest amount configuration work needed, free, limited licenses.shinyapps.io: easiest place publish shiny apps, smallest amount configuration work needed, free, limited licenses.RStudio Connect: far powerful version R server, can perform many operations, including publishing shiny apps. however, harder use, less recommended first-time users.RStudio Connect: far powerful version R server, can perform many operations, including publishing shiny apps. however, harder use, less recommended first-time users.purposes document, use shinyapps.io, since easier first time users. can make free account start - also different price plans server licesnses needed. users expect , expensive price plan may , keep consideration. ’re looking create something small set individuals use, free license may perfectly suitable, public facing app may need licenses.First make sure app suitable publishing server. app, restart R session, ensure runs without running extra code. important, app requires package loading, data reading defined app code won’t run server. Also note can’t explicit file paths app - invalid server setting - using package solves issue well. Finally, ’re reading data source requires user-authentication, organisation’s servers, generally work server. need liase department figure whitelist shiny server .signing accountOnce account, can navigate tokens page Accounts. want add new token - used deploy app., note url account reflect name app - app called my_app, url appended xxx.io/my_app/. Choose app name wisely! Now ready, click deploy - successful run app web url chose!something making apps documents?","code":""},{"path":"shiny-and-dashboards.html","id":"further-reading","chapter":"3 Shiny and dashboards","heading":"3.7 Further reading","text":"far, ’ve covered lot aspects shiny, barely scratched surface offer shiny. guide serves introduction, loads learn fully understand shiny. start making apps gradually add functionality","code":""},{"path":"shiny-and-dashboards.html","id":"recommended-extension-packages","chapter":"3 Shiny and dashboards","heading":"3.8 Recommended extension packages","text":"following represents selection high quality shiny extensions can help get lot shiny. particular order:shinyWidgets - package gives many many widgets can used app. Run shinyWidgets::shinyWidgetsGallery() see selection available widgets package. See examples hereshinyWidgets - package gives many many widgets can used app. Run shinyWidgets::shinyWidgetsGallery() see selection available widgets package. See examples hereshinyjs - excellent package gives user ability greatly extend shiny’s utility via series javascript. applications package range simple highly advanced, might want first use manipulate ui simple ways, like hiding/showing elements, enabling/disabling buttons. Find hereshinyjs - excellent package gives user ability greatly extend shiny’s utility via series javascript. applications package range simple highly advanced, might want first use manipulate ui simple ways, like hiding/showing elements, enabling/disabling buttons. Find hereshinydashboard - package massively expands available ui can used shiny, specifically letting user create complex dashboard variety complex layouts. See hereshinydashboard - package massively expands available ui can used shiny, specifically letting user create complex dashboard variety complex layouts. See hereshinydashboardPlus - get even features shinydashboard framework! See hereshinydashboardPlus - get even features shinydashboard framework! See hereshinythemes - change default css theme shiny app wide range preset templates! See hereshinythemes - change default css theme shiny app wide range preset templates! See hereThere also number packages can used create interactive outputs shiny compatible.DT semi-incorporated base-shiny, provides great set functions create interactive tables.DT semi-incorporated base-shiny, provides great set functions create interactive tables.plotly package creating interactive plots user can manipulate app. can also convert plot interactive versions via plotly::ggplotly()! alternatives, dygraphs highcharter also excellent.plotly package creating interactive plots user can manipulate app. can also convert plot interactive versions via plotly::ggplotly()! alternatives, dygraphs highcharter also excellent.","code":""},{"path":"shiny-and-dashboards.html","id":"recommended-resources","chapter":"3 Shiny and dashboards","heading":"3.9 Recommended resources","text":"","code":""}]
