[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Offline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link, email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Emma Buajitti, Chris Bailey, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Adam Vaughan, Lionel Monteiro, Joao Muianga","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"contact-tracing.html","id":"contact-tracing","chapter":"1 Contact tracing","heading":"1 Contact tracing","text":"PAGE CONSTRUCTIONThis page walks key considerations analyzing visualizing contact tracing data. Many core R competencies tools covered sections desired functionalities apply (.e. data cleaning; pivoting; tables; epi-curves) highlight key examples specific contact tracing useful operational decision making (.e. visualizing contact tracing follow-data time across geographic areas).demonstration purposes reading sample contact tracing data Go.Data platform; although principles apply structured contact tracing data. can read Go.Data project Github Documentation site Community Practice.include static images GIFs like :Link pages exact name brackets like [Import export] page. give custom link text like , brackets following brackets: See [importing page][Import export]Please place {-} heading level-3 (###) numbers don’t appear TOCPlease include preparation section like . can display interactive data frames/tibbles DT shown .want preview page, can just press Knit. use combination bookdown_runfile.R bookdown_small.yml root folder see website layout. Ping questions.","code":""},{"path":"contact-tracing.html","id":"preparation","chapter":"1 Contact tracing","heading":"1.1 Preparation","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,        # importing data  \n  here,       # relative file pathways  \n  janitor,    # data cleaning and tables\n  lubridate,  # working with dates\n  epikit,     # age_categories() function\n  apyramid,   # age pyramids\n  tidyverse,  # data manipulation and visualization\n  RColorBrewer # color palettes\n)"},{"path":"contact-tracing.html","id":"import-data","chapter":"1 Contact tracing","heading":"Import data","text":"import sample datasets contacts contact followups retrieved un-nested Go.Data API stored .rds output files.want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data. full steps retrieve data collections Go.Data instance, view Github documentation hereBelow import .rds files, located ‘godata’ sub-folder within ‘data’ folder.Let’s start contact linelist - first 50 rows registered linelist displayed .","code":""},{"path":"contact-tracing.html","id":"basic-demographics","chapter":"1 Contact tracing","heading":"Basic Demographics","text":"Following instructions previous pages, can view basic tables plots case contact demographics. instance, can see age/sex breakdown (using apyramid package described earlier)can also view demographics occupational breakdown registered contacts (form pie chart).","code":"\ncontact_unknown_age <- sum(contacts$age_class == \"unknown\") # count unknown\n\ncontact_age_pyramid <-\napyramid::age_pyramid(data = contacts,\n                      age_group = \"age_class\",\n                      split_by = \"gender\") +\n       labs(\n       fill = \"Gender\",\n       title = \"Age/Sex Pyramid of COVID-19 contacts\",\n       subtitle = paste0(\"n = \", contact_unknown_age,\" without age recorded,\")) +\n     theme_minimal() # cleaner theme\n\ncontact_age_pyramid\ncontacts$occupation <- as.factor(contacts$occupation) # ensure occupation is a factor\ncontact_unknown_occupation <- sum(is.na(contacts$occupation) | contacts$occupation == \"UNKNOWN\") # count unknown\ngetPalette = colorRampPalette(brewer.pal(9, \"Set1\"))\ncolor_count = length(unique(contacts$occupation)) # for color palette\n\ncontact_occupation_breakdown <- contacts %>%\n  group_by(occupation) %>%\n  count() \n\ncontact_occupation_pie_chart <-\n  ggplot(subset(contact_occupation_breakdown, !is.na(occupation)), aes(x = \"\", y = n, fill = occupation)) +\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(\"y\", start = 0) +\n  theme_minimal() +\n  scale_fill_manual(values = getPalette(color_count)) +\n  labs(\n       fill = \"Occupation\",\n       title = \"Occupational breakdown of COVID-19 contacts\",\n       subtitle = paste0(\"n = \", contact_unknown_occupation,\" without occupation recorded,\")\n       ) +\n  theme(axis.line = element_blank(),\n        axis.title = element_blank(),\n        axis.text = element_blank())\n\ncontact_occupation_pie_chart"},{"path":"contact-tracing.html","id":"contact-follow-up-data","chapter":"1 Contact tracing","heading":"Contact Follow Up Data","text":"can also view longitudinal follow-data summarizing given contact looking discrete follow events time. viewed contact tracer, supervision team geographic area; also day week.sample follow-list look like , one row follow-generated.important consider duplicates - perhaps contact tracer filled follow-form early day reach , filled second form reached. depend operational scenario context want handle duplicates, simplicity sake , let’s de-duplicate one follow-per person per day, keep row recent submission.follow-, follow-STATUS (whether performed , symptoms ). can group followup_status see frequency :Another thing keep mind - need prepare graphs show similarly even varying levels data completion data composition, given deployment region. Although case sample dataset, may scenario follow-statuses present data given time, still want categories appear legends tables.order force followup status columns always , can set array statuscols use later. demonstration add another category “OTHER_RANDOM_STATUS”.can visualize simple plot show, time, status follow-ups, generated.\r\nggplot2 works best “long” format, already , need force extra status column one option widening first pivot_wider(); add column via add_column(); pivot_longer().day, count follow-status. order guard categories dropped, ca add statuscols using add_column() - forced 0 rows match status.Now can transform back “long” format prepare plotting using pivot_longer().Now can plot show time.Perhaps viewed daily weekly basis operational decision-making, ’s better meaningful disaggregations geographic area team. can following approach , just swapping group_by() variables.Now can graph facet appropriately:disaggregated contact tracer, perhaps want add threshold line display total # contacts normally one person area/team can handle, current workload compares. just using geom_hline() function.","code":"\nfollowups <- followups %>%\n  arrange(contact_uuid, desc(date_of_followup)) %>%    # arrange by date of follow-up; most recent first\n  distinct(contact_uuid, .keep_all = TRUE)             # distinct to grab first row per unique contact uuid\nfollowup_status <- followups %>%\n     group_by(followup_status) %>%\n     count()\nstatuscols <- c(MISSED  = 0, \n                SEEN_NOT_OK = 0, \n                SEEN_OK = 0,\n                NOT_PERFORMED = 0,\n                NOT_ATTEMPTED = 0,\n                OTHER_RANDOM_STATUS = 0)\nfollowup_status_daily <- followups %>%\n     group_by(followup_status, date_of_followup) %>%\n     count() %>%\n     pivot_wider(names_from = followup_status, \n                 values_from = n, \n                 values_fill = list(n=0)) \nfollowup_status_daily <- followups %>%\n     group_by(followup_status, date_of_followup) %>%\n     count() %>%\n     pivot_wider(names_from = followup_status, \n                 values_from = n, \n                 values_fill = list(n=0)) %>%\n     add_column(!!!statuscols[!names(statuscols)%in% names(.)])  # check and add columns if one status doesn't exist\nfollowup_status_daily_long <- followups %>%\n     group_by(followup_status, date_of_followup) %>%\n     count() %>%\n     pivot_wider(names_from = followup_status, \n                 values_from = n, \n                 values_fill = list(n=0)) %>%\n     add_column(!!!statuscols[!names(statuscols)%in% names(.)]) %>% # check and add columns if one status doesn't exist\n     pivot_longer(cols = -date_of_followup,             # pivot to long version but retain date_of_followup column\n                  names_to = \"daily_status\", \n                  values_to = \"counts\") \ngraph_followup_status_daily_long <- followup_status_daily_long %>%\n    ggplot(aes(x = date_of_followup, y = counts, fill = daily_status)) +\n    geom_col(position = \"stack\") +\n    theme_classic() +\n    labs(x = \"\",\n         y = \"Number of contacts\",\n         title = \"Daily Contact Followup Status\",\n         fill = \"Followup Status\",\n         subtitle = paste0(\"Data as of \", Sys.Date(), \"\\n\")) \nfollowup_status_regional <- followups %>%\n     group_by(followup_status, admin_2_name, admin_1_name) %>%    # here instead we are using location var\n     count() %>%\n     pivot_wider(names_from = followup_status, \n                 values_from = n, \n                 values_fill = list(n=0)) %>%\n     add_column(!!!statuscols[!names(statuscols)%in% names(.)]) %>%  # check and add columns if one status doesn't exist\n     pivot_longer(cols = -(admin_2_name:admin_1_name),             # pivot to long version but retain location columns\n                  names_to = \"daily_status\", \n                  values_to = \"counts\") \ngraph_followup_status_regional <- followup_status_regional %>%\n    ggplot(aes(x = reorder(admin_2_name,counts), \n               y = counts, \n               fill = daily_status,\n               label = ifelse(counts>0, counts, NA)  # add in label of counts for easier reading\n               )) +\n    geom_col(position = \"stack\") +\n    geom_text(size = 3, position = position_stack(vjust = 0.5), \n               color = \"white\", check_overlap = TRUE, fontface = \"bold\") + # formatting for text labeling\n    coord_flip() +\n    theme_classic() +\n    labs(x = \"\",\n         y = \"Number of contacts\",\n         title = \"Contact Followup Status, by Region\",\n         fill = \"Followup Status\",\n         subtitle = paste0(\"Data as of \", Sys.Date(), \"\\n\")) +\n     facet_wrap(~admin_1_name, strip.position = \"right\", scales = \"free_y\", ncol = 1)  # add admin_1 names on right\ngraph_followup_status_regional <- \n     graph_followup_status_regional + \n     geom_hline(aes(yintercept=25), color=\"#C70039\", linetype = \"dashed\") # fictitious threshold at 25 contacts"},{"path":"contact-tracing.html","id":"kpi-tables","chapter":"1 Contact tracing","heading":"KPI Tables","text":"number different KPIs can calculated tracked varying levels disaggregations across different time periods. calculations basic table format; fairly easy swap different KPIs. walk sample exercise creating nice table visual show contact follow-across contact tracers using formattable package.","code":""},{"path":"contact-tracing.html","id":"transmission-matrices","chapter":"1 Contact tracing","heading":"Transmission Matrices","text":"discussed [Heat plots] page, can view matrix “infected ”.new contacts created, Go.Data stores relationship information “relationships” API endpoint; can see dataset . means can create heatmap relatively steps given contact already joined ’s source case.can grab variables need add age-categories sources (cases) targets (contacts).described previously, create cross-tabulation;convert long format proportions;create heat-map.","code":"\n# display the first 50 rows of relationships data as a table\nDT::datatable(head(relationships, 50), rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\nheatmap_ages <- relationships %>% \n  filter(!is.na(source_visualid) & !is.na(target_visualid)) %>%\n  select(source_visualid, source_age, target_visualid, target_age) %>% \n  # WHO recommended age categories, updated Sept 2020\n  mutate(\n    source_age_class = factor(\n      case_when(\n        source_age <= 4 ~ \"0-4\",\n        source_age <= 9 ~ \"5-9\",\n        source_age <= 14 ~ \"10-14\",\n        source_age <= 19 ~ \"15-19\",\n        source_age <= 29 ~ \"20-29\",\n        source_age <= 39 ~ \"30-39\",\n        source_age <= 49 ~ \"40-49\",\n        source_age <= 59 ~ \"50-59\",\n        source_age <= 64 ~ \"60-64\",\n        source_age <= 69 ~ \"65-69\",\n        source_age <= 74 ~ \"70-74\",\n        source_age <= 79 ~ \"75-79\",\n        is.finite(source_age) ~ \"80+\",\n        TRUE ~ \"unknown\"\n      ), levels = c(\n        \"0-4\",\n        \"5-9\",\n        \"10-14\",\n        \"15-19\",\n        \"20-29\",\n        \"30-39\",\n        \"40-49\",\n        \"50-59\",\n        \"60-64\",\n        \"65-69\",\n        \"70-74\",\n        \"75-79\",\n        \"80+\",\n        \"unknown\"\n      )),\n    source_age_class = factor(\n      source_age_class,\n      levels = rev(levels(source_age_class)))) %>%\n     \n     mutate(\n    target_age_class = factor(\n      case_when(\n        target_age <= 4 ~ \"0-4\",\n        target_age <= 9 ~ \"5-9\",\n        target_age <= 14 ~ \"10-14\",\n        target_age <= 19 ~ \"15-19\",\n        target_age <= 29 ~ \"20-29\",\n        target_age <= 39 ~ \"30-39\",\n        target_age <= 49 ~ \"40-49\",\n        target_age <= 59 ~ \"50-59\",\n        target_age <= 64 ~ \"60-64\",\n        target_age <= 69 ~ \"65-69\",\n        target_age <= 74 ~ \"70-74\",\n        target_age <= 79 ~ \"75-79\",\n        is.finite(target_age) ~ \"80+\",\n        TRUE ~ \"unknown\"\n      ), levels = c(\n        \"0-4\",\n        \"5-9\",\n        \"10-14\",\n        \"15-19\",\n        \"20-29\",\n        \"30-39\",\n        \"40-49\",\n        \"50-59\",\n        \"60-64\",\n        \"65-69\",\n        \"70-74\",\n        \"75-79\",\n        \"80+\",\n        \"unknown\"\n      )),\n    target_age_class = factor(\n      target_age_class,\n      levels = rev(levels(target_age_class))))\ncross_tab <- \n      table(source_cases = heatmap_ages$source_age_class,\n      target_cases = heatmap_ages$target_age_class)\nlong_prop <- data.frame(prop.table(cross_tab))\nggplot(data = long_prop)+       # use long data, with proportions as Freq\n  geom_tile(                    # visualize it in tiles\n    aes(\n      x = target_cases,         # x-axis is case age\n      y = source_cases,     # y-axis is infector age\n      fill = Freq))+            # color of the tile is the Freq column in the data\n  scale_fill_gradient(          # adjust the fill color of the tiles\n    low = \"blue\",\n    high = \"orange\")+\n  labs(                         # labels\n    x = \"Target case age\",\n    y = \"Source case age\",\n    title = \"Who infected whom - Go.Data Relationships Linelist\",\n    subtitle = \"Frequency matrix of transmission events\",\n    fill = \"Proportion of all\\ntranmsission events\"     # legend title\n  )"},{"path":"contact-tracing.html","id":"resources","chapter":"1 Contact tracing","heading":"1.2 Resources","text":"https://github.com/WorldHealthOrganization/godata/tree/master/analytics/r-reportinghttps://worldhealthorganization.github.io/godata/https://community-godata..int/","code":""}]
