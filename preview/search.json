[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"r-for-applied-epi-and-public-health","chapter":"","heading":"R for applied ‘epi’ and public health","text":"handbook strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?community-driven - written epidemiologists epidemiologists spare time leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"contact-us","chapter":"","heading":"Contact us","text":"Structured feedback formEmail us epiRhandbook@gmail.comSubmit issues pull requests Github repositoryTwitter handle @epirhandbook","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Wayne Enanoria, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Manual Albela Miranda, Molly Mantus, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.Contributor code","code":""},{"path":"ggplot-basics.html","id":"ggplot-basics","chapter":"1 ggplot basics","heading":"1 ggplot basics","text":"ggplot2 popular data visualisation R package. ggplot() function core package, whole approach colloquially known “ggplot” resulting figures sometimes affectionately called “ggplots”. “gg” names reflects “grammar graphics” used construct figures. ggplot2 benefits wide variety supplementary R packages enhance functionality.syntax significantly different base R plotting, learning curve associated . Using ggplot2 generally requires user format data way highly tidyverse compatible, ultimately makes using packages together effective.page cover:fundamentals plotting ggplot2Tips tricks make plots sharpThere several extensive ggplot2 tutorials linked resources section. can also download data visualization ggplot cheatsheet RStudio website. want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-basics.html","id":"preparation","chapter":"1 ggplot basics","heading":"1.1 Preparation","text":"","code":""},{"path":"ggplot-basics.html","id":"load-packages","chapter":"1 ggplot basics","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"ggplot-basics.html","id":"import-data","chapter":"1 ggplot basics","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"ggplot-basics.html","id":"general-cleaning","chapter":"1 ggplot basics","heading":"General cleaning","text":"preparing data plot, best make data adhere “tidy” data standards much possible. achieve expanded data management pages handbook, [Cleaning data core functions].simple ways can prepare data make better plotting can include making contents data better display - necessarily mean better data manipulation! example:Replace NA values character column string “Unknown”Clean columns “data friendly” values underscores etc changed normal text title case (see [Characters strings])examples action:","code":"\nlinelist <- linelist %>%\n  # make display version of columns with more friendly names\n  mutate(\n    # f to Male, f to Female, NA to Unknown\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",\n                            gender == \"f\" ~ \"Female\",\n                            is.na(gender) ~ \"Unknown\"),\n    # replace NA with unknown for outcome\n    outcome_disp = replace_na(outcome, \"Unknown\")\n  )"},{"path":"ggplot-basics.html","id":"pivoting-longer","chapter":"1 ggplot basics","heading":"Pivoting longer","text":"matter data structure, ggplot2 often also want pivot data longer formats, allow us use set variables single variable. Read page [Pivoting data].example, say “wide” data case symptoms (shown shown , style linelist).first 50 rows look:wanted show number cases specific symptoms, limited fact symptom specific column. However, can pivot symptoms columns longer format like :first 50 rows. Note case 5 rows - one possibly symptom. Scroll right see new columns symptom_name symptom_is_present. Note format useful operations, just used plot made .","code":"\nsymptoms_data <- linelist %>% \n  select(c(case_id, fever, chills, cough, aches, vomit))\nsymptoms_data_long <- symptoms_data %>%\n  pivot_longer(cols = -case_id,\n               names_to = \"symptom_name\",\n               values_to = \"symptom_is_present\") %>%\n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\"))"},{"path":"ggplot-basics.html","id":"basics-of-ggplot","chapter":"1 ggplot basics","heading":"1.2 Basics of ggplot","text":"“Grammar graphics” - ggplot2Plotting ggplot2 based “adding” plot layers attribute specifications top one another, sub-command added plus symbol (+). result multi-layer plot object can saved, modified, printed, exported, etc.ggplot objects can highly complex, basic order layers usually look like :Begin baseline ggplot() command - establish coordinate base specify datasetAdd “geom” layers - geometric functions visualize data bar graph, line plot, scatter plot, histogram, etc (combination!). functions start geom_ prefix.Add adjustments plot specify axis labels, title, fonts, sizes, color schemes, legends, rotate axes, etc.simple example skeleton code follows. explain component sections .","code":"\nggplot(data = my_data)+  \n  geom_XXXX(mapping = aes(x = col1, y = col2), fill = \"color\")+\n  labs()+\n  theme()"},{"path":"ggplot-basics.html","id":"ggplot","chapter":"1 ggplot basics","heading":"1.3 ggplot()","text":"opening command ggplot2 plot ggplot(). command simply creates blank canvas upon add layers. “opens” way layers added + symbol.Typically, command ggplot() includes data = argument plot. sets default dataset used subsequent layers plot.Finally, command end + closing parentheses. leaves command “open”. plot execute/appear command includes final layer without + end.","code":"\n# This will create plot that is a blank canvas\nggplot(data = linelist)"},{"path":"ggplot-basics.html","id":"geoms","chapter":"1 ggplot basics","heading":"1.4 Geoms","text":"blank canvas sufficient! need create geometries data! Bar plots, histograms, scatter plots, box plots!done adding layers geometry initial ggplot() command. many ggplot2 functions create “geoms”. functions begins “geom_”, refer generically geom_XXXX(). 40 geoms ggplot2 many others created fans. View ggplot2 gallery. common geoms listed :Histograms - geom_histogram()Bar charts - geom_bar() geom_col()Box plots - geom_boxplot()Points (e.g. scatter plots) - geom_point()Line graphs - geom_line() geom_path()Trend lines - geom_smooth()one plot can display one multiple geoms. added +, plotted sequentially later geoms plotted top previous ones.two bar plots functions - geom_bar() geom_col() discussed depth later section.simply knowing geom functions sufficient produce plot! must also map data plot…","code":""},{"path":"ggplot-basics.html","id":"mapping-plot-aesthetics-to-data","chapter":"1 ggplot basics","heading":"1.5 Mapping plot aesthetics to data","text":"next core component ggplot() object plot “aesthetics” mapped columns data. plot “aesthetic”, mean visual property object plot.geoms, essential aesthetics must mapped columns data x-axis, (necessary) y-axis.Aesthetics “mapped” columns data specified mapping = argument. exact assignments made within aes(), provided mapping = aes(), shown ., ggplot() command data set case linelist, within aes() column age mapped x-axis, column wt_kg mapped y-axis. + continues plotting command leads geom_point(). geom inherits mapped aesthetics ggplot() command - know axis-column assignments proceeds visualize relationships points canvas.following command utilizes data, slightly different aesthetic mapping different geom. produces histogram geom_histogram(), nature requires column mapped x-axis. count y-axis generated automatically.Aesthetic mapping can defined several places, even multiple times!mapping = aes() can written several places, . can written top ggplot() command, /individual geom_XXXX() beneath. nuances include:Mapping assignments specified top ggplot() command apply defaults across geom .Mapping assignments specified within one geom_XXXX() apply geom.Likewise, data = specified top ggplot() apply default geom , can also specify data geom, desired (one way create plot combines multiple datasets).Thus, following commands create plot:","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))"},{"path":"ggplot-basics.html","id":"other-aesthetics","chapter":"1 ggplot basics","heading":"1.6 Other aesthetics","text":"aesthetics, often specific type geom. examples:shape = Display point (geom_point()) dot, star, triangle, square, etc.fill = interior color (e.g. bar boxplot)color = exterior line(s) bar, boxplot, etc. (point color using geom_point())size = Size (e.g. line thickness, point size)alpha = Transparency (1 = opaque, 0 = invisible)binwidth = Width histogram binslinetype = Line type (e.g. solid, dashed, dotted)non-axis aesthetics can assigned static values (e.g. size = 1) can mapped column (e.g. size = age). want aesthetic assigned static value, assignment placed outside mapping = aes(). want aesthetic scaled/depend value row data, assignment made inside mapping = aes().","code":""},{"path":"ggplot-basics.html","id":"assigned-a-static-value","chapter":"1 ggplot basics","heading":"Assigned a static value","text":"want value static, write assignment within geom_XXXX() outside mapping = aes() statement (may even one geom). assignment values unchanging - example, size = 1 color = \"blue\".two examples. first, mapping assignments axes set ggplot() command, color, size, alpha alone geom_point(). Note written ggplot(). second example, axis mapping done within geom (just example - make difference), binwidth, color, fill, alpha outside aes() set static values.","code":"\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"red\", size = 0.5, alpha = 0.1)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist)+       # set data\n  geom_histogram(              # display histogram\n    mapping = aes(x = age),      # axis mapping for histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency"},{"path":"ggplot-basics.html","id":"assigned-to-a-column","chapter":"1 ggplot basics","heading":"Assigned to a column","text":"can map non-axis aesthetics (size, color, fill, alpha…) columns data. case, display scaled depends value row data. Essentially, data grouped values assigned column. column values continuous, examples , aesthetic scale used continuous. column assign discrete, scaled colors/sizes/etc. display discrete scale group (read grouping section).case, assign aesthetics within aes(), alongside axes assignments. assignments now made column names, static values. finally, like axes assignments, choose put aes() top ggplot() command assignments apply default geoms .Two examples .Note first example color point reflects age value - scale appeared legend! now just note scale exists - show modify later sections. second example highlights two new aesthetics mapped columns (color size), shape alpha remain mapped static values outside aes().becomes important track layers aesthetics making complex plots - like multiple geoms.example , size = aesthetic assigned twice - geom_point() geom_smooth() - times static value.Note propoerly aligning axes plot multiple dataset top one another can difficult. Consider instead using cowplot similar package combine two plots - described section [ggplot tips] page.","code":"\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()            # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = age_years)) + # map aesthetics to columns\n  geom_point(size = 1, alpha = 0.5) +  # add points for each row of data\n  geom_smooth(method = \"lm\", size = 2) # add a trend line with linear method, width of 2"},{"path":"ggplot-basics.html","id":"ggplotgroups","chapter":"1 ggplot basics","heading":"1.7 Groups","text":"can easily group data “plot group”. fact, already done ! simply assign grouping column appropriate plot aesthetic, within mapping = aes(). , demonstrated using continuous values, works way discrete/categorical values.example, want groups represented different color points gender, color = gender within geom’s aes(), shown . , legend automatically appears.Note depending geom, may need use different arguments group data. geom_point() likely use color =, shape = size =. Whereas geom_bar() likely use fill =.information - basic way grouping data adding group = argument within mapping = aes() assigning column. However, change colors, fill, shapes. create legend. Yet good aware argument case want use .many examples grouped plot pages plotting continuous categorical data. adjust order presentation groups plot, see [ggplot tips] page page [Working factors].","code":"\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)"},{"path":"ggplot-basics.html","id":"facets-small-multiples","chapter":"1 ggplot basics","heading":"1.8 Facets / Small-multiples","text":"Facets, “small-multiples”, used split one plot multi-panel figure, one panel (“facet”) per group. dataset used facet, type plot shown facet, every facet specific level variable. Faceting functionality comes ggplot2, legends axes panels automatically aligned.packages discussed [ggplot tips] page used combine completely different plots (cowplot patchwork) one figure.Faceting done one two functions:facet_wrap() show different facet level single variable. One example showing different epidemic curve hospital region. Facets ordered alphabetically, unless variable factor order.can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.nrow ncol relevant, subgroups presented gridYou can use formala synatx either function. can stipulate two faceting variables, ‘~’ . one faceting variable, ‘.’ used placeholder non-used second faceting variable - see code examples.can quickly become overwhelming amount information - good ensure don’t many levels variable choose facet ! quick examples malaria dataset (see [Download book data]) consists daily case counts malaria facilities, age group.import quick modifications simplicity:first 50 rows malaria data . Note column malaria_tot, also columns counts age group (used second, facet_grid() example).","code":"\n# These data are daily counts of malaria cases, by facility-day\nmalaria_data <- import(here(\"data\", \"malaria_facility_count_data.rds\")) %>%  # import\n  select(-submitted_date, -Province, -newid)# %>%                             # remove unneeded columns\n  # group_by(District, data_date) %>%\n  # summarise(                                                                 # summarise facility-counts up to District level\n  #   malaria_tot = sum(malaria_tot, na.rm=T),\n  #   malaria_0_4 = sum(`malaria_rdt_0-4`, na.rm=T),\n  #   malaria_5_14 = sum(`malaria_rdt_5-14`, na.rm=T),\n  #   malaria_15 = sum(`malaria_rdt_15`, na.rm=T)\n  # )"},{"path":"ggplot-basics.html","id":"facet_wrap","chapter":"1 ggplot basics","heading":"facet_wrap()","text":"moment, let’s focus columns malaria_tot District. Ignore age-specific count columns now. plot epidemic curves geom_col(), produces bar day specified y-axis height column malaria_tot (use geom_col() data daily counts, one row per case - see [Plot categorical data]).add command facet_wrap(), specify tilde column facet (District case). can place another column left side tilde, - create one facet combination - recommend facet_grid() instead. use case, one facet created unique value District.","code":"\n# A plot with facets by district\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()                               # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district\") +\n  facet_wrap(~District)                       # the facets are created## NULL"},{"path":"ggplot-basics.html","id":"facet_grid","chapter":"1 ggplot basics","heading":"facet_grid()","text":"can use facet_grid() approach cross two variables. Let’s say want cross District age. Well, need data transformations age columns get data ggplot-preferred “long” format. age groups columns - want single column called age_group another called num_cases. See page [Pivoting data] information process.Now first 50 rows data look like :pass two variables facet_grid(), easiest use formula notation (e.g. x ~ y) x rows y columns. plot, using facet_grid() show plots combination columns age_group District.","code":"\nmalaria_age <- malaria_data %>%\n  select(-malaria_tot) %>% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # choose columns to pivot longer\n    names_to = \"age_group\",      # column names become age group\n    values_to = \"num_cases\"      # values to a single column (num_cases)\n  ) %>%\n  mutate(\n    age_group = str_replace(age_group, \"malaria_rdt_\", \"\"),\n    age_group = forcats::fct_relevel(age_group, \"5-14\", after = 1))\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group)"},{"path":"ggplot-basics.html","id":"free-or-fixed-axes","chapter":"1 ggplot basics","heading":"Free or fixed axes","text":"axes scales displayed faceting default (fixed) across facets. helpful comparison, always appropriate optimal.using facet_wrap() facet_grid(), can add scales = \"free_y\" (plot ) heights faceted histograms standardised shapes easier compare. particularly useful actual counts small one subcategories trends otherwise hard see. Instead free_y can also write free_x x axis free axes. Note facet_grid, y scales facets row, x scales facets column.using facet_grid , can add space = \"free_y\" space = \"free_x\" actual height width facet weighted values figure within. works scales = \"free\" (y x) already applies.","code":"\n# Free y-axis\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group, scales = \"free_y\")\n\n# Free x-axis (date axis)\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group, scales = \"free_x\")"},{"path":"ggplot-basics.html","id":"storing-plots","chapter":"1 ggplot basics","heading":"1.9 Storing plots","text":"","code":""},{"path":"ggplot-basics.html","id":"saving-plots","chapter":"1 ggplot basics","heading":"Saving plots","text":"default run ggplot() command, plot printed Plots RStudio pane. However, can also save plot object using assignment operator <- giving name. print unless object name run. can also print wrapping plot name print(), necessary certain circumstances plot created inside loop.","code":"\n# define plot\nage_by_wt <- ggplot(data = linelist, mapping = aes(x = age_years, y = wt_kg, color = age_years))+\n  geom_point(alpha = 0.1)\n\n# print\nage_by_wt    "},{"path":"ggplot-basics.html","id":"modifying-saved-plots","chapter":"1 ggplot basics","heading":"Modifying saved plots","text":"One nice thing ggplot2 can define plot (), add layers starting name. repeat commands created original plot!example, modify plot age_by_wt defined , include vertical line age 50, just add + continue….","code":"\nage_by_wt+\n  geom_vline(xintercept = 50)"},{"path":"ggplot-basics.html","id":"labels","chapter":"1 ggplot basics","heading":"1.10 Labels","text":"Surely want add adjust plot’s labels. easily done labs() function, added + just geoms .Within labs() can provide character strings arguements:x = y = x-axis y-axis title (labels)title = main plot titlesubtitle = subtitle plot, smaller text titlecaption = caption plot, bottom-right defaultHere plot made earlier, nicer labels:Note caption assignment used str_glue() stringr package implant dynamic R code within string text. caption display maximum hospitalization date linelist. Read page [Characters strings].adjust legend title, provide argument used create labs(). example assigned color = age create legend. Therefore, provide color = labs() assigned legend title desired (“Age” capital ). create legend aes(fill = COLUMN), labs() edit fill = adjust legend title. See section legends [ggplot tips] page details editing legend.","code":"\nage_by_wt <- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    color = \"Age\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt"},{"path":"ggplot-basics.html","id":"themes","chapter":"1 ggplot basics","heading":"1.11 Themes","text":"One best parts ggplot2 amount control plot - can define anything! Generally done adjusting “theme” arguments plot. done one two ways:Adding pre-defined theme_XXXX() functions make sweeping adjustments\r\ninclude theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() others\r\ninclude theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() othersAdjusting tiny aspect plot individually within theme()quite straight-forward, demonstrate pre-defined theme_XXXX() functions describe .theme() function can take large number arguments, edits specific aspects plot. won’t go examples, describe general pattern show find argument need. basic syntax :Add theme() geom labs()Within theme(), provide specific argument name plot element want edit (e.g. plot.title = plot title)Supply element_XXXX() function value argumentMost time element_text(), versions include element_rect() editing plot canvas background colors, even element_blank() remove plot elementsWithin element_XXXX() give arguments make fine adjustmentsThat description quite abstract convoluted, examples.plot looks quite silly, serves show variety ways can adjust plot. begin plot age_by_wt (defined ), add + theme_classic() (empty parentheses) enact several adjustments one command. , finer adjustments, add theme() command. Within , list arguments plot element want adjust - case many. can nice organize sub-sections new lines.describe just : legend.position = unique accepts simple values like “bottom”, “top”, “left”, “right”. generally, text-related arguments require place details within element_text(). See adjust title size element_text(size = 30), caption horizontal alignment element_text(hjust = 0) (right left), make subtitle italicized element_text(face = \"italic\").especially common theme() arguments. recognize patterns, appending .x .y apply change one axis.many theme arguments! remember ??? worry - impossible remember . Luckily tools help :See tidyverse documentation modifying theme complete list.TIP: Run theme_get() ggplot2 print list 90+ theme() arguments console.TIP: ever want remove element plot, can also theme()! Just pass element_blank() argument disappear completely!","code":"\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     "},{"path":"ggplot-basics.html","id":"bar-plot-geoms","chapter":"1 ggplot basics","heading":"1.12 “Bar plot” geoms","text":"Geoms “bar plots” deserve special mention, easily confused.","code":""},{"path":"ggplot-basics.html","id":"geom_bar","chapter":"1 ggplot basics","heading":"geom_bar()","text":"Use geom_bar() want bar height (stacked bar components) reflect number relevant rows data.Provide one axis column assignment (typically x-axis). provide x y, get Error: stat_count() can x y aesthetic.can create stacked bars adding fill = column assignment, explained .automatic title opposite axis “count”, represents number rows","code":"\nggplot(data = linelist)+\n  geom_bar(mapping = aes(y = hospital, fill = gender))"},{"path":"ggplot-basics.html","id":"geom_col","chapter":"1 ggplot basics","heading":"geom_col()","text":"Use geom_col() want bar height (stacked bar height) reflect pre-calculated value exists data. Often, proportion summary count value.Provide column assignments axes. Typically x-axis discrete y-axis assigned column values.automatic title opposite axis assigned y-axis column\r\nwant stacked bars using geom_col(), must take additional steps (often, pivoting) ensure data “long” format (see [Pivoting data]). one column containing categories (e.g. stacks) another column heights.","code":"\nproportion_died <- linelist %>%\n  group_by(hospital) %>% \n  summarise(\n    n_rows = n(),\n    n_died = sum(outcome == \"Death\", na.rm=TRUE),\n    p_died = n_died / n_rows\n  )\n\nproportion_died## # A tibble: 6 x 4\r\n##   hospital                             n_rows n_died p_died\r\n##   <chr>                                 <int>  <int>  <dbl>\r\n## 1 Central Hospital                        454    193  0.425\r\n## 2 Military Hospital                       896    399  0.445\r\n## 3 Missing                                1469    611  0.416\r\n## 4 Other                                   885    395  0.446\r\n## 5 Port Hospital                          1762    785  0.446\r\n## 6 St. Mark's Maternity Hospital (SMMH)    422    199  0.472\nggplot(data = proportion_died)+\n  geom_col(mapping = aes(x = hospital, y = p_died))\nproportion_outcome <- linelist %>%\n  group_by(hospital) %>% \n  summarise(\n    \n    # rows denominator per hospital\n    n_rows = n(),\n    \n    # counts per hospital\n    n_died = sum(outcome == \"Death\", na.rm=TRUE),\n    n_alive = sum(outcome == \"Recover\", na.rm=TRUE),\n    n_unk = sum(is.na(outcome), na.rm=TRUE),\n\n    \n    # proportions per hospital\n    p_died = n_died / n_rows,\n    p_alive = n_alive / n_rows,\n    p_unk = n_unk / n_rows\n  ) %>% \n  \n  # pivot the proportions columns so that they are condensed to two columns (category and value)\n  pivot_longer(starts_with(\"p_\"), names_to = \"proportion_cat\")\n\nproportion_outcome## # A tibble: 18 x 7\r\n##    hospital                             n_rows n_died n_alive n_unk proportion_cat value\r\n##    <chr>                                 <int>  <int>   <int> <int> <chr>          <dbl>\r\n##  1 Central Hospital                        454    193     165    96 p_died         0.425\r\n##  2 Central Hospital                        454    193     165    96 p_alive        0.363\r\n##  3 Central Hospital                        454    193     165    96 p_unk          0.211\r\n##  4 Military Hospital                       896    399     309   188 p_died         0.445\r\n##  5 Military Hospital                       896    399     309   188 p_alive        0.345\r\n##  6 Military Hospital                       896    399     309   188 p_unk          0.210\r\n##  7 Missing                                1469    611     514   344 p_died         0.416\r\n##  8 Missing                                1469    611     514   344 p_alive        0.350\r\n##  9 Missing                                1469    611     514   344 p_unk          0.234\r\n## 10 Other                                   885    395     290   200 p_died         0.446\r\n## 11 Other                                   885    395     290   200 p_alive        0.328\r\n## 12 Other                                   885    395     290   200 p_unk          0.226\r\n## 13 Port Hospital                          1762    785     579   398 p_died         0.446\r\n## 14 Port Hospital                          1762    785     579   398 p_alive        0.329\r\n## 15 Port Hospital                          1762    785     579   398 p_unk          0.226\r\n## 16 St. Mark's Maternity Hospital (SMMH)    422    199     126    97 p_died         0.472\r\n## 17 St. Mark's Maternity Hospital (SMMH)    422    199     126    97 p_alive        0.299\r\n## 18 St. Mark's Maternity Hospital (SMMH)    422    199     126    97 p_unk          0.230\nggplot(data = proportion_outcome)+\n  geom_col(mapping = aes(x = hospital, y = value, fill = proportion_cat))"},{"path":"ggplot-basics.html","id":"geom_histogram","chapter":"1 ggplot basics","heading":"geom_histogram()","text":"Histograms may look like bar charts, distinct measure distribution continuous variable. spaces “bars”, one column provided geom_histogram(). arguments specific histograms bin_width = breaks = specify data binned. page [Epidemic curves] provides additional detail.can plot traditional histogram geom_histogram() (y-axis represents counts per bin) relative density geom_density() (y-axis represents proportion rows value):","code":"\n# raw counts per bin\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = date_onset))\n\n# density plot\nggplot(data = linelist)+\n  geom_density(mapping = aes(x = date_onset))"},{"path":"ggplot-basics.html","id":"piping-into-ggplot2","chapter":"1 ggplot basics","heading":"1.13 Piping into ggplot2","text":"using pipes clean transform data, easy pass transformed data ggplot(). pipes pass dataset function--function transition + ggplot() function called. Note case, need specify data = argument, automatically defined piped-dataset.might look:","code":"\nlinelist %>%                                                     # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )"},{"path":"ggplot-basics.html","id":"exporting-plots","chapter":"1 ggplot basics","heading":"1.14 Exporting plots","text":"Exporting ggplots made easy ggsave() function ggplot2. can work two ways, either:Specify name plot object, file path name extension\r\nexample: ggsave(my_plot, \"Documents/work/plots/my_plot.png\")\r\nexample: ggsave(my_plot, \"Documents/work/plots/my_plot.png\")Save last plot printed\r\nexample: ggsave(\"Documents/work/plots/my_plot.png\")\r\nexample: ggsave(\"Documents/work/plots/my_plot.png\")can export png, pdf, jpeg, tiff, bmp, svg, several file types, specifying file extension file path.can also specify arguments width =, height =, units = (either “”, “cm”, “mm”). can also specify dpi = number plot resolution (e.g. 300). See function details entering ?ggsave reading documentation online.","code":""},{"path":"ggplot-basics.html","id":"resources","chapter":"1 ggplot basics","heading":"1.15 Resources","text":"R Data Science pages data visualization graphics communicaton","code":""}]
