[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"for-applied-epidemiology-and-public-health","chapter":"","heading":"For applied epidemiology and public health","text":"handbook strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?community-driven, written epidemiologists epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"contact-us","chapter":"","heading":"Contact us","text":"Structured feedback formEmail us epiRhandbook@gmail.comSubmit issues pull requests Github repositoryTwitter handle @epirhandbook","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Wayne Enanoria, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Manual Albela Miranda, Molly Mantus, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook project received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.Contributor code","code":""},{"path":"grouping-data.html","id":"grouping-data","chapter":"1 Grouping data","heading":"1 Grouping data","text":"page covers group aggregate data descriptive analysis. makes use tidyverse family packages common easy--use functions.Grouping data core component data management analysis. Grouped data statistically summarised group, can plotted group. Functions dplyr package (part tidyverse) make grouping subsequent operations quite easy.page address following topics:Group data group_by() functionUn-group datasummarise() grouped data statisticsThe difference count() tally()arrange() applied grouped datafilter() applied grouped datamutate() applied grouped dataselect() applied grouped dataThe base R aggregate() command alternative","code":""},{"path":"grouping-data.html","id":"preparation","chapter":"1 Grouping data","heading":"1.1 Preparation","text":"","code":""},{"path":"grouping-data.html","id":"load-packages","chapter":"1 Grouping data","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,       # to import data\n  here,      # to locate files\n  tidyverse, # to clean, handle, and plot the data (includes dplyr)\n  janitor)   # adding total rows and columns"},{"path":"grouping-data.html","id":"import-data","chapter":"1 Grouping data","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist:","code":"\nlinelist <- import(\"linelist_cleaned.rds\")"},{"path":"grouping-data.html","id":"grouping","chapter":"1 Grouping data","heading":"1.2 Grouping","text":"function group_by() dplyr groups rows unique values column specified . multiple columns specified, rows grouped unique combinations values across columns. unique value (combination values) constitutes group. Subsequent changes dataset calculations can performed within context group.example, command takes linelist groups rows unique values column outcome, saving output new data frame ll_by_outcome. grouping column(s) placed inside parentheses function group_by().Note perceptible change dataset running group_by(), another dplyr verb mutate(), summarise(), arrange() applied “grouped” data frame.can however “see” groupings printing data frame. print grouped data frame, see transformed tibble class object , printed, displays groupings applied many groups - written just header row.","code":"\nll_by_outcome <- linelist %>% \n  group_by(outcome)\n# print to see which groups are active\nll_by_outcome## # A tibble: 5,888 x 30\r\n## # Groups:   outcome [3]\r\n##    case_id generation date_infection date_onset date_hospitalisation date_outcome outcome gender   age age_unit age_years\r\n##    <chr>        <dbl> <date>         <date>     <date>               <date>       <chr>   <chr>  <dbl> <chr>        <dbl>\r\n##  1 5fe599           4 2014-05-08     2014-05-13 2014-05-15           NA           <NA>    m          2 years            2\r\n##  2 8689b7           4 NA             2014-05-13 2014-05-14           2014-05-18   Recover f          3 years            3\r\n##  3 11f8ea           2 NA             2014-05-16 2014-05-18           2014-05-30   Recover m         56 years           56\r\n##  4 b8812a           3 2014-05-04     2014-05-18 2014-05-20           NA           <NA>    f         18 years           18\r\n##  5 893f25           3 2014-05-18     2014-05-21 2014-05-22           2014-05-29   Recover m          3 years            3\r\n##  6 be99c8           3 2014-05-03     2014-05-22 2014-05-23           2014-05-24   Recover f         16 years           16\r\n##  7 07e3e8           4 2014-05-22     2014-05-27 2014-05-29           2014-06-01   Recover f         16 years           16\r\n##  8 369449           4 2014-05-28     2014-06-02 2014-06-03           2014-06-07   Death   f          0 years            0\r\n##  9 f393b4           4 NA             2014-06-05 2014-06-06           2014-06-18   Recover m         61 years           61\r\n## 10 1389ca           4 NA             2014-06-05 2014-06-07           2014-06-09   Death   f         27 years           27\r\n## # ... with 5,878 more rows, and 19 more variables: age_cat <fct>, age_cat5 <fct>, hospital <chr>, lon <dbl>, lat <dbl>,\r\n## #   infector <chr>, source <chr>, wt_kg <dbl>, ht_cm <dbl>, ct_blood <dbl>, fever <chr>, chills <chr>, cough <chr>,\r\n## #   aches <chr>, vomit <chr>, temp <dbl>, time_admission <chr>, bmi <dbl>, days_onset_hosp <dbl>"},{"path":"grouping-data.html","id":"unique-groups","chapter":"1 Grouping data","heading":"Unique groups","text":"groups created reflect unique combination values across grouping columns.see groups number rows group, pass grouped data tally(). see just unique groups without counts can pass group_keys().See three unique values grouping column outcome: “Death”, “Recover”, NA. See 2582 deaths, 1983 recoveries, 1323 outcome recorded.can group one column. , data frame grouped outcome gender, tallied. Note unique combination outcome gender registered group - including missing values either column.","code":"\nlinelist %>% \n  group_by(outcome) %>% \n  tally()## # A tibble: 3 x 2\r\n##   outcome     n\r\n##   <chr>   <int>\r\n## 1 Death    2582\r\n## 2 Recover  1983\r\n## 3 <NA>     1323\nlinelist %>% \n  group_by(outcome, gender) %>% \n  tally()## # A tibble: 9 x 3\r\n## # Groups:   outcome [3]\r\n##   outcome gender     n\r\n##   <chr>   <chr>  <int>\r\n## 1 Death   f       1227\r\n## 2 Death   m       1228\r\n## 3 Death   <NA>     127\r\n## 4 Recover f        953\r\n## 5 Recover m        950\r\n## 6 Recover <NA>      80\r\n## 7 <NA>    f        627\r\n## 8 <NA>    m        625\r\n## 9 <NA>    <NA>      71"},{"path":"grouping-data.html","id":"new-columns","chapter":"1 Grouping data","heading":"New columns","text":"can also create new grouping column within group_by() statement. equivalent calling mutate() group_by(). quick tabulation style can handy, clarity code consider creating column mutate() step piping group_by().","code":"\n# group dat based on a binary column created *within* the group_by() command\nlinelist %>% \n  group_by(\n    age_class = ifelse(age >= 18, \"adult\", \"child\")) %>% \n  tally(sort = T)## # A tibble: 3 x 2\r\n##   age_class     n\r\n##   <chr>     <int>\r\n## 1 child      3618\r\n## 2 adult      2184\r\n## 3 <NA>         86"},{"path":"grouping-data.html","id":"adddrop-grouping-columns","chapter":"1 Grouping data","heading":"Add/drop grouping columns","text":"default, run group_by() data already grouped, old groups removed new one(s) apply. want add new groups existing ones, include argument .add=TRUE.** Keep groups**group column class factor may levels factor currently present data. group column, default non-present levels dropped included groups. change levels appear groups (even present data), set .drop = FALSE group_by() command.","code":"\n# Grouped by outcome\nby_outcome <- linelist %>% \n  group_by(outcome)\n\n# Add grouping by gender in addition\nby_outcome_gender <- by_outcome %>% \n  group_by(gender, .add = TRUE)"},{"path":"grouping-data.html","id":"un-group","chapter":"1 Grouping data","heading":"1.3 Un-group","text":"Data grouped remain grouped specifically ungrouped via ungroup(). forget ungroup, can lead incorrect calculations! example removing groupings:can also remove grouping specific columns, placing column name inside ungroup().NOTE: verb count() automatically ungroups data counting.","code":"\nlinelist %>% \n  group_by(outcome, gender) %>% \n  tally() %>% \n  ungroup()\nlinelist %>% \n  group_by(outcome, gender) %>% \n  tally() %>% \n  ungroup(gender) # remove the grouping by gender, leave grouping by outcome"},{"path":"grouping-data.html","id":"group_summarise","chapter":"1 Grouping data","heading":"1.4 Summarise","text":"See dplyr section [Descriptive tables] page detailed description produce summary tables summarise(). briefly address behavior changes applied grouped data.dplyr function summarise() (summarize()) takes data frame converts new summary data frame, columns containing summary statistics define. ungrouped data frame, summary statistics calculated rows. Applying summarise() grouped data produces summary statistics group.syntax summarise() provide name(s) new summary column(s), equals sign, statistical function apply data, shown . example, min(), max(), median(), sd(). Within statistical function, list column operated relevant argument (e.g. na.rm = TRUE). can use sum() count number rows meet logical criteria (double equals ==).example summarise() applied without grouped data. statistics returned produced entire dataset.contrast, summarise() statement applied grouped data. statistics calculated outcome group. Note grouping columns carry new data frame.TIP: summarise function works UK US spelling - summarise() summarize() call function.","code":"\n# summary statistics on ungrouped linelist\nlinelist %>% \n  summarise(\n    n_cases  = n(),\n    mean_age = mean(age_years, na.rm=T),\n    max_age  = max(age_years, na.rm=T),\n    min_age  = min(age_years, na.rm=T),\n    n_males  = sum(gender == \"m\", na.rm=T))##   n_cases mean_age max_age min_age n_males\r\n## 1    5888 16.01831      84       0    2803\n# summary statistics on grouped linelist\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(\n    n_cases  = n(),\n    mean_age = mean(age_years, na.rm=T),\n    max_age  = max(age_years, na.rm=T),\n    min_age  = min(age_years, na.rm=T),\n    n_males    = sum(gender == \"m\", na.rm=T))## # A tibble: 3 x 6\r\n##   outcome n_cases mean_age max_age min_age n_males\r\n##   <chr>     <int>    <dbl>   <dbl>   <dbl>   <int>\r\n## 1 Death      2582     15.9      76       0    1228\r\n## 2 Recover    1983     16.1      84       0     950\r\n## 3 <NA>       1323     16.2      69       0     625"},{"path":"grouping-data.html","id":"counts-and-tallies","chapter":"1 Grouping data","heading":"1.5 Counts and tallies","text":"count() tally() provide similar functionality different. Read distinction tally() count() ","code":""},{"path":"grouping-data.html","id":"tally","chapter":"1 Grouping data","heading":"tally()","text":"tally() shorthand summarise(n = n()), group data. Thus, achieve grouped tallys must follow group_by() command. can add sort = TRUE see largest groups first.","code":"\nlinelist %>% \n  tally()##      n\r\n## 1 5888\nlinelist %>% \n  group_by(outcome) %>% \n  tally(sort = TRUE)## # A tibble: 3 x 2\r\n##   outcome     n\r\n##   <chr>   <int>\r\n## 1 Death    2582\r\n## 2 Recover  1983\r\n## 3 <NA>     1323"},{"path":"grouping-data.html","id":"count","chapter":"1 Grouping data","heading":"count()","text":"contrast, count() following:applies group_by() specified column(s)applies summarise() returns column n number rows per groupapplies ungroup()Just like group_by() can create new column within count() command:count() can called multiple times, functionality “rolling ”. example, summarise number hospitals present gender, run following. Note, name final column changed default “n” clarity (name  =).","code":"\nlinelist %>% \n  count(outcome)##   outcome    n\r\n## 1   Death 2582\r\n## 2 Recover 1983\r\n## 3    <NA> 1323\nlinelist %>% \n  count(age_class = ifelse(age >= 18, \"adult\", \"child\"), sort = T)##   age_class    n\r\n## 1     child 3618\r\n## 2     adult 2184\r\n## 3      <NA>   86\nlinelist %>% \n  # produce counts by unique outcome-gender groups\n  count(gender, hospital) %>% \n  # gather rows by gender (3) and count number of hospitals per gender (6)\n  count(gender, name = \"hospitals per gender\" ) ##   gender hospitals per gender\r\n## 1      f                    6\r\n## 2      m                    6\r\n## 3   <NA>                    6"},{"path":"grouping-data.html","id":"add-counts","chapter":"1 Grouping data","heading":"Add counts","text":"contrast count() summarise(), can use add_count() add new column n counts rows per group retaining data frame columns.means group’s count number, new column n, printed row group. demonstration purposes, add column re-arrange columns easier viewing. See section filter group size another example.","code":"\nlinelist %>% \n  as_tibble() %>%                   # convert to tibble for nicer printing \n  add_count(hospital) %>%           # add column n with counts by hospital\n  select(hospital, n, everything()) # re-arrange for demo purposes## # A tibble: 5,888 x 31\r\n##    hospital     n case_id generation date_infection date_onset date_hospitalis~ date_outcome outcome gender   age age_unit\r\n##    <chr>    <int> <chr>        <dbl> <date>         <date>     <date>           <date>       <chr>   <chr>  <dbl> <chr>   \r\n##  1 Other      885 5fe599           4 2014-05-08     2014-05-13 2014-05-15       NA           <NA>    m          2 years   \r\n##  2 Missing   1469 8689b7           4 NA             2014-05-13 2014-05-14       2014-05-18   Recover f          3 years   \r\n##  3 St. Mar~   422 11f8ea           2 NA             2014-05-16 2014-05-18       2014-05-30   Recover m         56 years   \r\n##  4 Port Ho~  1762 b8812a           3 2014-05-04     2014-05-18 2014-05-20       NA           <NA>    f         18 years   \r\n##  5 Militar~   896 893f25           3 2014-05-18     2014-05-21 2014-05-22       2014-05-29   Recover m          3 years   \r\n##  6 Port Ho~  1762 be99c8           3 2014-05-03     2014-05-22 2014-05-23       2014-05-24   Recover f         16 years   \r\n##  7 Missing   1469 07e3e8           4 2014-05-22     2014-05-27 2014-05-29       2014-06-01   Recover f         16 years   \r\n##  8 Missing   1469 369449           4 2014-05-28     2014-06-02 2014-06-03       2014-06-07   Death   f          0 years   \r\n##  9 Missing   1469 f393b4           4 NA             2014-06-05 2014-06-06       2014-06-18   Recover m         61 years   \r\n## 10 Missing   1469 1389ca           4 NA             2014-06-05 2014-06-07       2014-06-09   Death   f         27 years   \r\n## # ... with 5,878 more rows, and 19 more variables: age_years <dbl>, age_cat <fct>, age_cat5 <fct>, lon <dbl>, lat <dbl>,\r\n## #   infector <chr>, source <chr>, wt_kg <dbl>, ht_cm <dbl>, ct_blood <dbl>, fever <chr>, chills <chr>, cough <chr>,\r\n## #   aches <chr>, vomit <chr>, temp <dbl>, time_admission <chr>, bmi <dbl>, days_onset_hosp <dbl>"},{"path":"grouping-data.html","id":"add-totals","chapter":"1 Grouping data","heading":"Add totals","text":"easily add total sum rows columns using tally() count(), see janitor section Descriptive tables page. package offers functions like adorn_totals() adorn_percentages() add totals convert show percentages. brief example:add complex totals rows involve summary statistics sums, see section Descriptive Tables page.","code":"\nlinelist %>%                                  # case linelist\n  tabyl(age_cat, gender) %>%                  # cross-tabulate counts of two columns\n  adorn_totals(where = \"row\") %>%             # add a total row\n  adorn_percentages(denominator = \"col\") %>%  # convert to proportions with column denominator\n  adorn_pct_formatting() %>%                  # convert proportions to percents\n  adorn_ns(position = \"front\") %>%            # display as: \"count (percent)\"\n  adorn_title(                                # adjust titles\n    row_name = \"Age Category\",\n    col_name = \"Gender\")##                      Gender                           \r\n##  Age Category             f             m          NA_\r\n##           0-4  640  (22.8%)  416  (14.8%)  39  (14.0%)\r\n##           5-9  641  (22.8%)  412  (14.7%)  42  (15.1%)\r\n##         10-14  518  (18.5%)  383  (13.7%)  40  (14.4%)\r\n##         15-19  359  (12.8%)  364  (13.0%)  20   (7.2%)\r\n##         20-29  468  (16.7%)  575  (20.5%)  30  (10.8%)\r\n##         30-49  179   (6.4%)  557  (19.9%)  18   (6.5%)\r\n##         50-69    2   (0.1%)   91   (3.2%)   2   (0.7%)\r\n##           70+    0   (0.0%)    5   (0.2%)   1   (0.4%)\r\n##          <NA>    0   (0.0%)    0   (0.0%)  86  (30.9%)\r\n##         Total 2807 (100.0%) 2803 (100.0%) 278 (100.0%)"},{"path":"grouping-data.html","id":"grouping-by-date","chapter":"1 Grouping data","heading":"1.6 Grouping by date","text":"grouping data date, must (create) column date unit interest - example “day”, “epiweek”, “month”, etc. can make column using floor_date() lubridate, explained Epidemiological weeks section [Working dates] page. column, can use count() dplyr group rows unique date values achieve aggregate counts.One additional step common date situations, “fill-” dates sequence present data. Use complete() tidyr aggregated date series complete including possible date units within range. Without step, week cases reported might appear data!Within complete() re-define date column sequence dates seq.Date() minimum maximum - thus dates expanded. default, case count values new “expanded” rows NA. can set 0 using fill = argument complete(), expects named list (counts column named n, provide fill = list(n = 0). See ?complete details Working dates page example.","code":""},{"path":"grouping-data.html","id":"linelist-cases-into-days","chapter":"1 Grouping data","heading":"Linelist cases into days","text":"example grouping cases days without using complete(). Note first rows skip dates cases.add complete() command ensure every day range represented.","code":"\ndaily_counts <- linelist %>% \n  filter(!is.na(date_onset)) %>%        # remove that were missing date_onset\n  count(date_onset)                     # count number of rows per unique date\ndaily_counts <- linelist %>% \n  filter(!is.na(date_onset)) %>%                  # remove case missing date_onset\n  count(date_onset) %>%                           # count number of rows per unique date\n  complete(                                       # ensure all days appear even if no cases\n    date_onset = seq.Date(                          # re-define date colume as daily sequence of dates\n      from = min(date_onset, na.rm=T), \n      to = max(date_onset, na.rm=T),\n      by = \"day\"),\n    fill = list(n = 0))                             # set new filled-in rows to display 0 in column n (not NA as default) "},{"path":"grouping-data.html","id":"linelist-cases-into-weeks","chapter":"1 Grouping data","heading":"Linelist cases into weeks","text":"principle can applied weeks. First create new column week case using floor_date() unit = \"week\". , use count() achieve weekly case counts. Finish complete() ensure weeks represented, even contain cases.first 50 rows resulting data frame:","code":"\n# Make dataset of weekly case counts\nweekly_counts <- linelist %>% \n  filter(!is.na(date_onset)) %>%          # remove cases missing date_onset\n  mutate(week = lubridate::floor_date(date_onset, unit = \"week\")) %>%  # new column of week of onset\n  count(week) %>%                         # group data by week and count rows per group\n  complete(                               # ensure all days appear even if no cases\n    week = seq.Date(                      # re-define date colume as daily sequence of dates\n      from = min(week, na.rm=T), \n      to = max(week, na.rm=T),\n      by = \"week\"),\n    fill = list(n = 0))                   # set new filled-in rows to display 0 in column n (not NA as default) "},{"path":"grouping-data.html","id":"linelist-cases-into-months","chapter":"1 Grouping data","heading":"Linelist cases into months","text":"aggregate cases months, use floor_date() lubridate package, argument unit = \"months\". rounds date 1st month. output class Date. Note complete() step also use = \"months\".","code":"\n# Make dataset of monthly case counts\nmonthly_counts <- linelist %>% \n  filter(!is.na(date_onset)) %>% \n  mutate(month = lubridate::floor_date(date_onset, unit = \"months\")) %>%  # new column, 1st of month of onset\n  count(month) %>%                          # count cases by month\n  complete(\n    month = seq.Date(\n      min(month, na.rm=T),     # include all months with no cases reported\n      max(month, na.rm=T),\n      by=\"month\"),\n    fill = list(n = 0))"},{"path":"grouping-data.html","id":"daily-counts-into-weeks","chapter":"1 Grouping data","heading":"Daily counts into weeks","text":"aggregate daily counts weekly counts, use floor_date() . However, use group_by() summarize() instead count() need sum() daily case counts instead just counting number rows per week.","code":""},{"path":"grouping-data.html","id":"daily-counts-into-months","chapter":"1 Grouping data","heading":"Daily counts into months","text":"aggregate daily counts months counts, use floor_date() unit = \"month\" . However, use group_by() summarize() instead count() need sum() daily case counts instead just counting number rows per month.","code":""},{"path":"grouping-data.html","id":"arranging-grouped-data","chapter":"1 Grouping data","heading":"1.7 Arranging grouped data","text":"Using dplyr verb arrange() order rows data frame behaves data grouped, unless set argument .by_group =TRUE. case rows ordered first grouping columns columns specify arrange().","code":""},{"path":"grouping-data.html","id":"filter-on-grouped-data","chapter":"1 Grouping data","heading":"1.8 Filter on grouped data","text":"","code":""},{"path":"grouping-data.html","id":"filter","chapter":"1 Grouping data","heading":"filter()","text":"applied conjunction functions evaluate data frame (like max(), min(), mean()), functions now applied groups. example, want filter keep rows patients median age, now apply per group - filtering keep rows group’s median age.","code":""},{"path":"grouping-data.html","id":"slice-rows-per-group","chapter":"1 Grouping data","heading":"Slice rows per group","text":"dplyr function slice(), filters rows based position data, can also applied per group. Remember account sorting data within group get desired “slice”.example, retrieve latest 5 admissions hospital:Group linelist column hospitalArrange records latest earliest date_hospitalisation within hospital groupSlice retrieve first 5 rows hospitalslice_head() - selects n rows topslice_tail() - selects n rows endslice_sample() - randomly selects n rowsslice_min() - selects n rows highest values order_by = column, use with_ties = TRUE keep tiesslice_max() - selects n rows lowest values order_by = column, use with_ties = TRUE keep tiesSee [De-duplication] page examples detail slice().","code":"\nlinelist %>%\n  group_by(hospital) %>%\n  arrange(hospital, date_hospitalisation) %>%\n  slice_head(n = 5) %>% \n  arrange(hospital) %>%                            # for display\n  select(case_id, hospital, date_hospitalisation)  # for display## # A tibble: 30 x 3\r\n## # Groups:   hospital [6]\r\n##    case_id hospital          date_hospitalisation\r\n##    <chr>   <chr>             <date>              \r\n##  1 20b688  Central Hospital  2014-05-06          \r\n##  2 d58402  Central Hospital  2014-05-10          \r\n##  3 b8f2fd  Central Hospital  2014-05-13          \r\n##  4 acf422  Central Hospital  2014-05-28          \r\n##  5 275cc7  Central Hospital  2014-05-28          \r\n##  6 d1fafd  Military Hospital 2014-04-17          \r\n##  7 974bc1  Military Hospital 2014-05-13          \r\n##  8 6a9004  Military Hospital 2014-05-13          \r\n##  9 09e386  Military Hospital 2014-05-14          \r\n## 10 865581  Military Hospital 2014-05-15          \r\n## # ... with 20 more rows"},{"path":"grouping-data.html","id":"group_filter_grp_size","chapter":"1 Grouping data","heading":"Filter on group size","text":"function add_count() adds column n original data giving number rows row’s group.Shown , add_count() applied column hospital, values new column n reflect number rows row’s hospital group. Note values column n repeated. example , column name n changed using name = within add_count(). demonstration purposes re-arrange columns select().becomes easy filter case rows hospitalized “small” hospital, say, hospital admitted fewer 500 patients:","code":"\nlinelist %>% \n  as_tibble() %>% \n  add_count(hospital) %>%          # add \"number of rows admitted to same hospital as this row\" \n  select(hospital, n, everything())## # A tibble: 5,888 x 31\r\n##    hospital     n case_id generation date_infection date_onset date_hospitalis~ date_outcome outcome gender   age age_unit\r\n##    <chr>    <int> <chr>        <dbl> <date>         <date>     <date>           <date>       <chr>   <chr>  <dbl> <chr>   \r\n##  1 Other      885 5fe599           4 2014-05-08     2014-05-13 2014-05-15       NA           <NA>    m          2 years   \r\n##  2 Missing   1469 8689b7           4 NA             2014-05-13 2014-05-14       2014-05-18   Recover f          3 years   \r\n##  3 St. Mar~   422 11f8ea           2 NA             2014-05-16 2014-05-18       2014-05-30   Recover m         56 years   \r\n##  4 Port Ho~  1762 b8812a           3 2014-05-04     2014-05-18 2014-05-20       NA           <NA>    f         18 years   \r\n##  5 Militar~   896 893f25           3 2014-05-18     2014-05-21 2014-05-22       2014-05-29   Recover m          3 years   \r\n##  6 Port Ho~  1762 be99c8           3 2014-05-03     2014-05-22 2014-05-23       2014-05-24   Recover f         16 years   \r\n##  7 Missing   1469 07e3e8           4 2014-05-22     2014-05-27 2014-05-29       2014-06-01   Recover f         16 years   \r\n##  8 Missing   1469 369449           4 2014-05-28     2014-06-02 2014-06-03       2014-06-07   Death   f          0 years   \r\n##  9 Missing   1469 f393b4           4 NA             2014-06-05 2014-06-06       2014-06-18   Recover m         61 years   \r\n## 10 Missing   1469 1389ca           4 NA             2014-06-05 2014-06-07       2014-06-09   Death   f         27 years   \r\n## # ... with 5,878 more rows, and 19 more variables: age_years <dbl>, age_cat <fct>, age_cat5 <fct>, lon <dbl>, lat <dbl>,\r\n## #   infector <chr>, source <chr>, wt_kg <dbl>, ht_cm <dbl>, ct_blood <dbl>, fever <chr>, chills <chr>, cough <chr>,\r\n## #   aches <chr>, vomit <chr>, temp <dbl>, time_admission <chr>, bmi <dbl>, days_onset_hosp <dbl>\nlinelist %>% \n  add_count(hospital) %>% \n  filter(n < 500)"},{"path":"grouping-data.html","id":"mutate-on-grouped-data","chapter":"1 Grouping data","heading":"1.9 Mutate on grouped data","text":"retain columns rows (summarise) add new column containing group statistics, use mutate() group_by() instead summarise().useful want group statistics original dataset columns present - e.g. calculations compare one row group.example, code calculates difference row’s delay--admission median delay hospital. steps :Group data hospitalUse column days_onset_hosp (delay hospitalisation) create new column containing mean delay hospital rowCalculate difference two columnsWe select() certain columns display, demonstration purposes.","code":"\nlinelist %>% \n  # group data by hospital (no change to linelist yet)\n  group_by(hospital) %>% \n  \n  # new columns\n  mutate(\n    # mean days to admission per hospital (rounded to 1 decimal)\n    group_delay_admit = round(mean(days_onset_hosp, na.rm=T), 1),\n    \n    # difference between row's delay and mean delay at their hospital (rounded to 1 decimal)\n    diff_to_group     = round(days_onset_hosp - group_delay_admit, 1)) %>%\n  \n  # select certain rows only - for demonstration/viewing purposes\n  select(case_id, hospital, days_onset_hosp, group_delay_admit, diff_to_group)## # A tibble: 5,888 x 5\r\n## # Groups:   hospital [6]\r\n##    case_id hospital                             days_onset_hosp group_delay_admit diff_to_group\r\n##    <chr>   <chr>                                          <dbl>             <dbl>         <dbl>\r\n##  1 5fe599  Other                                              2               2             0  \r\n##  2 8689b7  Missing                                            1               2.1          -1.1\r\n##  3 11f8ea  St. Mark's Maternity Hospital (SMMH)               2               2.1          -0.1\r\n##  4 b8812a  Port Hospital                                      2               2.1          -0.1\r\n##  5 893f25  Military Hospital                                  1               2.1          -1.1\r\n##  6 be99c8  Port Hospital                                      1               2.1          -1.1\r\n##  7 07e3e8  Missing                                            2               2.1          -0.1\r\n##  8 369449  Missing                                            1               2.1          -1.1\r\n##  9 f393b4  Missing                                            1               2.1          -1.1\r\n## 10 1389ca  Missing                                            2               2.1          -0.1\r\n## # ... with 5,878 more rows"},{"path":"grouping-data.html","id":"select-on-grouped-data","chapter":"1 Grouping data","heading":"1.10 Select on grouped data","text":"verb select() works grouped data, grouping columns always included (even mentioned select()). want grouping columns, use ungroup() first.","code":""},{"path":"grouping-data.html","id":"resources","chapter":"1 Grouping data","heading":"1.11 Resources","text":"useful resources information:can perform summary function grouped data; see RStudio data transformation cheat sheetThe Data Carpentry page dplyr\r\ntidyverse reference pages group_by() groupingThis page Data manipulationSummarize conditions dplyr","code":""}]
