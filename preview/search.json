[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"r-for-applied-epi-and-public-health","chapter":"","heading":"R for applied ‘epi’ and public health","text":"handbook strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?community-driven - written epidemiologists epidemiologists spare time leveraging experience local, national, academic, emergency settingsIt uses practical epi examples - cleaning case linelists, making transmission chains epidemic curves, automated reports dashboards, modeling incidence making projections, demographic pyramids rate standardization, record matching, outbreak detection, survey analysis, survival analysis, GIS basics, contact tracing, phylogenetic trees…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Adjust font size browser zoom settingsOffline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"contact_us","chapter":"","heading":"Contact us","text":"Structured feedback formEmail us epiRhandbook@gmail.comSubmit issues Github repositoryTwitter handle @epiRhandbook","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Wayne Enanoria, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Manual Albela Miranda, Molly Mantus, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"publication received supportive funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). publication supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.Contributor code","code":""},{"path":"gis-basics.html","id":"gis-basics","chapter":"1 GIS basics","heading":"1 GIS basics","text":"","code":""},{"path":"gis-basics.html","id":"overview","chapter":"1 GIS basics","heading":"1.1 Overview","text":"Spatial aspects data can provide lot insights situation outbreak, answer questions :current disease hotspots?hotspots changed time?access health facilities? improvements needed?section, explore basic spatial data visualization methods using tmap ggplot2 packages.\r\nalso walk basic spatial data management querying methods sf package.","code":""},{"path":"gis-basics.html","id":"key-terms","chapter":"1 GIS basics","heading":"1.2 Key terms","text":"introduce key terminology. thorough introduction GIS spatial analysis, suggest review one longer tutorials courses listed References section.Geographic Information System (GIS) - GIS framework environment gathering, managing, analyzing, visualizing spatial data.","code":""},{"path":"gis-basics.html","id":"gis-software","chapter":"1 GIS basics","heading":"1.2.1 GIS software","text":"popular GIS software allow point--click interaction map development spatial analysis. tools comes advantages needing learn code ease manually selecting placing icons features map. two popular ones:ArcGIS - commercial GIS software developed company ESRI, popular quite expensiveQGIS - free open-source GIS software can almost anything ArcGIS can . can download QGIS hereUsing R GIS can seem intimidating first instead “point--click”, “command-line interface” (must code acquire desired outcome). However, major advantage need repetitively produce maps analysis reproducible.","code":""},{"path":"gis-basics.html","id":"spatial-data","chapter":"1 GIS basics","heading":"1.2.2 Spatial data","text":"two primary forms spatial data used GIS vector raster data:Vector Data - common format spatial data used GIS, vector data comprised geometric features vertices paths. Vector spatial data can divided three widely-used types:Points - point consists coordinate pair (x,y) representing specific location coordinate system. Points basic form spatial data, may used denote case (.e. patient home) location (.e. hospital) map.Points - point consists coordinate pair (x,y) representing specific location coordinate system. Points basic form spatial data, may used denote case (.e. patient home) location (.e. hospital) map.Lines - line composed two connected points. Lines length, may used denote things like roads rivers.Lines - line composed two connected points. Lines length, may used denote things like roads rivers.Polygons - polygon composed least three line segments connected points. Polygon features length (.e. perimeter area) well area measurement. Polygons may used note area (.e. village) structure (.e. actual area hospital).Polygons - polygon composed least three line segments connected points. Polygon features length (.e. perimeter area) well area measurement. Polygons may used note area (.e. village) structure (.e. actual area hospital).Raster Data - alternative format spatial data, raster data matrix cells (e.g. pixels) cell containing information height, temperature, slope, forest cover, etc. often aerial photographs, satellite imagery, etc. Rasters can also used “base maps” vector data.","code":""},{"path":"gis-basics.html","id":"visualizing-spatial-data","chapter":"1 GIS basics","heading":"1.2.3 Visualizing spatial data","text":"visually represent spatial data map, GIS software requires provide sufficient information different features , relation one another. using vector data, true use cases, information typically stored shapefile:Shapefiles - shapefile common data format storing “vector” spatial data consisting lines, points, polygons. single shapefile actually collection least three files - .shp, .shx, .dbf. sub-component files must present given directory (folder) shapefile readable. associated files can compressed ZIP folder sent via email download website.shapefile contain information features , well locate Earth’s surface. important Earth globe, maps typically two-dimensional; choices “flatten” spatial data can big impact look interpretation resulting map.Coordinate Reference Systems (CRS) - CRS coordinate-based system used locate geographical features Earth’s surface. key components:Coordinate System - many many different coordinate systems, make sure know system coordinates . Degrees latitude/longitude common, also see UTM coordinates.Coordinate System - many many different coordinate systems, make sure know system coordinates . Degrees latitude/longitude common, also see UTM coordinates.Units - Know units coordinate system (e.g. decimal degrees, meters)Units - Know units coordinate system (e.g. decimal degrees, meters)Datum - particular modeled version Earth. revised years, ensure map layers using datum.Datum - particular modeled version Earth. revised years, ensure map layers using datum.Projection - reference mathematical equation used project truly round earth onto flat surface (map).Projection - reference mathematical equation used project truly round earth onto flat surface (map).Remember can summarise spatial data without using mapping tools shown . Sometimes simple table geography (e.g. district, country, etc.) needed!","code":""},{"path":"gis-basics.html","id":"getting-started-with-gis","chapter":"1 GIS basics","heading":"1.3 Getting started with GIS","text":"couple key items need think make map. include:dataset – can spatial data format (shapefiles, noted ) may spatial format (instance just csv).dataset – can spatial data format (shapefiles, noted ) may spatial format (instance just csv).dataset spatial format also need reference dataset. Reference data consists spatial representation data related attributes, include material containing location address information specific features.\r\nworking pre-defined geographic boundaries (example, administrative regions), reference shapefiles often freely available download government agency data sharing organization. doubt, good place start Google “[regions] shapefile”\r\naddress information, latitude longitude, may need use geocoding engine get spatial reference data records.\r\ndataset spatial format also need reference dataset. Reference data consists spatial representation data related attributes, include material containing location address information specific features.working pre-defined geographic boundaries (example, administrative regions), reference shapefiles often freely available download government agency data sharing organization. doubt, good place start Google “[regions] shapefile”working pre-defined geographic boundaries (example, administrative regions), reference shapefiles often freely available download government agency data sharing organization. doubt, good place start Google “[regions] shapefile”address information, latitude longitude, may need use geocoding engine get spatial reference data records.address information, latitude longitude, may need use geocoding engine get spatial reference data records.idea want present information datasets target audience. many different types maps, important think type map best fits needs.idea want present information datasets target audience. many different types maps, important think type map best fits needs.","code":""},{"path":"gis-basics.html","id":"types-of-maps-for-visualizing-your-data","chapter":"1 GIS basics","heading":"1.3.1 Types of maps for visualizing your data","text":"Choropleth map - type thematic map colors, shading, patterns used represent geographic regions relation value attribute. instance larger value indicated darker colour smaller value. type map particularly useful visualizing variable changes across defined regions geopolitical areas.Case density heatmap - type thematic map colours used represent intensity value, however, use defined regions geopolitical boundaries group data. type map typically used showing ‘hot spots’ areas high density concentration points.Dot density map - thematic map type uses dots represent attribute values data. type map best used visualize scatter data visually scan clusters.Proportional symbols map (graduated symbols map) - thematic map similar choropleth map, instead using colour indicate value attribute uses symbol (usually circle) relation value. instance larger value indicated larger symbol smaller value. type map best used want visualize size quantity data across geographic regions.can also combine several different types visualizations show complex geographic patterns; example, map shows health facility catchment areas:Note: primary focus GIS page based context field outbreak response. Therefore contents page cover basic spatial data manipulations, visualizations, analyses.","code":""},{"path":"gis-basics.html","id":"preparation","chapter":"1 GIS basics","heading":"1.4 Preparation","text":"","code":""},{"path":"gis-basics.html","id":"load-packages","chapter":"1 GIS basics","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.can see overview R packages deal spatial data CRAN “Spatial Task View”.","code":"\npacman::p_load(\n  rio,           # to import data\n  here,          # to locate files\n  tidyverse,     # to clean, handle, and plot the data (includes ggplot2 package)\n  sf,            # to manage spatial data using a Simple Feature format\n  tmap,          # to produce simple maps, works for both interactive and static maps\n  janitor,       # to clean column names\n  OpenStreetMap, # to add OSM basemap in ggplot map\n  spdep          # spatial statistics\n  ) "},{"path":"gis-basics.html","id":"sample-case-data","chapter":"1 GIS basics","heading":"Sample case data","text":"demonstration purposes, work random sample 1000 cases simulated Ebola epidemic linelist dataframe (computationally, working fewer cases easier display handbook). want follow along, click download “clean” linelist (.rds file).Since taking random sample cases, results may look slightly different demonstrated run codes .dataset imported using import() function rio package. See page [Import export] various ways import data.Next select random sample 1000 rows using sample() base R.Now want convert linelist class dataframe, object class “sf” (spatial features). Given linelist two columns “lon” “lat” representing longitude latitude case’s residence, easy.use package sf (spatial features) function st_as_sf() create new object call linelist_sf. new object look essentially linelist, columns lon lat designated coordinate columns, coordinate reference system (CRS) assigned points displayed.original linelist dataframe looks like.\r\ndemonstration, use date_onset geometry (constructed longitude latitude fields ) columns.","code":"\n# import clean case linelist\n# linelist <- import(\"linelist_cleaned.xlsx\")  \n# generate 1000 random row numbers, from the number of rows in linelist\nsample_rows <- sample(nrow(linelist), 1000)\n\n# subset linelist to keep only the sample rows, and all columns\nlinelist <- linelist[sample_rows,]\n# Create sf object\nlinelist_sf <- linelist %>%\n     sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)\nDT::datatable(head(linelist_sf, 10), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )"},{"path":"gis-basics.html","id":"admin-boundary-shapefiles","chapter":"1 GIS basics","heading":"Admin boundary shapefiles","text":"Sierra Leone: Admin boundary shapefilesIn advance, downloaded administrative boundaries Sierra Leone Humanitarian Data Exchange (HDX) website .Now going following save Admin Level 3 shapefile R:Import shapefileClean column namesFilter rows keep areas interestTo import shapefile use read_sf() function sf. provided filepath via (). - case file within R project “data”, “gis”, “shp” subfolders, filename “sle_adm3.shp” (see pages [Import export] [R projects] information).Next use clean_names() janitor package standardize column names shapefile. also use filter() keep rows admin2name “Western Area Urban” “Western Area Rural”.can see shapefile looks import cleaning. Scroll right see columns admin level 0 (country), admin level 1, admin level 2, finally admin level 3. level character name pcode unique identifier code. pcode expands increasing admin level e.g. SL (Sierra Leone) -> SL04 (Western) -> SL0410 (Western Area Rural) -> SL040101 (Koya Rural).","code":"\nsle_adm3_raw <- sf::read_sf(here::here(\"data\", \"gis\", \"shp\", \"sle_adm3.shp\"))\n# ADM3 level clean\nsle_adm3 <- sle_adm3_raw %>%\n  janitor::clean_names() %>% # standardize column names\n  filter(admin2name %in% c(\"Western Area Urban\", \"Western Area Rural\")) # filter to keep certain areas"},{"path":"gis-basics.html","id":"population-data","chapter":"1 GIS basics","heading":"Population data","text":"Sierra Leone: Population ADM3Again, import data downloaded HDX (link ). time use import() load .csv file. also pass imported file clean_names() standardize column names.population file looks like. Scroll right see jurisdiction columns male population, female populaton, total population, population break-columns age group.","code":"\n# Population by ADM3\nsle_adm3_pop <- rio::import(here::here(\"data\", \"gis\", \"population\", \"sle_admpop_adm3_2020.csv\")) %>%\n  janitor::clean_names()"},{"path":"gis-basics.html","id":"health-facilities","chapter":"1 GIS basics","heading":"Health Facilities","text":"Sierra Leone: Health facility data OpenStreetMapAgain downloaded locations health facilities HDX .import shapefile read_sf(), clean column names, filter keep points tagged either “hospital”, “clinic”, “doctors”.resulting dataframe - scroll right see facility name coordinates.","code":"\n# OSM health facility shapefile\nsle_hf <- sf::read_sf(here::here(\"data\", \"gis\", \"shp\", \"sle_hf.shp\")) %>% \n  janitor::clean_names() %>%\n  filter(amenity %in% c(\"hospital\", \"clinic\", \"doctors\"))"},{"path":"gis-basics.html","id":"plotting-coordinates","chapter":"1 GIS basics","heading":"1.5 Plotting coordinates","text":"easiest way plot X-Y coordinates (longitude/latitude, points) draw points directly linelist_sf object created preparation section.package tmap offers simple mapping capabilities static (“plot” mode) interactive (“view” mode) just lines code. tmap syntax similar *ggplot2**, commands added +. Read detail vignette.set tmap mode. case use “plot” mode, produces static outputs., points plotted alone.tm_shape() provided linelist_sf objects. add points via tm_dots(), specifying size color. linelist_sf sf object, already designated two columns contain lat/long coordinates coordinate reference system (CRS):Alone, points tell us much. also map administrative boundaries:use tm_shape() (see documentation) instead providing case points shapefile, provide administrative boundary shapefile (polygons).bbox = argument (bbox stands “bounding box”) can specify coordinate boundaries. First show map display without bbox, .now points polygons together:read good comparison mapping options R, see blog post.","code":"\ntmap_mode(\"plot\") # choose either \"view\" or \"plot\"\n# Just the cases (points)\ntm_shape(linelist_sf) + tm_dots(size=0.08, col='blue')\n# Just the administrative boundaries (polygons)\ntm_shape(sle_adm3) +               # admin boundaries shapefile\n  tm_polygons(col = \"#F7F7F7\")+    # show polygons in light grey\n  tm_borders(col = \"#000000\",      # show borders with color and line weight\n             lwd = 2) +\n  tm_text(\"admin3name\")            # column text to display for each polygon\n\n\n# Same as above, but with zoom from bounding box\ntm_shape(sle_adm3,\n         bbox = c(-13.3, 8.43,    # corner\n                  -13.2, 8.5)) +  # corner\n  tm_polygons(col = \"#F7F7F7\") +\n  tm_borders(col = \"#000000\", lwd = 2) +\n  tm_text(\"admin3name\")\n# All together\ntm_shape(sle_adm3, bbox = c(-13.3, 8.43, -13.2, 8.5)) +     #\n  tm_polygons(col = \"#F7F7F7\") +\n  tm_borders(col = \"#000000\", lwd = 2) +\n  tm_text(\"admin3name\")+\ntm_shape(linelist_sf) +\n  tm_dots(size=0.08, col='blue') +\n  tm_layout(title = \"Distribution of Ebola cases\")"},{"path":"gis-basics.html","id":"spatial-joins","chapter":"1 GIS basics","heading":"1.6 Spatial joins","text":"","code":""},{"path":"gis-basics.html","id":"points-in-polygon","chapter":"1 GIS basics","heading":"Points in polygon","text":"Spatial assign administrative units casesThe case linelist contain information administrative units cases. Although ideal collect information initial data collection phase, can also assign administrative units individual cases based spatial relationships (.e. point intersects polygon).sf package offers various methods spatial joins. See documentation st_join method spatial join types reference., spatially intersect case locations (points) ADM3 boundaries (polygons):Begin linelist (points)Spatial join boundaries, setting type join “st_intersects”Use select() keep certain new administrative boundary columnsAll columns sle_adms added linelist! case now columns detailing ’s administrative units. example, want keep two new columns, select() old column names just two additional interest:, just display purposes can see first ten cases admin level 3 (ADM3) jurisdictions attached, based point spatially intersected polygon shapes.Now can describe cases administrative unit - something able spatial join!can also create bar plot case counts administrative unit.example, begin ggplot() linelist_adm, can apply factor functions like fct_infreq() orders bars frequency (see page [Factors] tips).","code":"\nlinelist_adm <- linelist_sf %>%\n  \n  # join the administrative boundary file to the linelist, based on spatial intersection\n  sf::st_join(sle_adm3, join = st_intersects)\nlinelist_adm <- linelist_sf %>%\n  \n  # join the administrative boundary file to the linelist, based on spatial intersection\n  sf::st_join(sle_adm3, join = st_intersects) %>% \n  \n  # Keep the old column names and two new admin ones of interest\n  select(names(linelist_sf), admin3name, admin3pcod)\n# Now you will see the ADM3 names attached to each case\nlinelist_adm %>% select(case_id, admin3name, admin3pcod)## Simple feature collection with 1000 features and 3 fields\r\n## Geometry type: POINT\r\n## Dimension:     XY\r\n## Bounding box:  xmin: -13.27276 ymin: 8.446206 xmax: -13.20545 ymax: 8.490523\r\n## Geodetic CRS:  WGS 84\r\n## First 10 features:\r\n##      case_id     admin3name admin3pcod                   geometry\r\n## 3345  46037e Mountain Rural   SL040102 POINT (-13.21806 8.477468)\r\n## 5072  9bfc0d Mountain Rural   SL040102 POINT (-13.21885 8.461156)\r\n## 678   5a25ce Mountain Rural   SL040102 POINT (-13.21425 8.466533)\r\n## 2570  cf7ef4 Mountain Rural   SL040102 POINT (-13.24075 8.451348)\r\n## 5325  137be7 Mountain Rural   SL040102 POINT (-13.20976 8.452983)\r\n## 4465  45ce63 Mountain Rural   SL040102 POINT (-13.21575 8.470915)\r\n## 4579  fe494f        West II   SL040207 POINT (-13.25829 8.484176)\r\n## 4412  d2c80d       West III   SL040208 POINT (-13.26054 8.457569)\r\n## 826   e59e91        West II   SL040207 POINT (-13.23527 8.460888)\r\n## 4217  a05b57       West III   SL040208 POINT (-13.25302 8.459773)\n# Make new dataframe containing counts of cases by administrative unit\ncase_adm3 <- linelist_adm %>%          # begin with linelist with new admin cols\n  as_tibble() %>%                      # convert to tibble for better display\n  group_by(admin3pcod, admin3name) %>% # group by admin unit, both by name and pcode \n  summarise(cases = n()) %>%           # summarize and count rows\n  arrange(desc(cases))                     # arrange in descending order\n\ncase_adm3## # A tibble: 10 x 3\r\n## # Groups:   admin3pcod [10]\r\n##    admin3pcod admin3name     cases\r\n##    <chr>      <chr>          <int>\r\n##  1 SL040102   Mountain Rural   276\r\n##  2 SL040208   West III         232\r\n##  3 SL040207   West II          168\r\n##  4 SL040204   East II          130\r\n##  5 SL040201   Central I         59\r\n##  6 SL040203   East I            59\r\n##  7 SL040206   West I            35\r\n##  8 SL040205   East III          22\r\n##  9 SL040202   Central II        16\r\n## 10 <NA>       <NA>               3\nggplot(\n  data = linelist_adm,                       # begin with linelist containing admin unit info\n  aes(x = fct_rev(fct_infreq(admin3name))))+ # x-axis is admin units, ordered by frequency (reversed)\n  geom_bar()+                                # create bars, height is number of rows\n  coord_flip()+                              # flip X and Y axes for easier reading of adm units\n  theme_classic()+                           # simplify background\n  labs(                                      # titles and labels\n    x = \"Admin level 3\",\n    y = \"Number of cases\",\n    title = \"Number of cases, by adminstative unit\",\n    caption = \"As determined by a spatial join, from 1000 randomly sampled cases from linelist\"\n  )"},{"path":"gis-basics.html","id":"nearest-neighbor","chapter":"1 GIS basics","heading":"Nearest neighbor","text":"Finding nearest health facility / catchment areaIt might useful know health facilities located relation disease hot spots.can use st_nearest_feature join method st_join() function (sf package) visualize closest health facility individual cases.begin shapefile linelist linelist_sfWe spatially join sle_hf, locations health facilities clinics (points)can see (first 50 rows) case now data nearest clinic/hospitalWe can see “Den Clinic” closest health facility ~30% cases.visualize results, can use tmap - time interactive mode easier viewing","code":"\n# Closest health facility to each case\nlinelist_sf_hf <- linelist_sf %>%                  # begin with linelist shapefile  \n  st_join(sle_hf, join = st_nearest_feature) %>%   # data from nearest clinic joined to case data \n  select(case_id, osm_id, name, amenity)           # keep columns of interest, including id, name, type, and geometry of healthcare facility\n# Count cases by health facility\nhf_catchment <- linelist_sf_hf %>%    # begin with linelist including nearest clinic data\n  as.data.frame() %>%                 # convert from shapefile to dataframe\n  group_by(name) %>%                  # group by name of clinic\n  summarise(case_n = n()) %>%         # count number of rows per clinic \n  arrange(desc(case_n))               # arrange in descending order\n\nhf_catchment                          # print to console## # A tibble: 8 x 2\r\n##   name                                  case_n\r\n##   <chr>                                  <int>\r\n## 1 Den Clinic                               363\r\n## 2 Shriners Hospitals for Children          312\r\n## 3 GINER HALL COMMUNITY HOSPITAL            189\r\n## 4 panasonic                                 54\r\n## 5 Princess Christian Maternity Hospital     32\r\n## 6 ARAB EGYPT CLINIC                         22\r\n## 7 MABELL HEALTH CENTER                      14\r\n## 8 <NA>                                      14\ntmap_mode(\"view\")   # set tmap mode to interactive  \n\n# plot the cases and clinic points \ntm_shape(linelist_sf_hf) +            # plot cases\n  tm_dots(size=0.08, col='name') +    # cases colored by closest clinic\ntm_shape(sle_hf) +                    # plot clinic facilities in large red dots\n  tm_dots(size=0.3, col='red') +      \n  tm_text(\"name\") +                   # overlay with name of facility\ntm_view(set.view = c(-13.2284, 8.4699, 13), # adjust zoom (center coords, zoom)\n        set.zoom.limits = c(13,14))"},{"path":"gis-basics.html","id":"buffers","chapter":"1 GIS basics","heading":"Buffers","text":"can also explore many cases located within 2.5km (~30 mins) walking distance closest health facility.Note: accurate distance calculations, better re-project sf object respective local map projection system UTM (Earth projected onto planar surface). example, simplicity stick World Geodetic System (WGS84) Geograhpic coordinate system (Earth represented spherical / round surface, therefore units decimal degrees). use general conversion : 1 decimal degree = ~111km.See information map projections coordinate systems esri article. blog talks different types map projection one can choose suitable projection depending area interest context map / analysis.First, create circular buffer radius ~2.5km around health facility. done function st_buffer() tmap. unit map lat/long decimal degrees, “0.02” interpreted. map coordinate system meters, number must provided meters.plot buffer zones :**Second, intersect buffers cases (points) using st_join() join type st_intersects*. , data buffers joined points intersect .Now can count results: 213 1000 cases intersect buffer (value missing), live 30 mins walk nearest health facility.can visualize results cases intersect buffer appear red.","code":"\nsle_hf_2k <- sle_hf %>%\n  st_buffer(dist=0.02)       # decimal degrees translating to approximately 2.5km \ntmap_mode(\"plot\")\n# Create circular buffers\ntm_shape(sle_hf_2k) +\n  tm_borders(col = \"red\", lwd = 2)\n# Intersect the cases with the buffers\nlinelist_sf_hf_2k <- linelist_sf_hf %>%\n  st_join(sle_hf_2k, join = st_intersects, left = TRUE) %>%\n  filter(osm_id.x==osm_id.y | is.na(osm_id.y)) %>%\n  select(case_id, osm_id.x, name.x, amenity.x, osm_id.y)\n# Cases which did not get intersected with any of the health facility buffers\nlinelist_sf_hf_2k %>% \n  filter(is.na(osm_id.y)) %>%\n  nrow()## [1] 213\ntmap_mode(\"view\")\n\n# First display the cases in points\ntm_shape(linelist_sf_hf) +\n  tm_dots(size=0.08, col='name') +\n  \n# Then overlay the health facitliy buffers in polylines\ntm_shape(sle_hf_2k) +\n  tm_borders(col = \"red\", lwd = 2) +\n\n# Highlight cases that are not part of any health facility buffers\n# in red dots  \ntm_shape(linelist_sf_hf_2k %>%  filter(is.na(osm_id.y))) +\n  tm_dots(size=0.1, col='red') +\ntm_view(set.view = c(-13.2284,8.4699, 13), set.zoom.limits = c(13,14))"},{"path":"gis-basics.html","id":"other-spatial-joins","chapter":"1 GIS basics","heading":"Other spatial joins","text":"Alternative values argument join include (documentation)st_contains_properlyst_containsst_covered_byst_coversst_crossesst_disjointst_equals_exactst_equalsst_is_within_distancest_nearest_featurest_overlapsst_touchesst_within","code":""},{"path":"gis-basics.html","id":"choropleth-maps","chapter":"1 GIS basics","heading":"1.7 Choropleth maps","text":"Choropleth maps can useful visualize data pre-defined area, usually administrative unit health area. outbreak response can help target resource allocation specific areas high incidence rates, example.Now administrative unit names assigned cases (see section spatial joins, ), can start mapping case counts area (choropleth maps).Since also population data ADM3, can add information case_adm3 table created previously.begin dataframe created previous step case_adm3, summary table administrative unit number cases.populaton data sle_adm3_pop joined using left_join() dplyr basis common values across column admin3pcod case_adm3 dataframe, column adm_pcode sle_adm3_pop dataframe. See page [Joining data]).select() applied new dataframe, keep useful columns - total total populationCases per 10,000 populaton calculated new column mutate()Join table ADM3 polygons shapefile mappingMapping resultsWe can also map incidence rates","code":"\n# Add population data and calculate cases per 10K population\ncase_adm3 <- case_adm3 %>% \n     left_join(sle_adm3_pop,                             # add columns from pop dataset\n               by = c(\"admin3pcod\" = \"adm3_pcode\")) %>%  # join based on common values across these two columns\n     select(names(case_adm3), total) %>%                 # keep only important columns, including total population\n     mutate(case_10kpop = round(cases/total * 10000, 3)) # make new column with case rate per 10000, rounded to 3 decimals\n\ncase_adm3                                                # print to console for viewing## # A tibble: 10 x 5\r\n## # Groups:   admin3pcod [10]\r\n##    admin3pcod admin3name     cases  total case_10kpop\r\n##    <chr>      <chr>          <int>  <int>       <dbl>\r\n##  1 SL040102   Mountain Rural   276  33993       81.2 \r\n##  2 SL040208   West III         232 210252       11.0 \r\n##  3 SL040207   West II          168 145109       11.6 \r\n##  4 SL040204   East II          130  99821       13.0 \r\n##  5 SL040201   Central I         59  69683        8.47\r\n##  6 SL040203   East I            59  68284        8.64\r\n##  7 SL040206   West I            35  60186        5.82\r\n##  8 SL040205   East III          22 500134        0.44\r\n##  9 SL040202   Central II        16  23874        6.70\r\n## 10 <NA>       <NA>               3     NA       NA\ncase_adm3_sf <- case_adm3 %>%                 # begin with cases & rate by admin unit\n  left_join(sle_adm3, by=\"admin3pcod\") %>%    # join to shapefile data by common column\n  select(objectid, admin3pcod,                # keep only certain columns of interest\n         admin3name = admin3name.x,           # clean name of one column\n         admin2name, admin1name,\n         cases, total, case_10kpop,\n         geometry) %>%                        # keep geometry so polygons can be plotted\n  st_as_sf()                                  # convert to shapefile\n# tmap mode\ntmap_mode(\"plot\")               # view static map\n\n# plot polygons\ntm_shape(case_adm3_sf) + \n        tm_polygons(\"cases\") +  # color by number of cases column\n        tm_text(\"admin3name\")   # name display\n# Cases per 10K population\ntmap_mode(\"plot\")             # static viewing mode\n\n# plot\ntm_shape(case_adm3_sf) +                # plot polygons\n  tm_polygons(\"case_10kpop\",            # color by column containing case rate\n              breaks=c(0, 10, 50, 100), # define break points for colors\n              palette = \"Purples\"       # use a purple color palette\n              ) +\n  tm_text(\"admin3name\")                 # display text"},{"path":"gis-basics.html","id":"basemaps","chapter":"1 GIS basics","heading":"1.8 Basemaps","text":"","code":""},{"path":"gis-basics.html","id":"openstreetmap","chapter":"1 GIS basics","heading":"OpenStreetMap","text":"describe achieve basemap using OpenStreetMap features. Alternative methods include using ggmap requires free registration Google (details).(OpenStreetMap) collaborative project create free editable map world underlying geolocation data (e.g. locations cities, roads, natural features, airports, schools, hospitals, roads etc) considered primary output project.First load OpenStreetMap package, get basemap., create object map, define using function openmap() OpenStreetMap package (documentation). provide following:upperLeft lowerRight Two coordinate pairs specifying limits basemap tile\r\ncase ’ve put max min linelist rows, map respond dynamically data\r\ncase ’ve put max min linelist rows, map respond dynamically datazoom = (null determined automatically)type = type basemap - listed several possibilities code currently using first one ([1]) “osm”mergeTiles = chose TRUE basetiles merged oneIf plot basemap right now, using autoplot.OpenStreetMap() OpenStreetMap package, see units axes latitude/longitude coordinates. using different coordinate system. correctly display case residences (stored lat/long), must changed.\r\nThus, want convert map latitude/longitude openproj() function OpenStreetMap package. provide basemap map also provide Coordinate Reference System (CRS) want. providing “proj.4” character string WGS 1984 projection, can provide CRS ways well. (see page better understand proj.4 string )Now create plot see along axes latitude longitude coordinate. coordinate system converted. Now cases plot correctly overlaid!See tutorials info.","code":"\n# load package\npacman::p_load(OpenStreetMap)\n\n# Fit basemap by range of lat/long coordinates. Choose tile type\nmap <- openmap(\n  upperLeft = c(max(linelist$lat, na.rm=T), max(linelist$lon, na.rm=T)),   # limits of basemap tile\n  lowerRight = c(min(linelist$lat, na.rm=T), min(linelist$lon, na.rm=T)),\n  zoom = NULL,\n  type = c(\"osm\", \"stamen-toner\", \"stamen-terrain\", \"stamen-watercolor\", \"esri\",\"esri-topo\")[1])\nautoplot.OpenStreetMap(map)\n# Projection WGS84\nmap_latlon <- openproj(map, projection = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n# Plot map. Must use \"autoplot\" in order to work with ggplot\nautoplot.OpenStreetMap(map_latlon)"},{"path":"gis-basics.html","id":"contoured-density-heatmaps","chapter":"1 GIS basics","heading":"1.9 Contoured density heatmaps","text":"describe achieve contoured density heatmap cases, basemap, beginning linelist (one row per case).Create basemap tile OpenStreetMap, described abovePlot cases linelist using latitude longitude columnsConvert points density heatmap stat_density_2d() ggplot2,basemap lat/long coordinates, can plot cases top using lat/long coordinates residence.Building function autoplot.OpenStreetMap() create basemap, ggplot2 functions easily add top, shown geom_point() :\r\nmap might difficult interpret, especially points overlapping. can instead plot 2d density map using ggplot2 function stat_density_2d(). still using linelist lat/lon coordinates, 2D kernel density estimation performed results displayed contour lines - like topographical map. Read full documentation .","code":"\n# Plot map. Must be autoplotted to work with ggplot\nautoplot.OpenStreetMap(map_latlon)+                 # begin with the basemap\n  geom_point(                                       # add xy points from linelist lon and lat columns \n    data = linelist,                                \n    aes(x = lon, y = lat),\n    size = 1, \n    alpha = 0.5,\n    show.legend = FALSE) +                          # drop legend entirely\n  labs(x = \"Longitude\",                             # titles & labels\n       y = \"Latitude\",\n       title = \"Cumulative cases\")\n# begin with the basemap\nautoplot.OpenStreetMap(map_latlon)+\n  \n  # add the density plot\n  ggplot2::stat_density_2d(\n        data = linelist,\n        aes(\n          x = lon,\n          y = lat,\n          fill = ..level..,\n          alpha = ..level..),\n        bins = 10,\n        geom = \"polygon\",\n        contour_var = \"count\",\n        show.legend = F) +                          \n  \n  # specify color scale\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  \n  # labels \n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of cumulative cases\")"},{"path":"gis-basics.html","id":"time-series-heatmap","chapter":"1 GIS basics","heading":"1.9.1 Time series heatmap","text":"density heatmap shows cumulative cases. can examine outbreak time space faceting heatmap based month symptom onset, derived linelist.begin linelist, creating new column Year Month onset. format() function base R changes date displayed. case want “YYYY-MM”.Now, simply introduce facetting via ggplot2 density heatmap. facet_wrap() applied, using new column rows. set number facet columns 3 clarity.","code":"\n# Extract month of onset\nlinelist <- linelist %>% \n  mutate(date_onset_ym = format(date_onset, \"%Y-%m\"))\n\n# Examine the values \ntable(linelist$date_onset_ym, useNA = \"always\")## \r\n## 2014-05 2014-06 2014-07 2014-08 2014-09 2014-10 2014-11 2014-12 2015-01 2015-02 \r\n##      10      14      33     107     180     202     131      83      61      52 \r\n## 2015-03 2015-04    <NA> \r\n##      50      31      46\n# packages\npacman::p_load(OpenStreetMap, tidyverse)\n\n# begin with the basemap\nautoplot.OpenStreetMap(map_latlon)+\n  \n  # add the density plot\n  ggplot2::stat_density_2d(\n        data = linelist,\n        aes(\n          x = lon,\n          y = lat,\n          fill = ..level..,\n          alpha = ..level..),\n        bins = 10,\n        geom = \"polygon\",\n        contour_var = \"count\",\n        show.legend = F) +                          \n  \n  # specify color scale\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  \n  # labels \n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of cumulative cases\")+\n  \n  # facet the plot by month-year of onset\n  facet_wrap(~ date_onset_ym, ncol = 4)               "},{"path":"gis-basics.html","id":"mapping-with-ggplot2","chapter":"1 GIS basics","heading":"1.10 Mapping with ggplot2","text":"already familiar using ggplot2, can use package instead create static maps data. geom_sf() function draw different objects based features (points, lines, polygons) data. example, can use geom_sf() ggplot() using sf data polygon geometry create choropleth map.illustrate works, can start ADM3 polygons shapefile used earlier. Recall Admin Level 3 regions Sierra Leone:can use left_join() function dplyr add data like map shapefile object. case, going use case_adm3 data frame created earlier summarize case counts administrative region; however, can use approach map data stored data frame.make column chart case counts region, using ggplot2, call geom_col() follows:want use ggplot2 instead make choropleth map case counts, can use similar syntax call geom_sf() function:can customize appearance map using grammar consistent across ggplot2, example:R users comfortable working ggplot2, geom_sf() offers simple direct implementation suitable basic map visualizations. learn , read geom_sf() vignette ggplot2 book.","code":"\nsle_adm3## Simple feature collection with 12 features and 19 fields\r\n## Geometry type: MULTIPOLYGON\r\n## Dimension:     XY\r\n## Bounding box:  xmin: -13.29894 ymin: 8.094272 xmax: -12.91333 ymax: 8.499809\r\n## Geodetic CRS:  WGS 84\r\n## # A tibble: 12 x 20\r\n##    objectid admin3name   admin3pcod admin3ref_n   admin2name    admin2pcod admin1name\r\n##  *    <dbl> <chr>        <chr>      <chr>         <chr>         <chr>      <chr>     \r\n##  1      155 Koya Rural   SL040101   Koya Rural    Western Area~ SL0401     Western   \r\n##  2      156 Mountain Ru~ SL040102   Mountain Rur~ Western Area~ SL0401     Western   \r\n##  3      157 Waterloo Ru~ SL040103   Waterloo Rur~ Western Area~ SL0401     Western   \r\n##  4      158 York Rural   SL040104   York Rural    Western Area~ SL0401     Western   \r\n##  5      159 Central I    SL040201   Central I     Western Area~ SL0402     Western   \r\n##  6      160 East I       SL040203   East I        Western Area~ SL0402     Western   \r\n##  7      161 East II      SL040204   East II       Western Area~ SL0402     Western   \r\n##  8      162 Central II   SL040202   Central II    Western Area~ SL0402     Western   \r\n##  9      163 West III     SL040208   West III      Western Area~ SL0402     Western   \r\n## 10      164 West I       SL040206   West I        Western Area~ SL0402     Western   \r\n## 11      165 West II      SL040207   West II       Western Area~ SL0402     Western   \r\n## 12      167 East III     SL040205   East III      Western Area~ SL0402     Western   \r\n## # ... with 13 more variables: admin1pcod <chr>, admin0name <chr>, admin0pcod <chr>,\r\n## #   date <date>, valid_on <date>, valid_to <date>, shape_leng <dbl>,\r\n## #   shape_area <dbl>, rowcacode0 <chr>, rowcacode1 <chr>, rowcacode2 <chr>,\r\n## #   rowcacode3 <chr>, geometry <MULTIPOLYGON [°]>\nsle_adm3_dat <- sle_adm3 %>% \n  inner_join(case_adm3, by = \"admin3pcod\") # inner join = retain only if in both data objects\n\nselect(sle_adm3_dat, admin3name.x, cases) # print selected variables to console## Simple feature collection with 9 features and 2 fields\r\n## Geometry type: MULTIPOLYGON\r\n## Dimension:     XY\r\n## Bounding box:  xmin: -13.29894 ymin: 8.384533 xmax: -13.12612 ymax: 8.499809\r\n## Geodetic CRS:  WGS 84\r\n## # A tibble: 9 x 3\r\n##   admin3name.x   cases                                                       geometry\r\n##   <chr>          <int>                                             <MULTIPOLYGON [°]>\r\n## 1 Mountain Rural   276 (((-13.21496 8.474341, -13.21479 8.474289, -13.21465 8.474296~\r\n## 2 Central I         59 (((-13.22646 8.489716, -13.22648 8.48955, -13.22644 8.489513,~\r\n## 3 East I            59 (((-13.2129 8.494033, -13.21076 8.494026, -13.21013 8.494041,~\r\n## 4 East II          130 (((-13.22653 8.491883, -13.22647 8.491853, -13.22642 8.49186,~\r\n## 5 Central II        16 (((-13.23154 8.491768, -13.23141 8.491566, -13.23144 8.49146,~\r\n## 6 West III         232 (((-13.28529 8.497354, -13.28456 8.496497, -13.28403 8.49621,~\r\n## 7 West I            35 (((-13.24677 8.493453, -13.24669 8.493285, -13.2464 8.493132,~\r\n## 8 West II          168 (((-13.25698 8.485518, -13.25685 8.485501, -13.25668 8.485505~\r\n## 9 East III          22 (((-13.20465 8.485758, -13.20461 8.485698, -13.20449 8.485757~\nggplot(data=sle_adm3_dat) +\n  geom_col(aes(x=fct_reorder(admin3name.x, cases, .desc=T),   # reorder x axis by descending 'cases'\n               y=cases)) +                                  # y axis is number of cases by region\n  theme_bw() +\n  labs(                                                     # set figure text\n    title=\"Number of cases, by administrative unit\",\n    x=\"Admin level 3\",\n    y=\"Number of cases\"\n  ) + \n  guides(x=guide_axis(angle=45))                            # angle x-axis labels 45 degrees to fit better\nggplot(data=sle_adm3_dat) + \n  geom_sf(aes(fill=cases))    # set fill to vary by case count variable\nggplot(data=sle_adm3_dat) +                           \n  geom_sf(aes(fill=cases)) +                        \n  scale_fill_continuous(high=\"#54278f\", low=\"#f2f0f7\") +    # change color gradient\n  theme_bw() +\n  labs(title = \"Number of cases, by administrative unit\",   # set figure text\n       subtitle = \"Admin level 3\"\n  )"},{"path":"gis-basics.html","id":"spatial-statistics","chapter":"1 GIS basics","heading":"1.11 Spatial statistics","text":"discussion far focused visualization spatial data. cases, may also interested using spatial statistics quantify spatial relationships attributes data. section provide brief overview key concepts spatial statistics, suggest resources helpful explore wish comprehensive spatial analyses.","code":""},{"path":"gis-basics.html","id":"spatial-relationships","chapter":"1 GIS basics","heading":"Spatial relationships","text":"can calculate spatial statistics, need specify relationships features data. many ways conceptualize spatial relationships, simple commonly-applicable model use adjacency - specifically, expect geographic relationship areas share border “neighbour” one another.can quantify adjacency relationships administrative region polygons sle_adm3 data using spdep package. specify queen contiguity, means regions neighbors share least one point along borders. alternative rook contiguity, requires regions share edge - case, irregular polygons, distinction trivial, cases choice queen rook can influential.matrix printed shows relationships 9 regions sle_adm3 data. score 0 indicates two regions neighbors, value 0 indicates neighbor relationship. values matrix scaled region total row weight 1.better way visualize neighbor relationships plotting :used adjacency approach identify neighboring polygons; neighbors identified also sometimes called contiguity-based neighbors. just one way choosing regions expected geographic relationship. common alternative approaches identifying geographic relationships generate distance-based neighbors; briefly, :K-nearest neighbors - Based distance centroids (geographically-weighted center polygon region), select n closest regions neighbors. maximum-distance proximity threshold may also specified. spdep, can use knearneigh() (see documentation).K-nearest neighbors - Based distance centroids (geographically-weighted center polygon region), select n closest regions neighbors. maximum-distance proximity threshold may also specified. spdep, can use knearneigh() (see documentation).Distance threshold neighbors - Select neighbors within distance threshold. spdep, neighbor relationships can identified using dnearneigh() (see documentation).Distance threshold neighbors - Select neighbors within distance threshold. spdep, neighbor relationships can identified using dnearneigh() (see documentation).","code":"\nsle_nb <- spdep::poly2nb(sle_adm3_dat, queen=T) # create neighbors \nsle_adjmat <- spdep::nb2mat(sle_nb)    # create matrix summarizing neighbor relationships\nsle_listw <- spdep::nb2listw(sle_nb)   # create listw (list of weights) object -- we will need this later\n\nsle_nb## Neighbour list object:\r\n## Number of regions: 9 \r\n## Number of nonzero links: 30 \r\n## Percentage nonzero weights: 37.03704 \r\n## Average number of links: 3.333333\nround(sle_adjmat, digits = 2)##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\r\n## 1 0.00 0.20 0.00 0.20 0.00  0.2 0.00 0.20 0.20\r\n## 2 0.25 0.00 0.00 0.25 0.25  0.0 0.00 0.25 0.00\r\n## 3 0.00 0.00 0.00 0.50 0.00  0.0 0.00 0.00 0.50\r\n## 4 0.25 0.25 0.25 0.00 0.00  0.0 0.00 0.00 0.25\r\n## 5 0.00 0.33 0.00 0.00 0.00  0.0 0.33 0.33 0.00\r\n## 6 0.50 0.00 0.00 0.00 0.00  0.0 0.00 0.50 0.00\r\n## 7 0.00 0.00 0.00 0.00 0.50  0.0 0.00 0.50 0.00\r\n## 8 0.20 0.20 0.00 0.00 0.20  0.2 0.20 0.00 0.00\r\n## 9 0.33 0.00 0.33 0.33 0.00  0.0 0.00 0.00 0.00\r\n## attr(,\"call\")\r\n## spdep::nb2mat(neighbours = sle_nb)\nplot(sle_adm3_dat$geometry) +                                           # plot region boundaries\n  spdep::plot.nb(sle_nb,as(sle_adm3_dat, 'Spatial'), col='grey', add=T) # add neighbor relationships"},{"path":"gis-basics.html","id":"spatial-autocorrelation","chapter":"1 GIS basics","heading":"Spatial autocorrelation","text":"Tobler’s oft-cited first law geography states “everything related everything else, near things related distant things.” epidemiology, often means risk particular health outcome given region similar neighboring regions far away. concept formalized spatial autocorrelation - statistical property geographic features similar values clustered together space. Statistical measures spatial autocorrelation can used quantify extent spatial clustering data, locate clustering occurs, identify shared patterns spatial autocorrelation distinct variables data. section gives overview common measures spatial autocorrelation calculate R.Moran’s - global summary statistic correlation value variable one region, values variable neighboring regions. Moran’s statistic typically ranges -1 1. value 0 indicates pattern spatial correlation, values closer 1 -1 indicate stronger spatial autocorrelation (similar values close together) spatial dispersion (dissimilar values close together), respectively.example, calculate Moran’s statistic quantify spatial autocorrelation Ebola cases mapped earlier (remember, subset cases simulated epidemic linelist dataframe). spdep package function, moran.test, can calculation us:output moran.test() function shows us Moran statistic 0.21. indicates presence spatial autocorrelation data - specifically, regions similar numbers Ebola cases likely close together. p-value provided moran.test() generated comparison expectation null hypothesis spatial autocorrelation, can used need report results formal hypothesis test.Local Moran’s - can decompose (global) Moran’s statistic calculated identify localized spatial autocorrelation; , identify specific clusters data. statistic, sometimes called Local Indicator Spatial Association (LISA) statistic, summarizes extent spatial autocorrelation around individual region. can useful finding “hot” “cold” spots map.show example, can calculate map Local Moran’s Ebola case counts used , local_moran() function spdep:Getis-Ord Gi* - another statistic commonly used hotspot analysis; large part, popularity statistic relates use Hot Spot Analysis tool ArcGIS. based assumption typically, difference variable’s value neighboring regions follow normal distribution. uses z-score approach identify regions significantly higher (hot spot) significantly lower (cold spot) values specified variable, compared neighbors.can calculate map Gi* statistic using localG() function spdep:can see, map Getis-Ord Gi* looks slightly different map Local Moran’s produced earlier. reflects method used calculate two statistics slightly different; one use depends specific use case research question interest.Lee’s L test - statistical test bivariate spatial correlation. allows test whether spatial pattern given variable x similar spatial pattern another variable, y, hypothesized related spatially x.give example, let’s test whether spatial pattern Ebola cases simulated epidemic correlated spatial pattern population. start, need population variable sle_adm3 data. can use total variable sle_adm3_pop dataframe loaded earlier.can quickly visualize spatial patterns two variables side side, see whether look similar:Visually, patterns seem dissimilar. can use lee.test() function spdep test statistically whether pattern spatial autocorrelation two variables related. L statistic close 0 correlation patterns, close 1 strong positive correlation (.e. patterns similar), close -1 strong negative correlation (.e. patterns inverse).output shows Lee’s L statistic two variables -0.12, indicates weak negative correlation. confirms visual assessment pattern cases population related one another, provides evidence spatial pattern cases strictly result population density high-risk areas.Lee L statistic can useful making kinds inferences relationship spatially distributed variables; however, describe nature relationship two variables detail, adjust confounding, spatial regression techniques needed. described briefly following section.","code":"\nmoran_i <-spdep::moran.test(sle_adm3_dat$cases,    # numeric vector with variable of interest\n                            listw=sle_listw)       # listw object summarizing neighbor relationships\n\nmoran_i                                            # print results of Moran's I test## \r\n##  Moran I test under randomisation\r\n## \r\n## data:  sle_adm3_dat$cases  \r\n## weights: sle_listw    \r\n## \r\n## Moran I statistic standard deviate = 1.6003, p-value = 0.05477\r\n## alternative hypothesis: greater\r\n## sample estimates:\r\n## Moran I statistic       Expectation          Variance \r\n##        0.21182590       -0.12500000        0.04430077\n# calculate local Moran's I\nlocal_moran <- spdep::localmoran(                  \n  sle_adm3_dat$cases,                              # variable of interest\n  listw=sle_listw                                  # listw object with neighbor weights\n)\n\n# join results to sf data\nsle_adm3_dat<- cbind(sle_adm3_dat, local_moran)    \n\n# plot map\nggplot(data=sle_adm3_dat) +\n  geom_sf(aes(fill=Ii)) +\n  theme_bw() +\n  scale_fill_gradient2(low=\"#2c7bb6\", mid=\"#ffffbf\", high=\"#d7191c\",\n                       name=\"Local Moran's I\") +\n  labs(title=\"Local Moran's I statistic for Ebola cases\",\n       subtitle=\"Admin level 3 regions, Sierra Leone\")\n# Perform local G analysis\ngetis_ord <- spdep::localG(\n  sle_adm3_dat$cases,\n  sle_listw\n)\n\n# join results to sf data\nsle_adm3_dat$getis_ord <- getis_ord\n\n# plot map\nggplot(data=sle_adm3_dat) +\n  geom_sf(aes(fill=getis_ord)) +\n  theme_bw() +\n  scale_fill_gradient2(low=\"#2c7bb6\", mid=\"#ffffbf\", high=\"#d7191c\",\n                       name=\"Gi*\") +\n  labs(title=\"Getis-Ord Gi* statistic for Ebola cases\",\n       subtitle=\"Admin level 3 regions, Sierra Leone\")\nsle_adm3_dat <- sle_adm3_dat %>% \n  rename(population = total)                          # rename 'total' to 'population'\ntmap_mode(\"plot\")\n\ncases_map <- tm_shape(sle_adm3_dat) + tm_polygons(\"cases\") + tm_layout(main.title=\"Cases\")\npop_map <- tm_shape(sle_adm3_dat) + tm_polygons(\"population\") + tm_layout(main.title=\"Population\")\n\ntmap_arrange(cases_map, pop_map, ncol=2)   # arrange into 2x1 facets\nlee_test <- spdep::lee.test(\n  x=sle_adm3_dat$cases,          # variable 1 to compare\n  y=sle_adm3_dat$population,     # variable 2 to compare\n  listw=sle_listw                # listw object with neighbor weights\n)\n\nlee_test## \r\n##  Lee's L statistic randomisation\r\n## \r\n## data:  sle_adm3_dat$cases ,  sle_adm3_dat$population \r\n## weights: sle_listw  \r\n## \r\n## Lee's L statistic standard deviate = -0.76248, p-value = 0.7771\r\n## alternative hypothesis: greater\r\n## sample estimates:\r\n## Lee's L statistic       Expectation          Variance \r\n##       -0.12326545       -0.03855026        0.01234430"},{"path":"gis-basics.html","id":"spatial-regression","chapter":"1 GIS basics","heading":"Spatial regression","text":"may wish make statistical inferences relationships variables spatial data. cases, useful consider spatial regression techniques - , approaches regression explicitly consider spatial organization units data. reasons may need consider spatial regression models, rather standard regression models GLMs, include:Standard regression models assume residuals independent one another. presence strong spatial autocorrelation, residuals standard regression model likely spatially autocorrelated well, thus violating assumption. can lead problems interpreting model results, case spatial model preferred.Standard regression models assume residuals independent one another. presence strong spatial autocorrelation, residuals standard regression model likely spatially autocorrelated well, thus violating assumption. can lead problems interpreting model results, case spatial model preferred.Regression models also typically assume effect variable x constant observations. case spatial heterogeneity, effects wish estimate may vary space, may interested quantifying differences. case, spatial regression models offer flexibility estimating interpreting effects.Regression models also typically assume effect variable x constant observations. case spatial heterogeneity, effects wish estimate may vary space, may interested quantifying differences. case, spatial regression models offer flexibility estimating interpreting effects.details spatial regression approaches beyond scope handbook. section instead provide overview common spatial regression models uses, refer references may use wish explore area .Spatial error models - models assume error terms across spatial units correlated, case data violate assumptions standard OLS model. Spatial error models also sometimes referred simultaneous autoregressive (SAR) models. can fit using errorsarlm() function spatialreg package (spatial regression functions used part spdep).Spatial lag models - models assume dependent variable region influenced value independent variables , also values variables regions neighboring . Like spatial error models, spatial lag models also sometimes described simultaneous autoregressive (SAR) models. can fit using lagsarlm() function spatialreg package.spdep package contains several useful diagnostic tests deciding standard OLS, spatial lag, spatial error models. tests, called Lagrange Multiplier diagnostics, can used identify type spatial dependence data choose model appropriate. function lm.LMtests() can used calculate Lagrange Multiplier tests. Anselin (1988) also provides useful flow chart tool decide spatial regression model use based results Lagrange Multiplier tests:Bayesian hierarchical models - Bayesian approaches commonly used applications spatial analysis, commonly disease mapping. preferred cases case data sparsely distributed (example, case rare outcome) statistically “noisy”, can used generate “smoothed” estimates disease risk accounting underlying latent spatial process. may improve quality estimates. also allow investigator pre-specification (via choice prior) complex spatial correlation patterns may exist data, can account spatially-dependent -independent variation independent dependent variables. R, Bayesian hierarchical models can fit using CARbayes package (see vignette) R-INLA (see website textbook). R can also used call external software Bayesian estimation, JAGS WinBUGS.","code":""},{"path":"gis-basics.html","id":"resources","chapter":"1 GIS basics","heading":"1.12 Resources","text":"R Simple Features sf package vignetteR Simple Features sf package vignetteR tmap package vignetteR tmap package vignetteggmap: Spatial Visualization ggplot2ggmap: Spatial Visualization ggplot2Intro making maps R, overview different packagesIntro making maps R, overview different packagesSpatial Data R (EarthLab course)Spatial Data R (EarthLab course)Applied Spatial Data Analysis R textbookApplied Spatial Data Analysis R textbookAn Introduction Spatial Econometrics R workshopAn Introduction Spatial Econometrics R workshop","code":""}]
