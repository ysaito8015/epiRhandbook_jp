[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via offline version (instructions )challenges book try address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareEpidemiologists need spend hours searching online code relevant common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"Want share use book? Want offer fix addition?\r\nEmail us epiRhandbook@gmail.com. welcome comments suggestions.can also submit issue pull request Github repository, provide structured feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha Berry, Wen LinReviewers:Advisers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN) also MSF’s Manson Unit.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"import-and-export.html","id":"import-and-export","chapter":"1 Import and export","heading":"1 Import and export","text":"page describe ways locate, import, export files:Using rio package import() export() dataThe package locate files computer R projectSpecific import scenarios, \r\nExcel sheets\r\nGoogle sheets\r\nWebsites\r\nSkipping rows\r\nExcel sheetsGoogle sheetsWebsitesSkipping rowsExporting/saving data files","code":""},{"path":"import-and-export.html","id":"overview","chapter":"1 Import and export","heading":"1.1 Overview","text":"import “dataset” R, generally creating new data frame object R environment defining imported flat file (Excel, CSV, etc.). learn objects assignment operator, see page [R Basics].","code":""},{"path":"import-and-export.html","id":"the-rio-package","chapter":"1 Import and export","heading":"1.2 The rio package","text":"R package recommend : rio. import() function rio utilizes file extension (e.g. .xlsx, .csv, .rds, .tsv) correctly import export file. name “rio” abbreviation “R /O” (input/output).alternative using rio use functions many packages, specific type file. example, read.csv() (base R), read.xlsx() (openxlsx package), write_csv() (readr pacakge), etc. alternatives can difficult remember, whereas using import() export() rio easy.rio’s functions import() export() use appropriate package function given file, based file extension. See end page complete table packages/functions rio uses background. can also used import STATA, SAS, SPSS files, among dozens others.Import/export shapefiles requires packages, detailed page [GIS basics].","code":""},{"path":"import-and-export.html","id":"file-paths","chapter":"1 Import and export","heading":"1.3 File paths","text":"importing exporting data, must provide file path. can one three ways:Provide “full” / “absolute” file pathProvide “relative” file path - location relative R project root directoryManual file selection","code":""},{"path":"import-and-export.html","id":"absolute-file-paths","chapter":"1 Import and export","heading":"“Absolute” file paths","text":"example absolute file path, placed within quotes provided import(), saved R data frame object named linelist.\r\nfilepath , “epiproject” home/root folder analysis. sub-folder “data” within subfolder “linelists”, xlsx file.things note absolute file paths:Avoid using absolute file paths usually break script run different computerThey can used must load data shared drive folder distant R script savedUse forward slashes (/) example (default Windows file paths)File paths begin double slashes (e.g. “//…”) likely recognized R produce error. Consider moving “named” “lettered” drive begins letter (e.g. “J:” “C:”). See page [Directory interactions] details issue.TIP: quickly convert \\ /, highlight code interest, use Ctrl+f (Windows), check option box “selection”, use replace functionality convert .","code":"\nlinelist <- import(\"C:/Users/Pierre/My Documents/epiproject/data/linelists/ebola_linelist.xlsx\")"},{"path":"import-and-export.html","id":"relative-file-paths","chapter":"1 Import and export","heading":"“Relative” file paths","text":"“Relative” file paths consist file path relative particular root folder. allow simple file paths can work different computers (e.g. root folder shared drive sent email)., assume folder “epiproject” root folder R project using package . file path written relative R project root folder “epiproject”. syntax explained .package function () locate files computer relation root directory R project, provide shortcut syntax providing file path function like import(). () works:Ensure working within R project (read [R projects] pageWhen package first loaded within R project, places small file called “” root-level folder R project “benchmark” “anchor” files project.script, want reference file saved project’s folders, use function () tell R file located relation anchor.() can used importing exporting.unsure “” root set , run function () empty parentheses:can build onto anchor specifying folders, within quotes, separated commas, finally ending filename extension. approach also removes slash direction source error.Running () command folder names file name returns extended file path, can processed import() function.","code":"\nlinelist <- import(here(\"data\", \"linelists\", \"ebola_linelist.xlsx\"))\n# load the package\npacman::p_load(here)\n\n# return the folder path that \"here\" is set to \nhere()## [1] \"C:/Users/Neale/OneDrive - Neale Batra/Documents/Analytic Software/R/Projects/R handbook/Epi_R_handbook\"\n# the filepath\nhere(\"data\", \"linelist.xlsx\")## [1] \"C:/Users/Neale/OneDrive - Neale Batra/Documents/Analytic Software/R/Projects/R handbook/Epi_R_handbook/data/linelist.xlsx\""},{"path":"import-and-export.html","id":"select-file-manually","chapter":"1 Import and export","heading":"Select file manually","text":"can import data manually via one methods:Environment RStudio Pane, click “Import Dataset”, select type dataClick File / Import Dataset / (select type data)hard-code manual selection, use base R command file.choose() (leaving parentheses empty) trigger appearance pop-window allows user manually select file computer. example:TIP: pop-window may appear BEHIND RStudio window.","code":"\n# Manual selection of a file. When this command is run, a POP-UP window will appear. \n# The file path selected will be supplied to the import() command.\n\nmy_data <- import(file.choose())"},{"path":"import-and-export.html","id":"excel-sheets","chapter":"1 Import and export","heading":"1.4 Excel sheets","text":"want import specific sheet Excel workbook, include sheet name = argument. example:using () method provide relative pathway import(), can still indicate specific sheet adding = argument closing parentheses () function.export dataframe R specific Excel sheet rest Excel workbook remain unchanged, import, edit, export alternative package catered purpose openxlsx. See information page [Directory interactions] github page.Excel workbook .xlsb (binary format Excel workbook) may able import using rio. Consider re-saving .xlsx, using package like readxlsb built purpose.","code":"\nmy_data <- import(\"my_excel_file.xlsx\", which = \"Sheetname\")# Demonstration: importing a specific Excel sheet when using relative pathways with the 'here' package\r\nlinelist_raw <- import(here(\"data\", \"linelist.xlsx\"), which = \"Sheet1\")`  "},{"path":"import-and-export.html","id":"missing-values","chapter":"1 Import and export","heading":"1.5 Missing values","text":"may want designate value(s) dataset considered missing. explained page [Missing data], value R missing data NA, perhaps dataset want import uses 99, “Missing”, just empty character space \"\" instead.Use na = argument import() provide value(s) within quotes (even numbers). can specify multiple values including within vector, using c() shown ., value “99” imported dataset considered missing converted NA R., values “Missing”, \"\" (empty cell), \" \" (single space) imported dataset converted NA R.","code":"\nlinelist <- import(here(\"data\", \"linelist_raw.xlsx\"), na =\"99\")\nlinelist <- import(here(\"data\", \"cleaning_dict.csv\"), na = c(\"Missing\", \"\", \" \"))"},{"path":"import-and-export.html","id":"google-sheets","chapter":"1 Import and export","heading":"1.6 Google sheets","text":"can import data online Google spreadsheet googlesheet4 package authenticating access spreadsheet., demo Google sheet imported saved. command may prompt confirmation authentification Google account. Follow prompts pop-ups internet browser grant Tidyverse API packages permissions edit, create, delete spreadsheets Google Drive.sheet “viewable anyone link” can try import .sheet can also imported using sheet ID, shorter part URL:Another package, googledrive offers useful functions writing, editing, deleting Google sheets. example, using gs4_create() sheet_write() functions found package.helpful online tutorials: basic importing tutorial detail interaction two packages","code":"\npacman::p_load(\"googlesheets4\")\nGsheets_demo <- read_sheet(\"https://docs.google.com/spreadsheets/d/1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY/edit#gid=0\")\nGsheets_demo <- read_sheet(\"1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY\")"},{"path":"import-and-export.html","id":"scraping-websites","chapter":"1 Import and export","heading":"1.7 Scraping websites","text":"Scraping data website - TBD - construction","code":""},{"path":"import-and-export.html","id":"skip-rows","chapter":"1 Import and export","heading":"1.8 Skip rows","text":"Sometimes, may want avoid importing row data. can argument skip = using import() rio .xlsx .csv file. Provide number rows want skip.Unfortunately skip = accepts one integer value, range (e.g. “2:10” work). skip import specific rows consecutive top, consider importing multiple times using bind_rows() dplyr. See example skipping row 2.","code":"\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 1)  # does not import header row"},{"path":"import-and-export.html","id":"remove-second-header-row","chapter":"1 Import and export","heading":"Remove second header row","text":"Sometimes, data may second row want remove, example “data dictionary” row shown . situation can problematic can result columns imported class “character”.solve , likely need import data twice.Import data order store correct column namesImport data , skipping first two rows (header second rows)Bind correct names onto reduced dataframeThe exact argument used bind correct column names depends type data file (.csv, .tsv, .xlsx, etc.). rio using different function different file types (see table ).Excel files: (col_names =)CSV files: (col.names =)Backup option - changing column names separate command","code":"\n# import first time; store the column names\nlinelist_raw_names <- import(\"linelist_raw.xlsx\") %>% names()  # save true column names\n\n# import second time; skip row 2, and assign column names to argument col_names =\nlinelist_raw <- import(\"linelist_raw.xlsx\",\n                       skip = 2,\n                       col_names = linelist_raw_names\n                       ) \n# import first time; sotre column names\nlinelist_raw_names <- import(\"linelist_raw.csv\") %>% names() # save true column names\n\n# note argument for csv files is 'col.names = '\nlinelist_raw <- import(\"linelist_raw.csv\",\n                       skip = 2,\n                       col.names = linelist_raw_names\n                       ) \n# assign/overwrite headers using the base 'colnames()' function\ncolnames(linelist_raw) <- linelist_raw_names"},{"path":"import-and-export.html","id":"make-a-data-dictionary","chapter":"1 Import and export","heading":"Make a data dictionary","text":"Bonus! second row data dictionary, can easily create proper data dictionary . tip adapted post.","code":"\ndict <- linelist_2headers %>%             # begin: linelist with dictionary as first row\n  head(1) %>%                             # keep only column names and first dictionary row                \n  pivot_longer(cols = everything(),       # pivot all columns to long format\n               names_to = \"Column\",       # assign new column names\n               values_to = \"Description\")"},{"path":"import-and-export.html","id":"combine-two-header-rows","chapter":"1 Import and export","heading":"Combine two header rows","text":"cases, may want combine two header rows one. command define column names combination (pasting together) existing column names value underneath first row. Replace “df” name dataset.","code":"\nnames(df) <- paste(names(df), df[1, ], sep = \"_\")"},{"path":"import-and-export.html","id":"multiple-files---import-export-split-combine","chapter":"1 Import and export","heading":"1.9 Multiple files - import, export, split, combine","text":"See page [Iteration loops] examples import combine multiple files, multiple Excel workbook files. page also examples split data frame parts export one separately, named sheets Excel workbook.","code":""},{"path":"import-and-export.html","id":"import-from-github","chapter":"1 Import and export","heading":"1.10 Import from Github","text":"Importing data directly Github R can easy can require steps - depending file type. approaches:","code":""},{"path":"import-and-export.html","id":"csv-files","chapter":"1 Import and export","heading":"CSV files","text":"can easy import .csv file directly Github R R command.Go Github repo, locate file interest, click itClick “Raw” button (see “raw” csv data, shown )Copy URL (web address)Use URL import() R command, shown ","code":""},{"path":"import-and-export.html","id":"xlsx-files","chapter":"1 Import and export","heading":"XLSX files","text":"may able view “Raw” data files (e.g. .xlsx, .rds, .nwk, .shp)Go Github repo, locate file interest, click itClick “Download” button, shown belowSave file computer, import R","code":""},{"path":"import-and-export.html","id":"shapefiles","chapter":"1 Import and export","heading":"Shapefiles","text":"Shapefiles many sub-component files, different file extention. One file “.shp” extension, others may “.dbf”, “.prj”, etc. download shapefile Github, need download sub-component files individually, save folder computer. Github, click file individually download clicking “Download” button.saved computer can import shapefile shown [GIS basics] page using st_read() sf package. need provide filepath name “.shp” file - long related files within folder computer., can see shapefile “sle_adm3” consists many files - must downloaded Github.","code":""},{"path":"import-and-export.html","id":"manual-data-entry","chapter":"1 Import and export","heading":"1.11 Manual data entry","text":"","code":""},{"path":"import-and-export.html","id":"entry-by-rows","chapter":"1 Import and export","heading":"Entry by rows","text":"Use tribble function tibble package tidverse (onlinetibble reference).Note column headers start tilde (~). Also note column must contain one class data (character, numeric, etc.). can use tabs, spacing, new rows make data entry intuitive readable. Spaces matter values, row represented new line code. example:now display new dataset:","code":"\n# create the dataset manually by row\nmanual_entry_rows <- tibble::tribble(\n  ~colA, ~colB,\n  \"a\",   1,\n  \"b\",   2,\n  \"c\",   3\n  )"},{"path":"import-and-export.html","id":"entry-by-columns","chapter":"1 Import and export","heading":"Entry by columns","text":"Since data frame consists vectors (vertical columns), base approach manual dataframe creation R expects define column bind together. can counter-intuitive epidemiology, usually think data rows ().CAUTION: vectors must length (number values).vectors can bound together using function data.frame():now display new dataset:","code":"\n# define each vector (vertical column) separately, each with its own name\nPatientID <- c(235, 452, 778, 111)\nTreatment <- c(\"Yes\", \"No\", \"Yes\", \"Yes\")\nDeath     <- c(1, 0, 1, 0)\n# combine the columns into a data frame, by referencing the vector names\nmanual_entry_cols <- data.frame(PatientID, Treatment, Death)"},{"path":"import-and-export.html","id":"pasting-from-clipboard","chapter":"1 Import and export","heading":"Pasting from clipboard","text":"copy data elsewhere clipboard, can try following function base R convert data R data frame:","code":"\ndf_from_clipboard <- read.table(\n  file = \"clipboard\",  # specify this as \"clipboard\"\n  sep = \"t\",           # separator could be tab, or commas, etc.\n  header=TRUE)         # if there is a header row"},{"path":"import-and-export.html","id":"import-most-recent-file","chapter":"1 Import and export","heading":"Import most recent file","text":"Often may receive daily updates datasets. case want write code imports recent file. present two ways approach :Selecting file based date file nameSelecting file based file metadata (last modification)","code":""},{"path":"import-and-export.html","id":"dates-in-file-name","chapter":"1 Import and export","heading":"Dates in file name","text":"approach depends three premises:trust dates file namesThe dates numeric appear generally format (e.g. year month day)numbers file nameWe explain step, show combined end. First, use dir() base R extract just file names file folder interest. See page [Directory interactions] details dir(). example, folder interest folder “linelists” within folder “data” within R project.vector names, can extract dates applying str_extract() stringr using regular expression. extracts numbers file name (including characters middle dashes slashes). can read stringr [Strings characters] page.Assuming dates written date general format (e.g. Year Month Day) can use lubridate’s flexible ymd() function (dmy() mdy()) convert dates. functions, dashes, spaces, slashes matter, order numbers. Read [Working dates].base R function .max() can used return index position (e.g. 1st, 2nd, 3rd, …) maximum date value. latest file correctly identified 6th file - “case_linelist_2020-10-08.xlsx”.condense commands, complete code look like . Note . last line placeholder piped object point pipe sequence. point value simply number 6. placed double brackets extract 6th element vector file names produced dir().can now use name finish relative file path, ():can now import latest file:","code":"\nlinelist_filenames <- dir(here(\"data\", \"linelists\")) # get file names from folder\nlinelist_filenames                                   # print## [1] \"20201007linelist.csv\"          \"case_linelist_2020-10-02.csv\"  \"case_linelist_2020-10-03.csv\" \r\n## [4] \"case_linelist_2020-10-04.csv\"  \"case_linelist_2020-10-05.csv\"  \"case_linelist_2020-10-08.xlsx\"\r\n## [7] \"case_linelist20201006.csv\"\nlinelist_dates_raw <- stringr::str_extract(linelist_filenames, \"[0-9].*[0-9]\") # extract numbers and any characters in between\nlinelist_dates_raw  # print## [1] \"20201007\"   \"2020-10-02\" \"2020-10-03\" \"2020-10-04\" \"2020-10-05\" \"2020-10-08\" \"20201006\"\nlinelist_dates_clean <- lubridate::ymd(linelist_dates_raw)\nlinelist_dates_clean## [1] \"2020-10-07\" \"2020-10-02\" \"2020-10-03\" \"2020-10-04\" \"2020-10-05\" \"2020-10-08\" \"2020-10-06\"\nindex_latest_file <- which.max(linelist_dates_clean)\nindex_latest_file## [1] 6\n# load packages\npacman::p_load(\n  tidyverse,         # data management\n  stringr,           # work with strings/characters\n  lubridate,         # work with dates\n  rio,               # import / export\n  here,              # relative file paths\n  fs)                # directory interactions\n\n# extract the file name of latest file\nlatest_file <- dir(here(\"data\", \"linelists\")) %>%  # file names from \"linelists\" sub-folder          \n  str_extract(\"[0-9].*[0-9]\") %>%                  # pull out dates (numbers)\n  ymd() %>%                                        # convert numbers to dates (assuming year-month-day format)\n  which.max() %>%                                  # get index of max date (latest file)\n  dir(here(\"data\", \"linelists\"))[[.]]              # return the filename of latest linelist\n\nlatest_file  # print name of latest file## [1] \"case_linelist_2020-10-08.xlsx\"\nhere(\"data\", \"linelists\", latest_file) ## [1] \"C:/Users/Neale/OneDrive - Neale Batra/Documents/Analytic Software/R/Projects/R handbook/Epi_R_handbook/data/linelists/case_linelist_2020-10-08.xlsx\"\n# import\nimport(here(\"data\", \"linelists\", latest_file)) # import "},{"path":"import-and-export.html","id":"use-the-file-info","chapter":"1 Import and export","heading":"Use the file info","text":"files dates names (trust dates), can try extract last modification date file metadata. Use functions package fs examine metadata information file, includes last modification time file path., provide folder interest fs’s dir_info(). case, folder interest sub-folder “linelists” within folder “data” within R project. result data frame one line per file columns modification_time, path, etc. can see visual example page [Directory interactions].can sort data frame files column modification_time, keep top/latest row (file) base R’s head(). can extract file path latest file dplyr function pull() column path. Finally can pass file path import(). imported file saved latest_file.","code":"\nlatest_file <- dir_info(here(\"data\", \"linelists\")) %>%  # collect file info on all files in directory\n  arrange(desc(modification_time)) %>%      # sort by modification time\n  head(1) %>%                               # keep only the top (latest) file\n  pull(path) %>%                            # extract only the file path\n  import()                                  # import the file"},{"path":"import-and-export.html","id":"export","chapter":"1 Import and export","heading":"1.12 Export","text":"rio, can use export() function similar way import(). First give name R object want save (e.g. linelist) quote filepath including name file extension. example:save dataframe .csv, folder specified relative pathway:","code":"\nexport(linelist, \"my_linelist.xlsx\") # will save to working directoryexport(linelist, here(\"data\",\"clean\", \"my_linelist.csv\")"},{"path":"import-and-export.html","id":"rds-files","chapter":"1 Import and export","heading":"1.13 RDS files","text":"Along .csv, .xlsx, etc, can also export/save R data frames .rds files. file format specific R, useful know work exported data R.classes columns stored, don’t cleaning imported (Excel even CSV file can headache!).example, work Epi team need send files GIS team mapping, use R well, just send .rds file! column classes retained less work .","code":"export(linelist, here(\"data\",\"clean\", \"my_linelist.rds\")"},{"path":"import-and-export.html","id":"rdata-files","chapter":"1 Import and export","heading":"1.14 Rdata files","text":".Rdata files store R objects, can actually store multiple R objects within one file, example multiple dataframes, model results, lists, etc. can useful consolidate share lot data given project.example, multiple R objects stored within exported file “my_objects.Rdata”:Note: trying import list, use import_list() rio import complete original structure contents.","code":"\nrio::export(my_list, my_dataframe, my_vector, \"my_objects.Rdata\")\nrio::import_list(\"my_list.Rdata\")"},{"path":"import-and-export.html","id":"saving-plots","chapter":"1 Import and export","heading":"1.15 Saving plots","text":"save plots, created ggplot() discussed depth [ggplot tips] page.brief, run ggsave(\"my_plot_filepath_and_name.png\") printing plot. can either provide saved plot object plot = argument, specify destination file path (file extension) save recently-displayed plot. can also control width =, height =, units =, dpi =.save network graph, transmission tree, addressed page [Transmission chains].","code":""},{"path":"import-and-export.html","id":"resources","chapter":"1 Import and export","heading":"1.16 Resources","text":"R Data Import/Export ManualR 4 Data Science chapterggsaveBelow table, taken rio online vignette. type data shows: expected file extension, package rio uses import export data, whether functionality included default installed version rio.","code":""}]
