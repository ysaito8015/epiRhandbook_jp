[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via offline version (instructions )challenges book try address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareEpidemiologists need spend hours searching online code relevant common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Data session info]\" pageTo download offline version follow steps:Click html file Github repositoryClick “Download” button. window open HTML source code.“Save ” webpage, via right-click (windows) Cmd-s (mac) - ensure file type “Webpage, Complete”file large (>40MB) content may take time appear. displays one long page, search Ctrl+f (Cmd-f).","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions. can submit issue pull request Github repository, provide feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha Berry, Wen LinReviewers:Advisers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN) also MSF’s Manson Unit.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"gis-basics.html","id":"gis-basics","chapter":"1 GIS basics","heading":"1 GIS basics","text":"","code":""},{"path":"gis-basics.html","id":"overview","chapter":"1 GIS basics","heading":"1.1 Overview","text":"Spatial aspects data can provide lot insights situation outbreak, answer questions :current disease hotspots?hotspots changed time?access health facilities? improvements needed?section, explore basic spatial data visualization methods using tmap ggplot2 packages.\r\nalso walk basic spatial data management querying methods sf package.example outputs:Choropleth mapCase density heatmapHealth facility catchment areas","code":""},{"path":"gis-basics.html","id":"preparation","chapter":"1 GIS basics","heading":"1.2 Preparation","text":"","code":""},{"path":"gis-basics.html","id":"load-packages","chapter":"1 GIS basics","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,          # to import data\n  here,         # to locate files\n  tidyverse,    # to clean, handle, and plot the data (includes ggplot2 package)\n  sf,           # to manage spatial data using a Simple Feature format\n  tmap,         # to produce simple maps, works for both interactive and static maps\n  janitor,      # to clean column names\n  OpenStreetMap # to add OSM basemap in ggplot map\n  ) "},{"path":"gis-basics.html","id":"sample-case-data","chapter":"1 GIS basics","heading":"Sample case data","text":"demonstration purposes, work random sample 1000 cases simulated Ebola epidemic linelist dataframe (computationally, working fewer cases easier display handbook). want download data follow step--step, see instructions [Data session info] page.dataset imported using import() function rio package. See page [Import export] various ways import data.Next select random sample 1000 rows using sample() base R.Now want convert linelist class dataframe, object class “sf” (spatial features). Given linelist two columns “lon” “lat” representing longitude latitude case’s residence, easy.use package sf (spatial features) function st_as_sf() create new object call linelist_sf. new object look essentially linelist, columns lon lat designated coordinate columns, coordinate reference system (CRS) assigned points displayed.","code":"\n# import clean case linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")  \n# generate 1000 random row numbers, from the number of rows in linelist\nsample_rows <- sample(nrow(linelist), 1000)\n\n# subset linelist to keep only the sample rows, and all columns\nlinelist <- linelist[sample_rows,]\n# Create sf object\nlinelist_sf <- linelist %>%\n     sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)"},{"path":"gis-basics.html","id":"admin-boundary-shapefiles","chapter":"1 GIS basics","heading":"Admin boundary shapefiles","text":"Sierra Leone: Admin boundary shapefilesIn advance, downloaded administrative boundaries Sierra Leone Humanitarian Data Exchange (HDX) website .Now going following save Admin Level 3 shapefile R:Import shapefileClean column namesFilter rows keep areas interestTo import shapefile use read_sf() function sf. provided filepath via (). - case file within R project “Data” “shp” subfolders, filename “sle_adm3.shp” (see pages [Import export] [R projects] information).Next use clean_names() janitor package standardize column names shapefile. also use filter() keep rows admin2name “Western Area Urban” “Western Area Rural”.can see shapefile looks import cleaning. Scroll right see columns admin level 0 (country), admin level 1, admin level 2, finally admin level 3. level character name pcode unique identifier code. pcode expands increasing admin level e.g. SL (Sierra Leone) -> SL04 (Western) -> SL0410 (Western Area Rural) -> SL040101 (Koya Rural).","code":"\nsle_adm3_raw <- sf::read_sf(here::here(\"data\", \"shp\", \"sle_adm3.shp\"))\n# ADM3 level clean\nsle_adm3 <- sle_adm3_raw %>%\n  janitor::clean_names() %>% # standardize column names\n  filter(admin2name %in% c(\"Western Area Urban\", \"Western Area Rural\")) # filter to keep certain areas"},{"path":"gis-basics.html","id":"population-data","chapter":"1 GIS basics","heading":"Population data","text":"Sierra Leone: Population ADM3Again, import data downloaded HDX (link ). time use import() load .csv file. also pass imported file clean_names() standardize column names.populaton file looks like. Scroll right see jurisdiction columns male population, female populaton, total population, population break-columns age group.","code":"\n# Population by ADM3\nsle_adm3_pop <- rio::import(here::here(\"data/population\", \"sle_admpop_adm3_2020.csv\")) %>%\n  janitor::clean_names()"},{"path":"gis-basics.html","id":"health-facilities","chapter":"1 GIS basics","heading":"Health Facilities","text":"Sierra Leone: Health facility data OpenStreetMapAgain downloaded locations health facilities HDX .import shapefile read_sf(), clean column names, filter keep points tagged either “hospital”, “clinic”, “doctors”.resulting dataframe - scroll right see facility name coordinates.","code":"\n# OSM health facility shapefile\nsle_hf <- sf::read_sf(here::here(\"data/shp\", \"sle_hf.shp\")) %>% \n  janitor::clean_names() %>%\n  filter(amenity %in% c(\"hospital\", \"clinic\", \"doctors\"))"},{"path":"gis-basics.html","id":"plotting-coordinates","chapter":"1 GIS basics","heading":"1.3 Plotting coordinates","text":"easiest way plot X-Y coordinates (longitude/latitude, points) draw points directly linelist_sf object created preparation section.package tmap offers simple mapping capabilities static (“plot” mode) interactive (“view” mode) just lines code. tmap syntax similar *ggplot2**, commands added +. Read detail vignette.set tmap mode. case use “plot” mode, produces static outputs., points plotted alone.tm_shape() provided linelist_sf objects. add points via tm_dots(), specifying size color. linelist_sf sf object, already designated two columns contain lat/long coordinates coordinate reference system (CRS):Alone, points tell us much. also map administrative boundaries:use tm_shape() (see documentation) instead providing case points shapefile, provide administrative boundary shapefile (polygons).bbox = argument (bbox stands “bounding box”) can specify coordinate boundaries. First show map display without bbox, .now points polygons together:read good comparison mapping options R, see blog post.","code":"\ntmap_mode(\"plot\") # choose either \"view\" or \"plot\"\n# Just the cases (points)\ntm_shape(linelist_sf) + tm_dots(size=0.08, col='blue')\n# Just the administrative boundaries (polygons)\ntm_shape(sle_adm3) +               # admin boundaries shapefile\n  tm_polygons(col = \"#F7F7F7\")+    # show polygons in light grey\n  tm_borders(col = \"#000000\",      # show borders with color and line weight\n             lwd = 2) +\n  tm_text(\"admin3name\")            # column text to display for each polygon\n\n\n# Same as above, but with zoom from bounding box\ntm_shape(sle_adm3,\n         bbox = c(-13.3, 8.43,    # corner\n                  -13.2, 8.5)) +  # corner\n  #tm_polygons(col = \"#F7F7F7\") +\n  tm_borders(col = \"#000000\", lwd = 2) +\n  tm_text(\"admin3name\")\n# All together\ntm_shape(sle_adm3, bbox = c(-13.3, 8.43, -13.2, 8.5)) +\n  #tm_polygons(col = \"#F7F7F7\") +\n  tm_borders(col = \"#000000\", lwd = 2) +\n  tm_text(\"admin3name\")+\ntm_shape(linelist_sf) +\n  tm_dots(size=0.08, col='blue') "},{"path":"gis-basics.html","id":"spatial-joins","chapter":"1 GIS basics","heading":"1.4 Spatial joins","text":"","code":""},{"path":"gis-basics.html","id":"points-in-polygon","chapter":"1 GIS basics","heading":"Points in polygon","text":"Spatial assign administrative units casesThe case linelist contain information administrative units cases. Although ideal collect information initial data collection phase, can also assign administrative units individual cases based spatial relationships (.e. point intersects polygon).sf package offers various methods spatial joins. See documentation st_join method spatial join types reference., spatially intersect case locations (points) ADM3 boundaries (polygons):Begin linelist (points)Spatial join boundaries, setting type join “st_intersects”Use select() keep certain new administrative boundary columnsAll columns sle_adms added linelist! case now columns detailing ’s administrative units. example, want keep two new columns, select() old column names just two additional interest:, just display purposes can see first ten cases admin level 3 (ADM3) jurisdictions attached, based point spatially intersected polygon shapes.Now can describe cases administrative unit - something able spatial join!can also create bar plot case counts administrative unit.example, begin ggplot() linelist_adm, can apply factor functions like fct_infreq() orders bars frequency (see page [Factors] tips).","code":"\nlinelist_adm <- linelist_sf %>%\n  \n  # join the administrative boundary file to the linelist, based on spatial intersection\n  sf::st_join(sle_adm3,   join = st_intersects)\nlinelist_adm <- linelist_sf %>%\n  \n  # join the administrative boundary file to the linelist, based on spatial intersection\n  sf::st_join(sle_adm3, join = st_intersects) %>% \n  \n  # Keep the old column names and two new admin ones of interest\n  select(names(linelist_sf), admin3name, admin3pcod)\n# Now you will see the ADM3 names attached to each case\nlinelist_adm %>% select(case_id, admin3name, admin3pcod)## Simple feature collection with 1000 features and 3 fields\r\n## geometry type:  POINT\r\n## dimension:      XY\r\n## bbox:           xmin: -13 ymin: 8.4 xmax: -13 ymax: 8.5\r\n## geographic CRS: WGS 84\r\n## First 10 features:\r\n##      case_id     admin3name admin3pcod        geometry\r\n## 521   dd9011       West III   SL040208 POINT (-13 8.5)\r\n## 5687  83787e       West III   SL040208 POINT (-13 8.5)\r\n## 2232  764d43        West II   SL040207 POINT (-13 8.5)\r\n## 1521  e13621        West II   SL040207 POINT (-13 8.5)\r\n## 71    d5f3c0       East III   SL040205 POINT (-13 8.5)\r\n## 4021  c1aa0f       West III   SL040208 POINT (-13 8.5)\r\n## 616   78b0f7 Mountain Rural   SL040102 POINT (-13 8.5)\r\n## 5149  dfe4f5        West II   SL040207 POINT (-13 8.5)\r\n## 5683  c3c7f8         East I   SL040203 POINT (-13 8.5)\r\n## 3771  772ccf Mountain Rural   SL040102 POINT (-13 8.5)\n# Make new dataframe containing counts of cases by administrative unit\ncase_adm3 <- linelist_adm %>%          # begin with linelist with new admin cols\n  as_tibble() %>%                      # convert to tibble for better display\n  group_by(admin3pcod, admin3name) %>% # group by admin unit, both by name and pcode \n  summarise(cases = n()) %>%           # summarize and count rows\n  arrange(desc(cases))                     # arrange in descending order\n\ncase_adm3## # A tibble: 10 x 3\r\n## # Groups:   admin3pcod [10]\r\n##    admin3pcod admin3name     cases\r\n##    <chr>      <chr>          <int>\r\n##  1 SL040102   Mountain Rural   298\r\n##  2 SL040208   West III         218\r\n##  3 SL040207   West II          156\r\n##  4 SL040204   East II          113\r\n##  5 SL040203   East I            69\r\n##  6 SL040201   Central I         60\r\n##  7 SL040206   West I            31\r\n##  8 SL040205   East III          27\r\n##  9 SL040202   Central II        26\r\n## 10 <NA>       <NA>               2\nggplot(\n  data = linelist_adm,                       # begin with linelist containing admin unit info\n  aes(x = fct_rev(fct_infreq(admin3name))))+ # x-axis is admin units, ordered by frequency (reversed)\n  geom_bar()+                                # create bars, height is number of rows\n  coord_flip()+                              # flip X and Y axes for easier reading of adm units\n  theme_classic()+                           # simplify background\n  labs(                                      # titles and labels\n    x = \"Admin level 3\",\n    y = \"Number of cases\",\n    title = \"Number of cases, by adminstative unit\",\n    caption = \"As determined by a spatial join, from 1000 randomly sampled cases from linelist\"\n  )"},{"path":"gis-basics.html","id":"nearest-neighbor","chapter":"1 GIS basics","heading":"Nearest neighbor","text":"Finding nearest health facility / catchment areaIt might useful know health facilities located relation disease hot spots.can use st_nearest_feature join method st_join() function (sf package) visualize closest health facility individual cases.begin shapefile linelist linelist_sfWe spatially join sle_hf, locations health facilities clinics (points)can see (first 50 rows) case now data nearest clinic/hospitalWe can see “Den Clinic” closest health facility ~30% cases.visualize results, can use tmap - time interactive mode easier viewing","code":"\n# Closest health facility to each case\nlinelist_sf_hf <- linelist_sf %>%                  # begin with linelist shapefile  \n  st_join(sle_hf, join = st_nearest_feature) %>%   # data from nearest clinic joined to case data \n  select(case_id, osm_id, name, amenity)           # keep columns of interest, including id, name, type, and geometry of healthcare facility\n# Count cases by health facility\nhf_catchment <- linelist_sf_hf %>%    # begin with linelist including nearest clinic data\n  as.data.frame() %>%                 # convert from shapefile to dataframe\n  group_by(name) %>%                  # group by name of clinic\n  summarise(case_n = n()) %>%         # count number of rows per clinic \n  arrange(desc(case_n))               # arrange in descending order\n\nhf_catchment                          # print to console## # A tibble: 8 x 2\r\n##   name                                  case_n\r\n##   <chr>                                  <int>\r\n## 1 Den Clinic                               347\r\n## 2 Shriners Hospitals for Children          315\r\n## 3 GINER HALL COMMUNITY HOSPITAL            183\r\n## 4 panasonic                                 56\r\n## 5 Princess Christian Maternity Hospital     42\r\n## 6 ARAB EGYPT CLINIC                         27\r\n## 7 MABELL HEALTH CENTER                      16\r\n## 8 <NA>                                      14\ntmap_mode(\"view\")   # set tmap mode to interactive  \n\n# plot the cases and clinic points \ntm_shape(linelist_sf_hf) +            # plot cases\n  tm_dots(size=0.08, col='name') +    # cases colored by closest clinic\ntm_shape(sle_hf) +                    # plot clinic facilities  \n  tm_dots(size=0.3, col='red') +      # red large dots\n  tm_text(\"name\") +                   # overlay with name of facility\ntm_view(set.view = c(-13.2284, 8.4699, 13), # adjust zoom (center coords, zoom)\n        set.zoom.limits = c(13,14))"},{"path":"gis-basics.html","id":"buffers","chapter":"1 GIS basics","heading":"Buffers","text":"can also explore many cases located within 2.5km (~30 mins) walking distance closest health facility.Note: accurate distance calculations, better re-project sf object respective local map projection system UTM (Earth projected onto planar surface). example, simplicity stick World Geodetic System (WGS84) Geograhpic coordinate system (Earth represented spherical / round surface, therefore units decimal degrees). use general conversion : 1 decimal degree = ~111km.See information map projections coordinate systems esri article.First, create circular buffer radius ~2.5km around health facility. done function st_buffer() tmap. units map lat/long decimal degrees, “0.02” interpreted. map coordinate system meters, number must provided meters.plot buffer zones :**Second, intersect buffers cases (points) using st_join() join type st_intersects*. , data buffers joined points intersect .Now can count results: 197 1000 cases intersect buffer (value missing), live 30 mins walk nearest health facility.can visualize results cases intersect buffer appear red.","code":"\nsle_hf_2k <- sle_hf %>%\n  st_buffer(dist=0.02)       # decimal degrees translating to approximately 2.5km \ntmap_mode(\"plot\")\n# buffers\ntm_shape(sle_hf_2k) +\n  tm_borders(col = \"red\", lwd = 2)\n# Intersect the cases with the buffers\nlinelist_sf_hf_2k <- linelist_sf_hf %>%\n  st_join(sle_hf_2k, join = st_intersects, left = TRUE) %>%\n  filter(osm_id.x==osm_id.y | is.na(osm_id.y)) %>%\n  select(case_id, osm_id.x, name.x, amenity.x, osm_id.y)\nlinelist_sf_hf_2k %>% \n  filter(is.na(osm_id.y)) %>% # empty column - did not join to any buffer\n  nrow()## [1] 197\ntmap_mode(\"view\")\n\n# cases\ntm_shape(linelist_sf_hf) +\n  tm_dots(size=0.08, col='name') +\n# buffers\ntm_shape(sle_hf_2k) +\n  tm_borders(col = \"red\", lwd = 2) +\n\n# cases outside buffers\ntm_shape(linelist_sf_hf_2k %>%  filter(is.na(osm_id.y))) +\n  tm_dots(size=0.1, col='red') +\ntm_view(set.view = c(-13.2284,8.4699, 13), set.zoom.limits = c(13,14))"},{"path":"gis-basics.html","id":"other-spatial-joins","chapter":"1 GIS basics","heading":"Other spatial joins","text":"Alternative values argument join include (documentation)st_contains_properlyst_containsst_covered_byst_coversst_crossesst_disjointst_equals_exactst_equalsst_is_within_distancest_nearest_featurest_overlapsst_touchesst_within","code":""},{"path":"gis-basics.html","id":"choropleth-maps","chapter":"1 GIS basics","heading":"1.5 Choropleth maps","text":"Choropleth maps can useful visualize data pre-defined area, usually administrative unit health area. outbreak response can help target resource allocation specific areas high incidence rates, example.Now administrative unit names assigned cases (see section spatial joins, ), can start mapping case counts area (choropleth maps).Since also population data ADM3, can add information case_adm3 table created previously.begin dataframe created previous step case_adm3, summary table administrative unit number cases.populaton data sle_adm3_pop joined using left_join() dplyr basis common values across column admin3pcod case_adm3 dataframe, column adm_pcode sle_adm3_pop dataframe. See page [Joining data]).select() applied new dataframe, keep useful columns - total total populationCases per 10,000 populaton calculated new column mutate()Join table ADM3 polygons shapefile mappingMapping resultsWe can also map incidence rates","code":"\n# Add population data and calculate cases per 10K population\ncase_adm3 <- case_adm3 %>% \n     left_join(sle_adm3_pop,                             # add columns from pop dataset\n               by = c(\"admin3pcod\" = \"adm3_pcode\")) %>%  # join based on common values across these two columns\n     select(names(case_adm3), total) %>%                 # keep only important columns, including total population\n     mutate(case_10kpop = round(cases/total * 10000, 3)) # make new column with case rate per 10000, rounded to 3 decimals\n\ncase_adm3                                                # print to console for viewing## # A tibble: 10 x 5\r\n## # Groups:   admin3pcod [10]\r\n##    admin3pcod admin3name     cases  total case_10kpop\r\n##    <chr>      <chr>          <int>  <int>       <dbl>\r\n##  1 SL040102   Mountain Rural   298  33993       87.7 \r\n##  2 SL040208   West III         218 210252       10.4 \r\n##  3 SL040207   West II          156 145109       10.8 \r\n##  4 SL040204   East II          113  99821       11.3 \r\n##  5 SL040203   East I            69  68284       10.1 \r\n##  6 SL040201   Central I         60  69683        8.61\r\n##  7 SL040206   West I            31  60186        5.15\r\n##  8 SL040205   East III          27 500134        0.54\r\n##  9 SL040202   Central II        26  23874       10.9 \r\n## 10 <NA>       <NA>               2     NA       NA\ncase_adm3_sf <- case_adm3 %>%                 # begin with cases & rate by admin unit\n  left_join(sle_adm3, by=\"admin3pcod\") %>%    # join to shapefile data by common column\n  select(objectid, admin3pcod,                # keep only certain columns of interest\n         admin3name = admin3name.x,           # clean name of one column\n         admin2name, admin1name,\n         cases, total, case_10kpop,\n         geometry) %>%                        # keep geometry so polygons can be plotted\n  st_as_sf()                                  # convert to shapefile\n# tmap mode\ntmap_mode(\"plot\")               # view static map\n\n# plot polygons\ntm_shape(case_adm3_sf) + \n        tm_polygons(\"cases\") +  # color by number of cases column\n        tm_text(\"admin3name\")   # name display\n# Cases per 10K population\ntmap_mode(\"plot\")             # static viewing mode\n\n# plot\ntm_shape(case_adm3_sf) +                # plot polygons\n  tm_polygons(\"case_10kpop\",            # color by column containing case rate\n              breaks=c(0, 10, 50, 100), # define break points for colors\n              palette = \"Purples\"       # use a purple color palette\n              ) +\n  tm_text(\"admin3name\")                 # display text"},{"path":"gis-basics.html","id":"basemaps","chapter":"1 GIS basics","heading":"1.6 Basemaps","text":"","code":""},{"path":"gis-basics.html","id":"openstreetmap","chapter":"1 GIS basics","heading":"OpenStreetMap","text":"describe achieve basemap using OpenStreetMap features. Alternative methods include using ggmap requires free registration Google (details).First load OpenStreetMap package, get basemap., create object map, define using function openmap() OpenStreetMap package (documentation). provide following:upperLeft lowerRight Two coordinate pairs specifying limits basemap tile\r\ncase ’ve put max min linelist rows, map respond dynamically data\r\ncase ’ve put max min linelist rows, map respond dynamically datazoom = (null determined automatically)type = type basemap - listed several possibilities code currently using first one ([1]) “osm”mergeTiles = chose TRUE basetiles merged oneIf plot basemap right now, using autoplot.OpenStreetMap() OpenStreetMap package, see units axes latitude/longitude coordinates. using different coordinate system. correctly display case residences (stored lat/long), must changed.\r\nThus, want convert map latitude/longitude openproj() function OpenStreetMap package. provide basemap map also provide Coordinate Reference System (CRS) want. providing “proj.4” character string WGS 1984 projection, can provide CRS ways well. (see page better understand proj.4 string )Now create plot see along axes latitude longitude coordinate. coordinate system converted. Now cases plot correctly overlaid!See tutorials info.","code":"\n# load package\npacman::p_load(OpenStreetMap)\n\n# Fit basemap by range of lat/long coordinates. Choose tile type\nmap <- openmap(\n  upperLeft = c(max(linelist$lat, na.rm=T), max(linelist$lon, na.rm=T)),   # limits of basemap tile\n  lowerRight = c(min(linelist$lat, na.rm=T), min(linelist$lon, na.rm=T)),\n  zoom = NULL,\n  type = c(\"osm\", \"stamen-toner\", \"stamen-terrain\",\"stamen-watercolor\", \"esri\",\"esri-topo\")[1])\nautoplot.OpenStreetMap(map)\n# Projection WGS84\nmap_latlon <- openproj(map, projection = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n# Plot map. Must use \"autoplot\" in order to work with ggplot\nautoplot.OpenStreetMap(map_latlon)"},{"path":"gis-basics.html","id":"contoured-density-heatmaps","chapter":"1 GIS basics","heading":"1.7 Contoured density heatmaps","text":"describe achieve contoured density heatmap cases, basemap, beginning linelist (one row per case).Create basemap tile OpenStreetMap, described abovePlot cases linelist using latitude longitude columnsConvert points density heatmap stat_density_2d() ggplot2,basemap lat/long coordinates, can plot cases top using lat/long coordinates residence.Building function autoplot.OpenStreetMap() create basemap, ggplot2 functions easily add top, shown geom_point() :\r\nmap might difficult interpret, especially points overlapping. can instead plot 2d density map using ggplot2 function stat_density_2d(). still using linelist lat/lon coordinates, 2D kernel density estimation performed results displayed contour lines - like topographical map. Read full documentation .","code":"\n# Plot map. Must be autoplotted to work with ggplot\nautoplot.OpenStreetMap(map_latlon)+                 # begin with the basemap\n  geom_point(                                       # add xy points from linelist lon and lat columns \n    data = linelist,                                \n    aes(x = lon, y = lat),\n    size = 1, \n    alpha = 0.5,\n    show.legend = FALSE) +                          # drop legend entirely\n  labs(x = \"Longitude\",                             # titles & labels\n       y = \"Latitude\",\n       title = \"Cumulative cases\")\n# begin with the basemap\nautoplot.OpenStreetMap(map_latlon)+\n  \n  # add the density plot\n  ggplot2::stat_density_2d(\n        data = linelist,\n        aes(\n          x = lon,\n          y = lat,\n          fill = ..level..,\n          alpha = ..level..),\n        bins = 10,\n        geom = \"polygon\",\n        contour_var = \"count\",\n        show.legend = F) +                          \n  \n  # specify color scale\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  \n  # labels \n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of cumulative cases\")"},{"path":"gis-basics.html","id":"time-series-heatmap","chapter":"1 GIS basics","heading":"1.7.1 Time series heatmap","text":"density heatmap shows cumulative cases. can examine outbreak time space faceting heatmap based month symptom onset, derived linelist.begin linelist, creating new column Year Month onset. format() function base R changes date displayed. case want “YYYY-MM”.Now, simply introduce facetting via ggplot2 density heatmap. facet_wrap() applied, using new column rows. set number facet columns 3 clarity.","code":"\n# Extract month of onset\nlinelist <- linelist %>% \n  mutate(date_onset_ym = format(date_onset, \"%Y-%m\"))\n\n# Examine the values \ntable(linelist$date_onset_ym, useNA = \"always\")## \r\n## 2014-04 2014-05 2014-06 2014-07 2014-08 2014-09 2014-10 2014-11 2014-12 2015-01 2015-02 2015-03 2015-04    <NA> \r\n##       3      13      21      32      86     170     196     124     107      83      48      43      29      45\n# packages\npacman::p_load(OpenStreetMap, tidyverse)\n\n# begin with the basemap\nautoplot.OpenStreetMap(map_latlon)+\n  \n  # add the density plot\n  ggplot2::stat_density_2d(\n        data = linelist,\n        aes(\n          x = lon,\n          y = lat,\n          fill = ..level..,\n          alpha = ..level..),\n        bins = 10,\n        geom = \"polygon\",\n        contour_var = \"count\",\n        show.legend = F) +                          \n  \n  # specify color scale\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  \n  # labels \n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of cumulative cases\")+\n  \n  # facet the plot by month-year of onset\n  facet_wrap(~ date_onset_ym, ncol = 4)               "},{"path":"gis-basics.html","id":"resources","chapter":"1 GIS basics","heading":"1.8 Resources","text":"R Simple Features sf package\r\nhttps://cran.r-project.org/web/packages/sf/vignettes/sf1.htmlR Simple Features sf package\r\nhttps://cran.r-project.org/web/packages/sf/vignettes/sf1.htmlR tmap package\r\nhttps://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.htmlR tmap package\r\nhttps://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.htmlggmap: Spatial Visualization ggplot2\r\nhttps://journal.r-project.org/archive/2013-1/kahle-wickham.pdfggmap: Spatial Visualization ggplot2\r\nhttps://journal.r-project.org/archive/2013-1/kahle-wickham.pdfIntro making maps RIntro making maps R","code":""}]
