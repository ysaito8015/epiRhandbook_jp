[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE HANDBOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download handbook data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, automated reports dashboards, epidemic modeling projections, demographic pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources“Follow-along” [downloading example data][Download handbook data]Offline versionSee instructions download offline version handbook [Download book data] page.LanguagesWe seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"welcome comments suggestions feedback link, email epiRhandbook@gmail.com via issue/pull request Github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"handbook produced collaboration epidemiologists around world, spare time, drawing upon experiences organizations including local, state/provincial, national health agencies, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Daniel Molling, Isha Berry, Emma Buajitti, Chris Bailey, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Manual Albela Miranda, Priscilla Spencer, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Adam Vaughan, Lionel Monteiro, Joao Muianga.","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"gis-basics.html","id":"gis-basics","chapter":"1 GIS basics","heading":"1 GIS basics","text":"","code":""},{"path":"gis-basics.html","id":"overview","chapter":"1 GIS basics","heading":"1.1 Overview","text":"Spatial aspects data can provide lot insights situation outbreak, answer questions :current disease hotspots?hotspots changed time?access health facilities? improvements needed?section, explore basic spatial data visualization methods using tmap ggplot2 packages.\r\nalso walk basic spatial data management querying methods sf package.","code":""},{"path":"gis-basics.html","id":"key-terms","chapter":"1 GIS basics","heading":"1.2 Key terms","text":"introduce key terminology. thorough introduction GIS spatial analysis, suggest review one longer tutorials courses listed References section.Geographic Information System (GIS) - GIS framework environment gathering, managing, analyzing, visualizing spatial data.","code":""},{"path":"gis-basics.html","id":"gis-software","chapter":"1 GIS basics","heading":"1.2.1 GIS software","text":"popular GIS software allow point--click interaction map development spatial analysis. tools comes advantages needing learn code ease manually selecting placing icons features map. two popular ones:ArcGIS - commercial GIS software developed company ESRI, popular quite expensiveQGIS - free open-source GIS software can almost anything ArcGIS can . can download QGIS hereUsing R GIS can seem intimidating first instead “point--click”, “command-line interface” (must code acquire desired outcome). However, major advantage need repetitively produce maps analysis reproducible.","code":""},{"path":"gis-basics.html","id":"spatial-data","chapter":"1 GIS basics","heading":"1.2.2 Spatial data","text":"two primary forms spatial data used GIS vector raster data:Vector Data - common format spatial data used GIS, vector data comprised geometric features vertices paths. Vector spatial data can divided three widely-used types:Points - point consists coordinate pair (x,y) representing specific location coordinate system. Points basic form spatial data, may used denote case (.e. patient home) location (.e. hospital) map.Points - point consists coordinate pair (x,y) representing specific location coordinate system. Points basic form spatial data, may used denote case (.e. patient home) location (.e. hospital) map.Lines - line composed two connected points. Lines length, may used denote things like roads rivers.Lines - line composed two connected points. Lines length, may used denote things like roads rivers.Polygons - polygon composed least three line segments connected points. Polygon features length (.e. perimeter area) well area measurement. Polygons may used note area (.e. village) structure (.e. actual area hospital).Polygons - polygon composed least three line segments connected points. Polygon features length (.e. perimeter area) well area measurement. Polygons may used note area (.e. village) structure (.e. actual area hospital).Raster Data - alternative format spatial data, raster data matrix cells (e.g. pixels) cell containing information height, temperature, slope, forest cover, etc. often aerial photographs, satellite imagery, etc. Rasters can also used “base maps” vector data.","code":""},{"path":"gis-basics.html","id":"visualizing-spatial-data","chapter":"1 GIS basics","heading":"1.2.3 Visualizing spatial data","text":"visually represent spatial data map, GIS software requires provide sufficient information different features , relation one another. using vector data, true use cases, information typically stored shapefile:Shapefiles - shapefile common data format storing “vector” spatial data consisting lines, points, polygons. single shapefile actually collection least three files - .shp, .shx, .dbf. sub-component files must present given directory (folder) shapefile readable. associated files can compressed ZIP folder sent via email download website.shapefile contain information features , well locate Earth’s surface. important Earth globe, maps typically two-dimensional; choices “flatten” spatial data can big impact look interpretation resulting map.Coordinate Reference Systems (CRS) - CRS coordinate-based system used locate geographical features Earth’s surface. key components:Coordinate System - many many different coordinate systems, make sure know system coordinates . Degrees latitude/longitude common, also see UTM coordinates.Coordinate System - many many different coordinate systems, make sure know system coordinates . Degrees latitude/longitude common, also see UTM coordinates.Units - Know units coordinate system (e.g. decimal degrees, meters)Units - Know units coordinate system (e.g. decimal degrees, meters)Datum - particular modeled version Earth. revised years, ensure map layers using datum.Datum - particular modeled version Earth. revised years, ensure map layers using datum.Projection - reference mathematical equation used project truly round earth onto flat surface (map).Projection - reference mathematical equation used project truly round earth onto flat surface (map).Remember can summarise spatial data without using mapping tools shown . Sometimes simple table geography (e.g. district, country, etc.) needed!","code":""},{"path":"gis-basics.html","id":"getting-started-with-gis","chapter":"1 GIS basics","heading":"1.3 Getting started with GIS","text":"couple key items need think make map. include:dataset – can spatial data format (shapefiles, noted ) may spatial format (instance just csv).dataset – can spatial data format (shapefiles, noted ) may spatial format (instance just csv).dataset spatial format also need reference dataset. Reference data consists spatial representation data related attribute table, include material containing location address information specific features.\r\nworking pre-defined geographic boundaries (example, administrative regions), reference shapefiles often freely available download government agency data sharing organization. doubt, good place start Google “[regions] shapefile”\r\naddress information, latitude longitude, may need use geocoding engine get spatial reference data records.\r\ndataset spatial format also need reference dataset. Reference data consists spatial representation data related attribute table, include material containing location address information specific features.working pre-defined geographic boundaries (example, administrative regions), reference shapefiles often freely available download government agency data sharing organization. doubt, good place start Google “[regions] shapefile”working pre-defined geographic boundaries (example, administrative regions), reference shapefiles often freely available download government agency data sharing organization. doubt, good place start Google “[regions] shapefile”address information, latitude longitude, may need use geocoding engine get spatial reference data records.address information, latitude longitude, may need use geocoding engine get spatial reference data records.idea want present information datasets target audience. many different types maps, important think type map best fits needs.idea want present information datasets target audience. many different types maps, important think type map best fits needs.","code":""},{"path":"gis-basics.html","id":"types-of-maps-for-visualizing-your-data","chapter":"1 GIS basics","heading":"1.3.1 Types of maps for visualizing your data","text":"Choropleth map - type thematic map colors, shading, patterns used represent geographic regions relation value attribute. instance larger value indicated darker colour smaller value. type map particularly useful visualizing variable changes across defined regions geopolitical areas.Case density heatmap - type thematic map colours used represent intensity value, however, use defined regions geopolitical boundaries group data. type map typically used showing ‘hot spots’ areas high density concentration points.Dot density map - thematic map type uses dots represent attribute values data. type map best used visualize scatter data visually scan clusters.Proportional symbols map (graduated symbols map) - thematic map similar choropleth map, instead using colour indicate value attribute uses symbol (usually circle) relation value. instance larger value indicated larger symbol smaller value. type map best used want visualize size quantity data across geographic regions.can also combine several different types visualizations show complex geographic patterns; example, map shows health facility catchment areas:","code":""},{"path":"gis-basics.html","id":"preparation","chapter":"1 GIS basics","heading":"1.4 Preparation","text":"","code":""},{"path":"gis-basics.html","id":"load-packages","chapter":"1 GIS basics","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.can see overview R packages deal spatial data CRAN “Spatial Task View”.","code":"\npacman::p_load(\n  rio,           # to import data\n  here,          # to locate files\n  tidyverse,     # to clean, handle, and plot the data (includes ggplot2 package)\n  sf,            # to manage spatial data using a Simple Feature format\n  tmap,          # to produce simple maps, works for both interactive and static maps\n  janitor,       # to clean column names\n  OpenStreetMap, # to add OSM basemap in ggplot map\n  spdep          # spatial statistics\n  ) "},{"path":"gis-basics.html","id":"sample-case-data","chapter":"1 GIS basics","heading":"Sample case data","text":"demonstration purposes, work random sample 1000 cases simulated Ebola epidemic linelist dataframe (computationally, working fewer cases easier display handbook). want download data follow step--step, see instructions [Download handbook data] page.dataset imported using import() function rio package. See page [Import export] various ways import data.Next select random sample 1000 rows using sample() base R.Now want convert linelist class dataframe, object class “sf” (spatial features). Given linelist two columns “lon” “lat” representing longitude latitude case’s residence, easy.use package sf (spatial features) function st_as_sf() create new object call linelist_sf. new object look essentially linelist, columns lon lat designated coordinate columns, coordinate reference system (CRS) assigned points displayed.","code":"\n# import clean case linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")  \n# generate 1000 random row numbers, from the number of rows in linelist\nsample_rows <- sample(nrow(linelist), 1000)\n\n# subset linelist to keep only the sample rows, and all columns\nlinelist <- linelist[sample_rows,]\n# Create sf object\nlinelist_sf <- linelist %>%\n     sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)"},{"path":"gis-basics.html","id":"admin-boundary-shapefiles","chapter":"1 GIS basics","heading":"Admin boundary shapefiles","text":"Sierra Leone: Admin boundary shapefilesIn advance, downloaded administrative boundaries Sierra Leone Humanitarian Data Exchange (HDX) website .Now going following save Admin Level 3 shapefile R:Import shapefileClean column namesFilter rows keep areas interestTo import shapefile use read_sf() function sf. provided filepath via (). - case file within R project “data”, “gis”, “shp” subfolders, filename “sle_adm3.shp” (see pages [Import export] [R projects] information).Next use clean_names() janitor package standardize column names shapefile. also use filter() keep rows admin2name “Western Area Urban” “Western Area Rural”.can see shapefile looks import cleaning. Scroll right see columns admin level 0 (country), admin level 1, admin level 2, finally admin level 3. level character name pcode unique identifier code. pcode expands increasing admin level e.g. SL (Sierra Leone) -> SL04 (Western) -> SL0410 (Western Area Rural) -> SL040101 (Koya Rural).","code":"\nsle_adm3_raw <- sf::read_sf(here::here(\"data\", \"gis\", \"shp\", \"sle_adm3.shp\"))\n# ADM3 level clean\nsle_adm3 <- sle_adm3_raw %>%\n  janitor::clean_names() %>% # standardize column names\n  filter(admin2name %in% c(\"Western Area Urban\", \"Western Area Rural\")) # filter to keep certain areas"},{"path":"gis-basics.html","id":"population-data","chapter":"1 GIS basics","heading":"Population data","text":"Sierra Leone: Population ADM3Again, import data downloaded HDX (link ). time use import() load .csv file. also pass imported file clean_names() standardize column names.population file looks like. Scroll right see jurisdiction columns male population, female populaton, total population, population break-columns age group.","code":"\n# Population by ADM3\nsle_adm3_pop <- rio::import(here::here(\"data\", \"gis\", \"population\", \"sle_admpop_adm3_2020.csv\")) %>%\n  janitor::clean_names()"},{"path":"gis-basics.html","id":"health-facilities","chapter":"1 GIS basics","heading":"Health Facilities","text":"Sierra Leone: Health facility data OpenStreetMapAgain downloaded locations health facilities HDX .import shapefile read_sf(), clean column names, filter keep points tagged either “hospital”, “clinic”, “doctors”.resulting dataframe - scroll right see facility name coordinates.","code":"\n# OSM health facility shapefile\nsle_hf <- sf::read_sf(here::here(\"data\", \"gis\", \"shp\", \"sle_hf.shp\")) %>% \n  janitor::clean_names() %>%\n  filter(amenity %in% c(\"hospital\", \"clinic\", \"doctors\"))"},{"path":"gis-basics.html","id":"plotting-coordinates","chapter":"1 GIS basics","heading":"1.5 Plotting coordinates","text":"easiest way plot X-Y coordinates (longitude/latitude, points) draw points directly linelist_sf object created preparation section.package tmap offers simple mapping capabilities static (“plot” mode) interactive (“view” mode) just lines code. tmap syntax similar *ggplot2**, commands added +. Read detail vignette.set tmap mode. case use “plot” mode, produces static outputs., points plotted alone.tm_shape() provided linelist_sf objects. add points via tm_dots(), specifying size color. linelist_sf sf object, already designated two columns contain lat/long coordinates coordinate reference system (CRS):Alone, points tell us much. also map administrative boundaries:use tm_shape() (see documentation) instead providing case points shapefile, provide administrative boundary shapefile (polygons).bbox = argument (bbox stands “bounding box”) can specify coordinate boundaries. First show map display without bbox, .now points polygons together:read good comparison mapping options R, see blog post.","code":"\ntmap_mode(\"plot\") # choose either \"view\" or \"plot\"\n# Just the cases (points)\ntm_shape(linelist_sf) + tm_dots(size=0.08, col='blue')\n# Just the administrative boundaries (polygons)\ntm_shape(sle_adm3) +               # admin boundaries shapefile\n  tm_polygons(col = \"#F7F7F7\")+    # show polygons in light grey\n  tm_borders(col = \"#000000\",      # show borders with color and line weight\n             lwd = 2) +\n  tm_text(\"admin3name\")            # column text to display for each polygon\n\n\n# Same as above, but with zoom from bounding box\ntm_shape(sle_adm3,\n         bbox = c(-13.3, 8.43,    # corner\n                  -13.2, 8.5)) +  # corner\n  tm_polygons(col = \"#F7F7F7\") +\n  tm_borders(col = \"#000000\", lwd = 2) +\n  tm_text(\"admin3name\")\n# All together\ntm_shape(sle_adm3, bbox = c(-13.3, 8.43, -13.2, 8.5)) +\n  tm_polygons(col = \"#F7F7F7\") +\n  tm_borders(col = \"#000000\", lwd = 2) +\n  tm_text(\"admin3name\")+\ntm_shape(linelist_sf) +\n  tm_dots(size=0.08, col='blue') "},{"path":"gis-basics.html","id":"spatial-joins","chapter":"1 GIS basics","heading":"1.6 Spatial joins","text":"","code":""},{"path":"gis-basics.html","id":"points-in-polygon","chapter":"1 GIS basics","heading":"Points in polygon","text":"Spatial assign administrative units casesThe case linelist contain information administrative units cases. Although ideal collect information initial data collection phase, can also assign administrative units individual cases based spatial relationships (.e. point intersects polygon).sf package offers various methods spatial joins. See documentation st_join method spatial join types reference., spatially intersect case locations (points) ADM3 boundaries (polygons):Begin linelist (points)Spatial join boundaries, setting type join “st_intersects”Use select() keep certain new administrative boundary columnsAll columns sle_adms added linelist! case now columns detailing ’s administrative units. example, want keep two new columns, select() old column names just two additional interest:, just display purposes can see first ten cases admin level 3 (ADM3) jurisdictions attached, based point spatially intersected polygon shapes.Now can describe cases administrative unit - something able spatial join!can also create bar plot case counts administrative unit.example, begin ggplot() linelist_adm, can apply factor functions like fct_infreq() orders bars frequency (see page [Factors] tips).","code":"\nlinelist_adm <- linelist_sf %>%\n  \n  # join the administrative boundary file to the linelist, based on spatial intersection\n  sf::st_join(sle_adm3, join = st_intersects)\nlinelist_adm <- linelist_sf %>%\n  \n  # join the administrative boundary file to the linelist, based on spatial intersection\n  sf::st_join(sle_adm3, join = st_intersects) %>% \n  \n  # Keep the old column names and two new admin ones of interest\n  select(names(linelist_sf), admin3name, admin3pcod)\n# Now you will see the ADM3 names attached to each case\nlinelist_adm %>% select(case_id, admin3name, admin3pcod)## Simple feature collection with 1000 features and 3 fields\r\n## geometry type:  POINT\r\n## dimension:      XY\r\n## bbox:           xmin: -13.27125 ymin: 8.447887 xmax: -13.20576 ymax: 8.490648\r\n## geographic CRS: WGS 84\r\n## First 10 features:\r\n##      case_id     admin3name admin3pcod                   geometry\r\n## 1499  1a9636         West I   SL040206 POINT (-13.24618 8.483135)\r\n## 2888  9af4dd       West III   SL040208 POINT (-13.25328 8.458484)\r\n## 4112  226a55 Mountain Rural   SL040102 POINT (-13.21966 8.464122)\r\n## 5259  1e7b26         East I   SL040203 POINT (-13.21243 8.483939)\r\n## 1101  27adef        West II   SL040207  POINT (-13.2324 8.463045)\r\n## 1907  9ed61d      Central I   SL040201 POINT (-13.23081 8.480567)\r\n## 502   683d70        West II   SL040207  POINT (-13.23872 8.47635)\r\n## 3853  3971cd       West III   SL040208  POINT (-13.2532 8.458296)\r\n## 2275  5b6843        East II   SL040204 POINT (-13.21239 8.481218)\r\n## 1423  170473        West II   SL040207 POINT (-13.24781 8.470387)\n# Make new dataframe containing counts of cases by administrative unit\ncase_adm3 <- linelist_adm %>%          # begin with linelist with new admin cols\n  as_tibble() %>%                      # convert to tibble for better display\n  group_by(admin3pcod, admin3name) %>% # group by admin unit, both by name and pcode \n  summarise(cases = n()) %>%           # summarize and count rows\n  arrange(desc(cases))                     # arrange in descending order\n\ncase_adm3## # A tibble: 10 x 3\r\n## # Groups:   admin3pcod [10]\r\n##    admin3pcod admin3name     cases\r\n##    <chr>      <chr>          <int>\r\n##  1 SL040102   Mountain Rural   282\r\n##  2 SL040208   West III         227\r\n##  3 SL040207   West II          191\r\n##  4 SL040204   East II          109\r\n##  5 SL040201   Central I         57\r\n##  6 SL040203   East I            49\r\n##  7 SL040206   West I            39\r\n##  8 SL040205   East III          25\r\n##  9 SL040202   Central II        19\r\n## 10 <NA>       <NA>               2\nggplot(\n  data = linelist_adm,                       # begin with linelist containing admin unit info\n  aes(x = fct_rev(fct_infreq(admin3name))))+ # x-axis is admin units, ordered by frequency (reversed)\n  geom_bar()+                                # create bars, height is number of rows\n  coord_flip()+                              # flip X and Y axes for easier reading of adm units\n  theme_classic()+                           # simplify background\n  labs(                                      # titles and labels\n    x = \"Admin level 3\",\n    y = \"Number of cases\",\n    title = \"Number of cases, by adminstative unit\",\n    caption = \"As determined by a spatial join, from 1000 randomly sampled cases from linelist\"\n  )"},{"path":"gis-basics.html","id":"nearest-neighbor","chapter":"1 GIS basics","heading":"Nearest neighbor","text":"Finding nearest health facility / catchment areaIt might useful know health facilities located relation disease hot spots.can use st_nearest_feature join method st_join() function (sf package) visualize closest health facility individual cases.begin shapefile linelist linelist_sfWe spatially join sle_hf, locations health facilities clinics (points)can see (first 50 rows) case now data nearest clinic/hospitalWe can see “Den Clinic” closest health facility ~30% cases.visualize results, can use tmap - time interactive mode easier viewing","code":"\n# Closest health facility to each case\nlinelist_sf_hf <- linelist_sf %>%                  # begin with linelist shapefile  \n  st_join(sle_hf, join = st_nearest_feature) %>%   # data from nearest clinic joined to case data \n  select(case_id, osm_id, name, amenity)           # keep columns of interest, including id, name, type, and geometry of healthcare facility\n# Count cases by health facility\nhf_catchment <- linelist_sf_hf %>%    # begin with linelist including nearest clinic data\n  as.data.frame() %>%                 # convert from shapefile to dataframe\n  group_by(name) %>%                  # group by name of clinic\n  summarise(case_n = n()) %>%         # count number of rows per clinic \n  arrange(desc(case_n))               # arrange in descending order\n\nhf_catchment                          # print to console## # A tibble: 8 x 2\r\n##   name                                  case_n\r\n##   <chr>                                  <int>\r\n## 1 Den Clinic                               371\r\n## 2 Shriners Hospitals for Children          320\r\n## 3 GINER HALL COMMUNITY HOSPITAL            166\r\n## 4 panasonic                                 53\r\n## 5 ARAB EGYPT CLINIC                         29\r\n## 6 Princess Christian Maternity Hospital     29\r\n## 7 MABELL HEALTH CENTER                      18\r\n## 8 <NA>                                      14\ntmap_mode(\"view\")   # set tmap mode to interactive  \n\n# plot the cases and clinic points \ntm_shape(linelist_sf_hf) +            # plot cases\n  tm_dots(size=0.08, col='name') +    # cases colored by closest clinic\ntm_shape(sle_hf) +                    # plot clinic facilities  \n  tm_dots(size=0.3, col='red') +      # red large dots\n  tm_text(\"name\") +                   # overlay with name of facility\ntm_view(set.view = c(-13.2284, 8.4699, 13), # adjust zoom (center coords, zoom)\n        set.zoom.limits = c(13,14))"},{"path":"gis-basics.html","id":"buffers","chapter":"1 GIS basics","heading":"Buffers","text":"can also explore many cases located within 2.5km (~30 mins) walking distance closest health facility.Note: accurate distance calculations, better re-project sf object respective local map projection system UTM (Earth projected onto planar surface). example, simplicity stick World Geodetic System (WGS84) Geograhpic coordinate system (Earth represented spherical / round surface, therefore units decimal degrees). use general conversion : 1 decimal degree = ~111km.See information map projections coordinate systems esri article.First, create circular buffer radius ~2.5km around health facility. done function st_buffer() tmap. units map lat/long decimal degrees, “0.02” interpreted. map coordinate system meters, number must provided meters.plot buffer zones :**Second, intersect buffers cases (points) using st_join() join type st_intersects*. , data buffers joined points intersect .Now can count results: 210 1000 cases intersect buffer (value missing), live 30 mins walk nearest health facility.can visualize results cases intersect buffer appear red.","code":"\nsle_hf_2k <- sle_hf %>%\n  st_buffer(dist=0.02)       # decimal degrees translating to approximately 2.5km \ntmap_mode(\"plot\")\n# buffers\ntm_shape(sle_hf_2k) +\n  tm_borders(col = \"red\", lwd = 2)\n# Intersect the cases with the buffers\nlinelist_sf_hf_2k <- linelist_sf_hf %>%\n  st_join(sle_hf_2k, join = st_intersects, left = TRUE) %>%\n  filter(osm_id.x==osm_id.y | is.na(osm_id.y)) %>%\n  select(case_id, osm_id.x, name.x, amenity.x, osm_id.y)\nlinelist_sf_hf_2k %>% \n  filter(is.na(osm_id.y)) %>% # empty column - did not join to any buffer\n  nrow()## [1] 210\ntmap_mode(\"view\")\n\n# cases\ntm_shape(linelist_sf_hf) +\n  tm_dots(size=0.08, col='name') +\n# buffers\ntm_shape(sle_hf_2k) +\n  tm_borders(col = \"red\", lwd = 2) +\n\n# cases outside buffers\ntm_shape(linelist_sf_hf_2k %>%  filter(is.na(osm_id.y))) +\n  tm_dots(size=0.1, col='red') +\ntm_view(set.view = c(-13.2284,8.4699, 13), set.zoom.limits = c(13,14))"},{"path":"gis-basics.html","id":"other-spatial-joins","chapter":"1 GIS basics","heading":"Other spatial joins","text":"Alternative values argument join include (documentation)st_contains_properlyst_containsst_covered_byst_coversst_crossesst_disjointst_equals_exactst_equalsst_is_within_distancest_nearest_featurest_overlapsst_touchesst_within","code":""},{"path":"gis-basics.html","id":"choropleth-maps","chapter":"1 GIS basics","heading":"1.7 Choropleth maps","text":"Choropleth maps can useful visualize data pre-defined area, usually administrative unit health area. outbreak response can help target resource allocation specific areas high incidence rates, example.Now administrative unit names assigned cases (see section spatial joins, ), can start mapping case counts area (choropleth maps).Since also population data ADM3, can add information case_adm3 table created previously.begin dataframe created previous step case_adm3, summary table administrative unit number cases.populaton data sle_adm3_pop joined using left_join() dplyr basis common values across column admin3pcod case_adm3 dataframe, column adm_pcode sle_adm3_pop dataframe. See page [Joining data]).select() applied new dataframe, keep useful columns - total total populationCases per 10,000 populaton calculated new column mutate()Join table ADM3 polygons shapefile mappingMapping resultsWe can also map incidence rates","code":"\n# Add population data and calculate cases per 10K population\ncase_adm3 <- case_adm3 %>% \n     left_join(sle_adm3_pop,                             # add columns from pop dataset\n               by = c(\"admin3pcod\" = \"adm3_pcode\")) %>%  # join based on common values across these two columns\n     select(names(case_adm3), total) %>%                 # keep only important columns, including total population\n     mutate(case_10kpop = round(cases/total * 10000, 3)) # make new column with case rate per 10000, rounded to 3 decimals\n\ncase_adm3                                                # print to console for viewing## # A tibble: 10 x 5\r\n## # Groups:   admin3pcod [10]\r\n##    admin3pcod admin3name     cases  total case_10kpop\r\n##    <chr>      <chr>          <int>  <int>       <dbl>\r\n##  1 SL040102   Mountain Rural   282  33993       83.0 \r\n##  2 SL040208   West III         227 210252       10.8 \r\n##  3 SL040207   West II          191 145109       13.2 \r\n##  4 SL040204   East II          109  99821       10.9 \r\n##  5 SL040201   Central I         57  69683        8.18\r\n##  6 SL040203   East I            49  68284        7.18\r\n##  7 SL040206   West I            39  60186        6.48\r\n##  8 SL040205   East III          25 500134        0.5 \r\n##  9 SL040202   Central II        19  23874        7.96\r\n## 10 <NA>       <NA>               2     NA       NA\ncase_adm3_sf <- case_adm3 %>%                 # begin with cases & rate by admin unit\n  left_join(sle_adm3, by=\"admin3pcod\") %>%    # join to shapefile data by common column\n  select(objectid, admin3pcod,                # keep only certain columns of interest\n         admin3name = admin3name.x,           # clean name of one column\n         admin2name, admin1name,\n         cases, total, case_10kpop,\n         geometry) %>%                        # keep geometry so polygons can be plotted\n  st_as_sf()                                  # convert to shapefile\n# tmap mode\ntmap_mode(\"plot\")               # view static map\n\n# plot polygons\ntm_shape(case_adm3_sf) + \n        tm_polygons(\"cases\") +  # color by number of cases column\n        tm_text(\"admin3name\")   # name display\n# Cases per 10K population\ntmap_mode(\"plot\")             # static viewing mode\n\n# plot\ntm_shape(case_adm3_sf) +                # plot polygons\n  tm_polygons(\"case_10kpop\",            # color by column containing case rate\n              breaks=c(0, 10, 50, 100), # define break points for colors\n              palette = \"Purples\"       # use a purple color palette\n              ) +\n  tm_text(\"admin3name\")                 # display text"},{"path":"gis-basics.html","id":"basemaps","chapter":"1 GIS basics","heading":"1.8 Basemaps","text":"","code":""},{"path":"gis-basics.html","id":"openstreetmap","chapter":"1 GIS basics","heading":"OpenStreetMap","text":"describe achieve basemap using OpenStreetMap features. Alternative methods include using ggmap requires free registration Google (details).First load OpenStreetMap package, get basemap., create object map, define using function openmap() OpenStreetMap package (documentation). provide following:upperLeft lowerRight Two coordinate pairs specifying limits basemap tile\r\ncase ’ve put max min linelist rows, map respond dynamically data\r\ncase ’ve put max min linelist rows, map respond dynamically datazoom = (null determined automatically)type = type basemap - listed several possibilities code currently using first one ([1]) “osm”mergeTiles = chose TRUE basetiles merged oneIf plot basemap right now, using autoplot.OpenStreetMap() OpenStreetMap package, see units axes latitude/longitude coordinates. using different coordinate system. correctly display case residences (stored lat/long), must changed.\r\nThus, want convert map latitude/longitude openproj() function OpenStreetMap package. provide basemap map also provide Coordinate Reference System (CRS) want. providing “proj.4” character string WGS 1984 projection, can provide CRS ways well. (see page better understand proj.4 string )Now create plot see along axes latitude longitude coordinate. coordinate system converted. Now cases plot correctly overlaid!See tutorials info.","code":"\n# load package\npacman::p_load(OpenStreetMap)\n\n# Fit basemap by range of lat/long coordinates. Choose tile type\nmap <- openmap(\n  upperLeft = c(max(linelist$lat, na.rm=T), max(linelist$lon, na.rm=T)),   # limits of basemap tile\n  lowerRight = c(min(linelist$lat, na.rm=T), min(linelist$lon, na.rm=T)),\n  zoom = NULL,\n  type = c(\"osm\", \"stamen-toner\", \"stamen-terrain\", \"stamen-watercolor\", \"esri\",\"esri-topo\")[1])\nautoplot.OpenStreetMap(map)\n# Projection WGS84\nmap_latlon <- openproj(map, projection = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\n# Plot map. Must use \"autoplot\" in order to work with ggplot\nautoplot.OpenStreetMap(map_latlon)"},{"path":"gis-basics.html","id":"contoured-density-heatmaps","chapter":"1 GIS basics","heading":"1.9 Contoured density heatmaps","text":"describe achieve contoured density heatmap cases, basemap, beginning linelist (one row per case).Create basemap tile OpenStreetMap, described abovePlot cases linelist using latitude longitude columnsConvert points density heatmap stat_density_2d() ggplot2,basemap lat/long coordinates, can plot cases top using lat/long coordinates residence.Building function autoplot.OpenStreetMap() create basemap, ggplot2 functions easily add top, shown geom_point() :\r\nmap might difficult interpret, especially points overlapping. can instead plot 2d density map using ggplot2 function stat_density_2d(). still using linelist lat/lon coordinates, 2D kernel density estimation performed results displayed contour lines - like topographical map. Read full documentation .","code":"\n# Plot map. Must be autoplotted to work with ggplot\nautoplot.OpenStreetMap(map_latlon)+                 # begin with the basemap\n  geom_point(                                       # add xy points from linelist lon and lat columns \n    data = linelist,                                \n    aes(x = lon, y = lat),\n    size = 1, \n    alpha = 0.5,\n    show.legend = FALSE) +                          # drop legend entirely\n  labs(x = \"Longitude\",                             # titles & labels\n       y = \"Latitude\",\n       title = \"Cumulative cases\")\n# begin with the basemap\nautoplot.OpenStreetMap(map_latlon)+\n  \n  # add the density plot\n  ggplot2::stat_density_2d(\n        data = linelist,\n        aes(\n          x = lon,\n          y = lat,\n          fill = ..level..,\n          alpha = ..level..),\n        bins = 10,\n        geom = \"polygon\",\n        contour_var = \"count\",\n        show.legend = F) +                          \n  \n  # specify color scale\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  \n  # labels \n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of cumulative cases\")"},{"path":"gis-basics.html","id":"time-series-heatmap","chapter":"1 GIS basics","heading":"1.9.1 Time series heatmap","text":"density heatmap shows cumulative cases. can examine outbreak time space faceting heatmap based month symptom onset, derived linelist.begin linelist, creating new column Year Month onset. format() function base R changes date displayed. case want “YYYY-MM”.Now, simply introduce facetting via ggplot2 density heatmap. facet_wrap() applied, using new column rows. set number facet columns 3 clarity.","code":"\n# Extract month of onset\nlinelist <- linelist %>% \n  mutate(date_onset_ym = format(date_onset, \"%Y-%m\"))\n\n# Examine the values \ntable(linelist$date_onset_ym, useNA = \"always\")## \r\n## 2014-04 2014-05 2014-06 2014-07 2014-08 2014-09 2014-10 2014-11 2014-12 2015-01 2015-02 2015-03 2015-04    <NA> \r\n##       1      12      16      35      79     192     206     127      97      66      50      41      33      45\n# packages\npacman::p_load(OpenStreetMap, tidyverse)\n\n# begin with the basemap\nautoplot.OpenStreetMap(map_latlon)+\n  \n  # add the density plot\n  ggplot2::stat_density_2d(\n        data = linelist,\n        aes(\n          x = lon,\n          y = lat,\n          fill = ..level..,\n          alpha = ..level..),\n        bins = 10,\n        geom = \"polygon\",\n        contour_var = \"count\",\n        show.legend = F) +                          \n  \n  # specify color scale\n  scale_fill_gradient(low = \"black\", high = \"red\")+\n  \n  # labels \n  labs(x = \"Longitude\",\n       y = \"Latitude\",\n       title = \"Distribution of cumulative cases\")+\n  \n  # facet the plot by month-year of onset\n  facet_wrap(~ date_onset_ym, ncol = 4)               "},{"path":"gis-basics.html","id":"mapping-with-ggplot2","chapter":"1 GIS basics","heading":"1.10 Mapping with ggplot2","text":"already familiar using ggplot2, can use package instead create static maps data. geom_sf() function draw different objects based features (points, lines, polygons) data. example, can use geom_sf() ggplot() using sf data polygon geometry create choropleth map.illustrate works, can start ADM3 polygons shapefile used earlier. Recall Admin Level 3 regions Sierra Leone:can use left_join() function dplyr add data like map shapefile object. case, going use case_adm3 data frame created earlier summarize case counts administrative region; however, can use approach map data stored data frame.make column chart case counts region, using ggplot2, call geom_col() follows:want use ggplot2 instead make choropleth map case counts, can use similar syntax call geom_sf() function:can customize appearance map using grammar consistent across ggplot2, example:R users comfortable working ggplot2, geom_sf() offers simple direct implementation suitable basic map visualizations. learn , read geom_sf() vignette ggplot2 book.","code":"\nsle_adm3## Simple feature collection with 12 features and 19 fields\r\n## geometry type:  MULTIPOLYGON\r\n## dimension:      XY\r\n## bbox:           xmin: -13.29894 ymin: 8.094272 xmax: -12.91333 ymax: 8.499809\r\n## geographic CRS: WGS 84\r\n## # A tibble: 12 x 20\r\n##    objectid admin3name   admin3pcod admin3ref_n  admin2name   admin2pcod admin1name admin1pcod admin0name admin0pcod date       valid_on   valid_to   shape_leng shape_area rowcacode0\r\n##  *    <dbl> <chr>        <chr>      <chr>        <chr>        <chr>      <chr>      <chr>      <chr>      <chr>      <date>     <date>     <date>          <dbl>      <dbl> <chr>     \r\n##  1      155 Koya Rural   SL040101   Koya Rural   Western Are~ SL0401     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.638   0.0137    SLE       \r\n##  2      156 Mountain Ru~ SL040102   Mountain Ru~ Western Are~ SL0401     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.293   0.00318   SLE       \r\n##  3      157 Waterloo Ru~ SL040103   Waterloo Ru~ Western Are~ SL0401     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.723   0.0136    SLE       \r\n##  4      158 York Rural   SL040104   York Rural   Western Are~ SL0401     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             1.24    0.0198    SLE       \r\n##  5      159 Central I    SL040201   Central I    Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.0688  0.000188  SLE       \r\n##  6      160 East I       SL040203   East I       Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.0575  0.000143  SLE       \r\n##  7      161 East II      SL040204   East II      Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.0840  0.000149  SLE       \r\n##  8      162 Central II   SL040202   Central II   Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.0488  0.0000651 SLE       \r\n##  9      163 West III     SL040208   West III     Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.302   0.00170   SLE       \r\n## 10      164 West I       SL040206   West I       Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.0695  0.000182  SLE       \r\n## 11      165 West II      SL040207   West II      Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.149   0.000547  SLE       \r\n## 12      167 East III     SL040205   East III     Western Are~ SL0402     Western    SL04       Sierra Le~ SL         2016-08-01 2016-10-17 NA             0.327   0.00310   SLE       \r\n## # ... with 4 more variables: rowcacode1 <chr>, rowcacode2 <chr>, rowcacode3 <chr>, geometry <MULTIPOLYGON [°]>\nsle_adm3_dat <- sle_adm3 %>% \n  inner_join(case_adm3, by = \"admin3pcod\") # inner join = retain only if in both data objects\n\nselect(sle_adm3_dat, admin3name.x, cases) # print selected variables to console## Simple feature collection with 9 features and 2 fields\r\n## geometry type:  MULTIPOLYGON\r\n## dimension:      XY\r\n## bbox:           xmin: -13.29894 ymin: 8.384533 xmax: -13.12612 ymax: 8.499809\r\n## geographic CRS: WGS 84\r\n## # A tibble: 9 x 3\r\n##   admin3name.x   cases                                                                                geometry\r\n##   <chr>          <int>                                                                      <MULTIPOLYGON [°]>\r\n## 1 Mountain Rural   282 (((-13.21496 8.474341, -13.21479 8.474289, -13.21465 8.474296, -13.21455 8.474298, -...\r\n## 2 Central I         57 (((-13.22646 8.489716, -13.22648 8.48955, -13.22644 8.489513, -13.22663 8.489229, -1...\r\n## 3 East I            49 (((-13.2129 8.494033, -13.21076 8.494026, -13.21013 8.494041, -13.2096 8.494025, -13...\r\n## 4 East II          109 (((-13.22653 8.491883, -13.22647 8.491853, -13.22642 8.49186, -13.22633 8.491814, -1...\r\n## 5 Central II        19 (((-13.23154 8.491768, -13.23141 8.491566, -13.23144 8.49146, -13.23131 8.491294, -1...\r\n## 6 West III         227 (((-13.28529 8.497354, -13.28456 8.496497, -13.28403 8.49621, -13.28338 8.496086, -1...\r\n## 7 West I            39 (((-13.24677 8.493453, -13.24669 8.493285, -13.2464 8.493132, -13.24627 8.493131, -1...\r\n## 8 West II          191 (((-13.25698 8.485518, -13.25685 8.485501, -13.25668 8.485505, -13.25657 8.485504, -...\r\n## 9 East III          25 (((-13.20465 8.485758, -13.20461 8.485698, -13.20449 8.485757, -13.20431 8.485577, -...\nggplot(data=sle_adm3_dat) +\n  geom_col(aes(x=fct_reorder(admin3name.x, cases, .desc=T),   # reorder x axis by descending 'cases'\n               y=cases)) +                                  # y axis is number of cases by region\n  theme_bw() +\n  labs(                                                     # set figure text\n    title=\"Number of cases, by administrative unit\",\n    x=\"Admin level 3\",\n    y=\"Number of cases\"\n  ) + \n  guides(x=guide_axis(angle=45))                            # angle x-axis labels 45 degrees to fit better\nggplot(data=sle_adm3_dat) + \n  geom_sf(aes(fill=cases))    # set fill to vary by case count variable\nggplot(data=sle_adm3_dat) +                           \n  geom_sf(aes(fill=cases)) +                        \n  scale_fill_continuous(high=\"#54278f\", low=\"#f2f0f7\") +    # change color gradient\n  theme_bw() +\n  labs(title = \"Number of cases, by administrative unit\",   # set figure text\n       subtitle = \"Admin level 3\"\n  )"},{"path":"gis-basics.html","id":"spatial-statistics","chapter":"1 GIS basics","heading":"1.11 Spatial statistics","text":"discussion far focused visualization spatial data. cases, may also interested using spatial statistics quantify spatial relationships attributes data. section provide brief overview key concepts spatial statistics, suggest resources helpful explore wish comprehensive spatial analyses.","code":""},{"path":"gis-basics.html","id":"spatial-relationships","chapter":"1 GIS basics","heading":"1.11.1 Spatial relationships","text":"can calculate spatial statistics, need specify relationships features data. many ways conceptualize spatial relationships, simple commonly-applicable model use adjacency - specifically, expect geographic relationship areas share border “neighbour” one another.can quantify adjacency relationships administrative region polygons sle_adm3 data using spdep package. specify queen contiguity, means regions neighbors share least one point along borders. alternative rook contiguity, requires regions share edge - case, irregular polygons, distinction trivial, cases choice queen rook can influential.matrix printed shows relationships 9 regions sle_adm3 data. score 0 indicates two regions neighbors, value 0 indicates neighbor relationship. values matrix scaled region total row weight 1.better way visualize neighbor relationships plotting :used adjacency approach identify neighboring polygons; neighbors identified also sometimes called contiguity-based neighbors. just one way choosing regions expected geographic relationship. common alternative approaches identifying geographic relationships generate distance-based neighbors; briefly, :K-nearest neighbors - Based distance centroids (geographically-weighted center polygon region), select n closest regions neighbors. maximum-distance proximity threshold may also specified. spdep, can use knearneigh() (see documentation).K-nearest neighbors - Based distance centroids (geographically-weighted center polygon region), select n closest regions neighbors. maximum-distance proximity threshold may also specified. spdep, can use knearneigh() (see documentation).Distance threshold neighbors - Select neighbors within distance threshold. spdep, neighbor relationships can identified using dnearneigh() (see documentation).Distance threshold neighbors - Select neighbors within distance threshold. spdep, neighbor relationships can identified using dnearneigh() (see documentation).","code":"\nsle_nb <- spdep::poly2nb(sle_adm3_dat, queen=T) # create neighbors \nsle_adjmat <- spdep::nb2mat(sle_nb)    # create matrix summarizing neighbor relationships\nsle_listw <- spdep::nb2listw(sle_nb)   # create listw (list of weights) object -- we will need this later\n\nsle_nb## Neighbour list object:\r\n## Number of regions: 9 \r\n## Number of nonzero links: 30 \r\n## Percentage nonzero weights: 37.03704 \r\n## Average number of links: 3.333333\nround(sle_adjmat, digits = 2)##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\r\n## 1 0.00 0.20 0.00 0.20 0.00  0.2 0.00 0.20 0.20\r\n## 2 0.25 0.00 0.00 0.25 0.25  0.0 0.00 0.25 0.00\r\n## 3 0.00 0.00 0.00 0.50 0.00  0.0 0.00 0.00 0.50\r\n## 4 0.25 0.25 0.25 0.00 0.00  0.0 0.00 0.00 0.25\r\n## 5 0.00 0.33 0.00 0.00 0.00  0.0 0.33 0.33 0.00\r\n## 6 0.50 0.00 0.00 0.00 0.00  0.0 0.00 0.50 0.00\r\n## 7 0.00 0.00 0.00 0.00 0.50  0.0 0.00 0.50 0.00\r\n## 8 0.20 0.20 0.00 0.00 0.20  0.2 0.20 0.00 0.00\r\n## 9 0.33 0.00 0.33 0.33 0.00  0.0 0.00 0.00 0.00\r\n## attr(,\"call\")\r\n## spdep::nb2mat(neighbours = sle_nb)\nplot(sle_adm3_dat$geometry) +                                           # plot region boundaries\n  spdep::plot.nb(sle_nb,as(sle_adm3_dat, 'Spatial'), col='grey', add=T) # add neighbor relationships"},{"path":"gis-basics.html","id":"spatial-autocorrelation","chapter":"1 GIS basics","heading":"1.11.2 Spatial autocorrelation","text":"Tobler’s oft-cited first law geography states “everything related everything else, near things related distant things.” epidemiology, often means risk particular health outcome given region similar neighboring regions far away. concept formalized spatial autocorrelation - statistical property geographic features similar values clustered together space. Statistical measures spatial autocorrelation can used quantify extent spatial clustering data, locate clustering occurs, identify shared patterns spatial autocorrelation distinct variables data. section gives overview common measures spatial autocorrelation calculate R.Moran’s - global summary statistic correlation value variable one region, values variable neighboring regions. Moran’s statistic typically ranges -1 1. value 0 indicates pattern spatial correlation, values closer 1 -1 indicate stronger spatial autocorrelation (similar values close together) spatial dispersion (dissimilar values close together), respectively.example, calculate Moran’s statistic quantify spatial autocorrelation Ebola cases mapped earlier (remember, subset cases simulated epidemic linelist dataframe). spdep package function, moran.test, can calculation us:output moran.test() function shows us Moran statistic 0.22. indicates presence spatial autocorrelation data - specifically, regions similar numbers Ebola cases likely close together. p-value provided moran.test() generated comparison expectation null hypothesis spatial autocorrelation, can used need report results formal hypothesis test.Local Moran’s - can decompose (global) Moran’s statistic calculated identify localized spatial autocorrelation; , identify specific clusters data. statistic, sometimes called Local Indicator Spatial Association (LISA) statistic, summarizes extent spatial autocorrelation around individual region. can useful finding “hot” “cold” spots map.show example, can calculate map Local Moran’s Ebola case counts used , local_moran() function spdep:Getis-Ord Gi* - another statistic commonly used hotspot analysis; large part, popularity statistic relates use Hot Spot Analysis tool ArcGIS. based assumption typically, difference variable’s value neighboring regions follow normal distribution. uses z-score approach identify regions significantly higher (hot spot) significantly lower (cold spot) values specified variable, compared neighbors.can calculate map Gi* statistic using localG() function spdep:Lee’s L test - statistical test bivariate spatial correlation. allows test whether spatial pattern given variable x similar spatial pattern another variable, y, hypothesized related spatially x.give example, let’s test whether spatial pattern Ebola cases simulated epidemic correlated spatial pattern population. start, need population variable sle_adm3 data. can use total variable sle_adm3_pop dataframe loaded earlier.can quickly visualize spatial patterns two variables side side, see whether look similar:Visually, patterns seem dissimilar. can use lee.test() function spdep test statistically whether pattern spatial autocorrelation two variables related. L statistic close 0 correlation patterns, close 1 strong positive correlation (.e. patterns similar), close -1 strong negative correlation (.e. patterns inverse).output shows Lee’s L statistic two variables -0.15, indicates weak negative correlation. confirms visual assessment pattern cases population related one another, provides evidence spatial pattern cases strictly result population density high-risk areas.Lee L statistic can useful making kinds inferences relationship spatially distributed variables; however, describe nature relationship two variables detail, adjust confounding, spatial regression techniques needed. described briefly following section.","code":"\nmoran_i <-spdep::moran.test(sle_adm3_dat$cases,    # numeric vector with variable of interest\n                            listw=sle_listw)       # listw object summarizing neighbor relationships\n\nmoran_i                                            # print results of Moran's I test## \r\n##  Moran I test under randomisation\r\n## \r\n## data:  sle_adm3_dat$cases  \r\n## weights: sle_listw    \r\n## \r\n## Moran I statistic standard deviate = 1.6366, p-value = 0.05086\r\n## alternative hypothesis: greater\r\n## sample estimates:\r\n## Moran I statistic       Expectation          Variance \r\n##        0.22007723       -0.12500000        0.04445734\n# calculate local Moran's I\nlocal_moran <- spdep::localmoran(                  \n  sle_adm3_dat$cases,                              # variable of interest\n  listw=sle_listw                                  # listw object with neighbor weights\n)\n\n# join results to sf data\nsle_adm3_dat<- cbind(sle_adm3_dat, local_moran)    \n\n# plot map\nggplot(data=sle_adm3_dat) +\n  geom_sf(aes(fill=Ii)) +\n  theme_bw() +\n  scale_fill_gradient2(low=\"#2c7bb6\", mid=\"#ffffbf\", high=\"#d7191c\",\n                       name=\"Local Moran's I\") +\n  labs(title=\"Local Moran's I statistic for Ebola cases\",\n       subtitle=\"Admin level 3 regions, Sierra Leone\")\n# Perform local G analysis\ngetis_ord <- spdep::localG(\n  sle_adm3_dat$cases,\n  sle_listw\n)\n\n# join results to sf data\nsle_adm3_dat$getis_ord <- getis_ord\n\n# plot map\nggplot(data=sle_adm3_dat) +\n  geom_sf(aes(fill=getis_ord)) +\n  theme_bw() +\n  scale_fill_gradient2(low=\"#2c7bb6\", mid=\"#ffffbf\", high=\"#d7191c\",\n                       name=\"Gi*\") +\n  labs(title=\"Getis-Ord Gi* statistic for Ebola cases\",\n       subtitle=\"Admin level 3 regions, Sierra Leone\")\nsle_adm3_dat <- sle_adm3_dat %>% \n  rename(population = total)                          # rename 'total' to 'population'\ntmap_mode(\"plot\")\n\ncases_map <- tm_shape(sle_adm3_dat) + tm_polygons(\"cases\") + tm_layout(main.title=\"Cases\")\npop_map <- tm_shape(sle_adm3_dat) + tm_polygons(\"population\") + tm_layout(main.title=\"Population\")\n\ntmap_arrange(cases_map, pop_map, ncol=2)   # arrange into 2x1 facets\nlee_test <- spdep::lee.test(\n  x=sle_adm3_dat$cases,          # variable 1 to compare\n  y=sle_adm3_dat$population,     # variable 2 to compare\n  listw=sle_listw                # listw object with neighbor weights\n)\n\nlee_test## \r\n##  Lee's L statistic randomisation\r\n## \r\n## data:  sle_adm3_dat$cases ,  sle_adm3_dat$population \r\n## weights: sle_listw  \r\n## \r\n## Lee's L statistic standard deviate = -0.99227, p-value = 0.8395\r\n## alternative hypothesis: greater\r\n## sample estimates:\r\n## Lee's L statistic       Expectation          Variance \r\n##       -0.14514460       -0.03494815        0.01233330"},{"path":"gis-basics.html","id":"spatial-regression","chapter":"1 GIS basics","heading":"1.11.3 Spatial regression","text":"may wish make statistical inferences relationships variables spatial data. cases, useful consider spatial regression techniques - , approaches regression explicitly consider spatial organization units data. reasons may need consider spatial regression models, rather standard regression models GLMs, include:Standard regression models assume residuals independent one another. presence strong spatial autocorrelation, residuals standard regression model likely spatially autocorrelated well, thus violating assumption. can lead problems interpreting model results, case spatial model preferred.Standard regression models assume residuals independent one another. presence strong spatial autocorrelation, residuals standard regression model likely spatially autocorrelated well, thus violating assumption. can lead problems interpreting model results, case spatial model preferred.Regression models also typically assume effect variable x constant observations. case spatial heterogeneity, effects wish estimate may vary space, may interested quantifying differences. case, spatial regression models offer flexibility estimating interpreting effects.Regression models also typically assume effect variable x constant observations. case spatial heterogeneity, effects wish estimate may vary space, may interested quantifying differences. case, spatial regression models offer flexibility estimating interpreting effects.details spatial regression approaches beyond scope handbook. section instead provide overview common spatial regression models uses, refer references may use wish explore area .Spatial error models - models assume error terms across spatial units correlated, case data violate assumptions standard OLS model. Spatial error models also sometimes referred simultaneous autoregressive (SAR) models. can fit using errorsarlm() function spatialreg package (spatial regression functions used part spdep).Spatial lag models - models assume dependent variable region influenced value independent variables , also values variables regions neighboring . Like spatial error models, spatial lag models also sometimes described simultaneous autoregressive (SAR) models. can fit using lagsarlm() function spatialreg package.spdep package contains several useful diagnostic tests deciding standard OLS, spatial lag, spatial error models. tests, called Lagrange Multiplier diagnostics, can used identify type spatial dependence data choose model appropriate. function lm.LMtests() can used calculate Lagrange Multiplier tests. Anselin (1988) also provides useful flow chart tool decide spatial regression model use based results Lagrange Multiplier tests:Bayesian hierarchical models - Bayesian approaches commonly used applications spatial analysis, commonly disease mapping. preferred cases case data sparsely distributed (example, case rare outcome) statistically “noisy”, can used generate “smoothed” estimates disease risk accounting underlying latent spatial process. may improve quality estimates. also allow investigator pre-specification (via choice prior) complex spatial correlation patterns may exist data, can account spatially-dependent -independent variation independent dependent variables. R, Bayesian hierarchical models can fit using CARbayes package (see vignette) R-INLA (see website textbook). R can also used call external software Bayesian estimation, JAGS WinBUGS.","code":""},{"path":"gis-basics.html","id":"resources","chapter":"1 GIS basics","heading":"1.12 Resources","text":"R Simple Features sf package vignetteR Simple Features sf package vignetteR tmap package vignetteR tmap package vignetteggmap: Spatial Visualization ggplot2ggmap: Spatial Visualization ggplot2Intro making maps R, overview different packagesIntro making maps R, overview different packagesSpatial Data R (EarthLab course)Spatial Data R (EarthLab course)Applied Spatial Data Analysis R textbookApplied Spatial Data Analysis R textbookAn Introduction Spatial Econometrics R workshopAn Introduction Spatial Econometrics R workshop","code":""},{"path":"data-table.html","id":"data-table","chapter":"2 Data Table","heading":"2 Data Table","text":"handbook focusses dplyr “verb” functions magrittr pipe operator %>% method clean group data, data.table package offers alternative method, goal creating clean readable code.page explore core functions data.table using Ebola case linelist, referenced throughout handbook.","code":""},{"path":"data-table.html","id":"intro-to-data-table","chapter":"2 Data Table","heading":"2.1 Intro to data table","text":"data table 2-dimensional data structure like data frame allows complex grouping operations performed. data.table syntax structured operations can performed rows, columns groups.structure DT[, j, ], separated 3 parts; , j arguments. argument allows subsetting required rows, j argument allows operate columns argument allows operate columns groups.page address following topics:Importing data use fread() fwrite()Selecting filtering rows using argumentUsing helper functions %like%, %chin%, %%Selecting computing columns using j argumentComputing groups using argumentAdding updating data data tables using :=","code":""},{"path":"data-table.html","id":"load-packages-and-import-data","chapter":"2 Data Table","heading":"2.2 Load packages and import data","text":"","code":""},{"path":"data-table.html","id":"load-packages-1","chapter":"2 Data Table","heading":"Load packages","text":"Using p_load() function pacman, load (install necessary) packages required analysis.","code":"\npacman::p_load(\n  rio,       # to import data\n  data.table, # to group and clean data\n  tidyverse, # allows use of pipe (%>%) function in this chapter\n  here \n  ) "},{"path":"data-table.html","id":"import-data","chapter":"2 Data Table","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download book data] page. dataset imported using import() function rio package. See page [Import export] various ways import data. use data.table() convert data frame data table.fread() function used directly import regular delimited files, .csv files, directly data table format. function, counterpart, fwrite(), used writing data.tables regular delimited files fast computationally efficient options large databases.first 20 rows linelist:Base R commands dim() used data frames can also used data tables","code":"\nlinelist <- rio::import(here(\"data\", \"linelist_cleaned.xlsx\")) %>% data.table()\ndim(linelist) #gives the number of rows and columns in the data table## [1] 5888   30"},{"path":"data-table.html","id":"the-i-argument-selecting-and-filtering-rows","chapter":"2 Data Table","heading":"2.3 The i argument: selecting and filtering rows","text":"Recalling DT[, j, ] structure, can filter rows using either row numbers logical expressions. argument first; therefore, syntax DT[] DT[,] can used.first example retrieves first 5 rows data table, second example subsets cases 18 years , third example subsets cases 18 years old diagnosed Central Hospital:Using .N argument represents total number rows data table. can used subset row numbers:","code":"\nlinelist[1:5] #returns the 1st to 5th row\nlinelist[age >= 18] #subsets cases are equal to or over 18 years\nlinelist[age >= 18 & hospital != \"Central Hospital\"] #subsets cases equal to or over 18 years old but not diagnosed at the Central Hospital\nlinelist[.N] #returns the last row\nlinelist[15:.N] #returns the 15th to the last row"},{"path":"data-table.html","id":"using-helper-functions-for-filtering","chapter":"2 Data Table","heading":"Using helper functions for filtering","text":"Data table uses helper functions make subsetting rows easy. %like% function used match pattern column, %chin% used match specific character, %% helper function used match numeric columns within prespecified range.following examples :\r\n* filter rows hospital variable contains “Hospital”\r\n* filter rows outcome “Recover” “Death”\r\n* filter rows age range 40-60","code":"\nlinelist[hospital %like% \"Hospital\"] #filter rows where the hospital variable contains “Hospital”\nlinelist[outcome %chin% c(\"Recover\", \"Death\")] #filter rows where the outcome is “Recover” or “Death”\nlinelist[age %between% c(40, 60)] #filter rows in the age range 40-60\n\n#%between% must take a vector of length 2, whereas %chin% can take vectors of length >= 1"},{"path":"data-table.html","id":"the-j-argument-selecting-and-computing-on-columns","chapter":"2 Data Table","heading":"2.4 The j argument: selecting and computing on columns","text":"Using DT[, j, ] structure, can select columns using numbers names. j argument second; therefore, syntax DT[, j] used. facilitate computations j argument, column wrapped using either list() .().","code":""},{"path":"data-table.html","id":"selecting-columns","chapter":"2 Data Table","heading":"Selecting columns","text":"first example retrieves first, third fifth columns data table, second example selects columns except height, weight gender columns. third example uses .() wrap select case_id outcome columns.","code":"\nlinelist[ , c(1,3,5)]\nlinelist[ , -c(\"gender\", \"age\", \"wt_kg\", \"ht_cm\")]\nlinelist[ , list(case_id, outcome)] #linelist[ , .(case_id, outcome)] works just as well"},{"path":"data-table.html","id":"computing-on-columns","chapter":"2 Data Table","heading":"Computing on columns","text":"combining j arguments possible filter rows compute columns. Using .N j argument also represents total number rows data table can useful return number rows row filtering.following examples :\r\n* Count number cases stayed 7 days hospital\r\n* Calculate mean age cases died military hospital\r\n* Calculate standard deviation, median, mean age cases recovered central hospitalRemember using .() wrap j argument facilitates computation, returns data table allows column naming.","code":"\nlinelist[days_onset_hosp > 7 , .N]## [1] 189\nlinelist[hospital %like% \"Military\" & outcome %chin% \"Death\", .(mean(age, na.rm = T))] #na.rm = T removes N/A values##         V1\r\n## 1: 15.9084\nlinelist[hospital == \"Central Hospital\" & outcome == \"Recover\", \n                 .(mean_age = mean(age, na.rm = T),\n                   median_age = median(age, na.rm = T),\n                   sd_age = sd(age, na.rm = T))] #this syntax does not use the helper functions but works just as well##    mean_age median_age   sd_age\r\n## 1: 16.85185         14 12.93857"},{"path":"data-table.html","id":"the-by-argument-computing-by-groups","chapter":"2 Data Table","heading":"2.5 The by argument: computing by groups","text":"argument third argument DT[, j, ] structure. argument accepts character vector list() .() syntax. Using .() syntax argument allows column renaming fly.following examples :\r\n* group number cases hospital\r\n* cases 18 years old , calculate mean height weight cases according gender whether recovered died\r\n* admissions lasted 7 days, count number cases according month admitted hospital admitted toData.table also allows chaining expressions follows:examples following assumption row data table equal new case, can use .N represent number rows data table. Another useful function represent number unique cases uniqueN(), returns number unique values given input. illustrated :answer 3, unique values gender column m, f N/. Compare base R function unique(), returns unique values given input:find number unique cases given month write following:","code":"\nlinelist[, .N, .(hospital)] #the number of cases by hospital##                                hospital    N\r\n## 1:                                Other  885\r\n## 2:                              Missing 1469\r\n## 3: St. Mark's Maternity Hospital (SMMH)  422\r\n## 4:                        Port Hospital 1762\r\n## 5:                    Military Hospital  896\r\n## 6:                     Central Hospital  454\nlinelist[age > 18, .(mean_wt = mean(wt_kg, na.rm = T),\n                             mean_ht = mean(ht_cm, na.rm = T)), .(gender, outcome)] #NAs represent the categories where the data is missing##    gender outcome  mean_wt  mean_ht\r\n## 1:      m Recover 71.90227 178.1977\r\n## 2:      f   Death 63.27273 159.9448\r\n## 3:      m   Death 71.61770 175.4726\r\n## 4:      f    <NA> 64.49375 162.7875\r\n## 5:      m    <NA> 72.65505 176.9686\r\n## 6:      f Recover 62.86498 159.2996\r\n## 7:   <NA> Recover 67.21429 175.2143\r\n## 8:   <NA>   Death 69.16667 170.7917\r\n## 9:   <NA>    <NA> 70.25000 175.5000\nlinelist[days_onset_hosp > 7, .N, .(month = month(date_hospitalisation), hospital)]##     month                             hospital  N\r\n##  1:     5                    Military Hospital  3\r\n##  2:     6                        Port Hospital  4\r\n##  3:     7                        Port Hospital  8\r\n##  4:     8 St. Mark's Maternity Hospital (SMMH)  5\r\n##  5:     8                    Military Hospital  9\r\n##  6:     8                                Other 10\r\n##  7:     8                        Port Hospital 10\r\n##  8:     9                        Port Hospital 28\r\n##  9:     9                              Missing 27\r\n## 10:     9                     Central Hospital 10\r\n## 11:     9 St. Mark's Maternity Hospital (SMMH)  6\r\n## 12:    10                              Missing  2\r\n## 13:    10                    Military Hospital  3\r\n## 14:     3                        Port Hospital  1\r\n## 15:     4                    Military Hospital  1\r\n## 16:     5                                Other  2\r\n## 17:     5                     Central Hospital  1\r\n## 18:     5                              Missing  1\r\n## 19:     6                              Missing  7\r\n## 20:     6 St. Mark's Maternity Hospital (SMMH)  2\r\n## 21:     6                    Military Hospital  1\r\n## 22:     7                    Military Hospital  3\r\n## 23:     7                                Other  1\r\n## 24:     7                              Missing  2\r\n## 25:     7 St. Mark's Maternity Hospital (SMMH)  1\r\n## 26:     8                     Central Hospital  2\r\n## 27:     8                              Missing  6\r\n## 28:     9                                Other  9\r\n## 29:     9                    Military Hospital 11\r\n## 30:    10                        Port Hospital  3\r\n## 31:    10                                Other  4\r\n## 32:    10 St. Mark's Maternity Hospital (SMMH)  1\r\n## 33:    10                     Central Hospital  1\r\n## 34:    11                              Missing  2\r\n## 35:    11                        Port Hospital  1\r\n## 36:    12                        Port Hospital  1\r\n##     month                             hospital  N\nlinelist[, .N, .(hospital)][order(-N)][1:3] #1st selects all cases by hospital, 2nd orders the cases in descending order, 3rd subsets the 3 hospitals with the largest caseload##             hospital    N\r\n## 1:     Port Hospital 1762\r\n## 2:           Missing 1469\r\n## 3: Military Hospital  896\nlinelist[, .(uniqueN(gender))] #remember .() in the j argument returns a data table##    V1\r\n## 1:  3\nlinelist[, .(unique(gender))]##      V1\r\n## 1:    m\r\n## 2:    f\r\n## 3: <NA>\nlinelist[, .(uniqueN(case_id)), .(month = month(date_hospitalisation))]##     month   V1\r\n##  1:     5   62\r\n##  2:     6  100\r\n##  3:     7  198\r\n##  4:     8  509\r\n##  5:     9 1170\r\n##  6:    10 1228\r\n##  7:    11  813\r\n##  8:    12  576\r\n##  9:     1  434\r\n## 10:     2  310\r\n## 11:     3  290\r\n## 12:     4  198"},{"path":"data-table.html","id":"adding-and-updating-to-data-tables","chapter":"2 Data Table","heading":"2.6 Adding and updating to data tables","text":":= operator used add update data data table. Adding columns data table can done following ways:complex aggregations beyond scope introductory chapter, idea provide popular viable alternative dplyr grouping cleaning data. data.table package great package allows neat readable code.","code":"\nlinelist[, adult := age >= 18] #adds one column\nlinelist[, c(\"child\", \"wt_lbs\") := .(age < 18, wt_kg*2.204)] #to add multiple columns requires c(\"\") and list() or .() syntax\nlinelist[, `:=` (bmi_in_range = (bmi > 16 & bmi < 40),\n                         no_infector_source_data = is.na(infector) | is.na(source))] #this method uses := as a functional operator `:=`\nlinelist[, adult := NULL] #deletes the column"},{"path":"data-table.html","id":"resources-1","chapter":"2 Data Table","heading":"2.7 Resources","text":"useful resources information:\r\n* https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html\r\n* https://github.com/Rdatatable/data.table\r\n* https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf\r\n* https://www.machinelearningplus.com/data-manipulation/datatable--r-complete-guide/\r\n* https://www.datacamp.com/community/tutorials/data-table-r-tutorialYou can perform summary function grouped data; see Cheat Sheet info:\r\nhttps://s3.amazonaws.com/assets.datacamp.com/blog_assets/datatable_Cheat_Sheet_R.pdf","code":""},{"path":"ggplot-basics.html","id":"ggplot-basics","chapter":"3 ggplot basics","heading":"3 ggplot basics","text":"ggplot2 popular data visualisation package R generally used instead base R creating figures. “gg” name represents “grammar graphics”. ggplot2 benefits wide variety supplementary R packages enhance functionality.syntax significantly different base R plotting, learning curve associated . Using ggplot2 generally requires user format data way highly tidyverse compatible, ultimately makes using packages together effective.page cover:fundamentals plotting ggplot2Tips tricks make plots sharpThere several extensive ggplot2 tutorials linked resources section. can also download data visualization ggplot cheatsheet RStudio website. want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-basics.html","id":"preparation-1","chapter":"3 ggplot basics","heading":"3.1 Preparation","text":"","code":""},{"path":"ggplot-basics.html","id":"load-packages-2","chapter":"3 ggplot basics","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"ggplot-basics.html","id":"import-data-1","chapter":"3 ggplot basics","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"ggplot-basics.html","id":"general-cleaning","chapter":"3 ggplot basics","heading":"General cleaning","text":"preparing data plot, best make data adhere “tidy” data standards much possible. achieve expanded data management pages handbook, [Cleaning data core functions].simple ways can prepare data make better plotting can include making contents data better display - necessarily mean better data manipulation! example:Replace NA values character column string “Unknown”Clean columns “data friendly” values underscores etc changed normal text title case (see [Characters strings])examples action:","code":"\nlinelist <- linelist %>%\n  # make display version of columns with more friendly names\n  mutate(\n    # f to Male, f to Female, NA to Unknown\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",\n                            gender == \"f\" ~ \"Female\",\n                            is.na(gender) ~ \"Unknown\"),\n    # replace NA with unknown for outcome\n    outcome_disp = replace_na(outcome, \"Unknown\")\n  )"},{"path":"ggplot-basics.html","id":"pivoting-longer","chapter":"3 ggplot basics","heading":"Pivoting longer","text":"matter data structure, ggplot2 often also want pivot data longer formats, allow us use set variables single variable. Read page [Pivoting data].example, say “wide” data case symptoms (shown shown , style linelist).first 50 rows look:wanted show number cases specific symptoms, limited fact symptom specific column. However, can pivot symptoms columns longer format like :first 50 rows. Note case 5 rows - one possibly symptom. Scroll right see new columns symptom_name symptom_is_present. Note format useful operations, just used plot made .","code":"\nsymptoms_data <- linelist %>% \n  select(c(case_id, fever, chills, cough, aches, vomit))\nsymptoms_data_long <- symptoms_data %>%\n  pivot_longer(cols = -case_id,\n               names_to = \"symptom_name\",\n               values_to = \"symptom_is_present\") %>%\n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\"))"},{"path":"ggplot-basics.html","id":"basics-of-ggplot","chapter":"3 ggplot basics","heading":"3.2 Basics of ggplot","text":"“Grammar graphics” - ggplot2Plotting ggplot2 based “adding” plot layers attribute specifications top one another, sub-command added plus symbol (+). result multi-layer plot object can saved, modified, printed, exported, etc.ggplot objects can highly complex, basic order layers usually look like :Begin baseline ggplot() command - establish coordinate base specify datasetAdd “geom” layers - geometric functions visualize data bar graph, line plot, scatter plot, histogram, etc (combination!). functions start geom_ prefix.Add adjustments plot specify axis labels, title, fonts, sizes, color schemes, legends, rotate axes, etc.simple example skeleton code follows. explain component sections .","code":"\nggplot(data = my_data)+  \n  geom_XXXX(mapping = aes(x = col1, y = col2), fill = \"color\")+\n  labs()+\n  theme()"},{"path":"ggplot-basics.html","id":"ggplot","chapter":"3 ggplot basics","heading":"3.3 ggplot()","text":"opening command ggplot2 plot ggplot(). command simply creates blank canvas upon add layers. “opens” way layers added + symbol.Typically, command ggplot() includes data = argument plot. sets default dataset used subsequent layers plot.Finally, command end + closing parentheses. leaves command “open”. plot execute/appear command includes final layer without + end.","code":"\n# This will create plot that is a blank canvas\nggplot(data = linelist)"},{"path":"ggplot-basics.html","id":"geoms","chapter":"3 ggplot basics","heading":"3.4 Geoms","text":"blank canvas sufficient! need create geometries data! Bar plots, histograms, scatter plots, box plots!done adding layers geometry initial ggplot() command. many ggplot2 functions create “geoms”. functions begins “geom_”, refer generically geom_XXXX(). 40 geoms ggplot2 many others created fans. View ggplot2 gallery. common geoms listed :Histograms - geom_histogram()Bar charts - geom_bar() geom_col()Box plots - geom_boxplot()Points (e.g. scatter plots) - geom_point()Line graphs - geom_line() geom_path()Trend lines - geom_smooth()one plot can display one multiple geoms. added +, plotted sequentially later geoms plotted top previous ones.two bar plots functions - geom_bar() geom_col() discussed depth later section.simply knowing geom functions sufficient produce plot! must also map data plot…","code":""},{"path":"ggplot-basics.html","id":"mapping-plot-aesthetics-to-data","chapter":"3 ggplot basics","heading":"3.5 Mapping plot aesthetics to data","text":"next core component ggplot() object plot “aesthetics” mapped columns data. plot “aesthetic”, mean visual property object plot.geoms, essential aesthetics must mapped columns data x-axis, (necessary) y-axis.Aesthetics “mapped” columns data specified mapping = argument. exact assignments made within aes(), provided mapping = aes(), shown ., ggplot() command data set case linelist, within aes() column age mapped x-axis, column wt_kg mapped y-axis. + continues plotting command leads geom_point(). geom inherits mapped aesthetics ggplot() command - know axis-column assignments proceeds visualize relationships points canvas.following command utilizes data, slightly different aesthetic mapping different geom. produces histogram geom_histogram(), nature requires column mapped x-axis. count y-axis generated automatically.Aesthetic mapping can defined several places, even multiple times!mapping = aes() can written several places, . can written top ggplot() command, /individual geom_XXXX() beneath. nuances include:Mapping assignments specified top ggplot() command apply defaults across geom .Mapping assignments specified within one geom_XXXX() apply geom.Likewise, data = specified top ggplot() apply default geom , can also specify data geom, desired (one way create plot combines multiple datasets).Thus, following commands create plot:","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))"},{"path":"ggplot-basics.html","id":"other-aesthetics","chapter":"3 ggplot basics","heading":"3.6 Other aesthetics","text":"aesthetics, often specific type geom. examples:shape = Display point (geom_point()) dot, star, triangle, square, etc.fill = interior color (e.g. bar boxplot)color = exterior line(s) bar, boxplot, etc. (point color using geom_point())size = Size (e.g. line thickness, point size)alpha = Transparency (1 = opaque, 0 = invisible)binwidth = Width histogram binslinetype = Line type (e.g. solid, dashed, dotted)non-axis aesthetics can assigned static values (e.g. size = 1) can mapped column (e.g. size = age). want aesthetic assigned static value, assignment placed outside mapping = aes(). want aesthetic scaled/depend value row data, assignment made inside mapping = aes().","code":""},{"path":"ggplot-basics.html","id":"assigned-a-static-value","chapter":"3 ggplot basics","heading":"Assigned a static value","text":"want value static, write assignment within geom_XXXX() outside mapping = aes() statement (may even one geom). assignment values unchanging - example, size = 1 color = \"blue\".two examples. first, mapping assignments axes set ggplot() command, color, size, alpha alone geom_point(). Note written ggplot(). second example, axis mapping done within geom (just example - make difference), binwidth, color, fill, alpha outside aes() set static values.","code":"\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"red\", size = 0.5, alpha = 0.1)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist)+       # set data\n  geom_histogram(              # display histogram\n    mapping = aes(x = age),      # axis mapping for histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency"},{"path":"ggplot-basics.html","id":"assigned-to-a-column","chapter":"3 ggplot basics","heading":"Assigned to a column","text":"can map non-axis aesthetics (size, color, fill, alpha…) columns data. case, display scaled depends value row data. Essentially, data grouped values assigned column. column values continuous, examples , aesthetic scale used continuous. column assign discrete, scaled colors/sizes/etc. display discrete scale group (read grouping section).case, assign aesthetics within aes(), alongside axes assignments. assignments now made column names, static values. finally, like axes assignments, choose put aes() top ggplot() command assignments apply default geoms .Two examples .Note first example color point reflects age value - scale appeared legend! now just note scale exists - show modify later sections. second example highlights two new aesthetics mapped columns (color size), shape alpha remain mapped static values outside aes().becomes important track layers aesthetics making complex plots - like multiple geoms.example , size = aesthetic assigned twice - geom_point() geom_smooth() - times static value.Note propoerly aligning axes plot multiple dataset top one another can difficult. Consider instead using cowplot similar package combine two plots - described section ggplot tips page.","code":"\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()            # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = age_years)) + # map aesthetics to columns\n  geom_point(size = 1, alpha = 0.5) +  # add points for each row of data\n  geom_smooth(method = \"lm\", size = 2) # add a trend line with linear method, width of 2"},{"path":"ggplot-basics.html","id":"ggplotgroups","chapter":"3 ggplot basics","heading":"3.7 Groups","text":"can easily group data “plot group”. fact, already done ! simply assign grouping column appropriate plot aesthetic, within mapping = aes(). , demonstrated using continuous values, works way discrete/categorical values.example, want groups represented different color points gender, color = gender within geom’s aes(), shown . , legend automatically appears.Note depending geom, may need use different arguments group data. geom_point() likely use color =, shape = size =. Whereas geom_bar() likely use fill =.information - basic way grouping data adding group = argument within mapping = aes() assigning column. However, change colors, fill, shapes. create legend. Yet good aware argument case want use .many examples grouped plot pages plotting continuous categorical data. adjust order presentation groups plot, see ggplot tips page page [Working factors].","code":"\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)"},{"path":"ggplot-basics.html","id":"facets-small-multiples","chapter":"3 ggplot basics","heading":"Facets / Small-multiples","text":"Facets, “small-multiples”, used split one plot multi-panel figure, one panel (“facet”) per group. dataset used facet, type plot shown facet, every facet specific level variable. Faceting functionality comes ggplot2, legends axes panels automatically aligned.packages discussed ggplot tips page used combine completely different plots (cowplot patchwork) one figure.Faceting done one two functions:facet_wrap() show different facet level single variable. One example showing different epidemic curve hospital region. Facets ordered alphabetically, unless variable factor order.can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.nrow ncol relevant, subgroups presented gridYou can use formala synatx either function. can stipulate two faceting variables, ‘~’ . one faceting variable, ‘.’ used placeholder non-used second faceting variable - see code examples.can quickly become overwhelming amount information - good ensure don’t many levels variable choose facet ! quick examples malaria dataset (see [Download book data]) consists daily case counts malaria facilities, age group.import quick modifications simplicity:first 50 rows malaria data . Note column malaria_tot, also columns counts age group (used second, facet_grid() example).","code":"\n# These data are daily counts of malaria cases, by facility-day\nmalaria_data <- import(here(\"data\", \"malaria_facility_count_data.rds\")) %>%  # import\n  select(-submitted_date, -Province, -newid)# %>%                             # remove unneeded columns\n  # group_by(District, data_date) %>%\n  # summarise(                                                                 # summarise facility-counts up to District level\n  #   malaria_tot = sum(malaria_tot, na.rm=T),\n  #   malaria_0_4 = sum(`malaria_rdt_0-4`, na.rm=T),\n  #   malaria_5_14 = sum(`malaria_rdt_5-14`, na.rm=T),\n  #   malaria_15 = sum(`malaria_rdt_15`, na.rm=T)\n  # )"},{"path":"ggplot-basics.html","id":"facet_wrap","chapter":"3 ggplot basics","heading":"facet_wrap()","text":"moment, let’s focus columns malaria_tot District. Ignore age-specific count columns now. plot epidemic curves geom_col(), produces bar day specified y-axis height column malaria_tot (use geom_col() data daily counts, one row per case - see Plot categorical data).add command facet_wrap(), specify tilde column facet (District case). can place another column left side tilde, - create one facet combination - recommend facet_grid() instead. use case, one facet created unique value District.","code":"\n# A plot with facets by district\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()                               # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district\") +\n  facet_wrap(~District)                       # the facets are created## NULL"},{"path":"ggplot-basics.html","id":"facet_grid","chapter":"3 ggplot basics","heading":"facet_grid()","text":"can use facet_grid() approach cross two variables. Let’s say want cross District age. Well, need data transformations age columns get data ggplot-preferred “long” format. age groups columns - want single column called age_group another called num_cases. See page [Pivoting data] information process.Now first 50 rows data look like :pass two variables facet_grid(), easiest use formula notation (e.g. x ~ y) x rows y columns. plot, using facet_grid() show plots combination columns age_group District.","code":"\nmalaria_age <- malaria_data %>%\n  select(-malaria_tot) %>% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # choose columns to pivot longer\n    names_to = \"age_group\",      # column names become age group\n    values_to = \"num_cases\"      # values to a single column (num_cases)\n  ) %>%\n  mutate(\n    age_group = str_replace(age_group, \"malaria_rdt_\", \"\"),\n    age_group = forcats::fct_relevel(age_group, \"5-14\", after = 1))\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group)"},{"path":"ggplot-basics.html","id":"free-or-fixed-axes","chapter":"3 ggplot basics","heading":"Free or fixed axes","text":"axes scales displayed faceting default (fixed) across facets. helpful comparison, always appropriate optimal.using facet_wrap() facet_grid(), can add scales = \"free_y\" (plot ) heights faceted histograms standardised shapes easier compare. particularly useful actual counts small one subcategories trends otherwise hard see. Instead free_y can also write free_x x axis free axes. Note facet_grid, y scales facets row, x scales facets column.using facet_grid , can add space = \"free_y\" space = \"free_x\" actual height width facet weighted values figure within. works scales = \"free\" (y x) already applies.","code":"\n# Free y-axis\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group, scales = \"free_y\")\n\n# Free x-axis (date axis)\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group, scales = \"free_x\")"},{"path":"ggplot-basics.html","id":"storing-plots","chapter":"3 ggplot basics","heading":"3.8 Storing plots","text":"","code":""},{"path":"ggplot-basics.html","id":"saving-plots","chapter":"3 ggplot basics","heading":"Saving plots","text":"default run ggplot() command, plot printed Plots RStudio pane. However, can also save plot object using assignment operator <- giving name. print unless object name run. can also print wrapping plot name print(), necessary certain circumstances plot created inside loop.","code":"\n# define plot\nage_by_wt <- ggplot(data = linelist, mapping = aes(x = age_years, y = wt_kg, color = age_years))+\n  geom_point(alpha = 0.1)\n\n# print\nage_by_wt    "},{"path":"ggplot-basics.html","id":"modifying-saved-plots","chapter":"3 ggplot basics","heading":"Modifying saved plots","text":"One nice thing ggplot2 can define plot (), add layers starting name. repeat commands created original plot!example, modify plot age_by_wt defined , include vertical line age 50, just add + continue….","code":"\nage_by_wt+\n  geom_vline(xintercept = 50)"},{"path":"ggplot-basics.html","id":"labels","chapter":"3 ggplot basics","heading":"3.9 Labels","text":"Surely want add adjust plot’s labels. easily done labs() function, added + just geoms .Within labs() can provide character strings arguements:x = y = x-axis y-axis title (labels)title = main plot titlesubtitle = subtitle plot, smaller text titlecaption = caption plot, bottom-right defaultHere plot made earlier, nicer labels:Note caption assignment used str_glue() stringr package implant dynamic R code within string text. caption display maximum hospitalization date linelist. Read page [Characters strings].adjust legend title, provide argument used create labs(). example assigned color = age create legend. Therefore, provide color = labs() assigned legend title desired (“Age” capital ). create legend aes(fill = COLUMN), labs() edit fill = adjust legend title. See section legends ggplot tips page details editing legend.","code":"\nage_by_wt <- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    color = \"Age\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt"},{"path":"ggplot-basics.html","id":"themes","chapter":"3 ggplot basics","heading":"3.10 Themes","text":"One best parts ggplot2 amount control plot - can define anything! Generally done adjusting “theme” arguments plot. done one two ways:Adding pre-defined theme_XXXX() functions make sweeping adjustments\r\ninclude theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() others\r\ninclude theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() othersAdjusting tiny aspect plot individually within theme()quite straight-forward, demonstrate pre-defined theme_XXXX() functions describe .theme() function can take large number arguments, edits specific aspects plot. won’t go examples, describe general pattern show find argument need. basic syntax :Add theme() geom labs()Within theme(), provide specific argument name plot element want edit (e.g. plot.title = plot title)Supply element_XXXX() function value argumentMost time element_text(), versions include element_rect() editing plot canvas background colors, even element_blank() remove plot elementsWithin element_XXXX() give arguments make fine adjustmentsThat description quite abstract convoluted, examples.plot looks quite silly, serves show variety ways can adjust plot. begin plot age_by_wt (defined ), add + theme_classic() (empty parentheses) enact several adjustments one command. , finer adjustments, add theme() command. Within , list arguments plot element want adjust - case many. can nice organize sub-sections new lines.describe just : legend.position = unique accepts simple values like “bottom”, “top”, “left”, “right”. generally, text-related arguments require place details within element_text(). See adjust title size element_text(size = 30), caption horizontal alignment element_text(hjust = 0) (right left), make subtitle italicized element_text(face = \"italic\").especially common theme() arguments. recognize patterns, appending .x .y apply change one axis.many theme arguments! remember ??? worry - impossible remember . Luckily tools help :See tidyverse documentation modifying theme complete list.TIP: Run theme_get() ggplot2 print list 90+ theme() arguments console.TIP: ever want remove element plot, can also theme()! Just pass element_blank() argument disappear completely!","code":"\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     "},{"path":"ggplot-basics.html","id":"bar-plots","chapter":"3 ggplot basics","heading":"“Bar plots”","text":"Geoms “bar plots” deserve special mention, easily confused.","code":""},{"path":"ggplot-basics.html","id":"geom_bar","chapter":"3 ggplot basics","heading":"geom_bar()","text":"Use geom_bar() want bar height (stacked bar components) reflect number relevant rows data.Provide one axis column assignment (typically x-axis). provide x y, get Error: stat_count() can x y aesthetic.can create stacked bars adding fill = column assignment, explained .automatic title opposite axis “count”, represents number rows","code":"\nggplot(data = linelist)+\n  geom_bar(mapping = aes(y = hospital, fill = gender))"},{"path":"ggplot-basics.html","id":"geom_col","chapter":"3 ggplot basics","heading":"geom_col()","text":"Use geom_col() want bar height (stacked bar height) reflect pre-calculated value exists data. Often, proportion summary count value.Provide column assignments axes. Typically x-axis discrete y-axis assigned column values.automatic title opposite axis assigned y-axis column\r\nwant stacked bars using geom_col(), must take additional steps (often, pivoting) ensure data “long” format (see [Pivoting data]). one column containing categories (e.g. stacks) another column heights.","code":"\nproportion_died <- linelist %>%\n  group_by(hospital) %>% \n  summarise(\n    n_rows = n(),\n    n_died = sum(outcome == \"Death\", na.rm=TRUE),\n    p_died = n_died / n_rows\n  )\n\nproportion_died## # A tibble: 6 x 4\r\n##   hospital                             n_rows n_died p_died\r\n##   <chr>                                 <int>  <int>  <dbl>\r\n## 1 Central Hospital                        454    193  0.425\r\n## 2 Military Hospital                       896    399  0.445\r\n## 3 Missing                                1469    611  0.416\r\n## 4 Other                                   885    395  0.446\r\n## 5 Port Hospital                          1762    785  0.446\r\n## 6 St. Mark's Maternity Hospital (SMMH)    422    199  0.472\nggplot(data = proportion_died)+\n  geom_col(mapping = aes(x = hospital, y = p_died))\nproportion_outcome <- linelist %>%\n  group_by(hospital) %>% \n  summarise(\n    \n    # rows denominator per hospital\n    n_rows = n(),\n    \n    # counts per hospital\n    n_died = sum(outcome == \"Death\", na.rm=TRUE),\n    n_alive = sum(outcome == \"Recover\", na.rm=TRUE),\n    n_unk = sum(is.na(outcome), na.rm=TRUE),\n\n    \n    # proportions per hospital\n    p_died = n_died / n_rows,\n    p_alive = n_alive / n_rows,\n    p_unk = n_unk / n_rows\n  ) %>% \n  \n  # pivot the proportions columns so that they are condensed to two columns (category and value)\n  pivot_longer(starts_with(\"p_\"), names_to = \"proportion_cat\")\n\nproportion_outcome## # A tibble: 18 x 7\r\n##    hospital                             n_rows n_died n_alive n_unk proportion_cat value\r\n##    <chr>                                 <int>  <int>   <int> <int> <chr>          <dbl>\r\n##  1 Central Hospital                        454    193     165    96 p_died         0.425\r\n##  2 Central Hospital                        454    193     165    96 p_alive        0.363\r\n##  3 Central Hospital                        454    193     165    96 p_unk          0.211\r\n##  4 Military Hospital                       896    399     309   188 p_died         0.445\r\n##  5 Military Hospital                       896    399     309   188 p_alive        0.345\r\n##  6 Military Hospital                       896    399     309   188 p_unk          0.210\r\n##  7 Missing                                1469    611     514   344 p_died         0.416\r\n##  8 Missing                                1469    611     514   344 p_alive        0.350\r\n##  9 Missing                                1469    611     514   344 p_unk          0.234\r\n## 10 Other                                   885    395     290   200 p_died         0.446\r\n## 11 Other                                   885    395     290   200 p_alive        0.328\r\n## 12 Other                                   885    395     290   200 p_unk          0.226\r\n## 13 Port Hospital                          1762    785     579   398 p_died         0.446\r\n## 14 Port Hospital                          1762    785     579   398 p_alive        0.329\r\n## 15 Port Hospital                          1762    785     579   398 p_unk          0.226\r\n## 16 St. Mark's Maternity Hospital (SMMH)    422    199     126    97 p_died         0.472\r\n## 17 St. Mark's Maternity Hospital (SMMH)    422    199     126    97 p_alive        0.299\r\n## 18 St. Mark's Maternity Hospital (SMMH)    422    199     126    97 p_unk          0.230\nggplot(data = proportion_outcome)+\n  geom_col(mapping = aes(x = hospital, y = value, fill = proportion_cat))"},{"path":"ggplot-basics.html","id":"geom_histogram","chapter":"3 ggplot basics","heading":"geom_histogram()","text":"Histograms may look like bar charts, distinct measure distribution continuous variable. spaces “bars”, one column provided geom_histogram(). arguments specific histograms bin_width = breaks = specify data binned. page [Epidemic curves] provides additional detail.can plot traditional histogram geom_histogram() (y-axis represents counts per bin) relative density geom_density() (y-axis represents proportion rows value):","code":"\n# raw counts per bin\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = date_onset))\n\n# density plot\nggplot(data = linelist)+\n  geom_density(mapping = aes(x = date_onset))"},{"path":"ggplot-basics.html","id":"piping-into-ggplot2","chapter":"3 ggplot basics","heading":"Piping into ggplot2","text":"using pipes clean transform data, easy pass transformed data ggplot(). pipes pass dataset function--function transition + ggplot() function called. Note case, need specify data = argument, automatically defined piped-dataset.might look:","code":"\nlinelist %>%                                                     # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )"},{"path":"ggplot-basics.html","id":"exporting-plots","chapter":"3 ggplot basics","heading":"Exporting plots","text":"Exporting ggplots made easy ggsave() function ggplot2. can work two ways, either:Specify name plot object, file path name extension\r\nexample: ggsave(my_plot, \"Documents/work/plots/my_plot.png\")\r\nexample: ggsave(my_plot, \"Documents/work/plots/my_plot.png\")Save last plot printed\r\nexample: ggsave(\"Documents/work/plots/my_plot.png\")\r\nexample: ggsave(\"Documents/work/plots/my_plot.png\")can export png, pdf, jpeg, tiff, bmp, svg, several file types, specifying file extension file path.can also specify arguments width =, height =, units = (either “”, “cm”, “mm”). can also specify dpi = number plot resolution (e.g. 300). See function details entering ?ggsave reading documentation online.","code":""},{"path":"ggplot-basics.html","id":"resources-2","chapter":"3 ggplot basics","heading":"3.11 Resources","text":"R Data Science pages data visualization graphics communicaton","code":""},{"path":"plot-continuous-data.html","id":"plot-continuous-data","chapter":"4 Plot continuous data","heading":"4 Plot continuous data","text":"page discuss appropriate plotting continuous data, age, clinical measurements, distance. focus use ggplot2 (part tidyverse family packages), also brielfly describe base R plotting functions.Visualisations covered include:Plots one continuous variable:\r\nHistogram, classic graph present distribution continuous variable.\r\nBox plot (also called box whisker), show 25th, 50th, 75th percentiles, tail ends distribution, outliers (important limitations).\r\nJitter plot, show values points ‘jittered’ can (mostly) seen, even two value.\r\nViolin plot, show distribution continuous variable based symmetrical width ‘violin’.\r\nSina plot, combination jitter violin plots, individual points shown symmetrical shape distribution (via ggforce package).\r\nHistogram, classic graph present distribution continuous variable.Box plot (also called box whisker), show 25th, 50th, 75th percentiles, tail ends distribution, outliers (important limitations).Jitter plot, show values points ‘jittered’ can (mostly) seen, even two value.Violin plot, show distribution continuous variable based symmetrical width ‘violin’.Sina plot, combination jitter violin plots, individual points shown symmetrical shape distribution (via ggforce package).Scatter plot two continuous variables.Heat plots three continuous variables (linked [Heat plots] page)","code":""},{"path":"plot-continuous-data.html","id":"preparation-2","chapter":"4 Plot continuous data","heading":"4.1 Preparation","text":"Preparation includes loading relevant packages, ggplot2 dplyr (part tidyverse), ensuring data columsn correct class.","code":""},{"path":"plot-continuous-data.html","id":"load-packages-3","chapter":"4 Plot continuous data","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.Note: mega-package tidyverse includes pacakage ggplot2 dplyr among many others (e.g. stringr, tidyr, forcats).","code":"\npacman::p_load(\n  rio,            # data import and export\n  here,           # relative file paths\n  tidyverse       # includes ggplot2 and dplyr\n  )"},{"path":"plot-continuous-data.html","id":"import-data-2","chapter":"4 Plot continuous data","heading":"Import data","text":"examples section, use dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT, cycle-threshold values), days_onset_hosp (difference date symptom onset date hospitalisation).","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"plot-continuous-data.html","id":"column-class","chapter":"4 Plot continuous data","heading":"Column class","text":"Ensure continuous columns correcly classified R class Numeric. use mutate() .numeric()ensure class columns important analysis. page [Cleaning data core functions] detail.Note: conducted various data checks point, including checking missingness data. See page [Missing data] tips analyses.","code":"\nlinelist <- linelist %>%  \n  mutate(                                          # Ensure vars are class numeric\n    age = as.numeric(age),       \n    ct_blood = as.numeric(ct_blood),\n    days_onset_hosp = as.numeric(days_onset_hosp),\n    wt_kg = as.numeric(wt_kg))  "},{"path":"plot-continuous-data.html","id":"one-continuous-variable","chapter":"4 Plot continuous data","heading":"4.2 One continuous variable","text":"","code":""},{"path":"plot-continuous-data.html","id":"histograms","chapter":"4 Plot continuous data","heading":"Histograms","text":"code generating histograms, group continuous data ranges display adjacent bars varying height. done using geom_histogram(). See section Plot categorical data understand difference geom_histogram(), geom_bar(), geom_col().show distribution ages cases. Within aes() specify column want see distribution . can assign column either x y axis.plot, cases assigned “bins” represented bars. number bins (bins = geom_histogram()) unspecified, R guess appropriate number bins print message let know:Alternatively, can specify binwidth = within geom_histogram() specify range values bin includes. contrast, using bins = break points evenly spaced minimum maximum values histogram. give examples showing different bins bin widths.Rather counts, can change stats within aes() bracket specify proportions - see (plot ) . can also layer different histograms different settings (plot B).get “stacked” histogram (continuous column data), can one following:Use geom_histogram() fill = argument within aes() assigned grouping column, orUse geom_freqpoly(), likely easier read option. can still set binwidth = etc.see proportions values, , set y = after_stat(density) (use syntax exactly - changed data)Note proportions show per groupTo get smoothed proportions, can use geom_density()shown (*note use color = vs. fill = ):want fun, try geom_density_ridges ggridges package (vignette .Read detail histograms tidyverse page geom_histogram().","code":"## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# A) Regular histogram\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Default histogram (30 bins)\")\n\n# B) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 50)+\n  labs(title = \"B) Set to 50 bins\")\n\n# C) Fewer bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 5)+\n  labs(title = \"C) Set to 5 bins\")\n\n\n# C) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(binwidth = 1)+\n  labs(title = \"D) binwidth of 1\")\n# A) Histogram with proportion\nggplot(data = linelist, aes(x = ct_blood,           # provide x variable\n                            y = stat(density)))+    # Calculate proportion\n  geom_histogram(bins=10,                           # Add bin number\n                 color = \"white\")+ # Add white outline so bars can easily be distinguished\n  labs(title = \"A) Ggplot histogram showing proportion\")\n\n# B) Layered histograms with different bin widths\nggplot(data = linelist, aes(x = ct_blood))+         # provide x variable \n  geom_histogram(binwidth = 2) +                    # Underlying layer has binwidth of 2\n  geom_histogram(binwidth = 1,                      # Top layer has binwidth of 1\n                 alpha = 0.4,                       # Set top layer to be slightly see through\n                 fill = \"blue\")+ \n  labs(title = \"B) Layered ggplot histograms\")\n# \"Stacked\" histogram\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_histogram(binwidth = 2)+\n  labs(title = \"'Stacked' histogram\")\n\n# Frequency \nggplot(data = linelist, mapping = aes(x = age, color = gender)) +\n  geom_freqpoly(binwidth = 2, size = 2)+\n  labs(title = \"Freqpoly\")\n\n# Frequency with proportion axis\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), color = gender)) +\n  geom_freqpoly(binwidth = 5, size = 2)+\n  labs(title = \"Proportional freqpoly\")\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), fill = gender)) +\n  geom_density(binwidth = 2, size = 2, alpha = 0.2)+\n  labs(title = \"Proportional, smoothed with geom_density()\")"},{"path":"plot-continuous-data.html","id":"box-plots","chapter":"4 Plot continuous data","heading":"Box plots","text":"Box plots common, important limitations. can obscure actual distribution - e.g. bi-modal distribution. See R graph gallery data--viz article details. However, nicely display inter-quartile range outliers - can overlaid top types plots show distribution detail.box plot anatomy (image source).using geom_boxplot() create box plot, generally map one axis (x y) within aes(). axis specified determines plots horizontal vertical.geoms, create plot per group mapping aesthetic like color = fill = column within aes(). However, box plots achieve assigning grouping column un-assigned axis (x y). code boxplot age values dataset, second code display one box plot (non-missing) gender dataset. Note ‘NA’ (missing) values appear separate box plot unless removed. example also set fill column outcome plot different color - necessary.code add box plot edges scatter plot (“marginal” plots) see page ggplot tips.","code":"\n# A) Overall boxplot\nggplot(data = linelist)+  \n  geom_boxplot(mapping = aes(y = age))+   # only y axis mapped (not x)\n  labs(title = \"A) Overall boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist, mapping = aes(y = age, x = gender, fill = gender)) + \n  geom_boxplot()+                      \n  labs(title = \"B) Boxplot by gender\")      "},{"path":"plot-continuous-data.html","id":"violin-jitter-and-sina-plots","chapter":"4 Plot continuous data","heading":"Violin, jitter, and sina plots","text":"code creating violin plots (geom_violin) jitter plots (geom_jitter) show age distributions. can specify fill color also determined data, thereby inserting options within aes().One can combine two using geom_sina() function ggforce package. can easier visually interpret. ) left shows basic layering geom_violin() geom_sina(). B) shows slightly effort put appearance ggplot (see -line comments).","code":"\n# A) Jitter plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       mapping = aes(y = age,                     # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+                     # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"A) jitter plot by gender\")     \n\n\n\n# B) Violin plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       mapping = aes(y = age,                      # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"B) violin plot by gender\")    \npacman::p_load(ggforce)\n\n# A) Sina plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,             # numeric variable\n           x = outcome)) +      # group variable\n  geom_violin()+                # create the violin plot\n  geom_sina()+\n  labs(title = \"A) violin and sina plot by gender\")      \n\n\n# A) Sina plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,             # numeric variable\n           x = outcome)) +      # group variable\n  geom_violin(aes(fill = outcome), # fill variable (color of violin background)\n              color = \"white\",  # Plot has white outline rather than default black \n              alpha = 0.2)+     # Alpha value where 0 transparent to 1 opaque\n  geom_sina(size=1,             # Change the size of the jitter\n            aes(color = outcome))+ # color variable (color of dots)\n  scale_fill_manual(values = c(\"Death\" = \"#bf5300\", \n                        \"Recover\" = \"#11118c\")) + # Define colours for death/recover \n                                                  # (but note they will come out a bit transparent)\n  scale_color_manual(values = c(\"Death\" = \"#bf5300\", \n                         \"Recover\" = \"#11118c\")) + # Define colours for death/recover\n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) violin and sina plot by gender, with extra formatting\")      "},{"path":"plot-continuous-data.html","id":"two-continuous-variables","chapter":"4 Plot continuous data","heading":"4.3 Two continuous variables","text":"Following similar syntax, geom_point() allow one plot two continuous variables eachother scatter plot. useful showing actual values rather distributions.basic scatter plot age vs weight shown (). (B) use facet_grid() show relationship two continuous variables linelist.","code":"\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender~outcome) "},{"path":"plot-continuous-data.html","id":"three-continuous-variables","chapter":"4 Plot continuous data","heading":"Three continuous variables","text":"CONSTRUCTION","code":""},{"path":"plot-continuous-data.html","id":"plotting-with-base-graphics","chapter":"4 Plot continuous data","heading":"4.4 Plotting with base graphics","text":"Using base graphics can sometimes quicker ggplot, helpful initial first look.","code":""},{"path":"plot-continuous-data.html","id":"one-continuous-variable-1","chapter":"4 Plot continuous data","heading":"One continuous variable","text":"","code":""},{"path":"plot-continuous-data.html","id":"box-plots-and-histograms","chapter":"4 Plot continuous data","heading":"Box plots and histograms","text":"-built graphics package comes boxplot() hist() functions, allowing straight-forward visualisation continuous variable.customisationSubgroups can also shown, subgroup crossed groups. Note plot B , outcome gender written outcome*gender boxplots four combinations two columns. get facetted across different rows columns like ggplot2.specify linelist dataset need write age linelist$ageSome options boxplot() shown :Boxplot width proportional sample size ()Violin plots, notched representing median x around (B)Horizontal (C)","code":"\n# Boxplot\nboxplot(linelist$wt_kg,\n                  main = \"A) Base boxplot\") \n\n\n# Histogram\nhist(linelist$wt_kg,\n                  main = \"B) Base histogram\") \n# Box plot by subgroup\nboxplot(age ~ outcome,\n                  data = linelist, \n                  main = \"A) Base boxplot by subgroup\")\n\n# Box plot by crossed subgroups\nboxplot(age ~ outcome*gender,\n                  data = linelist, \n                  main = \"B) Base boxplot) by crossed groups\")\n# Varying width by sample size \nboxplot(linelist$age ~ linelist$outcome,\n                  varwidth = TRUE, # width varying by sample size\n                  main=\"A) Proportional boxplot() widths\")\n\n                  \n# Notched (violin plot), and varying width\nboxplot(age ~ outcome,\n        data=linelist,\n        notch=TRUE,      # notch at median\n        main=\"B) Notched boxplot()\",\n        col=(c(\"gold\",\"darkgreen\")),\n        xlab=\"Suppliment and Dose\")\n\n# Horizontal\nboxplot(age ~ outcome,\n        data=linelist,\n        horizontal=TRUE,  # flip to horizontal\n        col=(c(\"gold\",\"darkgreen\")),\n        main=\"C) Horizontal boxplot()\",\n        xlab=\"Suppliment and Dose\")"},{"path":"plot-continuous-data.html","id":"two-continuous-variables-1","chapter":"4 Plot continuous data","heading":"Two continuous variables","text":"Using base R, can quickly visualise relationship two continuous variables plot function.","code":"\nplot(linelist$age, linelist$wt_kg)"},{"path":"plot-continuous-data.html","id":"resources-3","chapter":"4 Plot continuous data","heading":"4.5 Resources","text":"huge amount help online, especially ggplot. See:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"plot-categorical-data.html","id":"plot-categorical-data","chapter":"5 Plot categorical data","heading":"5 Plot categorical data","text":"page cover use R’s built-functions functions ggplot2 package visualise categorical/categorical data. additional functionality ggplot2 compared base R means recommend presentation-ready visualisations.cover visualising distributions categorical values, counts proportions.","code":""},{"path":"plot-categorical-data.html","id":"preparation-3","chapter":"5 Plot categorical data","heading":"5.1 Preparation","text":"Preparation includes loading relevant packages, namely ggplot2 examples covered . also load data.","code":""},{"path":"plot-categorical-data.html","id":"load-packages-4","chapter":"5 Plot categorical data","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\n# Load packages we will be using repeatedly\npacman::p_load(ggplot2, # Package for visualisation\n       dplyr,           # Package for data management\n       forcats)         # Package for factors"},{"path":"plot-categorical-data.html","id":"import-data-3","chapter":"5 Plot categorical data","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"plot-categorical-data.html","id":"clean-columns","chapter":"5 Plot categorical data","heading":"Clean columns","text":"examples section, use simulated Ebola linelist, focusing categorical variables hospital, outcome. need correct class format.Let’s take look hospital column.can see values within characters, hospital names, default ordered alphabetically. ‘’ ‘missing’ values, prefer last subcategories presenting breakdowns. change column factor re-order . covered detail ‘factors’ data management section.","code":"\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)## [1] \"character\"\n# Look at values held within hospital column\ntable(linelist$hospital)## \r\n##                     Central Hospital                    Military Hospital                              Missing                                Other \r\n##                                  454                                  896                                 1469                                  885 \r\n##                        Port Hospital St. Mark's Maternity Hospital (SMMH) \r\n##                                 1762                                  422\n# Change hospital to factor variable\nlinelist <- linelist %>% \n  mutate(hospital = factor(hospital))\n\n# Define the levels of factor with forcats - so other and missing are last\nlinelist <- linelist %>% \n  mutate(hospital = fct_relevel(hospital, \n                                c(\"St. Mark's Maternity Hospital (SMMH)\", \n                                  \"Port Hospital\", \n                                  \"Central Hospital\",\n                                  \"Military Hospital\",\n                                  \"Other\",\n                                  \"Missing\")))"},{"path":"plot-categorical-data.html","id":"ensure-correct-data-structure","chapter":"5 Plot categorical data","heading":"Ensure correct data structure","text":"displaying frequencies distributions categorical variables, option creating plots based :linelist data, one row per observation, orA summary table based linelist, one row per category. example show use dplyr create table case counts per hospital.Tables can created using ‘table’ method built-graphics. useNA = \"ifany\" arguments ensures missing values included, table otherwise automatically excludes .using data management packages dplyr. example add percentage column.","code":"\n#Table method\n  outcome_nbar <- table(linelist$outcome, \n                        useNA = \"ifany\")\n\n  outcome_nbar # View full table## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\n#Dplyr method\n  outcome_n <- linelist %>% \n    group_by(outcome) %>% \n    count %>% \n    ungroup() %>% # Ungroup so proportion is out of total\n    mutate(proportion = n/sum(n)*100) # Caculate percentage\n  \n  \n   outcome_n #View full table## # A tibble: 3 x 3\r\n##   outcome     n proportion\r\n##   <chr>   <int>      <dbl>\r\n## 1 Death    2582       43.9\r\n## 2 Recover  1983       33.7\r\n## 3 <NA>     1323       22.5"},{"path":"plot-categorical-data.html","id":"filter-data","chapter":"5 Plot categorical data","heading":"Filter data","text":"may consider dropping rows needed analysis. instance, next examples want understand trends amongst persons known outcome, drop rows missing outcome column values.","code":"\n#Drop missing from full linelist\nlinelist <- linelist %>% \n  filter(!is.na(outcome))\n\n#Drop missing from dplyr table\noutcome_n <- outcome_n %>% \n  filter(!is.na(outcome))"},{"path":"plot-categorical-data.html","id":"plotting-with-ggplot2","chapter":"5 Plot categorical data","heading":"5.2 Plotting with ggplot2","text":"See ggplot basics page fundamentals, ggplot tips page advanced techniques.","code":""},{"path":"plot-categorical-data.html","id":"bar-charts-using-raw-data","chapter":"5 Plot categorical data","heading":"Bar charts using raw data","text":"code using geom_bar creating simple bar charts show frequencies Ebola patient outcomes: ) cases, B) hospital.aes bracket, x needs specified - y want bars presented horizontally. Ggplot knows unspecified y (x) number observations fall categories.","code":"\n# A) Outcomes in all cases\nggplot(linelist) + \n  geom_bar(aes(x=outcome)) +\n  labs(title = \"A) Number of recovered and dead Ebola cases\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist) + \n  geom_bar(aes(x=outcome, fill = hospital)) +\n  theme(axis.text.x = element_text(angle = 90)) + # Add preference to rotate the x axis text\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\")"},{"path":"plot-categorical-data.html","id":"bar-charts-using-processed-data","chapter":"5 Plot categorical data","heading":"Bar charts using processed data","text":"code using geom_col creating simple bar charts show distribution Ebola patient outcomes. geom_col, x y need specified. x categorical variable along x axis, y generated proportions column proportion.show breakdowns hospital, additional table needs created frequencies combined categories outcome hospital.create ggplot added formatting:Axis flip: Swapped axis around coord_flip() can read hospital names.Columns side--side: Added position = \"dodge\" argument bars death recover presented side side rather stacked. Note stacked bars default.Column width: Specified ‘width’, columns half thin full possible width.Column order: Reversed order categories y axis ‘’ ‘Missing’ bottom, scale_x_discrete(limits=rev). Note used rather scale_y_discrete hospital stated x argument aes(), even visually y axis. Ggplot seems present categories backwards unless tell .details: Labels/titles colours added within labs scale_fill_color respectively.Note proportions binary, may prefer drop ‘recover’ just show proportion died. just illustration purposes though.","code":"\n# Outcomes in all cases\nggplot(outcome_n) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\noutcome_n2 <- linelist %>% \n  group_by(hospital, outcome) %>% \n  count() %>% \n  group_by(hospital) %>% # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100)\n\nhead(outcome_n2) #Preview data## # A tibble: 6 x 4\r\n## # Groups:   hospital [3]\r\n##   hospital                             outcome     n proportion\r\n##   <fct>                                <chr>   <int>      <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\r\n## 2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\r\n## 3 Port Hospital                        Death     785       57.6\r\n## 4 Port Hospital                        Recover   579       42.4\r\n## 5 Central Hospital                     Death     193       53.9\r\n## 6 Central Hospital                     Recover   165       46.1\n# Outcomes in all cases by hospital\nggplot(outcome_n2) +  \n  geom_col(aes(x=hospital, \n               y = proportion, \n               fill = outcome),\n           width = 0.5,          # Make bars a bit thinner (out of 1)\n           position = \"dodge\") + # Bars are shown side by side, not stacked\n  scale_x_discrete(limits=rev) + # Reverse the order of the categories\n  theme_minimal() +              # Minimal theme \n  coord_flip() +\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",        # Legend title\n       x = \"Count\",             # X axis title\n       y = \"Hospital of admission\")  + # Y axis title\n  scale_fill_manual(values = c(\"Death\"= \"#3B1c8C\",\n                               \"Recover\" = \"#21908D\" )) "},{"path":"plot-categorical-data.html","id":"facetting","chapter":"5 Plot categorical data","heading":"Facetting","text":"can also use faceting create futher mini-graphs, detailed examples continuous data visualisation section. Specifically, one can use:facet_wrap() - recreate sub-graphs present alphabetically (typically, unless stated otherwise). can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within.facet_grid() - suited seeing subgroups particular combinations categorical variables.","code":""},{"path":"plot-categorical-data.html","id":"plotting-with-base-graphics-1","chapter":"5 Plot categorical data","heading":"5.3 Plotting with base graphics","text":"Bar chartsTo create bar plots R, create frequency table using table function. creates object table class, R can recognise plotting. can create simple frequency graph showing Ebola case outcomes (), add colours present outcomes gender (B).Note NA values excluded plots default.","code":"\n# A) Outcomes in all cases\noutcome_nbar <- table(linelist$outcome)\nbarplot(outcome_nbar, main= \"A) Outcomes\")\n\n# B) Outcomes in all cases by gender of case\noutcome_nbar2 <- table(linelist$outcome, linelist$gender) # The first column is for groupings within a bar, the second is for the separate bars\nbarplot(outcome_nbar2, legend.text=TRUE, main = \"B) Outcomes by gender\") # Specify inclusion of legend"},{"path":"plot-categorical-data.html","id":"resources-4","chapter":"5 Plot categorical data","heading":"5.4 Resources","text":"huge amount help online, especially ggplot. see:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"ggplot-tips.html","id":"ggplot-tips","chapter":"6 ggplot tips","heading":"6 ggplot tips","text":"page cover tips tricks make plots sharp fancy. See page ggplot basics fundamentals.several extensive ggplot2 tutorials linked resources section. can also download data visualization ggplot cheatsheet RStudio website. want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-tips.html","id":"preparation-4","chapter":"6 ggplot tips","heading":"6.1 Preparation","text":"","code":""},{"path":"ggplot-tips.html","id":"load-packages-5","chapter":"6 ggplot tips","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"ggplot-tips.html","id":"import-data-4","chapter":"6 ggplot tips","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download handbook data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"ggplot-tips.html","id":"colour-schemes","chapter":"6 ggplot tips","heading":"6.2 Colour schemes","text":"One thing can initially difficult understand ggplot2 control colour schemes passing colour fill variable rather defining explicitly within geom. simple tricks can used achieve however. Remember setting colours, can use colour names (long recognized) like \"red\", specific hex colour \"#ff0505\".One useful tricks using manual scaling functions explicitly define colours. functions syntax scale_xxx_manual() (e.g. scale_colour_manual() scale_fill_manual()). function can explicitly define colours map value using values = argument. can control legend title name = argument, order factors breaks =.want predefined palettes, can use scale_xxx_brewer scale_xxx_viridis_y functions.‘brewer’ functions can draw colorbrewer.org palettes.\r\n‘viridis’ functions draw viridis (colourblind friendly!) palettes, “provide colour maps perceptually uniform colour black--white. also designed perceived viewers common forms colour blindness.” (read ). Define palette discrete, continuous, binned specifying end function (e.g. discrete scale_xxx_viridis_d).Test image color blindness simulator. red/green color scheme, try “hot-cold” (red-blue) scheme instead described hereHere example ggplot basics page, using various color schemes.","code":"\nsymp_plot <- linelist %>%                                         # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  theme(legend.position = \"bottom\")+\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot  # print with default colors\n\n#################################\n# print with manually-specified colors\nsymp_plot +\n  scale_fill_manual(\n    values = c(\"yes\" = \"black\",         # explicitly define colours\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    breaks = c(\"yes\", \"no\", \"unknown\"), # order the factors correctly\n    name = \"\"                           # set legend to no title\n\n  ) \n\n#################################\n# print with viridis discrete colors\nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )"},{"path":"ggplot-tips.html","id":"change-order-of-discrete-variables","chapter":"6 ggplot tips","heading":"6.3 Change order of discrete variables","text":"Changing order discrete variables appear often difficult understand people new ggplot2 graphs. ’s easy understand however understand ggplot2 handles discrete variables hood. Generally speaking, discrete varaible used, automatically converted factor type - orders factors alphabetical order default. handle , simply reorder factor levels reflect order like appear chart. detailed information reorder factor objects, see factor section guide.can look common example using age groups - default 5-9 age group placed middle age groups (given alphabetical order), can move behind 0-4 age group chart releveling factors.","code":"\n# remove the instances of age_cat5 where data is missing\nggplot(linelist %>%\n         filter(!is.na(age_cat5)),\n       # relevel the factor within the ggplot call (can do externally as well)\n       aes(x = forcats::fct_relevel(age_cat5, \"5-9\", after = 1))) +\n  geom_histogram(stat = \"count\") +\n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  theme_minimal()"},{"path":"ggplot-tips.html","id":"combining-multiple-plots","chapter":"6 ggplot tips","heading":"6.4 Combining multiple plots","text":"Faceting described ggplot basics page.faceting convenient approach plotting, sometimes possible get results want relatively restrictive approach. , may choose combine plots sticking together larger plot. three well known packages great - cowplot, gridExtra, patchwork. However, packages largely things, ’ll focus cowplot section.cowplot package fairly wide range functions, easiest use can achieved use plot_grid(). effectively way arrange predefined plots grid formation. can work another example malaria dataset - can plot total cases district, also show epidemic curve time.","code":"\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) \n\n# bar chart of total cases by district\np1 <- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 <- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))"},{"path":"ggplot-tips.html","id":"marginal-distributions","chapter":"6 ggplot tips","heading":"6.5 Marginal distributions","text":"show distributions edges geom_point() scatterplot, can use ggExtra package function ggMarginal(). Save original ggplot object, pass ggMarginal() shown . key arguments:must specify type = either “histogram”, “density” “boxplot”, “violin”, “densigram”.default, marginal plots appear axes. can set margins = “x” “y” want one.optional arguments include fill = (bar color), color = (line color), size = (plot size relative margin size, larger number makes marginal plot smaller).can provide axis-specific arguments xparams = yparams =. example, different histogram bin sizes, shown .can marginal plots reflect groups (columns assigned color = ggplot() mapped aesthetics). case, set ggMarginal() argument groupColour = groupFill = TRUE, shown .Read vignette, R Graph Gallery function R documentation ?ggMarginal.add marginal histograms:Marginal histograms grouped/colored values:Marginal density curve, demonstration size color arguments:Marginal boxplots, demonstration margins argument:","code":"\n# Install/load ggExtra\npacman::p_load(ggExtra)\n\n# Basic scatter plot of weight and age\nscatter_plot <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age)) +\n  labs(title = \"Scatter plot of weight and age\")\n# with histograms\nggMarginal(\n  scatter_plot,                     # add marginal histograms\n  type = \"histogram\",               # specify histograms\n  fill = \"lightblue\",               # bar fill\n  xparams = list(binwidth = 10),    # other parameters for x-axis marginal\n  yparams = list(binwidth = 5))     # other parameters for y-axis marginal\n# Scatter plot, colored by outcome\n# Outcome column is assigned as color in ggplot. groupFill in ggMarginal set to TRUE\nscatter_plot_color <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age, color = outcome)) +\n  labs(title = \"Scatter plot of weight and age\")+\n  theme(legend.position = \"bottom\")\n\nggMarginal(scatter_plot_color, type = \"histogram\", groupFill = TRUE)\n# with density curves\nggMarginal(\n  scatter_plot,\n  type = \"density\",\n  color = \"red\",                    # line color\n  size = 4)                         # smaller number makes larger marginal plots\n# with boxplot \nggMarginal(\n  scatter_plot,\n  margins = \"x\",      # only show x-axis marginal plot\n  type = \"boxplot\")   "},{"path":"ggplot-tips.html","id":"smart-labeling","chapter":"6 ggplot tips","heading":"6.6 Smart Labeling","text":"ggplot2, also possible add text plots. However, comes notable limitation text labels often clash data points plot, making look messy hard read. ideal way deal base package, ggplot2 add-, known ggrepel makes dealing simple!ggrepel package provides two new functions, geom_label_repel() geom_text_repel(), replace geom_label() geom_text(). Simply use functions instead base functions produce neat labels. Within function, map aesthetics aes() always, include argument label = provide column name containing values want display (e.g. patient id, name, etc.). can make complex labels combining columns newlines (\\n) within str_glue() shown .tips:Use min.segment.length = 0 always draw line segments, min.segment.length = Inf never draw themUse size = outside aes() set text sizeUse force = change degree repulsion labels respective points (default 1)Include fill = within aes() label colored value\r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove \r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove itSee -depth tutorial .can label subset data points - using standard ggplot() syntax provide different data = geom layer plot. , cases plotted, labeled.","code":"\npacman::p_load(ggrepel)\n\nlinelist %>%                                               # start with linelist\n  group_by(hospital) %>%                                   # group by hospital\n  summarise(                                               # create new dataset with summary values per hospital\n    n_cases = n(),                                           # number of cases per hospital\n    delay_mean = round(mean(days_onset_hosp, na.rm=T),1),    # mean delay per hospital\n  ) %>% \n  ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # send data frame to ggplot\n  geom_point(size = 2)+                                    # add points\n  geom_label_repel(                                        # add point labels\n    mapping = aes(\n      label = stringr::str_glue(\n        \"{hospital}\\n{n_cases} cases, {delay_mean} days\")  # how label displays\n      ), \n    size = 3,                                              # text size in labels\n    min.segment.length = 0)+                               # show all line segments                \n  labs(                                                    # add axes labels\n    title = \"Mean delay to admission, by hospital\",\n    x = \"Number of cases\",\n    y = \"Mean delay (days)\")\nggplot()+\n  # All points in grey\n  geom_point(\n    data = linelist,                                   # all data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    color = \"grey\",\n    alpha = 0.5)+                                              # grey and semi-transparent\n  \n  # Few points in black\n  geom_point(\n    data = linelist %>% filter(days_onset_hosp > 15),  # filtered data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    alpha = 1)+                                                # default black and not transparent\n  \n  # point labels for few points\n  geom_label_repel(\n    data = linelist %>% filter(days_onset_hosp > 15),  # filter the data for the labels\n    mapping = aes(\n      x = ht_cm,\n      y = wt_kg,\n      fill = outcome,                                          # label color by outcome\n      label = stringr::str_glue(\"Delay: {days_onset_hosp}d\")), # label created with str_glue()\n    min.segment.length = 0) +                                  # show line segments for all\n  \n  # remove letter \"a\" from inside legend boxes\n  guides(fill = guide_legend(override.aes = aes(color = NA)))+\n  \n  # axis labels\n  labs(\n    title = \"Cases with long delay to admission\",\n    y = \"weight (kg)\",\n    x = \"height(cm)\")"},{"path":"ggplot-tips.html","id":"time-axes","chapter":"6 ggplot tips","heading":"6.7 Time axes","text":"Working time axes ggplot can seem daunting, made easy key functions. Remember working time date ensure correct variables formatted date datetime class - see [Working dates] page information , [Epidemic curves] page (ggplot section) examples.single useful set functions working dates ggplot2 scale functions (scale_x_date(), scale_x_datetime(), cognate y-axis functions). functions let define often axis labels, format axis labels. find format dates, see working dates section ! can use date_breaks date_labels arguments specify dates look:date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):","code":"\n# make epi curve by date of onset when available\nggplot(linelist, aes(x = date_onset)) +\n  geom_bar(stat = \"count\") +\n  scale_x_date(\n    # 1 break every 1 month\n    date_breaks = \"1 months\",\n    # labels should show month then date\n    date_labels = \"%b %d\"\n  ) +\n  theme_classic()"},{"path":"ggplot-tips.html","id":"highlighting","chapter":"6 ggplot tips","heading":"6.8 Highlighting","text":"Highlighting specific elements chart useful way draw attention specific instance variable also providing information dispersion full dataset. easily done base ggplot2, external package can help known gghighlight. easy use within ggplot syntax.gghighlight package uses gghighlight() function achieve effect. use function, supply logical statement function - can quite flexible outcomes, ’ll show example age distribution cases linelist, highlighting outcome.also works well faceting functions - allows user produce facet plots background data highlighted doesn’t apply facet!","code":"\n# load gghighlight\nlibrary(gghighlight)\n\n# replace NA values with unknown in the outcome variable\nlinelist <- linelist %>%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  gghighlight::gghighlight(outcome == \"Death\")     # highlight instances where the patient has died.\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() +                                # make the histogram\n  gghighlight::gghighlight() +                      # highlight instances where the patient has died\n  facet_wrap(~outcome)                              # make facets by outcome"},{"path":"ggplot-tips.html","id":"dual-axes","chapter":"6 ggplot tips","heading":"6.9 Dual axes","text":"secondary y-axis often requested addition ggplot2 graph. robust debate validity graphs data visualization community, often recommended, manager may still want . , present two methods achieve .Using cowplot package combine two separate plotsUsing statistical transformation data primary axis","code":""},{"path":"ggplot-tips.html","id":"using-cowplot","chapter":"6 ggplot tips","heading":"Using cowplot","text":"approach involves creating two separate plots - one y-axis left, y-axis right. use specific theme_cowplot() must x-axis. third command two plots aligned overlaid top . functionalities cowplot, one, described depth site.demonstrate technique overlay epidemic curve line weekly percent patients died. use example alignment dates x-axis complex say, aligning bar chart another plot. things note:epicurve line aggregated weeks prior plotting date_breaks date_labels identical - x-axes two plots overlaid.y-axis moved right-side plot 2 position = argument scale_y_continuous().plots make use theme_cowplot()Note another example technique [Epicurves] page - overlaying cumulative incidence top epicurve.Make plot 1\r\nessentially epicurve. use geom_area() just demonstrate use (area line, default)Make plot 2\r\nCreate second plot showing line weekly percent cases died.Now align plot using function align_plots(), specifying horizontal vertical alignment (“hv”, also “h”, “v”, “none”). specify alignment axes well (top, bottom, left, right) “tblr”. output class list (2 elements).draw two plots together using ggdraw() (cowplot) referencing two parts aligned_plots object.","code":"\npacman::p_load(cowplot)            # load/install cowplot\n\np1 <- linelist %>%                 # save plot as object\n     count(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     ggplot()+\n          geom_area(aes(x = epiweek, y = n), fill = \"grey\")+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n     theme_cowplot()+\n     labs(\n       y = \"Weekly cases\"\n     )\n\np1                                      # view plot \np2 <- linelist %>%         # save plot as object\n     group_by(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     summarise(\n       n = n(),\n       pct_death = 100*sum(outcome == \"Death\", na.rm=T) / n) %>% \n     ggplot(aes(x = epiweek, y = pct_death))+\n          geom_line()+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n          scale_y_continuous(\n               position = \"right\")+\n          theme_cowplot()+\n          labs(\n            x = \"Epiweek of symptom onset\",\n            y = \"Weekly percent of deaths\",\n            title = \"Weekly case incidence and percent deaths\"\n          )\n\np2     # view plot\naligned_plots <- align_plots(p1, p2, align=\"hv\", axis=\"tblr\")                  # align the two plots and save them as list\naligned_plotted <- ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])  # overlay them and save the visual plot\naligned_plotted                                                                # print the overlayed plots"},{"path":"ggplot-tips.html","id":"statistical-transformation","chapter":"6 ggplot tips","heading":"Statistical transformation","text":"Unfortunately, secondary axes well supported ggplot syntax. reason, ’re fairly limited terms can shown secondary axis - second axis direct transformation secondary axis.Differences axis values purely cosmetic - want show two different variables one graph, different y-axis scales variable, work without work behind scenes. obtain effect, transform one variables data, apply transformation reverse specifying axis labels. Based , can either specify transformation explicitly (e.g. variable around 10x large variable b) calculate code (e.g. ratio maximum values dataset).syntax adding secondary axis straightforward! calling scale_xxx_xxx() function (e.g. scale_y_continuous()), use sec.axis argument call sec_axis() function. trans argument function allows specify label transformation axis - provide standard tidyverse syntax.example, want show number positive RDTs malaria dataset facility 1, showing 0-4 year olds cases chart:","code":"\n# take malaria data from facility 1\nmalaria_facility_1 <- malaria_data %>%\n  filter(location_name == \"Facility 1\")\n\n# calculate the ratio between malaria_rdt_0-4 and malaria_tot \n\ntf_ratio <- max(malaria_facility_1$malaria_tot, na.rm = T) / max(malaria_facility_1$`malaria_rdt_0-4`, na.rm = T)\n\n# transform the values in the dataset\n\nmalaria_facility_1 <- malaria_facility_1 %>%\n  mutate(malaria_rdt_0_4_tf = `malaria_rdt_0-4` * tf_ratio)\n  \n\n# plot the graph with dual axes\n\nggplot(malaria_facility_1, aes(x = data_date)) +\n  geom_line(aes(y = malaria_tot, col = \"Total cases\")) +\n  geom_line(aes(y = malaria_rdt_0_4_tf, col = \"Cases: 0-4 years old\")) +\n  scale_y_continuous(\n    name = \"Total cases\",\n    sec.axis = sec_axis(trans = ~ . / tf_ratio, name = \"Cases: 0-4 years old\")\n  ) +\n  labs(x = \"date of data collection\") +\n  theme_minimal() +\n  theme(legend.title = element_blank())"},{"path":"ggplot-tips.html","id":"combine-plots","chapter":"6 ggplot tips","heading":"6.10 Combine plots","text":"CONSTRUCTIONTwo packages useful combining plots cowplot patchwork. section mostly focus cowplot, occassional use patchwork.online introduction cowplot. can read extensive documentation function online . cover common use cases functions .cowplot package works tandem ggplot2 - essentially, use arrange combine ggplots legends compound figures. can also accept base R graphics.","code":"\npacman::p_load(\n  tidyverse,      # data manipulation and visualisation\n  cowplot,        # combine plots\n  patchwork       # combine plots\n)"},{"path":"ggplot-tips.html","id":"plot_grid","chapter":"6 ggplot tips","heading":"plot_grid()","text":"useful function plot_grid(), arranges multiple plots grid. can also align plot elements (e.g. axes) vertically /horizontally across sub-plots.First,","code":""},{"path":"ggplot-tips.html","id":"combine-legends","chapter":"6 ggplot tips","heading":"Combine legends","text":"plots legend, combining relatively straight-forward.CONSTRUCTIONIf plots different legends, must use alternative approach:Create save plots without legends using theme(legend.position = \"none\")Extract legends plot using get_legend() shown - extract legends plots modified actually show legendCombine legends legends panelCombine plots legends panelFor demonstration show two plots arranged grid legends showing (ugly inefficient use space):now show combine legends:solution learned post minor fix align legends post.TIP: Fun note - “cow” cowplot comes creator’s name - Claus O. Wilke.","code":"\np1 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, outcome) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  coord_flip()+\n  theme_minimal()\n\np2 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, age_cat) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  coord_flip()+\n  theme_minimal()+\n    theme(\n    axis.text.y = element_blank()\n  )\n\np1\n\np2\n\ncowplot::plot_grid(p1, p2, rel_widths = c(0.3))\np1 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, outcome) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    legend.position = \"none\")+\n  labs(title = \"Cases by outcome\")\n\n\n\np2 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, age_cat) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank()\n  )+\n  labs(title = \"Cases by age\")\n\n\n# extract legend from p1\nleg_p1 <- cowplot::get_legend(p1 + theme(legend.position = \"right\",  # extract vertical legend\n                                         legend.justification = c(0,0.5))) # so legends align\n# extract legend from p2\nleg_p2 <- cowplot::get_legend(p2 + theme(legend.position = \"right\", # extract vertical legend   \n                                         legend.justification = c(0,0.5))) # so legends align\n\n# create a blank plot for legend alignment\n#blank_p <- patchwork::plot_spacer() + theme_void()\n\n# create legends panel, 3 rows one of which is empty\nlegends <- cowplot::plot_grid(leg_p1, leg_p2, nrow = 2, rel_heights = c(.3, .7))\n\n# combine two plots and legends panel\ncombined <- cowplot::plot_grid(p1, p2, legends, ncol = 3, rel_widths = c(.4, .4, .2))\n\ncombined"},{"path":"ggplot-tips.html","id":"packages-to-help-you","chapter":"6 ggplot tips","heading":"6.11 Packages to help you","text":"CONSTRUCTIONThere really neat R packages specifically designed help navigate ggplot2:","code":""},{"path":"ggplot-tips.html","id":"gghelp-from-ggx","chapter":"6 ggplot tips","heading":"6.11.1 gghelp() from ggx","text":"Converts normal language query ggplot command.https://rdrr.io/github/brandmaier/ggx/man/gghelp.html","code":""},{"path":"ggplot-tips.html","id":"point-and-click-with-equisse","chapter":"6 ggplot tips","heading":"6.11.2 Point-and-click with equisse","text":"https://github.com/dreamRs/esquisse“addin allows interactively explore data visualizing ggplot2 package. allows draw bar plots, curves, scatter plots, histograms, boxplot sf objects, export graph retrieve code reproduce graph.”Documentation:https://dreamrs.github.io/esquisse/index.htmlInstall launch addin via RStudio menu esquisse::esquisser().","code":""},{"path":"ggplot-tips.html","id":"miscellaneous","chapter":"6 ggplot tips","heading":"6.12 Miscellaneous","text":"","code":""},{"path":"ggplot-tips.html","id":"numeric-display","chapter":"6 ggplot tips","heading":"Numeric display","text":"can disable scientific notation running command prior plotting.apply number_format() scales package specific value column, shown .Use functions package scales easily adjust numbers displayed. can applied columns data frame, shown individual numbers purpose example.","code":"\noptions(scipen=999)\nscales::number(6.2e5)## [1] \"620 000\"\nscales::number(1506800.62,  accuracy = 0.1,)## [1] \"1 506 800.6\"\nscales::comma(1506800.62, accuracy = 0.01)## [1] \"1,506,800.62\"\nscales::comma(1506800.62, accuracy = 0.01,  big.mark = \".\" , decimal.mark = \",\")## [1] \"1.506.800,62\"\nscales::percent(0.1)## [1] \"10%\"\nscales::dollar(56)## [1] \"$56\"\nscales::scientific(100000)## [1] \"1e+05\""},{"path":"ggplot-tips.html","id":"resources-5","chapter":"6 ggplot tips","heading":"6.13 Resources","text":"Inspiration\r\nggplot graph galleryPresentation data\r\nEuropean Centre Disease Prevention Control Guidelines presentation surveillance dataFacets labellers\r\nUsing labellers facet strips\r\nLabellersAdjusting order factors\r\nfct_reorderfct_inorderHow reorder boxplotReorder variable ggplot2R Data Science - FactorsLegendsAdjust legend orderCaptions\r\nCaption alignmentLabelsggrepelCheatsheetsBeautiful plotting ggplot2TO - constructionStraight horizontal, vertical, lineYou can also add straight lines plot geom_hline() (horizontal), geom_vline() (vertical) geom_abline() (specified y intercept slope)Using option label_wrap_gen facet_wrap multiple strip lines\r\nlabels colors stripsAxis text vertical adjustment\r\nrotation\r\nLabellerslimit range limit() coord_cartesian(), ylim(), scale_x_continuous()\r\ntheme_classic()expand = c(0,0)\r\ncoord_flip()\r\ntick marksggrepel\r\nanimationsremove\r\nremove title\r\nusing fill = color = labs()\r\nflip order / don’t flip order\r\nmove location\r\ncolor? theme(legend.title = element_text(colour=“chocolate”, size=16, face=“bold”))+ scale_color_discrete(name=“color ischocolate!?”)\r\nColor boxes behind points legend\r\ntheme(legend.key=element_rect(fill=‘pink’)) use fill = NA remove . http://zevross.com/blog/2014/08/04/beautiful-plotting--r--ggplot2-cheatsheet-3/\r\nChange size symbols legend guides(colour = guide_legend(override.aes = list(size=4)))Turn layer legend\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp)), size=4)\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp), size=4), show_guide=FALSE)Force legend even aes().\r\nggplot(nmmaps, aes(x=date, y=o3))+\r\ngeom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“points”))\r\nControl shape legend guides - list linetype shape\r\nggplot(nmmaps, aes(x=date, y=o3))+geom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“Point values”))+\r\nscale_colour_manual(name=’‘, values=c(’Important line’=‘grey’, ‘Point values’=‘red’), guide=‘legend’) +\r\nguides(colour = guide_legend(override.aes = list(linetype=c(1,0)\r\n, shape=c(NA, 16))))","code":""}]
