[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT. REVIEWERS GIVE FEEDBACK LINK.LIKE BOOK? SOMETHING CHANGED? PLEASE TELL US!","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"Epi R Handbook community-driven R reference manual applied epidemiology public health.book strives :Serve quick R code reference manualProvide task-centered examples addressing common epidemiologic problemsAssist epidemiologists transitioning R SAS, STATA, SPSS, ExcelBe accessible settings low internet-connectivity via offline version ([instructions ][Download book data])different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"Want share use book? Want offer fix addition?\r\nEmail us epiRhandbook@gmail.com. welcome comments suggestions.can also submit issue pull request Github repository, provide structured feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local, state, provincial, national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Isha Berry, Chris Bailey, Wen Lin, Sara HollisReviewers: Pat Keating, Mathilde Mousset, Annick Lenglet, Margot Charette, Isha Berry, Paula Blomquist, Natalie Fischer, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybuke Koyuncu, Rachel Burke, Daniel Molling, Kate Kelsey, Wayne Enanoria, John Rossow, Berhe Etsay, Mackenzie Zendt, James Wright, Flavio Finger, Tim Taylor, Tim Lee, Manual Albela Miranda, Priscilla Spencer, Rajeev Batra, Pattama Ulrich, Joseph Timothy, Olivia Varsaneux, Nienke Meeuwissen, Adam Vaughan, Lionel Monteiro, Joao Muianga.","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN). Special thanks Annika Wendland.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo US CDC Public Health Image Library) include 2013 Yemen looking mosquito breeding sites, Ebola virus, Survey Rajasthan.","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Universities academic courses welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"ggplot-tips.html","id":"ggplot-tips","chapter":"1 ggplot tips","heading":"1 ggplot tips","text":"","code":""},{"path":"ggplot-tips.html","id":"overview","chapter":"1 ggplot tips","heading":"1.1 Overview","text":"ggplot2 popular data visualisation package R, generally used instead base R creating figures. ggplot2 benefits wide variety supplementary packages enhance functionality. Despite , ggplot syntax significantly different base R plotting, learning curve associated . Using ggplot2 generally requires user format data way highly tidyverse compatible, ultimately makes using packages together effective.can also download data visualization ggplot cheatsheet RStudio website.want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-tips.html","id":"preparation","chapter":"1 ggplot tips","heading":"1.2 Preparation","text":"","code":""},{"path":"ggplot-tips.html","id":"load-packages","chapter":"1 ggplot tips","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"ggplot-tips.html","id":"import-data","chapter":"1 ggplot tips","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download book data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.","code":"\nlinelist_cleaned <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"ggplot-tips.html","id":"general-cleaning","chapter":"1 ggplot tips","heading":"General cleaning","text":"preparing data plot, best make data adhere “tidy” data standards much possible. achieve expanded data management pages handbook, [Cleaning data core functions].simple ways can prepare data make better plotting can include making contents data better display - necessarily mean better data manipulation! example:Replace NA values character column string “Unknown”Clean columns “data friendly” values underscores etc changed normal text title case (see [Characters strings])examples action:","code":"\nlinelist_cleaned <- linelist_cleaned %>%\n  # make display version of columns with more friendly names\n  mutate(\n    # f to Male, f to Female, NA to Unknown\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",\n                            gender == \"f\" ~ \"Female\",\n                            is.na(gender) ~ \"Unknown\"),\n    # replace NA with unknown for outcome\n    outcome_disp = replace_na(outcome, \"Unknown\")\n  )"},{"path":"ggplot-tips.html","id":"pivoting-longer","chapter":"1 ggplot tips","heading":"Pivoting longer","text":"matter data structure, ggplot2 often also want pivot data longer formats, allow us use set variables single variable. Read page [Pivoting data].example, wanted show number cases specific symptoms, limited fact symptom specific column. can pivot longer format like :Note format useful operations, just used plot made . However, users endeavor use practices much possible base dataset, tidyverse compliant, make working data easier.","code":"\nlinelist_sym <- linelist_cleaned %>%\n  pivot_longer(cols = c(\"fever\", \"chills\", \"cough\", \"aches\", \"vomit\"),\n               names_to = \"symptom_name\",\n               values_to = \"symptom_is_present\") %>%\n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\"))"},{"path":"ggplot-tips.html","id":"basics-of-ggplot","chapter":"1 ggplot tips","heading":"1.3 Basics of ggplot","text":"“Grammar graphics” - ggplot2Plotting ggplot2 based defining base attributes plot, “adding” layers top. addition, user can change various plot attributes like axis settings, colour schemes, labels additional objects “added” plot. ggplot objects can highly complex, basic order creating ggplot looks something like :Define base/default plot attributes aesthetics ggplot() functionAdd geometric objects plot - .e. plot bar graph, line plot, scatter plot, histogram? combination ? functions start geom_ prefix.Change plot aesthetics e.g. changing axes, labels, colour scheme, background etc.code, might look like :code, important things note :making ggplot, objects combined + sign.Understand principles behind aesthetic mapping mappping = aes() argument essential using ggplot. can done ggplot() function well every geometric object. Mapping aes() used define variables assigned axis (can continuous categorical variables). also used define whether variable can used create different plot aesthetics. can apply :line colour (col =)filled colour (fill =)linetype (e.g. dotted, dashed) (linetype =)size object (size =)list exhaustive, enough give rough overview.Aesthetics geometric objects can defined explicitly code - different assigning variable. cases done, must outside mapping argument.example defining aesthetics variable can seen :huge number different geoms can used, used similar attribute names. exhaustive, shapes can used :Histograms - geom_histogram()Barcharts - geom_bar()Boxplots - geom_boxplot()Dot plots (scatterplots discrete variables) - geom_point()Line graphs - geom_line() geom_path()Trend lines - geom_smooth()can also add straight lines plot geom_hline() (horizontal), geom_vline() (vertical) geom_abline() (specified y intercept slope)much detail show , ’ll finish example ties concepts together plotting correlation height weight patients. can also colour points age years","code":"\n# define base plot attributes and dataset\nggplot(data = linelist_cleaned, mapping = aes(x = age)) +\n  # add a geometric object with some parameters\n  geom_histogram(binwidth = 10, fill = \"red\", col = \"black\") +\n  # add labels to the axes\n  labs(x = \"Age in years\", y = \"Number of cases\")\n# correct\nggplot(data = linelist_cleaned, mapping = aes(x = age)) +\n  geom_histogram(col = \"black\")\n\n# incorrect\n# correct\nggplot(data = linelist_cleaned, mapping = aes(x = age)) +\n  geom_histogram(mapping = aes(col = \"black\"))\n# define base plot attributes and dataset\nggplot(data = linelist_cleaned, mapping = aes(x = age, fill = outcome)) +\n  # add a geometric object with some parameters (NO FILL GIVEN)\n  geom_histogram(binwidth = 10, col = \"black\") +\n  # add labels to the axes\n  labs(x = \"Age in years\", y = \"Number of cases\")\n# set up the plot and define key variables\n# colour is the outcome\nwt_ht_plot <- ggplot(data = linelist_cleaned,\n                     aes(y = wt_kg, x = ht_cm, col = age_years)) +\n  # define aspects of the geom that are NOT included specific to variables\n  # other attributes are inherited\n  geom_point(size = 1, alpha = 0.5) +\n  # add a trend line\n  # use a linear method\n  geom_smooth(method = \"lm\")\nwt_ht_plot## `geom_smooth()` using formula 'y ~ x'"},{"path":"ggplot-tips.html","id":"themes-and-labels","chapter":"1 ggplot tips","heading":"1.4 Themes and Labels","text":"One important aspects data visualisation presenting data clear way nice aesthetics. plot made previously looks ok, make theme little nicer. ggplot2 comes preset themes can used change theme plot. can also edit themes plot extreme detail theme() function. can also add nicer labels plot labs() function. 5 standard labeling locations:x - x-axisy - y-axistitle - main plot titlesubtitle - directly underneath plot title smaller text (default)caption - bottom plot, right defaultFor example, can update plot previously plotted nice labels like :theme() function can also used edit defaults elements. function can take extremely large number arguments, can used edit specific aspects plot. won’t go examples, look editing aspects text elements done. basic way done :Calling specific argument theme() element want edit (e.g. plot.title plot title)Supplying element_text() function argument (versions e.g. element_rect() editing plot background aesthetics)Changing arguments element_text()example, increase size plot title size, make subtitle italicised face, right\r\njustify caption hjust. ’ll also change legend location good measure!ever want remove element plot, can also theme()! Just pass element_blank() argument theme disappear completely!TIP: Run theme_get() ggplot2 print list 90+ theme() options console.","code":"\nwt_ht_plot <- wt_ht_plot + \n  # set the theme to classic\n  theme_classic() +\n  # further edit the theme to move the legend position\n  # add nicer labels\n  labs(y = \"Weight (kg)\", \n       x = \"height (cm)\",\n       title = \"Patient height and weight\",\n       subtitle = glue::glue(\"total patients {nrow(linelist_cleaned)}\"),\n       caption = \"produced by me!\")\nwt_ht_plot## `geom_smooth()` using formula 'y ~ x'\nwt_ht_plot + \n    theme(legend.position = \"bottom\",\n          # size of title is 30\n          plot.title = element_text(size = 30),\n          # right justify caption\n          plot.caption = element_text(hjust = 0),\n          # subtitle is italicised\n          plot.subtitle = element_text(face = \"italic\"))## `geom_smooth()` using formula 'y ~ x'"},{"path":"ggplot-tips.html","id":"colour-schemes","chapter":"1 ggplot tips","heading":"1.5 Colour schemes","text":"One thing can initially difficult understand ggplot2 control colour schemes passing colour fill variable rather defining explicitly within geom. simple tricks can used achieve however. Remember setting colours, can use colour names (long recognised) like \"red\", specific hex colour \"#ff0505\".One useful tricks using manual scaling functions explicity define colours. functions syntax scale_xxx_manual() (e.g. scale_colour_manual()). function can explicitly define colours map factor using values argument. can control legend title name argument, order factors breaks.want predefined palettes, can use scale_xxx_brewer scale_xxx_viridis_y functions. brewer functions can draw colorbrewer.org palettes, viridis functions can draw viridis (colourblind friendly!) palettes. Remember define palette discrete, continuous, binned specifying end function (e.g. discrete scale_xxx_viridis_d)can see using symptom-specific dataframe made previous section:","code":"\nsymp_plot <- ggplot(linelist_sym, aes(x = symptom_name, fill = symptom_is_present)) +\n  # show as a portion of all\n  geom_bar(position = \"fill\", col = \"black\") +\n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot\nsymp_plot +\n  scale_fill_manual(\n    # explicitly define colours\n    values = c(\"yes\" = \"black\",\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    # order the factors correctly\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    # legend has no title\n    name = \"\"\n  ) \nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )"},{"path":"ggplot-tips.html","id":"change-order-of-discrete-variables","chapter":"1 ggplot tips","heading":"1.6 Change order of discrete variables","text":"Changing order discrete variables appear often difficult understand people new ggplot2 graphs. ’s easy understand however understand ggplot2 handles discrete variables hood. Generally speaking, discrete varaible used, automatically converted factor type - orders factors alphabetical order default. handle , simply reorder factor levels reflect order like appear chart. detailed information reorder factor objects, see factor section guide.can look common example using age groups - default 5-9 age group placed middle age groups (given alphabetical order), can move behind 0-4 age group chart releveling factors.","code":"\n# remove the instances of age_cat5 where data is missing\nggplot(linelist_cleaned %>%\n         filter(!is.na(age_cat5)),\n       # relevel the factor within the ggplot call (can do externally as well)\n       aes(x = forcats::fct_relevel(age_cat5, \"5-9\", after = 1))) +\n  geom_histogram(stat = \"count\") +\n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  theme_minimal()"},{"path":"ggplot-tips.html","id":"multiple-plots","chapter":"1 ggplot tips","heading":"1.7 Multiple plots","text":"Often useful show multiple graphs one page, one super-figure. ways achieve lot packages can help facilitate . However, external packages nice, often easier use faceting alternative prebuilt ggplot2. Faceting plots extremely easy terms code, produces plots predictable aesthetics - wont wrangle legends ensure axes aligned etc.Faceting specific way obtain multiple plots - definition, facet show type plot facet, every plot specific level variable. done one two functions:facet_wrap() used want show different graph level single variable. One example showing different epidemic curve hospital region.facet_wrap() used want show different graph level single variable. One example showing different epidemic curve hospital region.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.can quickly become overwhelming amount information - good ensure don’t many levels variable choose facet ! quick examples malaria dataset:can also use facet_grid() approach different age groups - need data transformations first however, age groups columns - want single column. pass two variables facet_grid(), can use formula notation (e.g. x ~ y) wrap variables vars(). reference, : facet_grid(x ~ y) equivalent facet_grid(rows = vars(x), cols = vars(y)) ’s can :faceting convenient approach plotting, sometimes possible get results want relatively restrictive approach. , may choose combine plots sticking together larger plot. three well known packages great - cowplot, gridExtra, patchwork. However, packages largely things, ’ll focus cowplot section.cowplot package fairly wide range functions, easiest use can achieved use plot_grid(). effectively way arrange predefined plots grid formation. can work another example malaria dataset - can plot total cases district, also show epidemic curve time.","code":"\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) \n\n# show a wrapped plot with facets by district\n\nggplot(malaria_data, aes(x = data_date, y = malaria_tot, fill = District)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"date of data collection\",\n    y = \"malaria cases\",\n    title = \"Malaria cases by district\"\n  ) +\n  facet_wrap(~District) +\n  theme_minimal()\nmalaria_age <- malaria_data %>%\n  pivot_longer(\n    # choose all the columns that start with malaria rdt (age group specific)\n    cols = starts_with(\"malaria_rdt_\"),\n    # column names become age group\n    names_to = \"age_group\",\n    # values to a single column (num_cases)\n    values_to = \"num_cases\"\n  ) %>%\n  # clean up age group column - replace \"malaria_rdt_\" to leave only age group\n  # then replace 15 with 15+\n  # then refactor the age groups so they are in order\n  mutate(age_group = str_replace(age_group, \"malaria_rdt_\", \"\") %>%\n           ifelse(. == \"15\", \"15+\", .) %>%\n           forcats::fct_relevel(., \"5-14\", after = 1))\n\n\n# make the same plot as before, but show in a grid\nggplot(malaria_age, aes(x = data_date, y = num_cases, fill = age_group)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"date of data collection\",\n    y = \"malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(rows = vars(District), cols = vars(age_group)) +\n  theme_minimal()\n# bar chart of total cases by district\np1 <- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 <- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))"},{"path":"ggplot-tips.html","id":"marginal-distributions","chapter":"1 ggplot tips","heading":"1.8 Marginal distributions","text":"show distributions edges geom_point() scatterplot, can use ggExtra package function ggMarginal(). Save original ggplot object, pass ggMarginal() shown . key arguments:must specify type = either “histogram”, “density” “boxplot”, “violin”, “densigram”.default, marginal plots appear axes. can set margins = “x” “y” want one.optional arguments include fill = (bar color), color = (line color), size = (plot size relative margin size, larger number makes marginal plot smaller).can provide axis-specific arguments xparams = yparams =. example, different histogram bin sizes, shown .can marginal plots reflect groups (columns assigned color = ggplot() mapped aesthetics). case, set ggMarginal() argument groupColour = groupFill = TRUE, shown .Read vignette, R Graph Gallery function R documentation ?ggMarginal.add marginal histograms:Marginal histograms grouped/colored values:Marginal density curve, demonstration size color arguments:Marginal boxplots, demonstration margins argument:","code":"\n# Install/load ggExtra\npacman::p_load(ggExtra)\n\n# Basic scatter plot of weight and age\nscatter_plot <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age)) +\n  labs(title = \"Scatter plot of weight and age\")\n# with histograms\nggMarginal(\n  scatter_plot,                     # add marginal histograms\n  type = \"histogram\",               # specify histograms\n  fill = \"lightblue\",               # bar fill\n  xparams = list(binwidth = 10),    # other parameters for x-axis marginal\n  yparams = list(binwidth = 5))     # other parameters for y-axis marginal\n# Scatter plot, colored by outcome\n# Outcome column is assigned as color in ggplot. groupFill in ggMarginal set to TRUE\nscatter_plot_color <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age, color = outcome)) +\n  labs(title = \"Scatter plot of weight and age\")+\n  theme(legend.position = \"bottom\")\n\nggMarginal(scatter_plot_color, type = \"histogram\", groupFill = TRUE)\n# with density curves\nggMarginal(\n  scatter_plot,\n  type = \"density\",\n  color = \"red\",                    # line color\n  size = 4)                         # smaller number makes larger marginal plots\n# with boxplot \nggMarginal(\n  scatter_plot,\n  margins = \"x\",      # only show x-axis marginal plot\n  type = \"boxplot\")   "},{"path":"ggplot-tips.html","id":"smart-labeling","chapter":"1 ggplot tips","heading":"1.9 Smart Labeling","text":"ggplot2, also possible add text plots. However, comes notable limitation text labels often clash data points plot, making look messy hard read. ideal way deal base package, ggplot2 add-, known ggrepel makes dealing simple!ggrepel package provides two new functions, geom_label_repel() geom_text_repel(), replace geom_label() geom_text(). Simply use functions instead base functions produce neat labels. Within function, map aesthetics aes() always, include argument label = provide column name containing values want display (e.g. patient id, name, etc.). can make complex labels combining columns newlines (\\n) within str_glue() shown .tips:Use min.segment.length = 0 always draw line segments, min.segment.length = Inf never draw themUse size = outside aes() set text sizeUse force = change degree repulsion labels respective points (default 1)Include fill = within aes() label colored value\r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove \r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove itSee -depth tutorial .can label subset data points - using standard ggplot() syntax provide different data = geom layer plot. , cases plotted, labeled.","code":"\npacman::p_load(ggrepel)\n\nlinelist %>%                                               # start with linelist\n  group_by(hospital) %>%                                   # group by hospital\n  summarise(                                               # create new dataset with summary values per hospital\n    n_cases = n(),                                           # number of cases per hospital\n    delay_mean = round(mean(days_onset_hosp, na.rm=T),1),    # mean delay per hospital\n  ) %>% \n  ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # send data frame to ggplot\n  geom_point(size = 2)+                                    # add points\n  geom_label_repel(                                        # add point labels\n    mapping = aes(\n      label = stringr::str_glue(\n        \"{hospital}\\n{n_cases} cases, {delay_mean} days\")  # how label displays\n      ), \n    size = 3,                                              # text size in labels\n    min.segment.length = 0)+                               # show all line segments                \n  labs(                                                    # add axes labels\n    title = \"Mean delay to admission, by hospital\",\n    x = \"Number of cases\",\n    y = \"Mean delay (days)\")\nggplot()+\n  # All points in grey\n  geom_point(\n    data = linelist_cleaned,                                   # all data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    color = \"grey\",\n    alpha = 0.5)+                                              # grey and semi-transparent\n  \n  # Few points in black\n  geom_point(\n    data = linelist_cleaned %>% filter(days_onset_hosp > 15),  # filtered data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    alpha = 1)+                                                # default black and not transparent\n  \n  # point labels for few points\n  geom_label_repel(\n    data = linelist_cleaned %>% filter(days_onset_hosp > 15),  # filter the data for the labels\n    mapping = aes(\n      x = ht_cm,\n      y = wt_kg,\n      fill = outcome,                                          # label color by outcome\n      label = stringr::str_glue(\"Delay: {days_onset_hosp}d\")), # label created with str_glue()\n    min.segment.length = 0) +                                  # show line segments for all\n  \n  # remove letter \"a\" from inside legend boxes\n  guides(fill = guide_legend(override.aes = aes(color = NA)))+\n  \n  # axis labels\n  labs(\n    title = \"Cases with long delay to admission\",\n    y = \"weight (kg)\",\n    x = \"height(cm)\")"},{"path":"ggplot-tips.html","id":"time-axes","chapter":"1 ggplot tips","heading":"1.10 Time axes","text":"Working time axes ggplot can seem daunting, made easy key functions. Remember working time date ensure correct variables formatted date datetime class - see [Working dates] page information , [Epidemic curves] page (ggplot section) examples.single useful set functions working dates ggplot2 scale functions (scale_x_date(), scale_x_datetime(), cognate y-axis functions). functions let define often axis labels, format axis labels. find format dates, see working dates section ! can use date_breaks date_labels arguments specify dates look:date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):","code":"\n# make epi curve by date of onset when available\nggplot(linelist_cleaned, aes(x = date_onset)) +\n  geom_bar(stat = \"count\") +\n  scale_x_date(\n    # 1 break every 1 month\n    date_breaks = \"1 months\",\n    # labels should show month then date\n    date_labels = \"%b %d\"\n  ) +\n  theme_classic()"},{"path":"ggplot-tips.html","id":"highlighting","chapter":"1 ggplot tips","heading":"1.11 Highlighting","text":"Highlighting specific elements chart useful way draw attention specific instance variable also providing information dispersion full dataset. easily done base ggplot2, external package can help known gghighlight. easy use within ggplot syntax.gghighlight package uses gghighlight() function achieve effect. use function, supply logical statement function - can quite flexible outcomes, ’ll show example age distribution cases linelist, highlighting outcome.also works well faceting functions - allows user produce facet plots background data highlighted doesn’t apply facet!","code":"\n# load gghighlight\nlibrary(gghighlight)\n\n# replace NA values with unknown in the outcome variable\nlinelist_cleaned <- linelist_cleaned %>%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(\n  data = linelist_cleaned,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  gghighlight::gghighlight(outcome == \"Death\")     # highlight instances where the patient has died.\n# produce a histogram of all cases by age\nggplot(\n  data = linelist_cleaned,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() +                                # make the histogram\n  gghighlight::gghighlight() +                      # highlight instances where the patient has died\n  facet_wrap(~outcome)                              # make facets by outcome"},{"path":"ggplot-tips.html","id":"dual-axes","chapter":"1 ggplot tips","heading":"1.12 Dual axes","text":"secondary y-axis often requested addition ggplot2 graph. robust debate validity graphs data visualization community, often recommended, manager may still want . , present two methods achieve .Using cowplot package combine two separate plotsUsing statistical transformation data primary axis","code":""},{"path":"ggplot-tips.html","id":"using-cowplot","chapter":"1 ggplot tips","heading":"Using cowplot","text":"approach involves creating two separate plots - one y-axis left, y-axis right. use specific theme_cowplot() must x-axis. third command two plots aligned overlaid top . functionalities cowplot, one, described depth site.demonstrate technique overlay epidemic curve line weekly percent patients died. use example alignment dates x-axis complex say, aligning bar chart another plot. things note:epicurve line aggregated weeks prior plotting date_breaks date_labels identical - x-axes two plots overlaid.y-axis moved right-side plot 2 position = argument scale_y_continuous().plots make use theme_cowplot()Note another example technique [Epicurves] page - overlaying cumulative incidence top epicurve.Make plot 1\r\nessentially epicurve. use geom_area() just demonstrate use (area line, default)Make plot 2\r\nCreate second plot showing line weekly percent cases died.Now align plot using function align_plots(), specifying horizontal vertical alignment (“hv”, also “h”, “v”, “none”). specify alignment axes well (top, bottom, left, right) “tblr”. output class list (2 elements).draw two plots together using ggdraw() (cowplot) referencing two parts aligned_plots object.","code":"\npacman::p_load(cowplot)            # load/install cowplot\n\np1 <- linelist %>%                 # save plot as object\n     count(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     ggplot()+\n          geom_area(aes(x = epiweek, y = n), fill = \"grey\")+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n     theme_cowplot()+\n     labs(\n       y = \"Weekly cases\"\n     )\n\np1                                      # view plot \np2 <- linelist %>%         # save plot as object\n     group_by(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     summarise(\n       n = n(),\n       pct_death = 100*sum(outcome == \"Death\", na.rm=T) / n) %>% \n     ggplot(aes(x = epiweek, y = pct_death))+\n          geom_line()+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n          scale_y_continuous(\n               position = \"right\")+\n          theme_cowplot()+\n          labs(\n            x = \"Epiweek of symptom onset\",\n            y = \"Weekly percent of deaths\",\n            title = \"Weekly case incidence and percent deaths\"\n          )\n\np2     # view plot\naligned_plots <- align_plots(p1, p2, align=\"hv\", axis=\"tblr\")                  # align the two plots and save them as list\naligned_plotted <- ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])  # overlay them and save the visual plot\naligned_plotted                                                                # print the overlayed plots"},{"path":"ggplot-tips.html","id":"statistical-transformation","chapter":"1 ggplot tips","heading":"Statistical transformation","text":"Unfortunately, secondary axes well supported ggplot syntax. reason, ’re fairly limited terms can shown secondary axis - second axis direct transformation secondary axis.Differences axis values purely cosmetic - want show two different variables one graph, different y-axis scales variable, work without work behind scenes. obtain effect, transform one variables data, apply transformation reverse specifying axis labels. Based , can either specify transformation explicitly (e.g. variable around 10x large variable b) calculate code (e.g. ratio maximum values dataset).syntax adding secondary axis straightforward! calling scale_xxx_xxx() function (e.g. scale_y_continuous()), use sec.axis argument call sec_axis() function. trans argument function allows specify label transformation axis - provide standard tidyverse syntax.example, want show number positive RDTs malaria dataset facility 1, showing 0-4 year olds cases chart:","code":"\n# take malaria data from facility 1\nmalaria_facility_1 <- malaria_data %>%\n  filter(location_name == \"Facility 1\")\n\n# calculate the ratio between malaria_rdt_0-4 and malaria_tot \n\ntf_ratio <- max(malaria_facility_1$malaria_tot, na.rm = T) / max(malaria_facility_1$`malaria_rdt_0-4`, na.rm = T)\n\n# transform the values in the dataset\n\nmalaria_facility_1 <- malaria_facility_1 %>%\n  mutate(malaria_rdt_0_4_tf = `malaria_rdt_0-4` * tf_ratio)\n  \n\n# plot the graph with dual axes\n\nggplot(malaria_facility_1, aes(x = data_date)) +\n  geom_line(aes(y = malaria_tot, col = \"Total cases\")) +\n  geom_line(aes(y = malaria_rdt_0_4_tf, col = \"Cases: 0-4 years old\")) +\n  scale_y_continuous(\n    name = \"Total cases\",\n    sec.axis = sec_axis(trans = ~ . / tf_ratio, name = \"Cases: 0-4 years old\")\n  ) +\n  labs(x = \"date of data collection\") +\n  theme_minimal() +\n  theme(legend.title = element_blank())"},{"path":"ggplot-tips.html","id":"combine-plots","chapter":"1 ggplot tips","heading":"1.13 Combine plots","text":"CONSTRUCTIONcowplotpatchwork","code":""},{"path":"ggplot-tips.html","id":"packages-to-help-you","chapter":"1 ggplot tips","heading":"1.14 Packages to help you","text":"CONSTRUCTIONThere really neat R packages specifically designed help navigate ggplot2:","code":""},{"path":"ggplot-tips.html","id":"gghelp-from-ggx","chapter":"1 ggplot tips","heading":"1.14.1 gghelp() from ggx","text":"Converts normal language query ggplot command.https://rdrr.io/github/brandmaier/ggx/man/gghelp.html","code":""},{"path":"ggplot-tips.html","id":"point-and-click-with-equisse","chapter":"1 ggplot tips","heading":"1.14.2 Point-and-click with equisse","text":"https://github.com/dreamRs/esquisse“addin allows interactively explore data visualizing ggplot2 package. allows draw bar plots, curves, scatter plots, histograms, boxplot sf objects, export graph retrieve code reproduce graph.”Documentation:https://dreamrs.github.io/esquisse/index.htmlInstall launch addin via RStudio menu esquisse::esquisser().","code":""},{"path":"ggplot-tips.html","id":"miscellaneous","chapter":"1 ggplot tips","heading":"1.15 Miscellaneous","text":"","code":""},{"path":"ggplot-tips.html","id":"numeric-display","chapter":"1 ggplot tips","heading":"Numeric display","text":"can disable scientific notation running command prior plotting.apply number_format() scales package specific value column, shown .Use functions package scales easily adjust numbers displayed. can applied columns data frame, shown individual numbers purpose example.","code":"\noptions(scipen=999)\nscales::number(6.2e5)## [1] \"620 000\"\nscales::number(1506800.62,  accuracy = 0.1,)## [1] \"1 506 800.6\"\nscales::comma(1506800.62, accuracy = 0.01)## [1] \"1,506,800.62\"\nscales::comma(1506800.62, accuracy = 0.01,  big.mark = \".\" , decimal.mark = \",\")## [1] \"1.506.800,62\"\nscales::percent(0.1)## [1] \"10%\"\nscales::dollar(56)## [1] \"$56\"\nscales::scientific(100000)## [1] \"1e+05\""},{"path":"ggplot-tips.html","id":"resources","chapter":"1 ggplot tips","heading":"1.16 Resources","text":"Inspiration\r\nggplot graph galleryPresentation data\r\nEuropean Centre Disease Prevention Control Guidelines presentation surveillance dataFacets labellers\r\nUsing labellers facet strips\r\nLabellersAdjusting order factors\r\nfct_reorderfct_inorderHow reorder boxplotReorder variable ggplot2R Data Science - FactorsLegendsAdjust legend orderCaptions\r\nCaption alignmentLabelsggrepelCheatsheetsBeautiful plotting ggplot2TO - constructionUsing option label_wrap_gen facet_wrap multiple strip lines\r\nlabels colors stripsAxis text vertical adjustment\r\nrotation\r\nLabellerslimit range limit() coord_cartesian(), ylim(), scale_x_continuous()\r\ntheme_classic()expand = c(0,0)\r\ncoord_flip()\r\ntick marksggrepel\r\nanimationsremove\r\nremove title\r\nusing fill = color = labs()\r\nflip order / don’t flip order\r\nmove location\r\ncolor? theme(legend.title = element_text(colour=“chocolate”, size=16, face=“bold”))+ scale_color_discrete(name=“color ischocolate!?”)\r\nColor boxes behind points legend\r\ntheme(legend.key=element_rect(fill=‘pink’)) use fill = NA remove . http://zevross.com/blog/2014/08/04/beautiful-plotting--r--ggplot2-cheatsheet-3/\r\nChange size symbols legend guides(colour = guide_legend(override.aes = list(size=4)))Turn layer legend\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp)), size=4)\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp), size=4), show_guide=FALSE)Force legend even aes().\r\nggplot(nmmaps, aes(x=date, y=o3))+\r\ngeom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“points”))\r\nControl shape legend guides - list linetype shape\r\nggplot(nmmaps, aes(x=date, y=o3))+geom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“Point values”))+\r\nscale_colour_manual(name=’‘, values=c(’Important line’=‘grey’, ‘Point values’=‘red’), guide=‘legend’) +\r\nguides(colour = guide_legend(override.aes = list(linetype=c(1,0)\r\n, shape=c(NA, 16))))","code":""}]
