[{"path":"index.html","id":"the-epidemiologist-r-handbook","chapter":"The Epidemiologist R Handbook","heading":"The Epidemiologist R Handbook","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"The Epidemiologist R Handbook","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via (**downloadable version**)gaps book address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareLet’s avoid hours online searching repository best-practice code common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"The Epidemiologist R Handbook","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resources","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"The Epidemiologist R Handbook","heading":"Edit or contribute","text":"welcome feedback comments survey LINK.want directly contribute modify content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"The Epidemiologist R Handbook","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"The Epidemiologist R Handbook","heading":"Contributors","text":"handbook conceived, written, edited collaboration epidemiologists public health practitioners around world drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Alex Spina, Amrish Baidjoe, Henry Laurenson-Schafer, Finlay Campbell, Pat KeatingAuthors (order contributions): Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Daniel Molling, Liza Coyer, Jonny Polonski, Yurie Izawa, Sara Hollis, Isha BerryReviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"The Epidemiologist R Handbook","heading":"Funding and programmatic support","text":"handbook received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET).Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"The Epidemiologist R Handbook","heading":"Inspiration","text":"multitude tutorials vignettes provided foundational knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"The Epidemiologist R Handbook","heading":"Image credits","text":"Logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"The Epidemiologist R Handbook","heading":"License and Terms of Use","text":"handbook approved product specific organization.Although strive accuracy, provide guarantee content book.work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"tables.html","id":"tables","chapter":"1 Tables","heading":"1 Tables","text":"section demonstrates create publication-ready tables, can inserted directly shareable documents, including R Markdown outputs.","code":""},{"path":"tables.html","id":"overview","chapter":"1 Tables","heading":"1.1 Overview","text":"build previous sections basic statistics creating summary tables (e.g. using dplyr gtsummary show create publication-read tables. primary package use flextable, compatible multiple R Markdown formats, including html word documents.Example:Table Ebola patients outcome information: Number, proportion, CT values cases recovered diedHospitalTotal cases known outcomeRecoveredDiedNumberProportion cases outcomesCT valueNumberProportion cases outcomesCT valuePort Hospital1,36457942.4522.078557.5522.0Military Hospital70830943.6421.039956.3622.0Other68529042.3421.039557.6622.0Central Hospital35816546.0922.019353.9122.0St. Mark's Maternity Hospital (SMMH)32512638.7721.019961.2322.0","code":""},{"path":"tables.html","id":"preparation","chapter":"1 Tables","heading":"1.2 Preparation","text":"Using packages discussed sections gtsummary dplyr, create table content interest, correct columns rows.create simple summary table patient outcomes using Ebola linelist. interested knowing number proportion patients recover died, well median CT values, hospital admission.Load, install necessary, flextable, use convert table fully formatted presentable table.","code":"\ntable <- linelist %>% \n  group_by(hospital, outcome) %>% \n  filter(!is.na(outcome) & hospital!=\"Missing\") %>%  # Remove cases with missing outcome/hospital\n  summarise(ct_value = median(ct_blood), N = n()) %>%  # Calculate indicators of interest \n  pivot_wider(values_from=c(ct_value, N), names_from = outcome) %>% #Pivot from long to wide\n  mutate(`N known` = `N_Death` + N_Recover) %>% # Calculate total number\n  arrange(-`N known`) %>% # Arrange rows from highest to lowest total\n  mutate(`Prop_Death` = `N_Death`/`N known`*100,  # Calculate proportions\n         `Prop_Recover` = `N_Recover`/`N known`*100) %>% \n  select(hospital, `N known`, `N_Recover`, `Prop_Recover`, ct_value_Recover,\n         `N_Death`, `Prop_Death`, ct_value_Death) # Re-order columns \n\n\ntable## # A tibble: 5 x 8\r\n## # Groups:   hospital [5]\r\n##   hospital                             `N known` N_Recover Prop_Recover ct_value_Recover N_Death Prop_Death ct_value_Death\r\n##   <chr>                                    <int>     <int>        <dbl>            <dbl>   <int>      <dbl>          <dbl>\r\n## 1 Port Hospital                             1364       579         42.4               22     785       57.6             22\r\n## 2 Military Hospital                          708       309         43.6               21     399       56.4             22\r\n## 3 Other                                      685       290         42.3               21     395       57.7             22\r\n## 4 Central Hospital                           358       165         46.1               22     193       53.9             22\r\n## 5 St. Mark's Maternity Hospital (SMMH)       325       126         38.8               21     199       61.2             22\npacman::p_load(flextable)"},{"path":"tables.html","id":"basic-flextable","chapter":"1 Tables","heading":"1.3 Basic flextable","text":"Creating flextableTo create manage flextable objects, pass table object flextable function progressively add formatting features using dplyr syntax.syntax line flextable code follows:function(table, = X, j = X, part = \"X\"), :\r\ntable name table object, although need stated using dplyr syntax table name already specified (see examples).\r\n‘function’ can one many different functions, width determine column widths, bg set background colours, align set whether text centre/right/left aligned, .\r\npart refers part table function applied . E.g. “header”, “body” “”.\r\nspecifies row apply function , ‘X’ row number. multiple rows, e.g. first third rows, one can specify: = c(1:3). Note ‘body’ selected, first row starts underneath header section.\r\nj specifies column apply function , ‘x’ column number name. multiple rows, e.g. fifth sixth, one can specify: j = c(5,6).\r\ntable name table object, although need stated using dplyr syntax table name already specified (see examples).‘function’ can one many different functions, width determine column widths, bg set background colours, align set whether text centre/right/left aligned, .part refers part table function applied . E.g. “header”, “body” “”.specifies row apply function , ‘X’ row number. multiple rows, e.g. first third rows, one can specify: = c(1:3). Note ‘body’ selected, first row starts underneath header section.j specifies column apply function , ‘x’ column number name. multiple rows, e.g. fifth sixth, one can specify: j = c(5,6).hospitalN knownN_RecoverProp_Recoverct_value_RecoverN_DeathProp_Deathct_value_DeathPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0We see immediately suboptimal spacing, proportions many decimal places.Formatting cell contentWe edit proportion colums one decimal place using flextable code. Note also done data management stage round() function.hospitalN knownN_RecoverProp_Recoverct_value_RecoverN_DeathProp_Deathct_value_DeathPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0Formatting column widthWe can use autofit() function, nicely stretches table cell one row text.hospitalN knownN_RecoverProp_Recoverct_value_RecoverN_DeathProp_Deathct_value_DeathPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0However, might always appropriate, especially long values within cells, meaning table might fit page.Instead, can specify widths. can take playing around know width value put. example , specify different widths column 1, column 2, columns 4 8.hospitalN knownN_RecoverProp_Recoverct_value_RecoverN_DeathProp_Deathct_value_DeathPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0Column headersWe want clearer headers easier interpretation table contents.First can add extra header layer clarity. add_header_row ‘top’ set true, columns subgroups can grouped together. also rename now-second header layer. Finally merge columns top header row.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0Formatting borders background Flextable default borders respond well additional header levels. start scratch removing existing borders border_remove. add black line bottom table using hlinw, specifying 5th row table body. Flextable default add line bottom row. order add black lines top sections, need use hline_top.also use fp_border , actually applied border. function officer package.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0Font alignmentWe centre-align columns aside left-column hospital names, using align function.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0Additionally, can increase header font size change bold.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0BackgroundTo distinguish content table headers, may want add additional formatting. e.g. changing background colour. example change table body gray.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0","code":"\nftable <- flextable(table) \nftable\nftable <- colformat_num(ftable, j = c(4,7), digits = 1)\nftable\nftable %>% autofit()\nftable <- ftable %>% \n  width(j=1, width = 2.7) %>% \n  width(j=2, width = 1.5) %>% \n  width(j=c(4,5,7,8), width = 1)\n\nftable\nftable <- ftable %>% \n  add_header_row( values = c(\"Hospital\", \n                             \"Total cases with known outcome\", \n                             \"Recovered\", \n                             \"\",\n                             \"\",\n                             \"Died\", # This and the next two columns will be one value ' died\n                             \"\",     # As merging will keep the first column, next two are blank\n                             \"\"), \n                  top = T) %>% # New header goes on top of existing header row\n    set_header_labels(hospital = \"\", # Rename the columns in original header row\n                    `N known` = \"\",                  \n                    N_Recover = \"Total\",\n                    Prop_Recover = \"% of cases\",\n                    ct_value_Recover = \"Median CT values\",\n                    N_Death = \"Total\",\n                    Prop_Death = \"% of cases\",\n                     ct_value_Death = \"Median CT values\")  %>% \n  merge_at(i = 1, j = 3:5, part = \"header\") %>% # Horizontally merge columns in new header row\n  merge_at(i = 1, j = 6:8, part = \"header\")  \n\nftable\nlibrary(officer)\n\nftable <- ftable %>% \n  border_remove() %>% # Remove existing borders \n  hline(part = \"body\", i=5, border = fp_border(color=\"black\", width=2)) %>% \n  hline_top(part = \"header\", border = fp_border(color=\"black\", width=2)) %>%\n  hline_top(part = \"body\", border = fp_border(color=\"black\", width=2)) \n\n\nftable\nftable <- ftable %>% \n   flextable::align(align = \"center\", j = c(2:8), part = \"all\") \nftable\nftable <-  ftable %>%  \n  fontsize(i = 1, size = 12, part = \"header\") %>% \n    bold(i = 1, bold = TRUE, part = \"header\")\n\nftable\nftable <- ftable %>% \n    bg(part = \"body\", bg = \"gray95\")  \n\nftable "},{"path":"tables.html","id":"conditional-flextable-formatting","chapter":"1 Tables","heading":"1.4 Conditional flextable formatting","text":"can highlight values column meet certain rule, e.g. 55% cases died.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0Or, can higlight entire row meeting certain criterion, hospital interest. particularly helpful looping e.g. reports per geographical area, highlight tables current iteration compares geographies. just remove column (j) specification.HospitalTotal cases known outcomeRecoveredDiedTotal% casesMedian CT valuesTotal% casesMedian CT valuesPort Hospital1,36457942.422.078557.622.0Military Hospital70830943.621.039956.422.0Other68529042.321.039557.722.0Central Hospital35816546.122.019353.922.0St. Mark's Maternity Hospital (SMMH)32512638.821.019961.222.0","code":"\nftable %>% \n  bg(j=7, i= ~ Prop_Death >=55, part = \"body\", bg = \"red\") \nftable %>% \n  bg(., j=c(1:8), i= ~ hospital == \"Military Hospital\", part = \"body\", bg = \"#91c293\") "},{"path":"tables.html","id":"saving-your-table","chapter":"1 Tables","heading":"1.5 Saving your table","text":"different ways table can integrated output.Save single tableYou can export tables Word, PowerPoint HTML image (PNG) files. , one following functions used:save_as_docxsave_as_pptxsave_as_imagesave_as_htmlFor instance:Note packages webshot webshot2 required save flextable image.Images may come transparent backgrounds.want view ‘live’ versions flextable output intended document format, instance can see fits page can copy another document, can use print method argument preview set “pptx” “docx”. document pop .Save table R markdown documentThis table can integrated automated document, R markdown output, table object called within R markdown chunk. means table can updated part report data might change, numbers can refreshed.See detail R markdown section handbook.","code":"\nsave_as_docx(\"my table\" = ftable, path = \"file.docx\")\n# Edit the 'my table' as needed for the title of table. If not specified the whole file will be blank. \n\nsave_as_image(ftable, path = \"file.png\")## [1] \"C:/Users/Neale/OneDrive - Neale Batra/Documents/Analytic Software/R/Projects/R handbook/Epi_R_handbook/file.png\"print(ftable, preview = \"docx\") # Word document example\r\nprint(ftable, preview = \"pptx\") # Powerpoint example"},{"path":"tables.html","id":"resources","chapter":"1 Tables","heading":"1.6 Resources","text":"full flextable explanation : https://ardata-fr.github.io/flextable-book/","code":""},{"path":"plot-continuous-data.html","id":"plot-continuous-data","chapter":"2 Plot continuous data","heading":"2 Plot continuous data","text":"appropriate plotting continuous data, age, clinical measurements, distance.","code":""},{"path":"plot-continuous-data.html","id":"overview-1","chapter":"2 Plot continuous data","heading":"2.1 Overview","text":"Ggplot2, part Tidyverse family, fantastic versatile package visualising continuous data. usual, R also built-functions, can helpful quick looks data.Visualisations covered include:Plots one continuous variable:\r\nHistograms, classic graph present distribution continuous variable.\r\nBox plots (also called box whisker), box represents 25th, 50th, 75th percentile continuous variable, line outside represent tail ends distribution continuous variable, dots represent outliers.\r\nViolin plots, similar histograms show distribution continuous variable based symettrical width ‘violin’.\r\nJitter plots, visualise distribution continuous variable showing values dots, rather collectively one larger shape. dot ‘jittered’ can (mostly) seen, even two value.\r\nSina plots, cross jitter violin plots, individual points can seen symmetrical shape distribution (note brings ggforce package).\r\nHistograms, classic graph present distribution continuous variable.Box plots (also called box whisker), box represents 25th, 50th, 75th percentile continuous variable, line outside represent tail ends distribution continuous variable, dots represent outliers.Violin plots, similar histograms show distribution continuous variable based symettrical width ‘violin’.Jitter plots, visualise distribution continuous variable showing values dots, rather collectively one larger shape. dot ‘jittered’ can (mostly) seen, even two value.Sina plots, cross jitter violin plots, individual points can seen symmetrical shape distribution (note brings ggforce package).Scatter plots two continuous variables.","code":""},{"path":"plot-continuous-data.html","id":"preparation-1","chapter":"2 Plot continuous data","heading":"2.2 Preparation","text":"Preparation includes loading relevant packages, ggplot2 dplyr, ensuring data correct class format. examples section, use simulated Ebola linelist, focusing continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).Note: load just tidyverse, includes ggplot2 tidyverse among packages (stringr, tidyr, instance).conducted various data checks point, including checking missingness data.","code":"\npacman::p_load(ggplot2,\n               dplyr)\n\nlinelist <- rio::import(here::here(\"data\", \"linelist_cleaned.rds\")) %>% #Load the data\n  mutate(age = as.numeric(age),\n         ct_blood = as.numeric(ct_blood),\n         days_onset_hosp = as.numeric(days_onset_hosp),\n         wt_kg = as.numeric(wt_kg)) # Converting vars to numeric as examples "},{"path":"plot-continuous-data.html","id":"plotting-with-ggplot2","chapter":"2 Plot continuous data","heading":"2.3 Plotting with ggplot2","text":"","code":""},{"path":"plot-continuous-data.html","id":"code-syntax","chapter":"2 Plot continuous data","heading":"2.3.1 Code syntax","text":"Ggplot2 extensive functionality, code syntax can used many different plot types.basic breakdown ggplot code follows:ggplot() starts function. can specify data aesthetics (see next point) within ggplot bracket, unless combining different data sources plot types oneaes() stands ‘aesthetics’, columns used visualisation specified. instance aes(x = col1, y = col2) specify data used x y values (y continuous variable examples).fill specifies colour boxplot areas. One also write color specify outline point colour.geom_XXX specifies type plot. Options include:\r\ngeom_boxplot() boxplot\r\ngeom_histogram histogram\r\ngeom_violin() violin plot\r\ngeom_jitter() jitter plot\r\ngeom_point() scatter plot\r\ngeom_sina() jitter plot width jitter controlled density distribution data within class\r\ngeom_boxplot() boxplotgeom_histogram histogramgeom_violin() violin plotgeom_jitter() jitter plotgeom_point() scatter plotgeom_sina() jitter plot width jitter controlled density distribution data within classNote aes() bracket can within ggplot() bracket within specific geom_XXX bracket. layering different ggplots diferent aesthetics, need specify within geom_XXX.see section ggplot tips. also walk customisation .","code":"ggplot(data = linelist)+  \r\n  geom_XXXX(aes(x = col1, y = col2),\r\n       fill = \"color\") "},{"path":"plot-continuous-data.html","id":"plotting-one-continuous-variable","chapter":"2 Plot continuous data","heading":"2.3.2 Plotting one continuous variable","text":"Box plotsBelow code creating box plots, show distribution CT values Ebola patients entire dataset sub group. Note subgroup breakdowns, ‘NA’ values also removed using dplyr, otherwise ggplot plots age distribution ‘NA’ separate boxplot.HistogramsBelow code generating histograms, show distribution CT values Ebola patients. Within aes() bracket, specify variable want see distribution . can supply either x y, change direction plot. y x respectively show count, represented columns referred ‘bins’.examples , R guessed appropriate way present data, issues message tell many bins (columns) went , prompt customise :used 30 bins, look spaced 0 values. relates way values rounded.change , can specify binwidth (e.g. range values bin counting) bins (number bins) within geom_histogram argument. evenly grouped, minimum maximum values histogram.Rather counts, can change stats within aes() bracket specify proportions - see (plot ) . can also layer different histograms different settings (plot B).Violin, jitter, sina plotsBelow code creating violin plots (geom_violin) jitter plots (geom_jitter) show age distributions. One can specify ‘fill’ ’color’also determined data, thereby inserting options within aes bracket.One can combine two using geom_sina option, actually part ggforce package. can easier visually interpret. ) left shows basic layering geom_violin geom_sina. B) shows slightly effort put appearance ggplot (see -line comments).","code":"\n# A) Simple boxplot of one numeric variable\nggplot(data = linelist, aes(y = ct_blood))+  # only y variable given (no x variable)\n  geom_boxplot()+\n  labs(title = \"A) Simple ggplot2 boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = ct_blood,                            # Continous variable\n           x = outcome)) +                          # Grouping variable\n  geom_boxplot(fill = \"gold\")+                      # Create the boxplot and specify colour\n  labs(title = \"B) ggplot2 boxplot by gender\")      \n# A) Regular histogram\nggplot(data = linelist, aes(x = ct_blood))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Simple ggplot2 histogram\")\n\n# B) Histogram with values across y axis\nggplot(data = linelist, aes(y = ct_blood))+  # provide y variable \n  geom_histogram()+\n  labs(title = \"B) Simple ggplot2 histogram with axes swapped\")## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# A) Histogram with specified bin number\nggplot(data = linelist, aes(x = ct_blood))+   # Provide x variable\n  geom_histogram(bins=10,                     # Add bin number\n                 color = \"white\")+            # Add white outline so bars can easily be distinguished\n  labs(title = \"A) Ggplot histogram with 10 bins\")\n\n# B) Histogram with specified bin width\nggplot(data = linelist, aes(x = ct_blood))+   # Provide y variable \n  geom_histogram(binwidth = 1,                # Each bar includes a CT value range of 1\n                 color = \"white\")+            # Add white outline so bars can easily be distinguished\n  labs(title = \"B) Ggplot histogram with bindwidth of 1\")\n# A) Histogram with proportion\nggplot(data = linelist, aes(x = ct_blood,           # provide x variable\n                            y = stat(density)))+    # Calculate proportion\n  geom_histogram(bins=10,                           # Add bin number\n                 color = \"white\")+ # Add white outline so bars can easily be distinguished\n  labs(title = \"A) Ggplot histogram showing proportion\")\n\n# B) Layered histograms with different bin widths\nggplot(data = linelist, aes(x = ct_blood))+         # provide x variable \n  geom_histogram(binwidth = 2) +                    # Underlying layer has binwidth of 2\n  geom_histogram(binwidth = 1,                      # Top layer has binwidth of 1\n                 alpha = 0.4,                       # Set top layer to be slightly see through\n                 fill = \"blue\")+ \n  labs(title = \"B) Layered ggplot histograms\")\n# A) Violin plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,                                # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color of boxes)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"A) ggplot2 violin plot by gender\")    \n\n\n# B) Jitter plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,                               # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+ # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"B) ggplot2 jitter plot by gender\")     \npacman::p_load(ggforce)\n\n# A) Sina plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,             # numeric variable\n           x = outcome)) +      # group variable\n  geom_violin()+                # create the violin plot\n  geom_sina()+\n  labs(title = \"A) ggplot() violin and sina plot by gender\")      \n\n\n# A) Sina plot by group\nggplot(data = linelist %>% filter(!is.na(outcome)), \n       aes(y = age,             # numeric variable\n           x = outcome)) +      # group variable\n  geom_violin(aes(fill = outcome), # fill variable (color of violin background)\n              color = \"white\",  # Plot has white outline rather than default black \n              alpha = 0.2)+     # Alpha value where 0 transparent to 1 opaque\n  geom_sina(size=1,             # Change the size of the jitter\n            aes(color = outcome))+ # color variable (color of dots)\n  scale_fill_manual(values = c(\"Death\" = \"#bf5300\", \n                        \"Recover\" = \"#11118c\")) + # Define colours for death/recover \n                                                  # (but note they will come out a bit transparent)\n  scale_color_manual(values = c(\"Death\" = \"#bf5300\", \n                         \"Recover\" = \"#11118c\")) + # Define colours for death/recover\n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) ggplot() violin and sina plot by gender with formatting\")      "},{"path":"plot-continuous-data.html","id":"plotting-one-continuous-variable-within-facets","chapter":"2 Plot continuous data","heading":"2.3.3 Plotting one continuous variable within facets","text":"Faceting basicsTo examine subgroups, one can ‘facet’ graph. means plot recreated within specified subgroups. One can use:facet_wrap() - recreate sub-graphs present alphabetically (typically, unless stated otherwise). can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within. See plot .facet_grid() - suited seeing subgroups particular combinations discrete variables. See plot B . nrow ncol relevant, subgroups presented grid, subgroups always x y axis (see notes code )can stipulate two faceting variables, ‘~’ . one faceting variable, ‘.’ used placeholder non-used second faceting variable - see code examples.faceting optionsThe scales used facetting consistent across subgroups, helpful comparisons, always appropriate optimal.using facet_wrap facet_grid, can add scales = \"free_y\" (plot ) heights faceted histograms standardised shapes easier compare. particularly useful actual counts small one subcategories trends otherwise hard see. Instead free_y can also write free_x x axis free axes. Note facet_grid, y scales facets row, x scales facets column.using facet_grid , can add space = \"free_y\" space = \"free_x\" actual height width facet weighted values figure within. works scales = \"free\" (y x) already applies.","code":"\n# A) Histogram of hospitalisation dates faceted by hospital\nggplot(data = linelist %>% \n         filter(hospital != \"Missing\"),               # filter removes unknown hospital\n       aes(x = date_hospitalisation ))+\n  geom_histogram(binwidth=7) +                        # Bindwidth = 7 days\n  labs(title = \"A) Ggplot 2 histogram of hospitalisation dates by hospital\")+\n  facet_wrap(hospital~.,                              # Facet by just hospital\n            ncol = 2)                                 # Facet in two columns\n\n# B) Boxplot of age faceted in a grid with two variables, gender and outcome\nggplot(data = linelist %>% \n         filter(!is.na(gender) & !is.na(outcome)),    # filter retains non-missing gender/outcome\n       aes(y = age))+\n  geom_boxplot()+\n  labs(title = \"A) A Ggplot2 boxplot by gender and outcome\")+\n  facet_grid(outcome~gender)                          # Outcome is the row, gender is the column\n# A) Facet hospitalsation date by hospital, free y axis\nggplot(data = linelist %>% filter(hospital != \"Missing\"), # filter removes unknown hospital\n       aes(x = date_hospitalisation ))+\n  geom_histogram(binwidth=7) + # Bindwidth = 7 days\n  labs(title = \"A) Histogram with free y axis scales\")+\n  facet_grid(hospital~., # Facet with hospital as the row \n             scales = \"free_y\") # Free the y scale of each facet\n\n# B) Facet hospitalisation date by hospital, free y axis and vertical spacing\nggplot(data = linelist %>% filter(hospital != \"Missing\"), # filter removes unknown hospital\n       aes(x = date_hospitalisation ))+\n  geom_histogram(binwidth=7) + # Bindwidth = 7 days\n  labs(title = \"B) Histogram with free y axis scales and spacing\")+\n  facet_grid(hospital~., # Facet with hospital as the row \n             scales = \"free_y\", # Free the y scale of each facet\n             space = \"free_y\") # Free the vertical spacing of each facet to optimise space"},{"path":"plot-continuous-data.html","id":"plotting-two-continuous-variables","chapter":"2 Plot continuous data","heading":"2.3.4 Plotting two continuous variables","text":"Following similar syntax, geom_point allow one plot two continuous variables eachother scatter plot. useful showing actual values rather distributions.basic scatter plot age vs weight shown (). (B) use facet_grid show relationship two continuous variables linelist.","code":"\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %>% filter(!is.na(gender) & !is.na(outcome)), # filter retains non-missing gender/outcome\n       aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender~outcome) "},{"path":"plot-continuous-data.html","id":"plotting-with-base-graphics","chapter":"2 Plot continuous data","heading":"2.4 Plotting with base graphics","text":"Using base graphics can sometimes quicker ggplot, helpful initial first look.","code":""},{"path":"plot-continuous-data.html","id":"plotting-one-continuous-variable-1","chapter":"2 Plot continuous data","heading":"2.4.1 Plotting one continuous variable","text":"Box plots histogramsThe -built graphics package comes boxplot() hist() functions, allowing straight-forward visualisation continuous variable.customisationSubgroups can also shown, subgroup crossed groups. Note plot B , outcome gender written outcome*gender boxplots four combinations two columns. get facetted across different rows columns like ggplot2.specify linelist dataset need write age linelist$ageSome options boxplot() shown :Boxplot width proportional sample size ()Violin plots, notched representing median x around (B)Horizontal (C)","code":"\n# Boxplot\nboxplot(linelist$wt_kg,\n                  main = \"A) Base boxplot\") \n\n\n# Histogram\nhist(linelist$wt_kg,\n                  main = \"B) Base histogram\") \n# Box plot by subgroup\nboxplot(age ~ outcome,\n                  data = linelist, \n                  main = \"A) Base boxplot by subgroup\")\n\n# Box plot by crossed subgroups\nboxplot(age ~ outcome*gender,\n                  data = linelist, \n                  main = \"B) Base boxplot) by crossed groups\")\n# Varying width by sample size \nboxplot(linelist$age ~ linelist$outcome,\n                  varwidth = TRUE, # width varying by sample size\n                  main=\"A) Proportional boxplot() widths\")\n\n                  \n# Notched (violin plot), and varying width\nboxplot(age ~ outcome,\n        data=linelist,\n        notch=TRUE,      # notch at median\n        main=\"B) Notched boxplot()\",\n        col=(c(\"gold\",\"darkgreen\")),\n        xlab=\"Suppliment and Dose\")\n\n# Horizontal\nboxplot(age ~ outcome,\n        data=linelist,\n        horizontal=TRUE,  # flip to horizontal\n        col=(c(\"gold\",\"darkgreen\")),\n        main=\"C) Horizontal boxplot()\",\n        xlab=\"Suppliment and Dose\")"},{"path":"plot-continuous-data.html","id":"plotting-two-continuous-variables-1","chapter":"2 Plot continuous data","heading":"2.4.2 Plotting two continuous variables","text":"Using base R, can quickly visualise relationship two continuous variables plot function.","code":"\nplot(linelist$age, linelist$wt_kg)"},{"path":"plot-continuous-data.html","id":"resources-1","chapter":"2 Plot continuous data","heading":"2.5 Resources","text":"huge amount help online, especially ggplot. see:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"plot-categorical-data.html","id":"plot-categorical-data","chapter":"3 Plot categorical data","heading":"3 Plot categorical data","text":"appropriate plotting categorical data, e.g. distribution sex, symptoms, ethnic group, etc.","code":""},{"path":"plot-categorical-data.html","id":"overview-2","chapter":"3 Plot categorical data","heading":"3.1 Overview","text":"section cover use R’s built-functions functions ggplot2 package visualise categorical/categorical data. additional functionality ggplot2 compared R means recommend presentation-ready visualisations.cover visualising distributions categorical values, counts proportions.","code":""},{"path":"plot-categorical-data.html","id":"preparation-2","chapter":"3 Plot categorical data","heading":"3.2 Preparation","text":"","code":""},{"path":"plot-categorical-data.html","id":"load-packages-and-data","chapter":"3 Plot categorical data","heading":"3.2.1 Load packages and data","text":"Preparation includes loading relevant packages, namely ggplot2 examples covered . also load data.","code":"\n# Load packages we will be using repeatedly\npacman::p_load(ggplot2, # Package for visualisation\n       dplyr,           # Package for data management\n       forcats)         # Package for factors\n\n# Load data using rio package\nlinelist <- rio::import(here::here(\"data\", \"linelist_cleaned.rds\"))"},{"path":"plot-categorical-data.html","id":"process-columns-for-analysis","chapter":"3 Plot categorical data","heading":"3.2.2 Process columns for analysis","text":"examples section, use simulated Ebola linelist, focusing categorical variables hospital, outcome. need correct class format.Let’s take look hospital column.can see values within characters, hospital names, default ordered alphabetically. ‘’ ‘missing’ values, prefer last subcategories presenting breakdowns. change column factor re-order . covered detail ‘factors’ data management section.","code":"\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)## [1] \"character\"\n# Look at values held within hospital column\ntable(linelist$hospital)## \r\n##                     Central Hospital                    Military Hospital                              Missing \r\n##                                  454                                  896                                 1469 \r\n##                                Other                        Port Hospital St. Mark's Maternity Hospital (SMMH) \r\n##                                  885                                 1762                                  422\n# Change hospital to factor variable\nlinelist <- linelist %>% \n  mutate(hospital = factor(hospital))\n\n# Define the levels of factor with forcats - so other and missing are last\nlinelist <- linelist %>% \n  mutate(hospital = fct_relevel(hospital, \n                                c(\"St. Mark's Maternity Hospital (SMMH)\", \n                                  \"Port Hospital\", \n                                  \"Central Hospital\",\n                                  \"Military Hospital\",\n                                  \"Other\",\n                                  \"Missing\")))"},{"path":"plot-categorical-data.html","id":"ensure-correct-data-structure","chapter":"3 Plot categorical data","heading":"3.2.3 Ensure correct data structure","text":"displaying frequencies distributions categorical variables, option creating plots based :linelist data, one row per observation, orA summary table based linelist, one row per category. example show use dplyr create table case counts per hospital.Tables can created using ‘table’ method built-graphics. useNA = \"ifany\" arguments ensures missing values included, table otherwise automatically excludes .using data management packages dplyr. example add percentage column.","code":"\n#Table method\n  outcome_nbar <- table(linelist$outcome, \n                        useNA = \"ifany\")\n\n  outcome_nbar # View full table## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\n#Dplyr method\n  outcome_n <- linelist %>% \n    group_by(outcome) %>% \n    count %>% \n    ungroup() %>% # Ungroup so proportion is out of total\n    mutate(proportion = n/sum(n)*100) # Caculate percentage\n  \n  \n   outcome_n #View full table## # A tibble: 3 x 3\r\n##   outcome     n proportion\r\n##   <chr>   <int>      <dbl>\r\n## 1 Death    2582       43.9\r\n## 2 Recover  1983       33.7\r\n## 3 <NA>     1323       22.5"},{"path":"plot-categorical-data.html","id":"filter-to-relevant-data","chapter":"3 Plot categorical data","heading":"3.2.4 Filter to relevant data","text":"may consider dropping rows needed analysis. instance, next examples want understand trends amongst persons known outcome, drop rows missing outcome column values.","code":"\n#Drop missing from full linelist\nlinelist <- linelist %>% \n  filter(!is.na(outcome))\n\n#Drop missing from dplyr table\noutcome_n <- outcome_n %>% \n  filter(!is.na(outcome))"},{"path":"plot-categorical-data.html","id":"plotting-with-ggplot2-1","chapter":"3 Plot categorical data","heading":"3.3 Plotting with ggplot2","text":"","code":""},{"path":"plot-categorical-data.html","id":"code-syntax-1","chapter":"3 Plot categorical data","heading":"3.3.1 Code syntax","text":"Ggplot extensive functionality, code syntax can used many different plot types.Similar plotting continuous data section, basic breakdown ggplot code follows:ggplot() starts function. can specify data aesthetics (see next point) within ggplot bracket, unless combining different data sources plot types oneaes() stands ‘aesthetics’, columns used visualisation specified. instance aes(x = col1, y = col2) specify data used x y values.fill specifies colour bars, subgroups specified within aes breacket.geom_XXX specifies type plot. Options include:\r\ngeom_bar() bar chart based linelist\r\ngeom_col() bar chart based table values (see preparation section)\r\ngeom_bar() bar chart based linelistgeom_col() bar chart based table values (see preparation section)Note aes() bracket can within ggplot() bracket within specific geom_XXX bracket. layering different ggplots diferent aesthetics, need specify within geom_XXX.see section ggplot tips.","code":"ggplot(data = linelist)+  \r\n  geom_XXXX(aes(x = col1, y = col2),\r\n       fill = \"color\") "},{"path":"plot-categorical-data.html","id":"bar-charts-using-raw-data","chapter":"3 Plot categorical data","heading":"3.3.2 Bar charts using raw data","text":"code using geom_bar creating simple bar charts show frequencies Ebola patient outcomes: ) cases, B) hospital.aes bracket, x needs specified - y want bars presented horizontally. Ggplot knows unspecified y (x) number observations fall categories.","code":"\n# A) Outcomes in all cases\nggplot(linelist) + \n  geom_bar(aes(x=outcome)) +\n  labs(title = \"A) Number of recovered and dead Ebola cases\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist) + \n  geom_bar(aes(x=outcome, fill = hospital)) +\n  theme(axis.text.x = element_text(angle = 90)) + # Add preference to rotate the x axis text\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\")"},{"path":"plot-categorical-data.html","id":"bar-charts-using-processed-data","chapter":"3 Plot categorical data","heading":"3.3.3 Bar charts using processed data","text":"code using geom_col creating simple bar charts show distribution Ebola patient outcomes. geom_col, x y need specified. x categorical variable along x axis, y generated proportions column proportion.show breakdowns hospital, additional table needs created frequencies combined categories outcome hospital.create ggplot added formatting:Axis flip: Swapped axis around coord_flip() can read hospital names.Columns side--side: Added position = \"dodge\" argument bars death recover presented side side rather stacked. Note stacked bars default.Column width: Specified ‘width’, columns half thin full possible width.Column order: Reversed order categories y axis ‘’ ‘Missing’ bottom, scale_x_discrete(limits=rev). Note used rather scale_y_discrete hospital stated x argument aes(), even visually y axis. Ggplot seems present categories backwards unless tell .details: Labels/titles colours added within labs scale_fill_color respectively.Note proportions binary, may prefer drop ‘recover’ just show proportion died. just illustration purposes though.","code":"\n# Outcomes in all cases\nggplot(outcome_n) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\noutcome_n2 <- linelist %>% \n  group_by(hospital, outcome) %>% \n  count() %>% \n  group_by(hospital) %>% # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100)\n\nhead(outcome_n2) #Preview data## # A tibble: 6 x 4\r\n## # Groups:   hospital [3]\r\n##   hospital                             outcome     n proportion\r\n##   <fct>                                <chr>   <int>      <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\r\n## 2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\r\n## 3 Port Hospital                        Death     785       57.6\r\n## 4 Port Hospital                        Recover   579       42.4\r\n## 5 Central Hospital                     Death     193       53.9\r\n## 6 Central Hospital                     Recover   165       46.1\n# Outcomes in all cases by hospital\nggplot(outcome_n2) +  \n  geom_col(aes(x=hospital, \n               y = proportion, \n               fill = outcome),\n           width = 0.5,          # Make bars a bit thinner (out of 1)\n           position = \"dodge\") + # Bars are shown side by side, not stacked\n  scale_x_discrete(limits=rev) + # Reverse the order of the categories\n  theme_minimal() +              # Minimal theme \n  coord_flip() +\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",        # Legend title\n       x = \"Count\",             # X axis title\n       y = \"Hospital of admission\")  + # Y axis title\n  scale_fill_manual(values = c(\"Death\"= \"#3B1c8C\",\n                               \"Recover\" = \"#21908D\" )) "},{"path":"plot-categorical-data.html","id":"facetting","chapter":"3 Plot categorical data","heading":"3.3.4 Facetting","text":"can also use faceting create futher mini-graphs, detailed examples continuous data visualisation section. Specifically, one can use:facet_wrap() - recreate sub-graphs present alphabetically (typically, unless stated otherwise). can invoke certain options determine look facets, e.g. nrow=1 ncol=1 control number rows columns faceted plots arranged within.facet_grid() - suited seeing subgroups particular combinations categorical variables.","code":""},{"path":"plot-categorical-data.html","id":"plotting-with-base-graphics-1","chapter":"3 Plot categorical data","heading":"3.4 Plotting with base graphics","text":"Bar chartsTo create bar plots R, create frequency table using table function. creates object table class, R can recognise plotting. can create simple frequency graph showing Ebola case outcomes (), add colours present outcomes gender (B).Note NA values excluded plots default.","code":"\n# A) Outcomes in all cases\noutcome_nbar <- table(linelist$outcome)\nbarplot(outcome_nbar, main= \"A) Outcomes\")\n\n# B) Outcomes in all cases by gender of case\noutcome_nbar2 <- table(linelist$outcome, linelist$gender) # The first column is for groupings within a bar, the second is for the separate bars\nbarplot(outcome_nbar2, legend.text=TRUE, main = \"B) Outcomes by gender\") # Specify inclusion of legend"},{"path":"plot-categorical-data.html","id":"resources-2","chapter":"3 Plot categorical data","heading":"3.5 Resources","text":"huge amount help online, especially ggplot. see:http://r-statistics.co/ggplot2-cheatsheet.htmlhttps://biostats.w.uib./-ggplot2-cheat-sheet--rstudio/","code":""},{"path":"ggplot-tips.html","id":"ggplot-tips","chapter":"4 ggplot tips","heading":"4 ggplot tips","text":"","code":""},{"path":"ggplot-tips.html","id":"overview-3","chapter":"4 ggplot tips","heading":"4.1 Overview","text":"ggplot2 popular data visualisation package R, generally used instead base R creating figures. ggplot2 benefits wide variety supplementary packages enhance functionality. Despite , ggplot syntax significantly different base R plotting, learning curve associated . Using ggplot2 generally requires user format data way highly tidyverse compatible, ultimately makes using packages together effective.want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-tips.html","id":"preparation-3","chapter":"4 ggplot tips","heading":"4.2 Preparation","text":"","code":""},{"path":"ggplot-tips.html","id":"load-data","chapter":"4 ggplot tips","heading":"Load data","text":"Lets start reading linelist data ’ll use section:","code":"\nlinelist_cleaned <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"ggplot-tips.html","id":"section","chapter":"4 ggplot tips","heading":"4.2.1 ","text":"preparing data plot, best make data adhere “tidy” data standards much possible. achieve expanded data management pages handbook.simple ways can prepare data make better plotting can often include making contents data better display - necessarily mean better data manipulation! example, can replace NA values character column string “Unknown”, clean variables “data friendly” underscores etc changed normal text. examples action:matter data structure, often also want pivot data longer formats, allow us use set variables single variable. example, wanted show number cases specific symptoms, limited fact symptom specific column. can pivot longer format like :Note format useful operations, just used plot made . However, users endeavour use practices much possible base dataset, tidyverse compliant, make working data easier.","code":"\nlinelist_cleaned <- linelist_cleaned %>%\n  # make display version of columns with more friendly names\n  mutate(\n    # f to Male, f to Female, NA to Unknown\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",\n                            gender == \"f\" ~ \"Female\",\n                            is.na(gender) ~ \"Unknown\"),\n    # replace NA with unknown for outcome\n    outcome_disp = replace_na(outcome, \"Unknown\")\n  )\nlinelist_sym <- linelist_cleaned %>%\n  pivot_longer(cols = c(\"fever\", \"chills\", \"cough\", \"aches\", \"vomit\"),\n               names_to = \"symptom_name\",\n               values_to = \"symptom_is_present\") %>%\n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\"))"},{"path":"ggplot-tips.html","id":"basics-of-ggplot","chapter":"4 ggplot tips","heading":"4.3 Basics of ggplot","text":"Plotting ggplot2 based defining base attributes plot, adding layers top. addition, user can change various plot attributes like axis settings, colour schemes, labels additional objects “added” plot. ggplot objects can highly complex, basic order creating ggplot looks something like :Define base/default plot attributes aesthetic swith ggplot() functionAdd geometric objects plot - .e. plot bar graph, line plot, scatter plot, histogram? combination ? functions start geom_ prefix.Change plot aesthetics e.g. changing axes, labels, colour scheme, background etc.code, might look like :code, important things note :making ggplot, objects combined + sign.Understanding principles behind aesthetic mapping mappping = aes() argument essential using ggplot. can done ggplot() function well every geometric object. Mapping aes() used define variables assigned axis (can continuous categorical variables). also used define whether variable can used create different plot aesthetics. can apply :list exhaustive, enough give rough overview.Aesthetics geometric objects can defined explicitly code - different assigning variable. cases done, must outside mapping argument.example defining aesthetics variable can seen :huge number different geoms can used, used similar attribute names. exhaustive, shapes can used :Histograms - geom_histogram()Barcharts - geom_bar()Boxplots - geom_boxplot()Dot plots (scatterplots discrete variables) - geom_point()Line graphs - geom_line() geom_path()Trend lines - geom_smooth()can also add straight lines plot geom_hline() (horizontal), geom_vline() (vertical) geom_abline() (specified y intercept slope)much detail show , ’ll finish example ties concepts together plotting correlation height weight patients. can also colour points age years","code":"\n# define base plot attributes and dataset\nggplot(data = linelist_cleaned, mapping = aes(x = age)) +\n  # add a geometric object with some parameters\n  geom_histogram(binwidth = 10, fill = \"red\", col = \"black\") +\n  # add labels to the axes\n  labs(x = \"Age in years\", y = \"Number of cases\")## Warning: Removed 87 rows containing non-finite values (stat_bin).a. line colour (`col = `)\r\nb. filled colour (`fill = `)\r\nc. linetype (e.g. dotted, dashed) (`linetype =`)\r\nd. size of an object (`size = `)\n# correct\nggplot(data = linelist_cleaned, mapping = aes(x = age)) +\n  geom_histogram(col = \"black\")\n\n# incorrect\n# correct\nggplot(data = linelist_cleaned, mapping = aes(x = age)) +\n  geom_histogram(mapping = aes(col = \"black\"))\n# read in dataset\n\n# define base plot attributes and dataset\nggplot(data = linelist_cleaned, mapping = aes(x = age, fill = outcome)) +\n  # add a geometric object with some parameters (NO FILL GIVEN)\n  geom_histogram(binwidth = 10, col = \"black\") +\n  # add labels to the axes\n  labs(x = \"Age in years\", y = \"Number of cases\")## Warning: Removed 87 rows containing non-finite values (stat_bin).\n# set up the plot and define key variables\n# colour is the outcome\nwt_ht_plot <- ggplot(data = linelist_cleaned,\n                     aes(y = wt_kg, x = ht_cm, col = age_years)) +\n  # define aspects of the geom that are NOT included specific to variables\n  # other attributes are inherited\n  geom_point(size = 1, alpha = 0.5) +\n  # add a trend line\n  # use a linear method\n  geom_smooth(method = \"lm\")\nwt_ht_plot## `geom_smooth()` using formula 'y ~ x'"},{"path":"ggplot-tips.html","id":"themes-and-labels","chapter":"4 ggplot tips","heading":"4.4 Themes and Labels","text":"One hte important aspects data visualisation presenting data clear way nice aesthetics. plot made previously looks ok, make theme little nicer. ggplot2 comes preset themes can used change theme plot. can also edit themes plot extreme detail theme() function. can also add nicer labels plot labs() function. 5 standard labeling locations:x - x-axisy - y-axistitle - main plot titlesubtitle - directly underneath plot title smaller text (default)caption - bottom plot, right defaultFor example, can update plot previously plotted nice labels like :theme() function can also used edit defaults elements. function can take extremely large number arguments, can used edit specific aspects plot. won’t go examples, look editing aspects text elements done. basic way done :Calling specific argument theme() element want edit (e.g. plot.title plot title)Supplying element_text() function argument (versions e.g. element_rect() editing plot background aesthetics)Changing arguments element_text()example, increase size plot title size, make subtitle italicised face, right\r\njustify caption hjust. ’ll also change legend location good measure!ever want remove element plot, can also theme()! Just pass element_blank() argument theme disappear completely!","code":"\nwt_ht_plot <- wt_ht_plot + \n  # set the theme to classic\n  theme_classic() +\n  # further edit the theme to move the legend position\n  # add nicer labels\n  labs(y = \"Weight (kg)\", \n       x = \"height (cm)\",\n       title = \"Patient height and weight\",\n       subtitle = glue::glue(\"total patients {nrow(linelist_cleaned)}\"),\n       caption = \"produced by me!\")\nwt_ht_plot## `geom_smooth()` using formula 'y ~ x'\nwt_ht_plot + \n    theme(legend.position = \"bottom\",\n          # size of title is 30\n          plot.title = element_text(size = 30),\n          # right justify caption\n          plot.caption = element_text(hjust = 0),\n          # subtitle is italicised\n          plot.subtitle = element_text(face = \"italic\"))## `geom_smooth()` using formula 'y ~ x'"},{"path":"ggplot-tips.html","id":"colour-schemes","chapter":"4 ggplot tips","heading":"4.5 Colour schemes","text":"One thing can initially difficult understand ggplot2 control colour schemes passing colour fill variable rather defining explicitly within geom. simple tricks can used achieve however. Remember setting colours, can use colour names (long recognised) like \"red\", specific hex colour \"#ff0505\".One useful tricks using manual scaling functions explicity define colours. functions syntax scale_xxx_manual() (e.g. scale_colour_manual()). function can explicitly define colours map factor using values argument. can control legend title name argument, order factors breaks.want predefined palettes, can use scale_xxx_brewer scale_xxx_viridis_y functions. brewer functions can draw colorbrewer.org palettes, viridis functions can draw viridis (colourblind friendly!) palettes. Remember define palette discrete, continuous, binned specifying end function (e.g. discrete scale_xxx_viridis_d)can see using symptom-specific dataframe made previous section:","code":"\nsymp_plot <- ggplot(linelist_sym, aes(x = symptom_name, fill = symptom_is_present)) +\n  # show as a portion of all\n  geom_bar(position = \"fill\", col = \"black\") +\n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot\nsymp_plot +\n  scale_fill_manual(\n    # explicitly define colours\n    values = c(\"yes\" = \"black\",\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    # order the factors correctly\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    # legend has no title\n    name = \"\"\n  ) \nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )"},{"path":"ggplot-tips.html","id":"change-order-of-discrete-variables","chapter":"4 ggplot tips","heading":"4.6 Change order of discrete variables","text":"Changing order discrete variables appear often difficult understand people new ggplot2 graphs. ’s easy understand however understand ggplot2 handles discrete variables hood. Generally speaking, discrete varaible used, automatically converted factor type - orders factors alphabetical order default. handle , simply reorder factor levels reflect order like appear chart. detailed information reorder factor objects, see factor section guide.can look common example using age groups - default 5-9 age group placed middle age groups (given alphabetical order), can move behind 0-4 age group chart releveling factors.","code":"\n# remove the instances of age_cat5 where data is missing\nggplot(linelist_cleaned %>%\n         filter(!is.na(age_cat5)),\n       # relevel the factor within the ggplot call (can do externally as well)\n       aes(x = forcats::fct_relevel(age_cat5, \"5-9\", after = 1))) +\n  geom_histogram(stat = \"count\") +\n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  theme_minimal()## Warning: Ignoring unknown parameters: binwidth, bins, pad"},{"path":"ggplot-tips.html","id":"multiple-plots","chapter":"4 ggplot tips","heading":"4.7 Multiple plots","text":"Often useful show multiple graphs one page, one super-figure. ways achieve lot packages can help facilitate . However, external packages nice, often easier use faceting alternative prebuilt ggplot2. Faceting plots extremely easy terms code, produces plots predictable aesthetics - wont wrangle legends ensure axes aligned etc.Faceting specific way obtain multiple plots - definition, facet show type plot facet, every plot specific level variable. done one two functions:facet_wrap() used want show different graph level single variable. One example showing different epidemic curve hospital region.facet_wrap() used want show different graph level single variable. One example showing different epidemic curve hospital region.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.facet_grid() used want bring second variable faceting arrangement. element grid shows intersection x y element grid. example, involve showing different epidemic curve hospital region, shown horizontally, age group, shown vertically.can quickly become overwhelming amount information - good ensure don’t many levels variable choose facet ! quick examples malaria dataset:can also use facet_grid() approach different age groups - need data transformations first however, age groups columns - want single column. pass two variables facet_grid(), can use formula notation (e.g. x ~ y) wrap variables vars(). reference, : facet_grid(x ~ y) equivalent facet_grid(rows = vars(x), cols = vars(y)) ’s can :faceting convenient approach plotting, sometimes possible get results want relatively restrictive approach. , may choose combine plots sticking together larger plot. three well known packages great - cowplot, gridExtra, patchwork. However, packages largely things, ’ll focus cowplot section.cowplot package fairly wide range functions, easiest use can achieved use plot_grid(). effectively way arrange predefined plots grid formation. can work another example malaria dataset - can plot total cases district, also show epidemic curve time.","code":"\nmalaria_data <- rio::import(here::here(\"data\", \"facility_count_data.rds\")) \n\n# show a wrapped plot with facets by district\n\nggplot(malaria_data, aes(x = data_date, y = malaria_tot, fill = District)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"date of data collection\",\n    y = \"malaria cases\",\n    title = \"Malaria cases by district\"\n  ) +\n  facet_wrap(~District) +\n  theme_minimal()## Warning: Removed 686 rows containing missing values (position_stack).\nmalaria_age <- malaria_data %>%\n  pivot_longer(\n    # choose all the columns that start with malaria rdt (age group specific)\n    cols = starts_with(\"malaria_rdt_\"),\n    # column names become age group\n    names_to = \"age_group\",\n    # values to a single column (num_cases)\n    values_to = \"num_cases\"\n  ) %>%\n  # clean up age group column - replace \"malaria_rdt_\" to leave only age group\n  # then replace 15 with 15+\n  # then refactor the age groups so they are in order\n  mutate(age_group = str_replace(age_group, \"malaria_rdt_\", \"\") %>%\n           ifelse(. == \"15\", \"15+\", .) %>%\n           forcats::fct_relevel(., \"5-14\", after = 1))\n\n\n# make the same plot as before, but show in a grid\nggplot(malaria_age, aes(x = data_date, y = num_cases, fill = age_group)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"date of data collection\",\n    y = \"malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(rows = vars(District), cols = vars(age_group)) +\n  theme_minimal()## Warning: Removed 2058 rows containing missing values (position_stack).\n# bar chart of total cases by district\np1 <- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 <- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))## Warning: Removed 686 rows containing missing values (position_stack).\r\n\r\n## Warning: Removed 686 rows containing missing values (position_stack)."},{"path":"ggplot-tips.html","id":"smart-labeling","chapter":"4 ggplot tips","heading":"4.8 Smart Labeling","text":"ggplot2, also possible add text plots. However, comes notable limitation text labels often clash data points plot, making look messy hard read. ideal way deal base package, ggplot2 addon, known ggrepel makes dealing simple!ggrepel package provides two new functions, geom_label_repel() geom_text_repel(), replace geom_label() geom_text(). Simply use functions instead base functions produce neat labels. can also use force argument change degree repulsion labels respective points.example, make scatterplot showing height weight . ’re also going label point patient id patient 70 years age. ’ll use trick filter show specific points!","code":"\nlibrary(ggrepel)\n\nggplot(linelist_cleaned, \n       aes(x = ht_cm,\n           y = wt_kg)) +\n  geom_point() + \n  # pass the filtered version of the dataset as a new dataset\n  ggrepel::geom_label_repel(data = linelist_cleaned %>% filter(age_years > 70),\n                           aes(label = case_id),\n                           force = 1) +\n  labs(y = \"weight (kg)\", x = \"height(cm)\")## Warning: ggrepel: 3 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"ggplot-tips.html","id":"time-axes","chapter":"4 ggplot tips","heading":"4.9 Time axes","text":"Working time axes ggplot can seem daunting, made easy key functions. Remember working time date ensure correct variables formatted date datetime class - see working dates section information .single useful set functions working dates ggplot2 scale functions (scale_x_date(), scale_x_datetime(), cognate y-axis functions). functions let define often axis labels, format axis labels. find format dates, see working dates section ! can use date_breaks date_labels arguments specify dates look:date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):","code":"\n# make epi curve by date of onset when available\nggplot(linelist_cleaned, aes(x = date_onset)) +\n  geom_bar(stat = \"count\") +\n  scale_x_date(\n    # 1 break every 1 month\n    date_breaks = \"1 months\",\n    # labels should show month then date\n    date_labels = \"%b %d\"\n  ) +\n  theme_classic()"},{"path":"ggplot-tips.html","id":"highlighting","chapter":"4 ggplot tips","heading":"4.10 Highlighting","text":"Highlighting specific elements chart useful way draw attention specific instance variable also providing information dispersion full dataset. easily done base ggplot2, external package can help known gghighlight. easy use within ggplot syntax.gghighlight package uses gghighlight() function achieve effect. use function, supply logical statement function - can quite flexible outcomes, ’ll show example age distribution cases linelist, highlighting outcome.also works well faceting functions - allows user produce facet plots background data highlighted doesn’t apply facet!","code":"\n# load gghighlight\nlibrary(gghighlight)\n\n\n# replace NA values with unknown in the outcome variable\nlinelist_cleaned <- linelist_cleaned %>%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(linelist_cleaned, \n       aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  # highlight instances where the patient has died.\n  gghighlight::gghighlight(outcome == \"Death\")## Warning: Tried to calculate with group_by(), but the calculation failed.\r\n## Falling back to ungrouped filter operation...## label_key: outcome## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.## Warning: Removed 87 rows containing non-finite values (stat_bin).## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.## Warning: Removed 24 rows containing non-finite values (stat_bin).\n# produce a histogram of all cases by age\nggplot(linelist_cleaned, \n       aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  # highlight instances where the patient has died.\n  gghighlight::gghighlight() +\n  facet_wrap(~outcome)## label_key: outcome## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.## Warning: Removed 261 rows containing non-finite values (stat_bin).## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.## Warning: Removed 87 rows containing non-finite values (stat_bin)."},{"path":"ggplot-tips.html","id":"dual-axes","chapter":"4 ggplot tips","heading":"4.11 Dual axes","text":"secondary y-axis often requested addition ggplot2 graph. robust debate validity graphs data visualization community, often recommended, manager may still want . , present two methods achieve .Using cowplot package combine two separate plotsUsing statistical transformation data primary axis","code":""},{"path":"ggplot-tips.html","id":"using-cowplot","chapter":"4 ggplot tips","heading":"4.11.1 Using cowplot","text":"approach involves creating two separate plots - one y-axis left, y-axis right. use specific theme_cowplot() must x-axis. third command two plots aligned overlaid top . functionalities cowplot, one, described depth site.demonstrate technique overlay epidemic curve line weekly percent patients died. use example alignment dates x-axis complex say, aligning bar chart another plot. things note:epicurve line aggregated weeks prior plotting date_breaks date_labels identical - x-axes two plots overlaid.y-axis moved right-side plot 2 position = argument scale_y_continuous().plots make use theme_cowplot()Note another example technique [Epicurves] page - overlaying cumulative incidence top epicurve.Make plot 1\r\nessentially epicurve. use geom_area() just demonstrate use (area line, default)Make plot 2\r\nCreate second plot showing line weekly percent cases died.Now align plot using function align_plots(), specifying horizontal vertical alignment (“hv”, also “h”, “v”, “none”). specify alignment axes well (top, bottom, left, right) “tblr”. output class list (2 elements).draw two plots together using ggdraw() (cowplot) referencing two parts aligned_plots object.","code":"\npacman::p_load(cowplot)            # load/install cowplot\n\np1 <- linelist %>%                 # save plot as object\n     count(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     ggplot()+\n          geom_area(aes(x = epiweek, y = n), fill = \"grey\")+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n     theme_cowplot()\n\np1                                      # view plot \np2 <- linelist %>%         # save plot as object\n     group_by(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     summarise(\n       n = n(),\n       pct_death = 100*sum(outcome == \"Death\", na.rm=T) / n) %>% \n     ggplot(aes(x = epiweek, y = pct_death))+\n          geom_line()+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n          scale_y_continuous(\n               position = \"right\")+\n          theme_cowplot()\n\np2     # view plot\naligned_plots <- align_plots(p1, p2, align=\"hv\", axis=\"tblr\")                  # align the two plots and save them as list\naligned_plotted <- ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])  # overlay them and save the visual plot\naligned_plotted                                                                # print the overlayed plots"},{"path":"ggplot-tips.html","id":"statistical-transformation","chapter":"4 ggplot tips","heading":"Statistical transformation","text":"Unfortunately, secondary axes well supported ggplot syntax. reason, ’re fairly limited terms can shown secondary axis - second axis direct transformation secondary axis.Differences axis values purely cosmetic - want show two different variables one graph, different y-axis scales variable, work without work behind scenes. obtain effect, transform one variables data, apply transformation reverse specifying axis labels. Based , can either specify transformation explicitly (e.g. variable around 10x large variable b) calculate code (e.g. ratio maximum values dataset).syntax adding secondary axis straightforward! calling scale_xxx_xxx() function (e.g. scale_y_continuous()), use sec.axis argument call sec_axis() function. trans argument function allows specify label transformation axis - provide standard tidyverse syntax.example, want show number positive RDTs malaria dataset facility 1, showing 0-4 year olds cases chart:","code":"\n# take malaria data from facility 1\nmalaria_facility_1 <- malaria_data %>%\n  filter(location_name == \"Facility 1\")\n\n# calculate the ratio between malaria_rdt_0-4 and malaria_tot \n\ntf_ratio <- max(malaria_facility_1$malaria_tot, na.rm = T) / max(malaria_facility_1$`malaria_rdt_0-4`, na.rm = T)\n\n# transform the values in the dataset\n\nmalaria_facility_1 <- malaria_facility_1 %>%\n  mutate(malaria_rdt_0_4_tf = `malaria_rdt_0-4` * tf_ratio)\n  \n\n# plot the graph with dual axes\n\nggplot(malaria_facility_1, aes(x = data_date)) +\n  geom_line(aes(y = malaria_tot, col = \"Total cases\")) +\n  geom_line(aes(y = malaria_rdt_0_4_tf, col = \"Cases: 0-4 years old\")) +\n  scale_y_continuous(\n    name = \"Total cases\",\n    sec.axis = sec_axis(trans = ~ . / tf_ratio, name = \"Cases: 0-4 years old\")\n  ) +\n  labs(x = \"date of data collection\") +\n  theme_minimal() +\n  theme(legend.title = element_blank())## Warning: Removed 15 row(s) containing missing values (geom_path).\r\n\r\n## Warning: Removed 15 row(s) containing missing values (geom_path)."},{"path":"ggplot-tips.html","id":"resources-3","chapter":"4 ggplot tips","heading":"4.12 Resources","text":"Inspiration\r\nggplot graph galleryFacets labellers\r\nUsing labellers facet strips\r\nLabellersAdjusting order factors\r\nfct_reorderfct_inorderHow reorder boxplotReorder variable ggplot2R Data Science - FactorsLegendsAdjust legend orderCaptions\r\nCaption alignmentCheatsheetsBeautiful plotting ggplot2TO - constructionUsing option label_wrap_gen facet_wrap multiple strip lines\r\nlabels colors stripsAxis text vertical adjustment\r\nrotation\r\nLabellerslimit range limit() coord_cartesian(), ylim(), scale_x_continuous()\r\ntheme_classic()expand = c(0,0)\r\ncoord_flip()\r\ntick marksggrepel\r\nanimationsremove\r\nremove title\r\nusing fill = color = labs()\r\nflip order / don’t flip order\r\nmove location\r\ncolor? theme(legend.title = element_text(colour=“chocolate”, size=16, face=“bold”))+ scale_color_discrete(name=“color ischocolate!?”)\r\nColor boxes behind points legend\r\ntheme(legend.key=element_rect(fill=‘pink’)) use fill = NA remove . http://zevross.com/blog/2014/08/04/beautiful-plotting--r--ggplot2-cheatsheet-3/\r\nChange size symbols legend guides(colour = guide_legend(override.aes = list(size=4)))Turn layer legend\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp)), size=4)\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp), size=4), show_guide=FALSE)Force legend even aes().\r\nggplot(nmmaps, aes(x=date, y=o3))+\r\ngeom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“points”))\r\nControl shape legend guides - list linetype shape\r\nggplot(nmmaps, aes(x=date, y=o3))+geom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“Point values”))+\r\nscale_colour_manual(name=’‘, values=c(’Important line’=‘grey’, ‘Point values’=‘red’), guide=‘legend’) +\r\nguides(colour = guide_legend(override.aes = list(linetype=c(1,0)\r\n, shape=c(NA, 16))))","code":""}]
