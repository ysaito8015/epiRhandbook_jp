[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-for-applied-epidemiology-and-public-health","chapter":"","heading":"R for applied epidemiology and public health","text":"handbook strives :Serve quick ‘epi’ R code reference manualProvide task-centered examples addressing common epidemiological problemsAssist epidemiologists transitioning RBe accessible settings low internet-connectivity via offline version \r\nWritten epis, episWe applied epidemiologists around world, writing spare time offer resource community. encouragement feedback welcome:Structured feedback formEmail epiRhandbook@gmail.com tweet @epiRhandbookSubmit issues Github repository","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page material“Follow-along” [downloading example data][Download handbook data]Offline versionSee instructions download offline version [Download handbook data] page.LanguagesWe want translate languages English. can help, please contact us.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"handbook produced collaboration epidemiologists around world drawing upon experience organizations including local, state, provincial, national health agencies, World Health Organization (), Médecins Sans Frontières / Doctors without Borders (MSF), hospital systems, academic institutions.handbook approved product specific organization. Although strive accuracy, provide guarantee content book.","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"Editor--Chief: Neale BatraProject core team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinReviewers: Pat Keating, Annick Lenglet, Margot Charette, Daniely Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder Fong","code":""},{"path":"index.html","id":"funding-and-support","chapter":"","heading":"Funding and support","text":"handbook received supportive funding via COVID-19 emergency capacity-building grant TEPHINET, global network Field Epidemiology Training Programs (FETPs).Administrative support provided EPIET Alumni Network (EAN), special thanks Annika Wendland. EPIET European Programme Intervention Epidemiology Training.Special thanks Médecins Sans Frontières (MSF) Operational Centre Amsterdam (OCA) support development handbook.publication supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Academic courses epidemiologist training programs welcome use handbook students. questions intended use, email epirhandbook@gmail.com.","code":""},{"path":"ggplot-basics.html","id":"ggplot-basics","chapter":"1 ggplot basics","heading":"1 ggplot basics","text":"ggplot2 popular data visualisation R package. ggplot() function core package, whole approach colloquially known “ggplot” resulting figures sometimes affectionately called “ggplots”. “gg” names reflects “grammar graphics” used construct figures. ggplot2 benefits wide variety supplementary R packages enhance functionality.syntax significantly different base R plotting, learning curve associated . Using ggplot2 generally requires user format data way highly tidyverse compatible, ultimately makes using packages together effective.page cover fundamentals plotting ggplot2. See page ggplot tips suggestions advanced techniques make plots really look nice.several extensive ggplot2 tutorials linked resources section. can also download data visualization ggplot cheatsheet RStudio website. want inspiration ways creatively visualise data, suggest reviewing websites like R graph gallery Data--viz.","code":""},{"path":"ggplot-basics.html","id":"preparation","chapter":"1 ggplot basics","heading":"1.1 Preparation","text":"","code":""},{"path":"ggplot-basics.html","id":"load-packages","chapter":"1 ggplot basics","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other data management tools\n  rio,            # import/export\n  here,           # file locator\n  stringr         # working with characters   \n)"},{"path":"ggplot-basics.html","id":"import-data","chapter":"1 ggplot basics","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). Import data import() function rio package (accepts many file types like .xlsx, .rds, .csv - see [Import export] page details).first 50 rows linelist displayed . focus continuous variables age, wt_kg (weight kilos), ct_blood (CT values), days_onset_hosp (difference onset date hospitalisation).","code":"\nlinelist <- rio::import(\"linelist_cleaned.rds\")"},{"path":"ggplot-basics.html","id":"general-cleaning","chapter":"1 ggplot basics","heading":"General cleaning","text":"preparing data plot, best make data adhere “tidy” data standards much possible. achieve expanded data management pages handbook, [Cleaning data core functions].simple ways can prepare data make better plotting can include making contents data better display - necessarily equate better data manipulation. example:Replace NA values character column character string “Unknown”Consider converting column class factor values prescribed ordinal levelsClean columns “data friendly” values underscores etc changed normal text title case (see [Characters strings])examples action:","code":"\n# make display version of columns with more friendly names\nlinelist <- linelist %>%\n  mutate(\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",        # m to Male \n                            gender == \"f\" ~ \"Female\",      # f to Female,\n                            is.na(gender) ~ \"Unknown\"),    # NA to Unknown\n    \n    outcome_disp = replace_na(outcome, \"Unknown\")          # replace NA outcome with \"unknown\"\n  )"},{"path":"ggplot-basics.html","id":"pivoting-longer","chapter":"1 ggplot basics","heading":"Pivoting longer","text":"matter data structure, ggplot2 often also want pivot data longer formats. Read page [Pivoting data].example, say want plot data “wide” format, case linelist symptoms. create mini-linelist called symptoms_data contains case_id symptoms columns.first 50 rows mini-linelist look - see formatted “wide” symptom column:wanted plot number cases specific symptoms, limited fact symptom specific column. However, can pivot symptoms columns longer format like :first 50 rows. Note case 5 rows - one possible symptom. new columns symptom_name symptom_is_present result pivot. Note format may useful operations, useful plotting.","code":"\nsymptoms_data <- linelist %>% \n  select(c(case_id, fever, chills, cough, aches, vomit))\nsymptoms_data_long <- symptoms_data %>%    # begin with \"mini\" linelist called symptoms_data\n  \n  pivot_longer(\n    cols = -case_id,                       # pivot all columns except case_id (all the symptoms columns)\n    names_to = \"symptom_name\",             # assign name for new column that holds the symptoms\n    values_to = \"symptom_is_present\") %>%  # assign name for new column that holds the values (yes/no)\n  \n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\")) # convert NA to \"unknown\""},{"path":"ggplot-basics.html","id":"basics-of-ggplot","chapter":"1 ggplot basics","heading":"1.2 Basics of ggplot","text":"“Grammar graphics” - ggplot2Plotting ggplot2 based “adding” plot layers design elements top one another, command added previous ones plus symbol (+). result multi-layer plot object can saved, modified, printed, exported, etc.ggplot objects can highly complex, basic order layers usually look like :Begin baseline ggplot() command - “opens” ggplot allow subsequent functions added +. Typically dataset also specified commandAdd “geom” layers - functions visualize data geometries (shapes), e.g. bar graph, line plot, scatter plot, histogram (combination!). functions start geom_ prefix.Add design elements plot axis labels, title, fonts, sizes, color schemes, legends, axes rotationA simple example skeleton code follows. explain component sections .","code":"\n# plot data from my_data columns as red points\nggplot(data = my_data)+                   # use the dataset \"my_data\"\n  geom_point(                             # add a layer of points (dots)\n    mapping = aes(x = col1, y = col2),    # \"map\" data column to axes\n    color = \"red\")+                       # other specification for the geom\n  labs()+                                 # here you add titles, axes labels, etc.\n  theme()                                 # here you adjust color, font, size etc of non-data plot elements (axes, title, etc.) "},{"path":"ggplot-basics.html","id":"ggplot","chapter":"1 ggplot basics","heading":"1.3 ggplot()","text":"opening command ggplot2 plot ggplot(). command simply creates blank canvas upon add layers. “opens” way layers added + symbol.Typically, command ggplot() includes data = argument plot. sets default dataset used subsequent layers plot.command end + closing parentheses. leaves command “open”. ggplot execute/appear full command includes final layer without + end.","code":"\n# This will create plot that is a blank canvas\nggplot(data = linelist)"},{"path":"ggplot-basics.html","id":"geoms","chapter":"1 ggplot basics","heading":"1.4 Geoms","text":"blank canvas certainly sufficient - need create geometries (shapes) data (e.g. bar plots, histograms, scatter plots, box plots).done adding layers “geoms” initial ggplot() command. many ggplot2 functions create “geoms”. functions begins “geom_”, refer generically geom_XXXX(). 40 geoms ggplot2 many others created fans. View ggplot2 gallery. common geoms listed :Histograms - geom_histogram()Bar charts - geom_bar() geom_col() (see “Bar plot” section)Box plots - geom_boxplot()Points (e.g. scatter plots) - geom_point()Line graphs - geom_line() geom_path()Trend lines - geom_smooth()one plot can display one multiple geoms. added previous ggplot2 commands +, plotted sequentially later geoms plotted top previous ones.","code":""},{"path":"ggplot-basics.html","id":"ggplot_basics_mapping","chapter":"1 ggplot basics","heading":"1.5 Mapping data to the plot","text":"geom functions must told use create shapes - must tell map (assign) columns data components plot like axes, shape colors, shape sizes, etc. geoms, essential components must mapped columns data x-axis, (necessary) y-axis.“mapping” occurs mapping = argument. mappings provide mapping must wrapped aes() function, write something like mapping = aes(x = col1, y = col2), shown ., ggplot() command data set case linelist. mapping = aes() argument column age mapped x-axis, column wt_kg mapped y-axis.+, plotting commands continue. shape created “geom” function geom_point(). geom inherits mappings ggplot() command - knows axis-column assignments proceeds visualize relationships points canvas.another example, following commands utilize data, slightly different mapping, different geom. geom_histogram() function requires column mapped x-axis, counts y-axis generated automatically.","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()"},{"path":"ggplot-basics.html","id":"plot-aesthetics","chapter":"1 ggplot basics","heading":"Plot aesthetics","text":"ggplot terminology plot “aesthetic” specific meaning. refers visual property plotted data. Note “aesthetic” refers data plotted geoms/shapes - surrounding display titles, axis labels, background color, might associate word “aesthetics” common English. ggplot details called “themes” adjusted within theme() command (see section).Therefore, plot object aesthetics can colors, sizes, transparencies, placement, etc. plotted data. geoms aesthetic options, many can used geoms. examples:shape = Display point geom_point() dot, star, triangle, square…fill = interior color (e.g. bar boxplot)color = exterior line bar, boxplot, etc., point color using geom_point()size = Size (e.g. line thickness, point size)alpha = Transparency (1 = opaque, 0 = invisible)binwidth = Width histogram binswidth = Width “bar plot” columnslinetype = Line type (e.g. solid, dashed, dotted)plot object aesthetics can assigned values two ways:Assigned static value (e.g. color = \"blue\") apply across plotted observationsAssigned column data (e.g. color = hospital) display observation depends value column","code":""},{"path":"ggplot-basics.html","id":"static-value","chapter":"1 ggplot basics","heading":"Static value","text":"want plot object aesthetic static, - every observation data, write assignment within geom outside mapping = aes() statement. assignments look like size = 1 color = \"blue\". two examples:first example, mapping = aes() ggplot() command axes mapping age weight columns data. plot aesthetics color =, size =, alpha = (transparency) assigned static values. clarity, done geom_point() function, may add geoms afterward take different values plot aesthetics.second example, histogram requires x-axis mapped column. histogram binwidth =, color =, fill = (internal color), alpha = agaom set geom static values.","code":"\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency"},{"path":"ggplot-basics.html","id":"scaled-to-column-values","chapter":"1 ggplot basics","heading":"Scaled to column values","text":"alternative scale plot object aesthetic values column. approach, display aesthetic depend observation’s value column data. column values continuous, display scale (legend) aesthetic continuous. column values discrete, legend display value plotted data appear distinctly “grouped” (read grouping section page).achieve , map plot aesthetic column name (quotes). must done within mapping = aes() function (note: several places code can make mapping assignments, discussed ).Two examples .first example, color = aesthetic (point) mapped te column age - scale appeared legend! now just note scale exists - show modify later sections.second example two new plot aesthetics also mapped columns (color = size =), plot aesthetics shape = alpha = mapped static values outside mapping = aes() function.Note: Axes assignments always assigned columns data (static values), always done within mapping = aes().becomes important keep track plot layers aesthetics making complex plots - example plots multiple geoms. example , size = aesthetic assigned twice - geom_point() geom_smooth() - times static value.","code":"\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age)\n       )+     # map color to age\n  geom_point()         # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\nggplot(data = linelist,\n       mapping = aes(           # map aesthetics to columns\n         x = age,\n         y = wt_kg,\n         color = age_years)\n       ) + \n  geom_point(                   # add points for each row of data\n    size = 1,\n    alpha = 0.5) +  \n  geom_smooth(                  # add a trend line \n    method = \"lm\",              # with linear method\n    size = 2)                   # size (width of line) of 2"},{"path":"ggplot-basics.html","id":"ggplot_basics_map_loc","chapter":"1 ggplot basics","heading":"Where to make mapping assignments","text":"Aesthetic mapping within mapping = aes() can written several places plotting commands can even written . can written top ggplot() command, /individual geom beneath. nuances include:Mapping assignments made top ggplot() command inherited defaults across geom , like x = y = inheritedMapping assignments made within one geom apply geomLikewise, data = specified top ggplot() apply default geom , also specify data geom (difficult).Thus, following commands create plot:","code":"\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))"},{"path":"ggplot-basics.html","id":"ggplotgroups","chapter":"1 ggplot basics","heading":"Groups","text":"can easily group data “plot group”. fact, already done !Assign “grouping” column appropriate plot aesthetic, within mapping = aes(). , demonstrated using continuous values assigned point size = column age. However works way discrete/categorical columns.example, want points displayed gender, set mapping = aes(color = gender). legend automatically appears. assignment can made within mapping = aes() top ggplot() command (inherited geom), set separate mapping = aes() within geom. approaches shown :Note depending geom, need use different arguments group data. geom_point() likely use color =, shape = size =. Whereas geom_bar() likely use fill =. just depends geom plot aesthetic want reflect groupings.information - basic way grouping data using group = argument within mapping = aes(). However, change colors, fill, shapes. create legend. Yet data grouped, statistical displays may affected.adjust order groups plot, see ggplot tips page page [Working factors]. many examples grouped plots pages plotting continuous categorical data.","code":"\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)\n# This alternative code produces the same plot\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg))+\n  geom_point(\n    mapping = aes(color = gender),\n    alpha = 0.5)"},{"path":"ggplot-basics.html","id":"ggplot_basics_facet","chapter":"1 ggplot basics","heading":"1.6 Facets / Small-multiples","text":"Facets, “small-multiples”, used split one plot multi-panel figure, one panel (“facet”) per group data. type plot created multiple times, one using sub-group dataset.Faceting functionality comes ggplot2, legends axes facet “panels” automatically aligned. packages discussed ggplot tips page used combine completely different plots (cowplot patchwork) one figure.Faceting done one fullowing ggplot2 functions:facet_wrap() show different panel level single variable. One example showing different epidemic curve hospital region. Facets ordered alphabetically, unless variable factor ordering defined.can invoke certain options determine layout facets, e.g. nrow = 1 ncol = 1 control number rows columns faceted plots arranged within.facet_grid() used want bring second variable faceting arrangement. panel grid shows intersection values two columns. example, epidemic curves hospital-age group combination hospitals along top (columns) age groups along sides (rows).nrow ncol relevant, subgroups presented gridEach functions accept formula syntax specify column(s) faceting. accept two columns, one side tilde ~.\r\n* facet_wrap() often write one column preceded tilde ~ like facet_wrap(~hospital). However can write two columns facet_wrap(outcome ~ hospital) - unique combination display separate panel, arranged grid. headings show combined terms won’t specific logic columns vs. rows. providing one faceting variable, period . used placeholder side formula - see code examples.facet_grid() can also specify one two columns formula (grid rows ~ columns). want specify one, can place period . side tilde like facet_grid(. ~ hospital) facet_grid(hospital ~ .).Facets can quickly contain overwhelming amount information - good ensure don’t many levels variable choose facet . quick examples malaria dataset (see [Download book data]) consists daily case counts malaria facilities, age group.import quick modifications simplicity:first 50 rows malaria data . Note column malaria_tot, also columns counts age group (used second, facet_grid() example).","code":"\n# These data are daily counts of malaria cases, by facility-day\nmalaria_data <- import(here(\"data\", \"malaria_facility_count_data.rds\")) %>%  # import\n  select(-submitted_date, -Province, -newid)                                 # remove unneeded columns"},{"path":"ggplot-basics.html","id":"facet_wrap","chapter":"1 ggplot basics","heading":"facet_wrap()","text":"moment, let’s focus columns malaria_tot District. Ignore age-specific count columns now. plot epidemic curves geom_col(), produces column day specified y-axis height given column malaria_tot (data already daily counts, use geom_col() - see “Bar plot” section ).add command facet_wrap(), specify tilde column facet (District case). can place another column left side tilde, - create one facet combination - recommend facet_grid() instead. use case, one facet created unique value District.","code":"\n# A plot with facets by district\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district\") +\n  facet_wrap(~District)                       # the facets are created"},{"path":"ggplot-basics.html","id":"facet_grid","chapter":"1 ggplot basics","heading":"facet_grid()","text":"can use facet_grid() approach cross two variables. Let’s say want cross District age. Well, need data transformations age columns get data ggplot-preferred “long” format. age groups columns - want single column called age_group another called num_cases. See page [Pivoting data] information process.Now first 50 rows data look like :pass two variables facet_grid(), easiest use formula notation (e.g. x ~ y) x rows y columns. plot, using facet_grid() show plots combination columns age_group District.","code":"\nmalaria_age <- malaria_data %>%\n  select(-malaria_tot) %>% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # choose columns to pivot longer\n    names_to = \"age_group\",      # column names become age group\n    values_to = \"num_cases\"      # values to a single column (num_cases)\n  ) %>%\n  mutate(\n    age_group = str_replace(age_group, \"malaria_rdt_\", \"\"),\n    age_group = forcats::fct_relevel(age_group, \"5-14\", after = 1))\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group)"},{"path":"ggplot-basics.html","id":"free-or-fixed-axes","chapter":"1 ggplot basics","heading":"Free or fixed axes","text":"axes scales displayed faceting default (fixed) across facets. helpful cross-comparison, always appropriate.using facet_wrap() facet_grid(), can add scales = \"free_y\" “free” release y-axes panels scale appropriately data subset. particularly useful actual counts small one subcategories trends otherwise hard see. Instead “free_y” can also write “free_x” x-axis (e.g. dates) “free” axes. Note facet_grid, y scales facets row, x scales facets column.using facet_grid , can add space = \"free_y\" space = \"free_x\" actual height width facet weighted values figure within. works scales = \"free\" (y x) already applied.","code":"\n# Free y-axis\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district - 'free' x and y axes\") +\n  facet_wrap(~District, scales = \"free\")        # the facets are created"},{"path":"ggplot-basics.html","id":"storing-plots","chapter":"1 ggplot basics","heading":"1.7 Storing plots","text":"","code":""},{"path":"ggplot-basics.html","id":"saving-plots","chapter":"1 ggplot basics","heading":"Saving plots","text":"default run ggplot() command, plot printed Plots RStudio pane. However, can also save plot object using assignment operator <- giving name. print unless object name run. can also print wrapping plot name print(), necessary certain circumstances plot created inside loop used print multiple plots (see [Iteration, loops, lists] page).","code":"\n# define plot\nage_by_wt <- ggplot(data = linelist, mapping = aes(x = age_years, y = wt_kg, color = age_years))+\n  geom_point(alpha = 0.1)\n\n# print\nage_by_wt    "},{"path":"ggplot-basics.html","id":"modifying-saved-plots","chapter":"1 ggplot basics","heading":"Modifying saved plots","text":"One nice thing ggplot2 can define plot (), add layers starting name. repeat commands created original plot!example, modify plot age_by_wt defined , include vertical line age 50, just add + begin adding additional layers plot.","code":"\nage_by_wt+\n  geom_vline(xintercept = 50)"},{"path":"ggplot-basics.html","id":"exporting-plots","chapter":"1 ggplot basics","heading":"Exporting plots","text":"Exporting ggplots made easy ggsave() function ggplot2. can work two ways, either:Specify name plot object, file path name extension\r\nexample: ggsave(my_plot, (\"plots\", \"my_plot.png\"))\r\nexample: ggsave(my_plot, (\"plots\", \"my_plot.png\"))Run command file path, save last plot printed\r\nexample: ggsave((\"plots\", \"my_plot.png\"))\r\nexample: ggsave((\"plots\", \"my_plot.png\"))can export png, pdf, jpeg, tiff, bmp, svg, several file types, specifying file extension file path.can also specify arguments width =, height =, units = (either “”, “cm”, “mm”). can also specify dpi = number plot resolution (e.g. 300). See function details entering ?ggsave reading documentation online.","code":""},{"path":"ggplot-basics.html","id":"labels","chapter":"1 ggplot basics","heading":"1.8 Labels","text":"Surely want add adjust plot’s labels. easily done within labs() function added plot + just geoms .Within labs() can provide character strings arguements:x = y = x-axis y-axis title (labels)title = main plot titlesubtitle = subtitle plot, smaller text titlecaption = caption plot, bottom-right defaultHere plot made earlier, nicer labels:Note caption assignment used str_glue() stringr package implant dynamic R code within string text. caption show “Data :” date reflects maximum hospitalization date linelist. Read page [Characters strings].note specifying legend title: within labs(), write plot aesthetic argument used create legend. example assigned color = age create legend. Therefore, provide color = labs() assigned legend title desired (“Age” capital ). create legend aes(fill = COLUMN), labs() write fill = adjust title legend. See section legends ggplot tips page details editing legends.","code":"\nage_by_wt <- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    color = \"Age\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt"},{"path":"ggplot-basics.html","id":"ggplot_basics_themes","chapter":"1 ggplot basics","heading":"1.9 Themes","text":"One best parts ggplot2 amount control plot - can define anything! mentioned , design plot related data shapes/geometries adjusted within theme() function. example, plot background color, presence/absence gridlines, font/size/color/alignment text (titles, subtitles, captions, axis text…). adjustments can done one two ways:Add complete theme theme_() function make sweeping adjustments - include theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() among othersAdjust tiny aspect plot individually within theme()","code":""},{"path":"ggplot-basics.html","id":"complete-themes","chapter":"1 ggplot basics","heading":"Complete themes","text":"quite straight-forward, demonstrate complete theme functions describe . Note micro-adjustments theme() make use complete theme.Write empty parentheses.","code":"\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme classic\")+\n  theme_classic()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme bw\")+\n  theme_bw()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme minimal\")+\n  theme_minimal()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme gray\")+\n  theme_gray()"},{"path":"ggplot-basics.html","id":"modify-theme","chapter":"1 ggplot basics","heading":"Modify theme","text":"theme() function can take large number arguments, edits specific aspect plot. way cover arguments, describe general pattern show find argument name need. basic syntax :Within theme() write argument name plot element want edit, like plot.title =Provide element_() function arguemntMost often use element_text(), others include element_rect() canvas background colors, element_blank() remove plot elementsWithin element_() function, write arguments assignments make fine adjustments desireSo, description quite abstract convoluted, examples.plot looks quite silly, serves show variety ways can adjust plot.begin plot age_by_wt defined just add theme_classic()finer adjustments add theme() include one argument plot element adjustIt can nice organize arguments logical sections. describe just used :legend.position = unique accepts simple values like “bottom”, “top”, “left”, “right”. generally, text-related arguments require place details within element_text().Title size element_text(size = 30)caption horizontal alignment element_text(hjust = 0) (right left)subtitle italicized element_text(face = \"italic\")especially common theme() arguments. recognize patterns, appending .x .y apply change one axis.many theme arguments! remember ? worry - impossible remember . Luckily tools help :tidyverse documentation modifying theme, complete list.TIP: Run theme_get() ggplot2 print list 90+ theme() arguments console.TIP: ever want remove element plot, can also theme(). Just pass element_blank() argument disappear completely.","code":"\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     "},{"path":"ggplot-basics.html","id":"colors","chapter":"1 ggplot basics","heading":"1.10 Colors","text":"Please see section color scales ggplot tips page.","code":""},{"path":"ggplot-basics.html","id":"piping-into-ggplot2","chapter":"1 ggplot basics","heading":"1.11 Piping into ggplot2","text":"using pipes clean transform data, easy pass transformed data ggplot().pipes pass dataset function--function transition + ggplot() function called. Note case, need specify data = argument, automatically defined piped-dataset.might look:","code":"\nlinelist %>%                                                     # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )"},{"path":"ggplot-basics.html","id":"plot-continuous-data","chapter":"1 ggplot basics","heading":"1.12 Plot continuous data","text":"Throughout page, already seen many examples plotting continuous data. briefly consolidate present variations.\r\nVisualisations covered include:Plots one continuous variable:\r\nHistogram, classic graph present distribution continuous variable.\r\nBox plot (also called box whisker), show 25th, 50th, 75th percentiles, tail ends distribution, outliers (important limitations).\r\nJitter plot, show values points ‘jittered’ can (mostly) seen, even two value.\r\nViolin plot, show distribution continuous variable based symmetrical width ‘violin’.\r\nSina plot, combination jitter violin plots, individual points shown symmetrical shape distribution (via ggforce package).\r\nHistogram, classic graph present distribution continuous variable.Box plot (also called box whisker), show 25th, 50th, 75th percentiles, tail ends distribution, outliers (important limitations).Jitter plot, show values points ‘jittered’ can (mostly) seen, even two value.Violin plot, show distribution continuous variable based symmetrical width ‘violin’.Sina plot, combination jitter violin plots, individual points shown symmetrical shape distribution (via ggforce package).Scatter plot two continuous variables.Heat plots three continuous variables (linked [Heat plots] page)","code":""},{"path":"ggplot-basics.html","id":"histograms","chapter":"1 ggplot basics","heading":"Histograms","text":"Histograms may look like bar charts, distinct measure distribution continuous variable. spaces “bars”, one column provided geom_histogram().code generating histograms, group continuous data ranges display adjacent bars varying height. done using geom_histogram(). See “Bar plot” section ggplot basics page understand difference geom_histogram(), geom_bar(), geom_col().show distribution ages cases. Within mapping = aes() specify column want see distribution . can assign column either x y axis.rows assigned “bins” based numeric age, bins graphically represented bars. specify number bins bins = plot aesthetic, break points evenly spaced minimum maximum values histogram. bins = unspecified, appropriate number bins guessed message displayed plot:want specify number bins bins =, alternatively specify binwidth = units axis. give examples showing different bins bin widths:get smoothed proportions, can use geom_density():get “stacked” histogram (continuous column data), can one following:Use geom_histogram() fill = argument within aes() assigned grouping column, orUse geom_freqpoly(), likely easier read (can still set binwidth =)see proportions values, set y = after_stat(density) (use syntax exactly - changed data). Note: proportions show per group.shown (*note use color = vs. fill = ):want fun, try geom_density_ridges ggridges package (vignette .Read detail histograms tidyverse page geom_histogram().","code":"## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# A) Regular histogram\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Default histogram (30 bins)\")\n\n# B) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 50)+\n  labs(title = \"B) Set to 50 bins\")\n\n# C) Fewer bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 5)+\n  labs(title = \"C) Set to 5 bins\")\n\n\n# D) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(binwidth = 1)+\n  labs(title = \"D) binwidth of 1\")\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age)) +\n  geom_density(binwidth = 2, size = 2, alpha = 0.2)+\n  labs(title = \"Proportional density\")\n\n# Stacked frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_density(binwidth = 2, size = 2, alpha = 0.2, position = \"stack\")+\n  labs(title = \"'Stacked' proportional densities\")\n# \"Stacked\" histogram\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_histogram(binwidth = 2)+\n  labs(title = \"'Stacked' histogram\")\n\n# Frequency \nggplot(data = linelist, mapping = aes(x = age, color = gender)) +\n  geom_freqpoly(binwidth = 2, size = 2)+\n  labs(title = \"Freqpoly\")\n\n# Frequency with proportion axis\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), color = gender)) +\n  geom_freqpoly(binwidth = 5, size = 2)+\n  labs(title = \"Proportional freqpoly\")\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), fill = gender)) +\n  geom_density(binwidth = 2, size = 2, alpha = 0.2)+\n  labs(title = \"Proportional, smoothed with geom_density()\")"},{"path":"ggplot-basics.html","id":"box-plots","chapter":"1 ggplot basics","heading":"Box plots","text":"Box plots common, important limitations. can obscure actual distribution - e.g. bi-modal distribution. See R graph gallery data--viz article details. However, nicely display inter-quartile range outliers - can overlaid top types plots show distribution detail.box plot anatomy (image source).using geom_boxplot() create box plot, generally map one axis (x y) within aes(). axis specified determines plots horizontal vertical.geoms, create plot per group mapping aesthetic like color = fill = column within aes(). However, box plots achieve assigning grouping column un-assigned axis (x y). code boxplot age values dataset, second code display one box plot (non-missing) gender dataset. Note NA (missing) values appear separate box plot unless removed. example also set fill column outcome plot different color - necessary.code add box plot edges scatter plot (“marginal” plots) see page ggplot tips.","code":"\n# A) Overall boxplot\nggplot(data = linelist)+  \n  geom_boxplot(mapping = aes(y = age))+   # only y axis mapped (not x)\n  labs(title = \"A) Overall boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist, mapping = aes(y = age, x = gender, fill = gender)) + \n  geom_boxplot()+                     \n  theme(legend.position = \"none\")+   # remove legend (redundant)\n  labs(title = \"B) Boxplot by gender\")      "},{"path":"ggplot-basics.html","id":"violin-jitter-and-sina-plots","chapter":"1 ggplot basics","heading":"Violin, jitter, and sina plots","text":"code creating violin plots (geom_violin) jitter plots (geom_jitter) show distributions. can specify fill color also determined data, inserting options within aes().can combine two using geom_sina() function ggforce package. sina plots jitter points shape violin plot. overlaid violin plot (adjusting transparencies) can easier visually interpret.","code":"\n# A) Jitter plot by group\nggplot(data = linelist %>% drop_na(outcome),      # remove missing values\n       mapping = aes(y = age,                     # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+                     # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"A) jitter plot by gender\")     \n\n\n\n# B) Violin plot by group\nggplot(data = linelist %>% drop_na(outcome),       # remove missing values\n       mapping = aes(y = age,                      # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"B) violin plot by gender\")    \n# A) Sina plot by group\nggplot(\n  data = linelist %>% drop_na(outcome), \n  aes(y = age,           # numeric variable\n      x = outcome)) +    # group variable\n  geom_violin(\n    aes(fill = outcome), # fill (color of violin background)\n    color = \"white\",     # white outline\n    alpha = 0.2)+        # transparency\n  geom_sina(\n    size=1,                # Change the size of the jitter\n    aes(color = outcome))+ # color (color of dots)\n  scale_fill_manual(       # Define fill for violin background by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  scale_color_manual(      # Define colours for points by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) violin and sina plot by gender, with extra formatting\")      "},{"path":"ggplot-basics.html","id":"two-continuous-variables","chapter":"1 ggplot basics","heading":"Two continuous variables","text":"Following similar syntax, geom_point() allow plot two continuous variables scatter plot. useful showing actual values rather distributions. basic scatter plot age vs weight shown (). (B) use facet_grid() show relationship two continuous variables linelist.","code":"\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %>% drop_na(gender, outcome), # filter retains non-missing gender/outcome\n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender ~ outcome) "},{"path":"ggplot-basics.html","id":"three-continuous-variables","chapter":"1 ggplot basics","heading":"Three continuous variables","text":"can display three continuous variables utilizing fill = argument create heat plot. color “cell” reflect value third continuous column data. See page [Heat plots] details several examples.ways make 3D plots R, applied epidemiology often difficult interpret therefore less useful decision-making.","code":""},{"path":"ggplot-basics.html","id":"plot-categorical-data","chapter":"1 ggplot basics","heading":"1.13 Plot categorical data","text":"Categorical data can character values, logical (TRUE/FALSE), factors (see [Factors] page).","code":""},{"path":"ggplot-basics.html","id":"preparation-1","chapter":"1 ggplot basics","heading":"Preparation","text":"","code":""},{"path":"ggplot-basics.html","id":"data-structure","chapter":"1 ggplot basics","heading":"Data structure","text":"first thing understand categorical data whether exists raw observations like linelist cases, summary aggregate data frame holds counts proportions. state data impact plotting function use:data raw observations one row per observation, likely use geom_bar()data already aggregated counts proportions, likely use geom_col()","code":""},{"path":"ggplot-basics.html","id":"column-class-and-value-ordering","chapter":"1 ggplot basics","heading":"Column class and value ordering","text":"Next, examine class columns want plot. look hospital, first class() base R, tabyl() janitor.can see values within characters, hospital names, default ordered alphabetically. ‘’ ‘missing’ values, prefer last subcategories presenting breakdowns. change column factor re-order . covered detail [Factors] data management section.","code":"\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)## [1] \"character\"\n# Look at values and proportions within hospital column\nlinelist %>% \n  tabyl(hospital)##                              hospital    n    percent\r\n##                      Central Hospital  454 0.07710598\r\n##                     Military Hospital  896 0.15217391\r\n##                               Missing 1469 0.24949049\r\n##                                 Other  885 0.15030571\r\n##                         Port Hospital 1762 0.29925272\r\n##  St. Mark's Maternity Hospital (SMMH)  422 0.07167120\n# Convert to factor and define level order so \"Other\" and \"Missing\" are last\nlinelist <- linelist %>% \n  mutate(\n    hospital = fct_relevel(hospital, \n      \"St. Mark's Maternity Hospital (SMMH)\",\n      \"Port Hospital\", \n      \"Central Hospital\",\n      \"Military Hospital\",\n      \"Other\",\n      \"Missing\"))"},{"path":"ggplot-basics.html","id":"ggplot_basics_bars","chapter":"1 ggplot basics","heading":"geom_bar()","text":"Use geom_bar() want bar height (height stacked bar components) reflect number relevant rows data. bars gaps , unless width = plot aesthetic adjusted.Provide one axis column assignment (typically x-axis). provide x y, get Error: stat_count() can x y aesthetic.can create stacked bars adding fill = column assignment within mapping = aes()opposite axis titled “count” default, represents number rowsBelow, assigned outcome y-axis, just easily x-axis. longer character values, can sometimes look better flip bars sideways put legend bottom. may impact factor levels ordered - case reverse fct_rev() put missing bottom.","code":"\n# A) Outcomes in all cases\nggplot(linelist %>% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital)), width = 0.7) +\n  theme_minimal()+\n  labs(title = \"A) Number of cases by hospital\",\n       y = \"Hospital\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist %>% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital), fill = outcome), width = 0.7) +\n  theme_minimal()+\n  theme(legend.position = \"bottom\") +\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\",\n       y = \"Hospital\")"},{"path":"ggplot-basics.html","id":"geom_col","chapter":"1 ggplot basics","heading":"geom_col()","text":"Use geom_col() want bar height (height stacked bar components) reflect pre-calculated values exists data. Often, summary “aggregated” counts, proportions.Provide column assignments axes geom_col(). Typically x-axis column discrete y-axis column numeric.Let’s say dataset outcomes:code using geom_col creating simple bar charts show distribution Ebola patient outcomes. geom_col, x y need specified. x categorical variable along x axis, y generated proportions column proportion.show breakdowns hospital, need table contain information, “long” format. create table frequencies combined categories outcome hospital (see [Grouping data] page grouping tips).create ggplot added formatting:Axis flip: Swapped axis around coord_flip() can read hospital names.Columns side--side: Added position = \"dodge\" argument bars death recover presented side side rather stacked. Note stacked bars default.Column width: Specified ‘width’, columns half thin full possible width.Column order: Reversed order categories y axis ‘’ ‘Missing’ bottom, scale_x_discrete(limits=rev). Note used rather scale_y_discrete hospital stated x argument aes(), even visually y axis. Ggplot seems present categories backwards unless tell .details: Labels/titles colours added within labs scale_fill_color respectively.Note proportions binary, may prefer drop ‘recover’ just show proportion died. just illustration purposes.using geom_col() dates data (e.g. epicurve aggregated data) - want adjust width = argument remove “gap” lines bars. using daily data set width = 1. weekly, width = 7. Months possible month different number days.","code":"## # A tibble: 2 x 3\r\n##   outcome     n proportion\r\n##   <chr>   <int>      <dbl>\r\n## 1 Death    1022       56.2\r\n## 2 Recover   796       43.8\n# Outcomes in all cases\nggplot(outcomes) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\noutcomes2 <- linelist %>% \n  drop_na(outcome) %>% \n  count(hospital, outcome) %>%  # get counts by hospital and outcome\n  group_by(hospital) %>%        # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100) # calculate proportions of hospital total\n\nhead(outcomes2) # Preview data## # A tibble: 6 x 4\r\n## # Groups:   hospital [3]\r\n##   hospital                             outcome     n proportion\r\n##   <fct>                                <chr>   <int>      <dbl>\r\n## 1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\r\n## 2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\r\n## 3 Port Hospital                        Death     785       57.6\r\n## 4 Port Hospital                        Recover   579       42.4\r\n## 5 Central Hospital                     Death     193       53.9\r\n## 6 Central Hospital                     Recover   165       46.1\n# Outcomes in all cases by hospital\nggplot(outcomes2) +  \n  geom_col(\n    mapping = aes(\n      x = proportion,                 # show pre-calculated proportion values\n      y = fct_rev(hospital),          # reverse level order so missing/other at bottom\n      fill = outcome),                # stacked by outcome\n    width = 0.5)+                    # thinner bars (out of 1)\n  theme_minimal() +                  # Minimal theme \n  theme(legend.position = \"bottom\")+\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",             # legend title\n       y = \"Count\",                  # y axis title\n       x = \"Hospital of admission\")+ # x axis title\n  scale_fill_manual(                 # adding colors manually\n    values = c(\"Death\"= \"#3B1c8C\",\n               \"Recover\" = \"#21908D\" )) "},{"path":"ggplot-basics.html","id":"geom_histogram","chapter":"1 ggplot basics","heading":"geom_histogram()","text":"Histograms may look like bar charts, distinct measure distribution continuous variable. spaces “bars”, one column provided geom_histogram(). arguments specific histograms bin_width = breaks = specify data binned. section continuous data page [Epidemic curves] provides additional detail.","code":""},{"path":"ggplot-basics.html","id":"resources","chapter":"1 ggplot basics","heading":"1.14 Resources","text":"huge amount help online, especially ggplot. See:ggplot2 cheat sheetanother cheat sheettidyverse ggplot basics pageplotting continuous variablesR Data Science pages data visualizationgraphics communicaton","code":""},{"path":"ggplot-tips.html","id":"ggplot-tips","chapter":"2 ggplot tips","heading":"2 ggplot tips","text":"page cover tips tricks make ggplots sharp fancy. See page ggplot basics fundamentals.several extensive ggplot2 tutorials linked Resources section. can also download data visualization ggplot cheatsheet RStudio website. strongly recommend peruse inspiration R graph gallery Data--viz.","code":""},{"path":"ggplot-tips.html","id":"preparation-2","chapter":"2 ggplot tips","heading":"2.1 Preparation","text":"","code":""},{"path":"ggplot-tips.html","id":"load-packages-1","chapter":"2 ggplot tips","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load installed packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other\n  rio,            # import/export\n  here,           # file locator\n  stringr,        # working with characters   \n  scales,         # transform numbers\n  ggrepel,        # smartly-placed labels\n  gghighlight,    # highlight one part of plot\n  RColorBrewer    # color scales\n)"},{"path":"ggplot-tips.html","id":"import-data-1","chapter":"2 ggplot tips","heading":"Import data","text":"page, import dataset cases simulated Ebola epidemic. want follow along, click download “clean” linelist (.rds file). Import data import() function rio package (handles many file types like .xlsx, .csv, .rds - see [Import export] page details).first 50 rows linelist displayed .","code":"\nlinelist <- rio::import(\"linelist_cleaned.rds\")"},{"path":"ggplot-tips.html","id":"ggplot_tips_colors","chapter":"2 ggplot tips","heading":"2.2 Colour schemes","text":"One thing can initially difficult understand ggplot2 control colour schemes.control “color” plot objects (geoms/shapes like points, bars, lines, etc) adjusting either color = aesthetic (exterior color) fill = aesthetic (interior color). exception behavior geom_point(), really get control color =, controls color point (interior exterior).setting colours can use colour names recognized R like \"red\" (see complete list enter ?colors), specific hex colour \"#ff0505\".explained ggplot basics section mapping data plot, aesthetics fill = color = can defined either outside mapping = aes() statement inside one. outside aes(), assigned value (e.g. color = \"blue\") apply data plotted geom. inside, aesthetic mapped column, like color = hospital, expression given observation vary value row data. examples:","code":"\n# histogram - \nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"lightblue\")          # bin interior color (fill) ## Warning: Removed 86 rows containing non-finite values (stat_bin).\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(color = \"purple\")+\n  geom_vline(xintercept = 50, color = \"orange\")+\n  labs(title = \"Static color for points and line\")\n\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(mapping = aes(color = temp))+         \n  labs(title = \"Color mapped to continuous column\")\n\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(mapping = aes(color = gender))+         \n  labs(title = \"Color mapped to categorical column\")\n\n# bar plot\nggplot(data = linelist, mapping = aes(x = hospital))+     \n  geom_bar(mapping = aes(fill = gender), color = \"yellow\")+         \n  labs(title = \"Fill by column, static color\")"},{"path":"ggplot-tips.html","id":"ggplot_tips_scales","chapter":"2 ggplot tips","heading":"Scales","text":"map column toa plot aesthetic (e.g. x =, y =, fill =, color =…), plot gain scale/legend. See scale can continuous, discrete, date, etc. values depending class assigned column. multiple aesthetics mapped columns, plot multiple scales.can control scales appropriate scales_() function. scale functions ggplot() 3 parts written like : scale_AESTHETIC_METHOD().first part, scale_(), fixed.second part, AESTHETIC, aesthetic want adjust scale (fill, shape, color, size, alpha…) - options also include x y.third part, METHOD, either _discrete(), continuous(), _date(), _gradient(), _manual() depending class column want control . others, -often used.sure use correct function scale! Otherwise scale command appear change anything. multiple scales, may use multiple scale functions adjust ! example:","code":""},{"path":"ggplot-tips.html","id":"scale-arguments","chapter":"2 ggplot tips","heading":"Scale arguments","text":"kind scale arguments, though overlap. Query function like ?scale_color_discrete R console see function argument documentation.continuous scales, use breaks = provide sequence values seq() (take =, =, = shown example . Set expand = c(0,0) eliminate padding space around axes (can used _x_ _y_ scale.discrete scales, can adjust order level appearance breaks =, values display labels = argument. Provide character vector (see example ). can also drop NA easily setting na.translate = FALSE.nuances date scales covered extensively [Epidemic curves] page.","code":""},{"path":"ggplot-tips.html","id":"manual-adjustments","chapter":"2 ggplot tips","heading":"Manual adjustments","text":"One useful tricks using “manual” scaling functions explicitly assign colors descire. functions syntax scale_xxx_manual() (e.g. scale_colour_manual() scale_fill_manual()). arguments demonstrated code example .\r\n* Assign colors data values values = argument\r\n* Specify color NA na.value =\r\n* Change values written legend labels = argument\r\n* Change legend title name =, create bar plot show appears default, three scales adjusted - continuous y-axis scale, discrete, x-axis scale, manual adjustment fill (interior bar color).Continuous scales can involve additional nuance. defaults usually quite pleasing, may want adjust values, cutoffs, etc.demonstrate adjust continuous color scale, ’ll use data set [Contact tracing] page contains ages cases source cases., produce “raster” heat tile density plot. won’t elaborate (see link paragraph ) focus can adjust color scale. Read stat_density2d() ggplot2 function . Note fill scale continuous.Now show variations fill scale:Now show examples actually adjusting break points scale:scale_fill_gradient() accepts two colors (high/low)scale_fill_gradientn() accepts vector length colors values = (intermediate values interpolated)Use scales::rescale() adjust colors positioned along gradient; rescales vector positions 0 1.generally, want predefined palettes, can use scale_xxx_brewer scale_xxx_viridis_y functions.‘brewer’ functions can draw colorbrewer.org palettes.‘viridis’ functions draw viridis (colourblind friendly!) palettes, “provide colour maps perceptually uniform colour black--white. also designed perceived viewers common forms colour blindness.” (read ). Define palette discrete, continuous, binned specifying end function (e.g. discrete scale_xxx_viridis_d).advised test plot color blindness simulator. red/green color scheme, try “hot-cold” (red-blue) scheme instead described hereHere example ggplot basics page, using various color schemes.","code":"\n# BASELINE - no scale adjustment\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  labs(title = \"Baseline - no scale adjustments\")\n# SCALES ADJUSTED\nggplot(data = linelist)+\n  \n  geom_bar(mapping = aes(x = outcome, fill = gender), color = \"black\")+\n  \n  theme_minimal()+                   # simplify background\n  \n  scale_y_continuous(                # continuous scale for y-axis (counts)\n    expand = c(0,0),                 # no padding\n    breaks = seq(from = 0,\n                 to = 3000,\n                 by = 500))+\n  \n  scale_x_discrete(                   # discrete scale for x-axis (gender)\n    expand = c(0,0),                  # no padding\n    drop = FALSE,                     # show all factor levels (even if not in data)\n    na.translate = FALSE,             # remove NA outcomes from plot\n    labels = c(\"Died\", \"Recovered\"))+ # Change display of values\n    \n  \n  scale_fill_manual(                  # Manually specify fill (bar interior color)\n    values = c(\"m\" = \"violetred\",     # reference values in data to assign colors\n               \"f\" = \"aquamarine\"),\n    labels = c(\"m\" = \"Male\",          # re-label the legend (use \"=\" assignment to avoid mistakes)\n              \"f\" = \"Female\",\n              \"Missing\"),\n    name = \"Gender\",                  # title of legend\n    na.value = \"grey\"                 # assign a color for missing values\n  )+\n  labs(title = \"Adjustment of scales\") # Adjust the title of the fill legend\ncase_source_relationships <- rio::import(here::here(\"data\", \"godata\", \"relationships_clean.rds\")) %>% \n  select(source_age, target_age) \ntrans_matrix <- ggplot(\n    data = case_source_relationships,\n    mapping = aes(x = source_age, y = target_age))+\n  stat_density2d(\n    geom = \"raster\",\n    mapping = aes(fill = after_stat(density)),\n    contour = FALSE)+\n  theme_minimal()\ntrans_matrix\ntrans_matrix + scale_fill_viridis_c(option = \"plasma\")\ntrans_matrix + \n  scale_fill_gradient(     # 2-sided gradient scale\n    low = \"aquamarine\",    # low value\n    high = \"purple\",       # high value\n    na.value = \"grey\",     # value for NA\n    name = \"Density\")+     # Legend title\n  labs(title = \"Manually specify high/low colors\")\n\n# 3+ colors to scale\ntrans_matrix + \n  scale_fill_gradientn(    # 3-color scale (low/mid/high)\n    colors = c(\"blue\", \"yellow\",\"red\") # provide colors in vector\n  )+\n  labs(title = \"3-color scale\")\n\n# Use of rescale() to adjust placement of colors along scale\ntrans_matrix + \n  scale_fill_gradientn(    # provide any number of colors\n    colors = c(\"blue\", \"yellow\",\"red\", \"black\"),\n    values = scales::rescale(c(0, 0.05, 0.07, 0.10, 0.15, 0.20, 0.3, 0.5)) # positions for colors are rescaled between 0 and 1\n    )+\n  labs(title = \"Colors not evenly positioned\")\n\n# use of limits to cut-off values that get fill color\ntrans_matrix + \n  scale_fill_gradientn(    \n    colors = c(\"blue\", \"yellow\",\"red\"),\n    limits = c(0, 0.0002))+\n  labs(title = \"Restrict value limits, resulting in grey space\")\nsymp_plot <- linelist %>%                                         # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  theme(legend.position = \"bottom\")+\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot  # print with default colors\n\n#################################\n# print with manually-specified colors\nsymp_plot +\n  scale_fill_manual(\n    values = c(\"yes\" = \"black\",         # explicitly define colours\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    breaks = c(\"yes\", \"no\", \"unknown\"), # order the factors correctly\n    name = \"\"                           # set legend to no title\n\n  ) \n\n#################################\n# print with viridis discrete colors\nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )"},{"path":"ggplot-tips.html","id":"change-order-of-discrete-variables","chapter":"2 ggplot tips","heading":"2.3 Change order of discrete variables","text":"Changing order discrete variables appear often difficult understand people new ggplot2 graphs. ’s easy understand however understand ggplot2 handles discrete variables hood. Generally speaking, discrete varaible used, automatically converted factor type - orders factors alphabetical order default. handle , simply reorder factor levels reflect order like appear chart. detailed information reorder factor objects, see factor section guide.can look common example using age groups - default 5-9 age group placed middle age groups (given alphanumeric order), can move behind 0-4 age group chart releveling factors.","code":"\nlevels(linelist$age_cat5)##  [1] \"0-4\"   \"5-9\"   \"10-14\" \"15-19\" \"20-24\" \"25-29\" \"30-34\" \"35-39\" \"40-44\" \"45-49\" \"50-54\" \"55-59\" \"60-64\"\r\n## [14] \"65-69\" \"70-74\" \"75-79\" \"80-84\" \"85+\"\nggplot(\n  data = linelist %>% drop_na(age_cat5),                         # remove rows where age_cat5 is missing\n  mapping = aes(x = fct_relevel(age_cat5, \"5-9\", after = 1))) +  # relevel factor\n\n  geom_bar() +\n  \n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  \n  theme_minimal()"},{"path":"ggplot-tips.html","id":"contour-lines","chapter":"2 ggplot tips","heading":"2.4 Contour lines","text":"Contour plots helpful many points might cover (“overplotting”). case-source data used plotted, simply using stat_density2d_filled() produce discrete contour levels - like topographical map. Read statistics .","code":"\ncase_source_relationships %>% \n  ggplot(aes(x = source_age, y = target_age))+\n  stat_density2d()+\n  geom_point()+\n  theme_minimal()+\n  labs(title = \"stat_density2d() + geom_point()\")\n\n\ncase_source_relationships %>% \n  ggplot(aes(x = source_age, y = target_age))+\n  stat_density2d_filled()+\n  theme_minimal()+\n  labs(title = \"stat_density2d_filled()\")"},{"path":"ggplot-tips.html","id":"marginal-distributions","chapter":"2 ggplot tips","heading":"2.5 Marginal distributions","text":"show distributions edges geom_point() scatterplot, can use ggExtra package function ggMarginal(). Save original ggplot object, pass ggMarginal() shown . key arguments:must specify type = either “histogram”, “density” “boxplot”, “violin”, “densigram”.default, marginal plots appear axes. can set margins = “x” “y” want one.optional arguments include fill = (bar color), color = (line color), size = (plot size relative margin size, larger number makes marginal plot smaller).can provide axis-specific arguments xparams = yparams =. example, different histogram bin sizes, shown .can marginal plots reflect groups (columns assigned color = ggplot() mapped aesthetics). case, set ggMarginal() argument groupColour = groupFill = TRUE, shown .Read vignette, R Graph Gallery function R documentation ?ggMarginal.add marginal histograms:Marginal histograms grouped/colored values:Marginal density curve, demonstration size color arguments:Marginal boxplots, demonstration margins argument:","code":"\n# Install/load ggExtra\npacman::p_load(ggExtra)\n\n# Basic scatter plot of weight and age\nscatter_plot <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age)) +\n  labs(title = \"Scatter plot of weight and age\")\n# with histograms\nggMarginal(\n  scatter_plot,                     # add marginal histograms\n  type = \"histogram\",               # specify histograms\n  fill = \"lightblue\",               # bar fill\n  xparams = list(binwidth = 10),    # other parameters for x-axis marginal\n  yparams = list(binwidth = 5))     # other parameters for y-axis marginal\n# Scatter plot, colored by outcome\n# Outcome column is assigned as color in ggplot. groupFill in ggMarginal set to TRUE\nscatter_plot_color <- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age, color = outcome)) +\n  labs(title = \"Scatter plot of weight and age\")+\n  theme(legend.position = \"bottom\")\n\nggMarginal(scatter_plot_color, type = \"histogram\", groupFill = TRUE)\n# with density curves\nggMarginal(\n  scatter_plot,\n  type = \"density\",\n  color = \"red\",                    # line color\n  size = 4)                         # smaller number makes larger marginal plots\n# with boxplot \nggMarginal(\n  scatter_plot,\n  margins = \"x\",      # only show x-axis marginal plot\n  type = \"boxplot\")   "},{"path":"ggplot-tips.html","id":"smart-labeling","chapter":"2 ggplot tips","heading":"2.6 Smart Labeling","text":"ggplot2, also possible add text plots. However, comes notable limitation text labels often clash data points plot, making look messy hard read. ideal way deal base package, ggplot2 add-, known ggrepel makes dealing simple!ggrepel package provides two new functions, geom_label_repel() geom_text_repel(), replace geom_label() geom_text(). Simply use functions instead base functions produce neat labels. Within function, map aesthetics aes() always, include argument label = provide column name containing values want display (e.g. patient id, name, etc.). can make complex labels combining columns newlines (\\n) within str_glue() shown .tips:Use min.segment.length = 0 always draw line segments, min.segment.length = Inf never draw themUse size = outside aes() set text sizeUse force = change degree repulsion labels respective points (default 1)Include fill = within aes() label colored value\r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove \r\nletter “” may appear legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ remove itSee -depth tutorial .can label subset data points - using standard ggplot() syntax provide different data = geom layer plot. , cases plotted, labeled.","code":"\npacman::p_load(ggrepel)\n\nlinelist %>%                                               # start with linelist\n  group_by(hospital) %>%                                   # group by hospital\n  summarise(                                               # create new dataset with summary values per hospital\n    n_cases = n(),                                           # number of cases per hospital\n    delay_mean = round(mean(days_onset_hosp, na.rm=T),1),    # mean delay per hospital\n  ) %>% \n  ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # send data frame to ggplot\n  geom_point(size = 2)+                                    # add points\n  geom_label_repel(                                        # add point labels\n    mapping = aes(\n      label = stringr::str_glue(\n        \"{hospital}\\n{n_cases} cases, {delay_mean} days\")  # how label displays\n      ), \n    size = 3,                                              # text size in labels\n    min.segment.length = 0)+                               # show all line segments                \n  labs(                                                    # add axes labels\n    title = \"Mean delay to admission, by hospital\",\n    x = \"Number of cases\",\n    y = \"Mean delay (days)\")\nggplot()+\n  # All points in grey\n  geom_point(\n    data = linelist,                                   # all data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    color = \"grey\",\n    alpha = 0.5)+                                              # grey and semi-transparent\n  \n  # Few points in black\n  geom_point(\n    data = linelist %>% filter(days_onset_hosp > 15),  # filtered data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    alpha = 1)+                                                # default black and not transparent\n  \n  # point labels for few points\n  geom_label_repel(\n    data = linelist %>% filter(days_onset_hosp > 15),  # filter the data for the labels\n    mapping = aes(\n      x = ht_cm,\n      y = wt_kg,\n      fill = outcome,                                          # label color by outcome\n      label = stringr::str_glue(\"Delay: {days_onset_hosp}d\")), # label created with str_glue()\n    min.segment.length = 0) +                                  # show line segments for all\n  \n  # remove letter \"a\" from inside legend boxes\n  guides(fill = guide_legend(override.aes = aes(color = NA)))+\n  \n  # axis labels\n  labs(\n    title = \"Cases with long delay to admission\",\n    y = \"weight (kg)\",\n    x = \"height(cm)\")"},{"path":"ggplot-tips.html","id":"time-axes","chapter":"2 ggplot tips","heading":"2.7 Time axes","text":"Working time axes ggplot can seem daunting, made easy key functions. Remember working time date ensure correct variables formatted date datetime class - see [Working dates] page information , [Epidemic curves] page (ggplot section) examples.single useful set functions working dates ggplot2 scale functions (scale_x_date(), scale_x_datetime(), cognate y-axis functions). functions let define often axis labels, format axis labels. find format dates, see working dates section ! can use date_breaks date_labels arguments specify dates look:date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_breaks allows specify often axis breaks occur - can pass string (e.g. \"3 months\", \"2 days\")date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):date_labels allows define format dates shown . can pass date format string arguments (e.g. \"%b-%d-%Y\"):","code":"\n# make epi curve by date of onset when available\nggplot(linelist, aes(x = date_onset)) +\n  geom_bar(stat = \"count\") +\n  scale_x_date(\n    # 1 break every 1 month\n    date_breaks = \"1 months\",\n    # labels should show month then date\n    date_labels = \"%b %d\"\n  ) +\n  theme_classic()"},{"path":"ggplot-tips.html","id":"highlighting","chapter":"2 ggplot tips","heading":"2.8 Highlighting","text":"Highlighting specific elements chart useful way draw attention specific instance variable also providing information dispersion full dataset. easily done base ggplot2, external package can help known gghighlight. easy use within ggplot syntax.gghighlight package uses gghighlight() function achieve effect. use function, supply logical statement function - can quite flexible outcomes, ’ll show example age distribution cases linelist, highlighting outcome.also works well faceting functions - allows user produce facet plots background data highlighted doesn’t apply facet!","code":"\n# load gghighlight\nlibrary(gghighlight)\n\n# replace NA values with unknown in the outcome variable\nlinelist <- linelist %>%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  gghighlight::gghighlight(outcome == \"Death\")     # highlight instances where the patient has died.\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() +                                # make the histogram\n  gghighlight::gghighlight() +                      # highlight instances where the patient has died\n  facet_wrap(~outcome)                              # make facets by outcome"},{"path":"ggplot-tips.html","id":"plotting-multiple-datasets","chapter":"2 ggplot tips","heading":"2.9 Plotting multiple datasets","text":"Note properly aligning axes plot multiple datasets plot can difficult. Consider one following strategies:Merge data prior plotting, convert “long” format column reflecting datasetUse cowplot similar package combine two plots (see )","code":""},{"path":"ggplot-tips.html","id":"combine-plots","chapter":"2 ggplot tips","heading":"2.10 Combine plots","text":"Two packages useful combining plots cowplot patchwork. page mostly focus cowplot, occassional use patchwork.online introduction cowplot. can read extensive documentation function online . cover common use cases functions .cowplot package works tandem ggplot2 - essentially, use arrange combine ggplots legends compound figures. can also accept base R graphics.faceting (described ggplot basics page) convenient approach plotting, sometimes possible get results want relatively restrictive approach. , may choose combine plots sticking together larger plot. three well known packages great - cowplot, gridExtra, patchwork. However, packages largely things, ’ll focus cowplot section.cowplot package fairly wide range functions, easiest use can achieved use plot_grid(). effectively way arrange predefined plots grid formation. can work another example malaria dataset - can plot total cases district, also show epidemic curve time.","code":"\npacman::p_load(\n  tidyverse,      # data manipulation and visualisation\n  cowplot,        # combine plots\n  patchwork       # combine plots\n)\nmalaria_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\")) \n\n# bar chart of total cases by district\np1 <- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 <- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1) +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))"},{"path":"ggplot-tips.html","id":"dual-axes","chapter":"2 ggplot tips","heading":"2.10.1 Dual axes","text":"secondary y-axis often requested addition ggplot2 graph. robust debate validity graphs data visualization community, often recommended, manager may still want . , present one methods achieve : using cowplot package combine two separate plots.approach involves creating two separate plots - one y-axis left, y-axis right. use specific theme_cowplot() must x-axis. third command two plots aligned overlaid top . functionalities cowplot, one, described depth site.demonstrate technique overlay epidemic curve line weekly percent patients died. use example alignment dates x-axis complex say, aligning bar chart another plot. things note:epicurve line aggregated weeks prior plotting date_breaks date_labels identical - x-axes two plots overlaid.y-axis moved right-side plot 2 position = argument scale_y_continuous().plots make use theme_cowplot()Note another example technique [Epicurves] page - overlaying cumulative incidence top epicurve.Make plot 1\r\nessentially epicurve. use geom_area() just demonstrate use (area line, default)Make plot 2\r\nCreate second plot showing line weekly percent cases died.Now align plot using function align_plots(), specifying horizontal vertical alignment (“hv”, also “h”, “v”, “none”). specify alignment axes well (top, bottom, left, right) “tblr”. output class list (2 elements).draw two plots together using ggdraw() (cowplot) referencing two parts aligned_plots object.","code":"\npacman::p_load(cowplot)            # load/install cowplot\n\np1 <- linelist %>%                 # save plot as object\n     count(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     ggplot()+\n          geom_area(aes(x = epiweek, y = n), fill = \"grey\")+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n     theme_cowplot()+\n     labs(\n       y = \"Weekly cases\"\n     )\n\np1                                      # view plot \np2 <- linelist %>%         # save plot as object\n     group_by(\n       epiweek = lubridate::floor_date(date_onset, \"week\")) %>% \n     summarise(\n       n = n(),\n       pct_death = 100*sum(outcome == \"Death\", na.rm=T) / n) %>% \n     ggplot(aes(x = epiweek, y = pct_death))+\n          geom_line()+\n          scale_x_date(\n               date_breaks = \"month\",\n               date_labels = \"%b\")+\n          scale_y_continuous(\n               position = \"right\")+\n          theme_cowplot()+\n          labs(\n            x = \"Epiweek of symptom onset\",\n            y = \"Weekly percent of deaths\",\n            title = \"Weekly case incidence and percent deaths\"\n          )\n\np2     # view plot\naligned_plots <- cowplot::align_plots(p1, p2, align=\"hv\", axis=\"tblr\")         # align the two plots and save them as list\naligned_plotted <- ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])  # overlay them and save the visual plot\naligned_plotted                                                                # print the overlayed plots"},{"path":"ggplot-tips.html","id":"combine-legends","chapter":"2 ggplot tips","heading":"Combine legends","text":"plots legend, combining relatively straight-forward. Simple use cowplot approach combine plots, remove legend one (de-duplicate).plots different legends, must use alternative approach:Create save plots without legends using theme(legend.position = \"none\")Extract legends plot using get_legend() shown - extract legends plots modified actually show legendCombine legends legends panelCombine plots legends panelFor demonstration show two plots separately, arranged grid legends showing (ugly inefficient use space):now show combine legends:solution learned post minor fix align legends post.TIP: Fun note - “cow” cowplot comes creator’s name - Claus O. Wilke.","code":"\np1 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, outcome) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  labs(title = \"Cases by outcome\")\n\np1  # print\n\np2 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, age_cat) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(axis.text.y = element_blank())+\n  labs(title = \"Cases by age\")\n\np2    # print\n\ncowplot::plot_grid(p1, p2, rel_widths = c(0.3))\np1 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, outcome) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(legend.position = \"none\")+\n  labs(title = \"Cases by outcome\")\n\n\n\np2 <- linelist %>% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %>% \n  count(hospital, age_cat) %>% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank()\n  )+\n  labs(title = \"Cases by age\",\n       fill = \"Age Category\")\n\n\n# extract legend from p1\nleg_p1 <- cowplot::get_legend(p1 +\n                                theme(legend.position = \"right\",        # extract vertical legend\n                                      legend.justification = c(0,0.5))+ # so legends align\n                                labs(fill = \"Outcome\"))                 # title of legend\n# extract legend from p2\nleg_p2 <- cowplot::get_legend(p2 + \n                                theme(legend.position = \"right\",         # extract vertical legend   \n                                      legend.justification = c(0,0.5))+  # so legends align\n                                labs(fill = \"Age Category\"))             # title of legend\n\n# create a blank plot for legend alignment\n#blank_p <- patchwork::plot_spacer() + theme_void()\n\n# create legends panel, 3 rows one of which is empty\nlegends <- cowplot::plot_grid(leg_p1, leg_p2, nrow = 2, rel_heights = c(.3, .7))\n\n# combine two plots and legends panel\ncombined <- cowplot::plot_grid(p1, p2, legends, ncol = 3, rel_widths = c(.4, .4, .2))\n\ncombined"},{"path":"ggplot-tips.html","id":"inset-plots","chapter":"2 ggplot tips","heading":"2.11 Inset plots","text":"CONSTRUCTIONhttps://wilkelab.org/cowplot/articles/drawing_with_on_plots.html\r\nhttps://www.rdocumentation.org/packages/cowplot/versions/1.1.1/topics/draw_plot","code":""},{"path":"ggplot-tips.html","id":"sparklines","chapter":"2 ggplot tips","heading":"2.12 Sparklines","text":"CONSTRUCTION\r\n(perhaps move Tables presentation page)","code":""},{"path":"ggplot-tips.html","id":"packages-to-help-you","chapter":"2 ggplot tips","heading":"2.13 Packages to help you","text":"CONSTRUCTIONThere really neat R packages specifically designed help navigate ggplot2:","code":""},{"path":"ggplot-tips.html","id":"gghelp-from-ggx","chapter":"2 ggplot tips","heading":"2.13.1 gghelp() from ggx","text":"Converts normal language query ggplot command.https://rdrr.io/github/brandmaier/ggx/man/gghelp.html","code":""},{"path":"ggplot-tips.html","id":"point-and-click-with-equisse","chapter":"2 ggplot tips","heading":"2.13.2 Point-and-click with equisse","text":"https://github.com/dreamRs/esquisse“addin allows interactively explore data visualizing ggplot2 package. allows draw bar plots, curves, scatter plots, histograms, boxplot sf objects, export graph retrieve code reproduce graph.”Documentation:https://dreamrs.github.io/esquisse/index.htmlInstall launch addin via RStudio menu esquisse::esquisser().","code":""},{"path":"ggplot-tips.html","id":"miscellaneous","chapter":"2 ggplot tips","heading":"2.14 Miscellaneous","text":"","code":""},{"path":"ggplot-tips.html","id":"numeric-display","chapter":"2 ggplot tips","heading":"Numeric display","text":"can disable scientific notation running command prior plotting.apply number_format() scales package specific value column, shown .Use functions package scales easily adjust numbers displayed. can applied columns data frame, shown individual numbers purpose example.","code":"\noptions(scipen=999)\nscales::number(6.2e5)## [1] \"620 000\"\nscales::number(1506800.62,  accuracy = 0.1,)## [1] \"1 506 800.6\"\nscales::comma(1506800.62, accuracy = 0.01)## [1] \"1,506,800.62\"\nscales::comma(1506800.62, accuracy = 0.01,  big.mark = \".\" , decimal.mark = \",\")## [1] \"1.506.800,62\"\nscales::percent(0.1)## [1] \"10%\"\nscales::dollar(56)## [1] \"$56\"\nscales::scientific(100000)## [1] \"1e+05\""},{"path":"ggplot-tips.html","id":"resources-1","chapter":"2 ggplot tips","heading":"2.15 Resources","text":"Inspiration\r\nggplot graph galleryPresentation data\r\nEuropean Centre Disease Prevention Control Guidelines presentation surveillance dataFacets labellers\r\nUsing labellers facet strips\r\nLabellersAdjusting order factors\r\nfct_reorderfct_inorderHow reorder boxplotReorder variable ggplot2R Data Science - FactorsLegendsAdjust legend orderCaptions\r\nCaption alignmentLabelsggrepelCheatsheetsBeautiful plotting ggplot2TO - constructionStraight horizontal, vertical, lineYou can also add straight lines plot geom_hline() (horizontal), geom_vline() (vertical) geom_abline() (specified y intercept slope)Using option label_wrap_gen facet_wrap multiple strip lines\r\nlabels colors stripsAxis text vertical adjustment\r\nrotation\r\nLabellerslimit range limit() coord_cartesian(), ylim(), scale_x_continuous()\r\ntheme_classic()expand = c(0,0)\r\ncoord_flip()\r\ntick marksggrepel\r\nanimationsremove\r\nremove title\r\nusing fill = color = labs()\r\nflip order / don’t flip order\r\nmove location\r\ncolor? theme(legend.title = element_text(colour=“chocolate”, size=16, face=“bold”))+ scale_color_discrete(name=“color ischocolate!?”)\r\nColor boxes behind points legend\r\ntheme(legend.key=element_rect(fill=‘pink’)) use fill = NA remove . http://zevross.com/blog/2014/08/04/beautiful-plotting--r--ggplot2-cheatsheet-3/\r\nChange size symbols legend guides(colour = guide_legend(override.aes = list(size=4)))Turn layer legend\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp)), size=4)\r\ngeom_text(data=nmmaps, aes(date, temp, label=round(temp), size=4), show_guide=FALSE)Force legend even aes().\r\nggplot(nmmaps, aes(x=date, y=o3))+\r\ngeom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“points”))\r\nControl shape legend guides - list linetype shape\r\nggplot(nmmaps, aes(x=date, y=o3))+geom_line(aes(color=“Important line”))+\r\ngeom_point(aes(color=“Point values”))+\r\nscale_colour_manual(name=’‘, values=c(’Important line’=‘grey’, ‘Point values’=‘red’), guide=‘legend’) +\r\nguides(colour = guide_legend(override.aes = list(linetype=c(1,0)\r\n, shape=c(NA, 16))))","code":""}]
