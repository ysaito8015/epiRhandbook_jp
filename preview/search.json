[{"path":"index.html","id":"section","chapter":"","heading":"","text":"DRAFT.REVIEWING BOOK, PLEASE PROVIDE FEEDBACK PAGE LINK","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"","heading":"About this handbook","text":"free open-access R reference manual applied epidemiologists public health practitioners.book strives :Serve quick reference manual - textbook comprehensive R trainingAddress common epidemiological problems via task-centered examplesBe accessible settings low internet-connectivity via offline version (instructions )challenges book try address?Many epidemiologists transitioning R SAS, STATA, SPSS, Excel, softwareEpidemiologists need spend hours searching online code relevant common epi userEpidemiologists sometimes work low internet-connectivity environments limited supportHow different R books?written epidemiologists, epidemiologists - leveraging experience local, national, academic, emergency settingsIt provides examples epidemic curves, transmission chains, epidemic modeling projections, age sex pyramids standardization, record matching, outbreak detection, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, automated reports, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"","heading":"How to read this handbook","text":"Online versionSearch via search box Table ContentsClick “copy” icons copy codeSee “Resources” section page resourcesTo download data “follow-along”, see [Download book data] pageOffline versionTo download offline version, follow step--step instructions [Download book data] page.LanguagesWe actively seeking translate book languages English. can help, please contact us epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"","heading":"Edit or contribute","text":"Want share use book? Want offer fix addition?\r\nEmail us epiRhandbook@gmail.com. welcome comments suggestions.can also submit issue pull request Github repository, provide structured feedback via Google survey.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"","heading":"Contributors","text":"book produced collaboration epidemiologists around world, drawing upon experiences organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Médecins Sans Frontières / Doctors without Borders), hospital systems, academic institutions.Editor--Chief: Neale BatraCore team: Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuthors: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonny Polonski, Yurie Izawa, Daniel Molling, Sara Hollis, Isha Berry, Wen LinReviewers:Advisers:","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"","heading":"Funding and programmatic support","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.handbook project received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET). handbook supported Cooperative Agreement number NU2GGH001873, funded Centers Disease Control Prevention TEPHINET, program Task Force Global Health. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention, Department Health Human Services, Task Force Global Health, Inc. TEPHINET.Programmatic support provided EPIET Alumni Network (EAN) also MSF’s Manson Unit.","code":""},{"path":"index.html","id":"inspiration","chapter":"","heading":"Inspiration","text":"multitude tutorials vignettes provided knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"","heading":"Image credits","text":"Images logo (US CDC Public Health Image Library):2013 Yemen looking mosquito breeding sitesEbola virusSurvey Rajasthan","code":""},{"path":"index.html","id":"terms-of-use-and-license","chapter":"","heading":"Terms of Use and License","text":"work licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"descriptive-tables.html","id":"descriptive-tables","chapter":"1 Descriptive tables","heading":"1 Descriptive tables","text":"page demonstrates use janitor, dplyr, gtsummary, base R produce tables descriptive statistics. tools advantages disadvantages areas code simplicity, accessibility outputs, quality printed outputs. Use page decide approach works scenario.","code":""},{"path":"descriptive-tables.html","id":"preparation","chapter":"1 Descriptive tables","heading":"1.1 Preparation","text":"","code":""},{"path":"descriptive-tables.html","id":"load-packages","chapter":"1 Descriptive tables","heading":"Load packages","text":"code chunk shows loading packages required analyses. handbook emphasize p_load() pacman, installs package necessary loads use. can also load packages library() base R. See page [R basics] information R packages.","code":"\npacman::p_load(\n  rio,          # File import\n  here,         # File locator\n  skimr,        # get overview of data\n  tidyverse,    # data management + ggplot2 graphics, \n  gtsummary,    # summary statistics and tests\n  janitor,      # adding totals and percents to tables\n  flextable,    # converting tables to HTML\n  )## \r\n## Your package installed## Warning in pacman::p_load(rio, here, skimr, tidyverse, gtsummary, janitor, : Failed to install/load:"},{"path":"descriptive-tables.html","id":"import-data","chapter":"1 Descriptive tables","heading":"Import data","text":"import dataset cases simulated Ebola epidemic. want download data follow step--step, see instructions [Download book data] page. dataset imported using import() function rio package. See page [Import export] various ways import data.first 50 rows linelist displayed .","code":"\n# import the linelist\nlinelist <- import(\"linelist_cleaned.xlsx\")"},{"path":"descriptive-tables.html","id":"browse-data","chapter":"1 Descriptive tables","heading":"1.2 Browse data","text":"","code":""},{"path":"descriptive-tables.html","id":"skimr-package","chapter":"1 Descriptive tables","heading":"skimr package","text":"Using skimr package can get detailed aesthetically pleasing overview variables dataset. Read skimr github page., function skim() applied entire linelist data frame. overview data frame summary every column (class) produced.Table 1.1: Data summaryVariable type: characterVariable type: DateVariable type: factorVariable type: numericYou can also use summary() function, base R, get information entire dataset, output can difficult read using skimr. Therefore output shown , conserve page space.","code":"\n## get information about each variable in a dataset \nskim(linelist)\n## get information about each column in a dataset \nsummary(linelist)"},{"path":"descriptive-tables.html","id":"summary-statistics","chapter":"1 Descriptive tables","heading":"Summary statistics","text":"can use base R functions return summary statistics numeric column. can return useful summary statistics numeric column using summary(), . Note data frame name must also specified shown .can access save one specific part index brackets [ ]:can return individual statistics base R functions like max(), min(), median(), mean(), quantile(), sd(), range(). See [R Basics] page complete list.CAUTION: data contain missing values, R wants know return NA unless specify mathematical functions want R ignore missing values, via argument na.rm = TRUE.","code":"\nsummary(linelist$age_years)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n##       0       6      13      16      23      84      86\nsummary(linelist$age_years)[[2]]## [1] 6"},{"path":"descriptive-tables.html","id":"descriptive-tables-1","chapter":"1 Descriptive tables","heading":"1.3 Descriptive tables","text":"several choices producing tabulation cross-tabulation summary tables. factors consider include code simplicity ease, desired output (printed R console, pretty HTML), can data afterward. Consider points choose tool situation.Use tabyl() janitor produce “adorn” tabulations cross-tabulationsUse summarise() count() dplyr calculating complex statistics preparing data ggplot()Use tbl_summary() gtsummary produce detailed publication-ready tablesUse table() base R access packages","code":""},{"path":"descriptive-tables.html","id":"janitor","chapter":"1 Descriptive tables","heading":"janitor","text":"janitor packages offers tabyl() function produce tabulations cross-tabulations, can “adorned” modified helper functions display percents, proportions, counts, etc., pipe linelist data frame janitor functions print result. desired, can also save resulting tables assignment operator <-.","code":""},{"path":"descriptive-tables.html","id":"simple-tabyl","chapter":"1 Descriptive tables","heading":"Simple tabyl","text":"default use tabyl() specific column produces unique values, counts, column-wise “percents” (actually proportions). proportions may many digits. can adjust number decimals adorn_rounding() described .can see , missing values display row labeled <NA>. can suppress show_na = FALSE. missing values, row appear. missing values, proportions given raw (denominator inclusive NA counts) “valid” (denominator excludes NA counts).column class Factor certain levels present data, levels still appear table. can suppress feature specifying show_missing_levels = FALSE.","code":"\nlinelist %>% tabyl(age_cat)##  age_cat    n percent valid_percent\r\n##      0-4 1095 0.18597       0.18873\r\n##      5-9 1095 0.18597       0.18873\r\n##    10-14  941 0.15982       0.16219\r\n##    15-19  743 0.12619       0.12806\r\n##    20-29 1073 0.18224       0.18494\r\n##    30-49  754 0.12806       0.12996\r\n##    50-69   95 0.01613       0.01637\r\n##      70+    6 0.00102       0.00103\r\n##     <NA>   86 0.01461            NA"},{"path":"descriptive-tables.html","id":"cross-tabulation","chapter":"1 Descriptive tables","heading":"Cross-tabulation","text":"Cross-tabulation counts achieved adding one additional columns within tabyl(). Note counts returned - proportions percents can added additional steps shown .","code":"\nlinelist %>% tabyl(age_cat, gender)##  age_cat   f   m NA_\r\n##      0-4 640 416  39\r\n##      5-9 641 412  42\r\n##    10-14 518 383  40\r\n##    15-19 359 364  20\r\n##    20-29 468 575  30\r\n##    30-49 179 557  18\r\n##    50-69   2  91   2\r\n##      70+   0   5   1\r\n##     <NA>   0   0  86"},{"path":"descriptive-tables.html","id":"adorning-the-tabyl","chapter":"1 Descriptive tables","heading":"“Adorning” the tabyl","text":"Use janitor’s “adorn” functions add totals convert proportions, percents, otherwise adjust display. Often, pipe tabyl multiple functions.conscious order apply functions. examples.simple one-way table percents instead default proportions.cross-tabulation total row row percents.cross-tabulation adjusted counts percents displayed.","code":"\nlinelist %>%               # case linelist\n  tabyl(age_cat) %>%       # tabulate counts and proportions by age category\n  adorn_pct_formatting()   # convert proportions to percents##  age_cat    n percent valid_percent\r\n##      0-4 1095   18.6%         18.9%\r\n##      5-9 1095   18.6%         18.9%\r\n##    10-14  941   16.0%         16.2%\r\n##    15-19  743   12.6%         12.8%\r\n##    20-29 1073   18.2%         18.5%\r\n##    30-49  754   12.8%         13.0%\r\n##    50-69   95    1.6%          1.6%\r\n##      70+    6    0.1%          0.1%\r\n##     <NA>   86    1.5%             -\nlinelist %>%                                  \n  tabyl(age_cat, gender) %>%                  # counts by age and gender\n  adorn_totals(where = \"row\") %>%             # add total row\n  adorn_percentages(denominator = \"row\") %>%  # convert counts to proportions\n  adorn_pct_formatting(digits = 1)            # convert proportions to percents##  age_cat     f     m    NA_\r\n##      0-4 58.4% 38.0%   3.6%\r\n##      5-9 58.5% 37.6%   3.8%\r\n##    10-14 55.0% 40.7%   4.3%\r\n##    15-19 48.3% 49.0%   2.7%\r\n##    20-29 43.6% 53.6%   2.8%\r\n##    30-49 23.7% 73.9%   2.4%\r\n##    50-69  2.1% 95.8%   2.1%\r\n##      70+  0.0% 83.3%  16.7%\r\n##     <NA>  0.0%  0.0% 100.0%\r\n##    Total 47.7% 47.6%   4.7%\nlinelist %>%                                  # case linelist\n  tabyl(age_cat, gender) %>%                  # cross-tabulate counts\n  adorn_totals(where = \"row\") %>%             # add a total row\n  adorn_percentages(denominator = \"col\") %>%  # convert to proportions\n  adorn_pct_formatting() %>%                  # convert to percents\n  adorn_ns(position = \"front\") %>%            # display as: \"count (percent)\"\n  adorn_title(                                # adjust titles\n    row_name = \"Age Category\",\n    col_name = \"Gender\")##                      Gender                           \r\n##  Age Category             f             m          NA_\r\n##           0-4  640  (22.8%)  416  (14.8%)  39  (14.0%)\r\n##           5-9  641  (22.8%)  412  (14.7%)  42  (15.1%)\r\n##         10-14  518  (18.5%)  383  (13.7%)  40  (14.4%)\r\n##         15-19  359  (12.8%)  364  (13.0%)  20   (7.2%)\r\n##         20-29  468  (16.7%)  575  (20.5%)  30  (10.8%)\r\n##         30-49  179   (6.4%)  557  (19.9%)  18   (6.5%)\r\n##         50-69    2   (0.1%)   91   (3.2%)   2   (0.7%)\r\n##           70+    0   (0.0%)    5   (0.2%)   1   (0.4%)\r\n##          <NA>    0   (0.0%)    0   (0.0%)  86  (30.9%)\r\n##         Total 2807 (100.0%) 2803 (100.0%) 278 (100.0%)"},{"path":"descriptive-tables.html","id":"printing-the-tabyl","chapter":"1 Descriptive tables","heading":"Printing the tabyl","text":"default, tabyl print raw R console. Alternatively, can pass tabyl flextable package print HTML RStudio Viewer. Note using adorn_titles(), must specify placement = \"combined\" order print manner.Age Category/GenderfmNA_Total0-4640 (22.8%)416 (14.8%)39 (14.0%)1095 (18.6%)5-9641 (22.8%)412 (14.7%)42 (15.1%)1095 (18.6%)10-14518 (18.5%)383 (13.7%)40 (14.4%) 941 (16.0%)15-19359 (12.8%)364 (13.0%)20  (7.2%) 743 (12.6%)20-29468 (16.7%)575 (20.5%)30 (10.8%)1073 (18.2%)30-49179  (6.4%)557 (19.9%)18  (6.5%) 754 (12.8%)50-69  2  (0.1%) 91  (3.2%) 2  (0.7%)  95  (1.6%)70+  0  (0.0%)  5  (0.2%) 1  (0.4%)   6  (0.1%)  0  (0.0%)  0  (0.0%)86 (30.9%)  86  (1.5%)","code":"\nlinelist %>%\n  tabyl(age_cat, gender) %>% \n  adorn_totals(where = \"col\") %>% \n  adorn_percentages(denominator = \"col\") %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\") %>% \n  adorn_title(\n    row_name = \"Age Category\",\n    col_name = \"Gender\",\n    placement = \"combined\") %>% # this is necessary to print to HTML \n  flextable::flextable() %>%    # convert to HTML\n  flextable::autofit()          # format to one line per row "},{"path":"descriptive-tables.html","id":"use-on-other-tables","chapter":"1 Descriptive tables","heading":"Use on other tables","text":"can use janitor’s adorn_*() functions tables, created summarise(), count(), table().","code":""},{"path":"descriptive-tables.html","id":"saving-the-tabyl","chapter":"1 Descriptive tables","heading":"Saving the tabyl","text":"convert table HTML package like flextable, can save functions save_as_html(), save_as_word(), save_as_ppt(), save_as_image(), discussed extensively [Tables] page. , table saved Word document, can hand-edited.","code":"\nlinelist %>%\n  tabyl(age_cat, gender) %>% \n  adorn_totals(where = \"col\") %>% \n  adorn_percentages(denominator = \"col\") %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\") %>% \n  adorn_title(\n    row_name = \"Age Category\",\n    col_name = \"Gender\",\n    placement = \"combined\") %>% \n  flextable::flextable() %>%                     # convert to HTML flextable\n  flextable::autofit() %>%                       # ensure only one line per row\n  flextable::save_as_docx(path = \"tabyl.docx\")   # save as Word document"},{"path":"descriptive-tables.html","id":"statistics","chapter":"1 Descriptive tables","heading":"Statistics","text":"can apply statistical tests tabyls, like chisq.test() fisher.test() statspackage, shown . Note missing values allowed excluded tabyl show_na = FALSE.","code":"\nage_by_outcome <- linelist %>% \n  tabyl(age_cat, outcome, show_na = FALSE) \n\nchisq.test(age_by_outcome)## \r\n##  Pearson's Chi-squared test\r\n## \r\n## data:  age_by_outcome\r\n## X-squared = 6, df = 7, p-value = 0.5"},{"path":"descriptive-tables.html","id":"other-tips","chapter":"1 Descriptive tables","heading":"Other tips","text":"Include argument na.rm = TRUE exclude missing values calculations.applying adorn_*() helper functions tables created tabyl(), can specify particular column(s) apply like adorn_percentage(,,,c(cases,deaths)) (specify 4th unnamed argument). syntax simple. Consider using summarise() instead.can read detail janitor page tabyl vignette.","code":""},{"path":"descriptive-tables.html","id":"dplyr-package","chapter":"1 Descriptive tables","heading":"dplyr package","text":"dplyr part tidyverse packages extremely common data management tool. Creating tables dplyr functions summarise() count() useful calculating summary statistics, summarizing group, passing results ggplot().summarise() creates new, summary data frame. data ungrouped, return one-row dataframe specified summary statistics. data grouped, new data frame one row per group (see [Grouping data] page).Within summarise() parentheses, provide names new summary column followed equals sign statistical function apply.TIP: summarise function works UK US spelling - summarise() summarize() call function.","code":""},{"path":"descriptive-tables.html","id":"get-counts","chapter":"1 Descriptive tables","heading":"Get counts","text":"simple function apply within summarise() n(). Leave parentheses empty count number rows.gets interesting grouped data beforehand.command can shortened using count() function instead. count() groups data columns provided , summarises n() (creating column n), finishes un-grouping data.Tabulations two columns manner still returned “long” format, counts n column.","code":"\nlinelist %>%                 # begin with linelist\n  summarise(n_rows = n())    # return new summary dataframe with column n_rows, which returns the number of rows##   n_rows\r\n## 1   5888\nlinelist %>% \n  group_by(age_cat) %>%     # group data by unique values in column age_cat\n  summarise(n_rows = n())   # return number of rows *per group*## # A tibble: 9 x 2\r\n##   age_cat n_rows\r\n##   <fct>    <int>\r\n## 1 0-4       1095\r\n## 2 5-9       1095\r\n## 3 10-14      941\r\n## 4 15-19      743\r\n## 5 20-29     1073\r\n## 6 30-49      754\r\n## 7 50-69       95\r\n## 8 70+          6\r\n## 9 <NA>        86\nlinelist %>% \n  count(age_cat)##   age_cat    n\r\n## 1     0-4 1095\r\n## 2     5-9 1095\r\n## 3   10-14  941\r\n## 4   15-19  743\r\n## 5   20-29 1073\r\n## 6   30-49  754\r\n## 7   50-69   95\r\n## 8     70+    6\r\n## 9    <NA>   86\nlinelist %>% \n  count(age_cat, outcome)##    age_cat outcome   n\r\n## 1      0-4   Death 471\r\n## 2      0-4 Recover 364\r\n## 3      0-4    <NA> 260\r\n## 4      5-9   Death 476\r\n## 5      5-9 Recover 391\r\n## 6      5-9    <NA> 228\r\n## 7    10-14   Death 438\r\n## 8    10-14 Recover 303\r\n## 9    10-14    <NA> 200\r\n## 10   15-19   Death 323\r\n## 11   15-19 Recover 251\r\n## 12   15-19    <NA> 169\r\n## 13   20-29   Death 477\r\n## 14   20-29 Recover 367\r\n## 15   20-29    <NA> 229\r\n## 16   30-49   Death 329\r\n## 17   30-49 Recover 238\r\n## 18   30-49    <NA> 187\r\n## 19   50-69   Death  33\r\n## 20   50-69 Recover  38\r\n## 21   50-69    <NA>  24\r\n## 22     70+   Death   3\r\n## 23     70+ Recover   3\r\n## 24    <NA>   Death  32\r\n## 25    <NA> Recover  28\r\n## 26    <NA>    <NA>  26"},{"path":"descriptive-tables.html","id":"proportions","chapter":"1 Descriptive tables","heading":"Proportions","text":"Proportions can added piping table mutate() create new column. new column can divide counts column (n default) sum() column. return proportion. convert percents, can wrap result function percent() package scales (base R package).can calculate proportions within groups two levels aggregation prior using mutate(). table first groups data frame outcome groups counts column age_cat, achieving breakdown age outcome. Note can add stratifications adding columns group_by() command.","code":"\nage_summary <- linelist %>% \n  count(age_cat) %>%                     # group and count by gender (produces \"n\" column)\n  mutate(                                # get percent of column - note the denominator\n    percent = scales::percent(n / sum(n))) \n\n# print\nage_summary##   age_cat    n percent\r\n## 1     0-4 1095  18.60%\r\n## 2     5-9 1095  18.60%\r\n## 3   10-14  941  15.98%\r\n## 4   15-19  743  12.62%\r\n## 5   20-29 1073  18.22%\r\n## 6   30-49  754  12.81%\r\n## 7   50-69   95   1.61%\r\n## 8     70+    6   0.10%\r\n## 9    <NA>   86   1.46%\nage_by_outcome <- linelist %>% \n  group_by(outcome) %>%                  # group first by outcome \n  count(age_cat) %>%                     # group again and count by gender (produces \"n\" column)\n  mutate(                                # calculate percent - note the denominator is by outcome group\n    percent = scales::percent(n / sum(n))\n    ) "},{"path":"descriptive-tables.html","id":"plotting","chapter":"1 Descriptive tables","heading":"Plotting","text":"display “long” table output like ggplot() relatively straight-forward. data naturally “long” format, naturally accepted ggplot(). See examples pages [Plot categorical data] [ggplot tips].","code":"\nlinelist %>%                      # begin with linelist\n  count(age_cat, outcome) %>%     # group and tabulate counts by two columns\n  ggplot()+                       # pass new data frame to ggplot\n    geom_bar(                     # create bar plot\n      mapping = aes(   \n        x = outcome,              # map outcome to x-axis\n        fill = age_cat,           # map age_cat to the fill\n        y = n),                   # map the counts column `n` to the height\n      stat = \"identity\")          # set height from the y value, not the number of rows"},{"path":"descriptive-tables.html","id":"summary-statistics-1","chapter":"1 Descriptive tables","heading":"Summary statistics","text":"One major advantage dplyr summarise() returning advanced statistical summaries like median(), mean(), max(), min(), sd() (standard deviation), percentiles. can also use sum() return number rows meet certain logical criteria. , outputs can produced whole data frame set, group.noted , within summarise() parentheses provide names new summary column followed equals sign statistical function apply. Within statistical function, give column operated relevant arguments (e.g. na.rm = TRUE mathematical functions). can also use sum() count number rows meet logical criteria (use double equals ==)., linelist data summarised describe days delay symptom onset hospital admission (column days_onset_hosp), hospital.tips:Use sum() logic statement “count” rows meet certain criteria (==)Note use na.rm = TRUE within mathematical functions like sum(), otherwise NA returned missing valuesUse function percent() scales package easily convert percentsUse round() base R specify decimalsTo calculate statistics entire dataset, use summarise() without group_by()","code":"\nsummary_table <- linelist %>%                                        # begin with linelist, save out as new object\n  group_by(hospital) %>%                                             # group all calculations by hospital\n  summarise(                                                         # only the below summary columns will be returned\n    cases       = n(),                                                # number of rows per group\n    delay_max   = max(days_onset_hosp, na.rm = T),                    # max delay\n    delay_mean  = round(mean(days_onset_hosp, na.rm=T), digits = 1),  # mean delay, rounded\n    delay_sd    = round(sd(days_onset_hosp, na.rm = T), digits = 1),  # standard deviation of delays, rounded\n    delay_3     = sum(days_onset_hosp >= 3, na.rm = T),               # number of rows with delay of 3 or more days\n    pct_delay_3 = scales::percent(delay_3 / cases)                    # convert previously-defined delay column to percent \n  )\n\nsummary_table  # print## # A tibble: 6 x 7\r\n##   hospital                             cases delay_max delay_mean delay_sd delay_3 pct_delay_3\r\n##   <chr>                                <int>     <dbl>      <dbl>    <dbl>   <int> <chr>      \r\n## 1 Central Hospital                       454        12        1.9      1.9     108 24%        \r\n## 2 Military Hospital                      896        15        2.1      2.4     253 28%        \r\n## 3 Missing                               1469        22        2.1      2.3     399 27%        \r\n## 4 Other                                  885        18        2        2.2     234 26%        \r\n## 5 Port Hospital                         1762        16        2.1      2.2     470 27%        \r\n## 6 St. Mark's Maternity Hospital (SMMH)   422        18        2.1      2.3     116 27%"},{"path":"descriptive-tables.html","id":"glueing-together","chapter":"1 Descriptive tables","heading":"Glueing together","text":"can also use str_glue() combine columns one new column - typically used summarise() command. , summary_table data frame created mutated columns delay_mean delay_sd combined old columns removed., make table presentable, total row added adorn_totals() janitor (ignores non-numeric columns). Lastly, use rename() dplyr make column names nicer.Now pass flextable print table Word, HTML, Powerpoint, RMarkdown, etc.! (see janitor section [Tables] page).","code":"\nsummary_table %>% \n  mutate(delay = str_glue(\"{delay_mean} ({delay_sd})\")) %>%  # combine and format other values\n  select(-c(delay_mean, delay_sd)) %>%                       # remove two old columns   \n  adorn_totals(where = \"row\") %>%                            # add total row\n  rename(                                                    # rename cols\n    \"Hospital Name\"   = hospital,\n    \"Cases\"           = cases,\n    \"Max delay\"       = delay_max,\n    \"Mean (sd)\"       = delay,\n    \"Delay 3+ days\"   = delay_3,\n    \"% delay 3+ days\" = pct_delay_3\n    )##                         Hospital Name Cases Max delay Delay 3+ days % delay 3+ days Mean (sd)\r\n##                      Central Hospital   454        12           108             24% 1.9 (1.9)\r\n##                     Military Hospital   896        15           253             28% 2.1 (2.4)\r\n##                               Missing  1469        22           399             27% 2.1 (2.3)\r\n##                                 Other   885        18           234             26%   2 (2.2)\r\n##                         Port Hospital  1762        16           470             27% 2.1 (2.2)\r\n##  St. Mark's Maternity Hospital (SMMH)   422        18           116             27% 2.1 (2.3)\r\n##                                 Total  5888       101          1580               -         -"},{"path":"descriptive-tables.html","id":"percentiles","chapter":"1 Descriptive tables","heading":"Percentiles","text":"Percentiles deserve special mention. return percentiles, use quantile() defaults specify value(s) like probs =.","code":"\n# get default percentile values of age (0%, 25%, 50%, 75%, 100%)\nlinelist %>% \n  summarise(age_percentiles = quantile(age_years, na.rm = TRUE))##   age_percentiles\r\n## 1               0\r\n## 2               6\r\n## 3              13\r\n## 4              23\r\n## 5              84\n# get manually-specified percentile values of age (5%, 50%, 75%, 98%)\nlinelist %>% \n  summarise(\n    age_percentiles = quantile(\n      age_years,\n      probs = c(.05, 0.5, 0.75, 0.98), \n      na.rm=TRUE)\n    )##   age_percentiles\r\n## 1               1\r\n## 2              13\r\n## 3              23\r\n## 4              48"},{"path":"descriptive-tables.html","id":"on-aggregated-data","chapter":"1 Descriptive tables","heading":"On aggregated data","text":"begin aggregated data, use sum() data’s counts column. example, let’s say beginning data frame counts , called linelist_agg - shows “long” format case counts outcome gender.sum counts (e.g. column n) group can use summarise() set new column equal sum(n, na.rm=T).\r\nadd subset criteria sum operation, can use subset bracket [ ] syntax counts column create male female columns.","code":"##   outcome gender    n\r\n## 1   Death      f 1227\r\n## 2   Death      m 1228\r\n## 3 Recover      f  953\r\n## 4 Recover      m  950\nlinelist_agg %>% \n  group_by(outcome) %>% \n  summarise(\n    total_cases  = sum(n, na.rm=T),\n    male_cases   = sum(n[gender == \"m\"], na.rm=T),\n    female_cases = sum(n[gender == \"f\"], na.rm=T))## # A tibble: 2 x 4\r\n##   outcome total_cases male_cases female_cases\r\n##   <chr>         <int>      <int>        <int>\r\n## 1 Death          2455       1228         1227\r\n## 2 Recover        1903        950          953"},{"path":"descriptive-tables.html","id":"across-multiple-columns","chapter":"1 Descriptive tables","heading":"across() multiple columns","text":"can use summarise across multiple columns using across(). makes life easier want calculate statistics many columns. specify columns operate across, either:provide .cols = either vector column names c() select() semantic helper functions (explained )provide .fns = function perform (parenthese) - can provide multiple within list(), mean() applied several numeric columns. columns named, single function mean specified (parentheses). additional arguments function (e.g. na.rm=TRUE) provided afterwards.can difficult get order parentheses commas correct using across(). Remember within across() must include columns, functions, extra arguments needed functions.Multiple functions can run . functions mean sd provided .fns = within list(). opportunity provide character names (e.g. “mean” “sd”) appended new column names.select() helper functions can place within across():helper functions available assist specifying columns:everything() - columns mentionedlast_col() - last columnwhere() - applies function columns selects TRUEstarts_with() - matches specified prefix. Example: starts_with(\"date\")ends_with() - matches specified suffix. Example: ends_with(\"_end\")contains() - columns containing character string. Example: contains(\"time\")matches() - apply regular expression (regex). Example: contains(\"[pt]al\")num_range() -any_of() - matches column named. Useful name might exist. Example: any_of(date_onset, date_death, cardiac_arrest)example, return mean every numeric column. () command takes place vector column names c(). function additional arguments within across().","code":"\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),  # columns\n                   .fns = mean,                               # function\n                   na.rm=T))                                  # extra arguments## # A tibble: 3 x 5\r\n##   outcome age_years  temp wt_kg ht_cm\r\n##   <chr>       <dbl> <dbl> <dbl> <dbl>\r\n## 1 Death        15.9  38.6  52.6  125.\r\n## 2 Recover      16.1  38.6  52.5  125.\r\n## 3 <NA>         16.2  38.6  53.0  125.\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm), # columns\n                   .fns = list(\"mean\" = mean, \"sd\" = sd),    # multiple functions \n                   na.rm=T))                                 # extra arguments## # A tibble: 3 x 9\r\n##   outcome age_years_mean age_years_sd temp_mean temp_sd wt_kg_mean wt_kg_sd ht_cm_mean ht_cm_sd\r\n##   <chr>            <dbl>        <dbl>     <dbl>   <dbl>      <dbl>    <dbl>      <dbl>    <dbl>\r\n## 1 Death             15.9         12.3      38.6   0.962       52.6     18.4       125.     48.7\r\n## 2 Recover           16.1         13.0      38.6   0.997       52.5     18.6       125.     50.1\r\n## 3 <NA>              16.2         12.8      38.6   0.976       53.0     18.9       125.     50.4\nlinelist %>% \n  group_by(outcome) %>% \n  summarise(across(\n    .cols = where(is.numeric),  # all numeric columns in the data frame\n    .fns = mean,\n    na.rm=T))## # A tibble: 3 x 12\r\n##   outcome generation   age age_years   lon   lat wt_kg ht_cm ct_blood  temp   bmi days_onset_hosp\r\n##   <chr>        <dbl> <dbl>     <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> <dbl> <dbl>           <dbl>\r\n## 1 Death         16.7  15.9      15.9 -13.2  8.47  52.6  125.     21.3  38.6  45.6            1.84\r\n## 2 Recover       16.4  16.2      16.1 -13.2  8.47  52.5  125.     21.1  38.6  47.7            2.34\r\n## 3 <NA>          16.5  16.3      16.2 -13.2  8.47  53.0  125.     21.2  38.6  48.3            2.07"},{"path":"descriptive-tables.html","id":"pivot-wider","chapter":"1 Descriptive tables","heading":"Pivot wider","text":"prefer table “wide” format can transform using tidyr pivot_wider() function. likely need re-name columns rename(). information see page [Pivoting data].example begins “long” table age_by_outcome . new column names specified names_from = values specified come column n. column mentioned outcome, remains far left.","code":"\nage_by_outcome %>% \n  select(-percent) %>% \n  pivot_wider(names_from = age_cat, values_from = n)  ## # A tibble: 3 x 10\r\n## # Groups:   outcome [3]\r\n##   outcome `0-4` `5-9` `10-14` `15-19` `20-29` `30-49` `50-69` `70+`  `NA`\r\n##   <chr>   <int> <int>   <int>   <int>   <int>   <int>   <int> <int> <int>\r\n## 1 Death     471   476     438     323     477     329      33     3    32\r\n## 2 Recover   364   391     303     251     367     238      38     3    28\r\n## 3 <NA>      260   228     200     169     229     187      24    NA    26"},{"path":"descriptive-tables.html","id":"gtsummary-package","chapter":"1 Descriptive tables","heading":"gtsummary package","text":"want print summary statistics pretty, publication-ready graphic, can use gtsummary package function tbl_summary(). code can seem complex first, outputs look nice print RStudio Viewer panel HTML. Read vignette .introduce tbl_summary() show basic behavior first, actually produces large beautiful table. , examine detail make adjustments tailored tables.","code":""},{"path":"descriptive-tables.html","id":"summary-table","chapter":"1 Descriptive tables","heading":"Summary table","text":"default behavior tbl_summary() quite incredible - takes columns provide creates summary table one command. function prints statistics appropriate column class: median inter-quartile range (IQR) numeric columns, counts (%) categorical columns. Missing values converted “Unknown”. Footnotes added bottom explain statistics, total N shown top.\r\n          1\r\n          \r\n           \r\n          Median (IQR); n (%)\r\n          ","code":"\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>%  # keep only the columns of interest\n  tbl_summary()                                                  # default"},{"path":"descriptive-tables.html","id":"adjustments","chapter":"1 Descriptive tables","heading":"Adjustments","text":"Now explain function works make adjustments. key arguments detailed :=\r\ncan stratify table column (e.g. outcome), creating 2-way table.statistic =\r\nIndicate statistics show display equation. two sides equation, separated tilde ~. right quotes statistical display desired, left columns display apply.right side equation uses syntax str_glue() stringr (see [Characters Strings]), desired display string quotes statistics within curly brackets. can include statistics like “n” (counts), “N” (denominator), “mean”, “median”, “sd”, “max”, “min”, percentiles “p##” like “p25”, percent total “p”. See ?tbl_summary details.left side equation, can specify columns name (e.g. age c(age, gender)) using helpers all_continuous(), all_categorical(), contains(), starts_with(), etc.simple example statistic = equation might look like , print mean column age_years:\r\n          1\r\n          \r\n           \r\n          Mean\r\n          slightly complex equation might look like \"({min}, {max})\", incorporating max min values within parentheses separated comma:can also differentiate syntax separate columns types columns. complex example , value provided statistc = list indicating continuous columns table print mean standard deviation parentheses, categorical columns print n, denominator, percent.digits =\r\nAdjust digits rounding. Optionally, can specified continuous columns ().label =\r\nAdjust column name displayed. Provide column name desired label separated tilde. default column name.missing_text =\r\nAdjust missing values displayed. default “Unknown”.type =\r\nused adjust many levels statistics shown. syntax similar statistic = provide equation columns left value right. Two common scenarios include:type = all_categorical() ~ \"categorical\" Forces dichotomous columns (e.g. fever) show levels instead “yes” rowtype = all_continuous() ~ \"continuous2\" Allows multi-line statistics per variable, shown later sectionIn example , arguments used modify original summary table:\r\n          1\r\n          \r\n           \r\n          Mean (SD); n / N (%)\r\n          ","code":"\nlinelist %>% \n  select(age_years) %>%         # keep only columns of interest \n  tbl_summary(                  # create summary table\n    statistic = age_years ~ \"{mean}\") # print mean of age\nlinelist %>% \n  select(age_years) %>%                       # keep only columns of interest \n  tbl_summary(                                # create summary table\n    statistic = age_years ~ \"({min}, {max})\") # print min and max of age\nlinelist %>% \n  select(age_years, gender, outcome, fever, temp, hospital) %>% # keep only columns of interest\n  tbl_summary(     \n    by = outcome,                                               # stratify entire table by outcome\n    statistic = list(all_continuous() ~ \"{mean} ({sd})\",        # stats and format for continuous columns\n                     all_categorical() ~ \"{n} / {N} ({p}%)\"),   # stats and format for categorical columns\n    digits = all_continuous() ~ 1,                              # rounding for continuous columns\n    type   = all_categorical() ~ \"categorical\",                 # force all categorical levels to display\n    label  = list(                                              # display labels for column names\n      outcome   ~ \"Outcome\",                           \n      age_years ~ \"Age (years)\",\n      gender    ~ \"Gender\",\n      temp      ~ \"Temperature\",\n      hospital  ~ \"Hospital\"),\n    missing_text = \"Missing\"                                    # how missing values should display\n  )## 1323 observations missing `outcome` have been removed. To include these observations, use `forcats::fct_explicit_na()` on `outcome` column before passing to `tbl_summary()`."},{"path":"descriptive-tables.html","id":"multi-line-stats-for-continuous-variables","chapter":"1 Descriptive tables","heading":"Multi-line stats for continuous variables","text":"want print multiple lines statistics continuous variables, can indicate setting type = “continuous2”. can combine previously shown elements one table choosing statistics want show. need tell function want get table back entering type “continuous2”. number missing values shown “Unknown”.many ways modify tables, including adding p-values, adjusting color headings, etc. Many described documentation (enter ?tbl_summary Console), given section statistical tests.","code":"\nlinelist %>% \n  select(age_years, temp) %>%                      # keep only columns of interest\n  tbl_summary(                                     # create summary table\n    type = all_continuous() ~ \"continuous2\",       # indicate that you want to print multiple statistics \n    statistic = all_continuous() ~ c(\n      \"{mean} ({sd})\",                             # line 1: mean and SD\n      \"{median} ({p25}, {p75})\",                   # line 2: median and IQR\n      \"{min}, {max}\")                              # line 3: min and max\n    )"},{"path":"descriptive-tables.html","id":"base-r","chapter":"1 Descriptive tables","heading":"base R","text":"can use function table() tabulate cross-tabulate columns. Unlike options , must specify dataframe, shown .CAUTION: NA (missing) values tabulated unless include argument useNA = \"always\" (also set “” “ifany”).Multiple columns can cross-tabulated listing one , separated commas. Optionally, can assign column “name” like Outcome = linelist$outcome.","code":"\ntable(linelist$outcome, useNA = \"always\")## \r\n##   Death Recover    <NA> \r\n##    2582    1983    1323\nage_by_outcome <- table(linelist$age_cat, linelist$outcome, useNA = \"always\") # save table as object\nage_by_outcome   # print table##        \r\n##         Death Recover <NA>\r\n##   0-4     471     364  260\r\n##   5-9     476     391  228\r\n##   10-14   438     303  200\r\n##   15-19   323     251  169\r\n##   20-29   477     367  229\r\n##   30-49   329     238  187\r\n##   50-69    33      38   24\r\n##   70+       3       3    0\r\n##   <NA>     32      28   26"},{"path":"descriptive-tables.html","id":"proportions-1","chapter":"1 Descriptive tables","heading":"Proportions","text":"return proportions, passing table function prop.table(). Use margins = argument specify whether want proportions rows (1), columns (2), whole table (3). clarity, pipe table round() function base R, specifying 2 digits.","code":"\n# get proportions of table defined above, by rows, rounded\nprop.table(age_by_outcome, 1) %>% round(2)##        \r\n##         Death Recover <NA>\r\n##   0-4    0.43    0.33 0.24\r\n##   5-9    0.43    0.36 0.21\r\n##   10-14  0.47    0.32 0.21\r\n##   15-19  0.43    0.34 0.23\r\n##   20-29  0.44    0.34 0.21\r\n##   30-49  0.44    0.32 0.25\r\n##   50-69  0.35    0.40 0.25\r\n##   70+    0.50    0.50 0.00\r\n##   <NA>   0.37    0.33 0.30"},{"path":"descriptive-tables.html","id":"totals","chapter":"1 Descriptive tables","heading":"Totals","text":"add row column totals, pass table addmargins(). works counts proportions.","code":"\naddmargins(age_by_outcome)##        \r\n##         Death Recover <NA>  Sum\r\n##   0-4     471     364  260 1095\r\n##   5-9     476     391  228 1095\r\n##   10-14   438     303  200  941\r\n##   15-19   323     251  169  743\r\n##   20-29   477     367  229 1073\r\n##   30-49   329     238  187  754\r\n##   50-69    33      38   24   95\r\n##   70+       3       3    0    6\r\n##   <NA>     32      28   26   86\r\n##   Sum    2582    1983 1323 5888"},{"path":"descriptive-tables.html","id":"convert-to-data-frame","chapter":"1 Descriptive tables","heading":"Convert to data frame","text":"Converting table() object directly data frame straight-forward. One approach demonstrated :Create table, without using useNA = \"always\". Instead convert NA values “(Missing)” fct_explicit_na() forcats.Add totals (optional) piping addmargins()Pipe base R function .data.frame.matrix()Pipe table dplyr function add_rownames(), specifying name first columnPrint, View, export desired. example use flextable() package flextable described [Tables] page. print RStudio viewer pane pretty HTML.Age CategoryDeathRecover(Missing)Sum0-4471.0364.0260.01,095.05-9476.0391.0228.01,095.010-14438.0303.0200.0941.015-19323.0251.0169.0743.020-29477.0367.0229.01,073.030-49329.0238.0187.0754.050-6933.038.024.095.070+3.03.00.06.0(Missing)32.028.026.086.0Sum2,582.01,983.01,323.05,888.0","code":"\ntable(fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>% \n  addmargins() %>% \n  as.data.frame.matrix() %>% \n  dplyr::add_rownames(var = \"Age Category\") %>% \n  flextable::flextable()"},{"path":"descriptive-tables.html","id":"resources","chapter":"1 Descriptive tables","heading":"1.4 Resources","text":"Much information page adapted resources vignettes online:gtsummary\r\ndplyr","code":""}]
