[{"path":"index.html","id":"welcome---this-is-a-draft","chapter":"Welcome - THIS IS A DRAFT","heading":"Welcome - THIS IS A DRAFT","text":"","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"About this handbook","text":"free open-access R reference guide intended applied epidemiologists.book strives :Serve quick reference guide - textbookAddress common epidemiological problems via task-centered examplesBe accessible settings limited technical support low internet-connectivity (downloadable version)Contain clear simple language, step--step instructions many commentsBe living document, growing adapting new best practicesWhat gaps book address?Many epidemiologists formal training R data science, transitioning R SAS, STATA, statistical software.R universe changes frequently - place best practice code catered toward common epidemiologist user.Epidemiologists often must read dozens online forum pages answers, epidemiology-oriented.epidemiologists work low internet-connectivity environments limited technical support.different R books?handbook written epidemiologists, epidemiologists. Examples taken lived experience local, national, academic, emergency settings. book also offered download-able format bring settings unreliable internet.\r\naddition core R concepts tools, book covers:epidemic curvestransmission chains epidemic modelingage sex pyramidsage sex standardizationprobabilistic matching records name similarity, age, sex, birthdate, etc.outbreak detection methodssurvey analysiscausal diagramssurvival analysisGIS basicsphylogenetic treesmissing data imputationautomated routine reports Rmarkdown","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “clipboard” “copy” icon copy codeSee “Resources” section page links trainingClick download offline versionIf use handbook suggestions, let us know SURVEY LINK!","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"Welcome - THIS IS A DRAFT","heading":"Edit or contribute","text":"suggestions want contribute content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome - THIS IS A DRAFT","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"Welcome - THIS IS A DRAFT","heading":"Contributors","text":"handbook collaborative team production. conceived, written, edited epidemiologists public health practitioners around world, drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), UNHCR, WFP, hospital systems, academic institutions.team members:Editor--Chief:Editorial core team: …(list)…Authors: …(list)…Reviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"Welcome - THIS IS A DRAFT","heading":"Funding and programmatic support","text":"Training Programs Epidemiology Public Health Interventions Network (TEPHINET)EPIET Alumni Network (EAN)","code":""},{"path":"index.html","id":"data-sources","chapter":"Welcome - THIS IS A DRAFT","heading":"Data sources","text":"linelist used much handbook adapted simulated Ebola outbreak linelist outbreaks package","code":""},{"path":"index.html","id":"inspiration","chapter":"Welcome - THIS IS A DRAFT","heading":"Inspiration","text":"“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R Markdown\r\nspecific tutorials vignettes credited relevant pages","code":""},{"path":"index.html","id":"image-credits","chapter":"Welcome - THIS IS A DRAFT","heading":"Image credits","text":"Logo: CDC Public Health Image library, R Graph Gallery2013 Yemen looking mosquito breeding sitesEbola virusSurvey RajasthanNetwork","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"Welcome - THIS IS A DRAFT","heading":"License and Terms of Use","text":"handbook approved product specific organization. Although strive accuracy, provide guarantee content book.book licensed Creative Commons license TBD…","code":""},{"path":"epidemicmodels.html","id":"epidemicmodels","chapter":"1 Epidemic modeling","heading":"1 Epidemic modeling","text":"","code":""},{"path":"epidemicmodels.html","id":"overview","chapter":"1 Epidemic modeling","heading":"1.1 Overview","text":"exists growing body tools epidemic modelling lets us conduct\r\nfairly complex analyses minimal effort. section provide \r\noverview use tools :estimate effective reproduction number Rt related statistics\r\ndoubling timeproduce short-term projections future incidenceIt intended overview methodologies statistical methods\r\nunderlying tools, please refer Resources tab links \r\npapers covering . Make sure understanding \r\nmethods using tools; ensure can accurately\r\ninterpret results.example one outputs ’ll producing section.","code":"## Installing package into 'C:/Users/Neale/OneDrive - Neale Batra/Documents/R/win-library/4.0'\r\n## (as 'lib' is unspecified)## also installing the dependencies 'formatR', 'lambda.r', 'futile.options', 'R.oo', 'R.methodsS3', 'inline', 'RcppParallel', 'loo', 'futile.logger', 'future.apply', 'progressr', 'R.utils', 'rstan', 'runner', 'StanHeaders'## Warning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.0:\r\n##   cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.0/PACKAGES'## package 'formatR' successfully unpacked and MD5 sums checked\r\n## package 'lambda.r' successfully unpacked and MD5 sums checked\r\n## package 'futile.options' successfully unpacked and MD5 sums checked\r\n## package 'R.oo' successfully unpacked and MD5 sums checked\r\n## package 'R.methodsS3' successfully unpacked and MD5 sums checked\r\n## package 'inline' successfully unpacked and MD5 sums checked\r\n## package 'RcppParallel' successfully unpacked and MD5 sums checked\r\n## package 'loo' successfully unpacked and MD5 sums checked\r\n## package 'futile.logger' successfully unpacked and MD5 sums checked\r\n## package 'future.apply' successfully unpacked and MD5 sums checked\r\n## package 'progressr' successfully unpacked and MD5 sums checked\r\n## package 'R.utils' successfully unpacked and MD5 sums checked\r\n## package 'rstan' successfully unpacked and MD5 sums checked\r\n## package 'runner' successfully unpacked and MD5 sums checked\r\n## package 'StanHeaders' successfully unpacked and MD5 sums checked\r\n## package 'EpiNow2' successfully unpacked and MD5 sums checked\r\n## \r\n## The downloaded binary packages are in\r\n##  C:\\Users\\Neale\\AppData\\Local\\Temp\\Rtmp6l4Ulu\\downloaded_packages## \r\n## EpiNow2 installed## Warning: package 'EpiNow2' was built under R version 4.0.3## Installing package into 'C:/Users/Neale/OneDrive - Neale Batra/Documents/R/win-library/4.0'\r\n## (as 'lib' is unspecified)## Warning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.0:\r\n##   cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.0/PACKAGES'## package 'projections' successfully unpacked and MD5 sums checked\r\n## \r\n## The downloaded binary packages are in\r\n##  C:\\Users\\Neale\\AppData\\Local\\Temp\\Rtmp6l4Ulu\\downloaded_packages## \r\n## projections installed## Warning: package 'projections' was built under R version 4.0.3"},{"path":"epidemicmodels.html","id":"preparation","chapter":"1 Epidemic modeling","heading":"1.2 Preparation","text":"use two different methods packages Rt estimation,\r\nnamely EpiNow EpiEstim, well projections package \r\nforecasting case incidence.use standard, cleaned linelist analyses section.","code":"\npacman::p_load(\n   rio,          # File import\n   here,         # File locator\n   tidyverse,    # Data management + ggplot2 graphics\n   epicontacts,  # Analysing transmission networks\n   EpiNow2,      # Rt estimation\n   EpiEstim,     # Rt estimation\n   projections,  # Incidence projections\n   incidence,    # Handling incidence data\n   epitrix,      # Useful epi functions\n   distcrete     # Discrete delay distributions\n)\n# import the cleaned linelist\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"epidemicmodels.html","id":"estimating-rt","chapter":"1 Epidemic modeling","heading":"1.3 Estimating Rt","text":"","code":""},{"path":"epidemicmodels.html","id":"epinow2-vs.-epiestim","chapter":"1 Epidemic modeling","heading":"1.3.1 EpiNow2 vs. EpiEstim","text":"reproduction number R measure transmissibility disease \r\ndefined expected number secondary cases per infected case. \r\nfully susceptible population, value represents basic reproduction\r\nnumber R0. However, number susceptible individuals \r\npopulation changes course outbreak pandemic, various\r\nresponse measures implemented, commonly used measure \r\ntransmissibility effective reproduction number Rt; \r\ndefined expected number secondary cases per infected case given\r\ntime t.EpiNow2 package provides sophisticated framework estimating\r\nRt. two key advantages commonly used package,\r\nEpiEstim:accounts delays reporting can therefore estimate Rt\r\neven recent data incomplete.estimates Rt dates infection rather dates \r\nonset reporting, means effect intervention \r\nimmediately reflected change Rt, rather \r\ndelay.However, also two key disadvantages:requires knowledge generation time distribution (.e. distribution\r\ndelays infection primary secondary cases), incubation\r\nperiod distribution (.e. distribution delays infection symptom\r\nonset) delay distribution relevant data (e.g. \r\ndates reporting, require distribution delays symptom\r\nonset reporting). allow accurate estimation \r\nRt, EpiEstim requires serial interval distribution\r\n(.e. distribution delays symptom onset primary \r\nsecondary case), may distribution available .EpiNow2 significantly slower EpiEstim, anecdotally factor\r\n100-1000! example, estimating Rt sample outbreak\r\nconsidered section takes four hours (run large\r\nnumber iterations ensure high accuracy probably reduced \r\nnecessary, however points stands algorithm slow \r\ngeneral). may unfeasible regularly updating \r\nRt estimates.package choose use therefore depend data, time \r\ncomputational resources available .","code":""},{"path":"epidemicmodels.html","id":"epinow2","chapter":"1 Epidemic modeling","heading":"1.3.2 EpiNow2","text":"","code":""},{"path":"epidemicmodels.html","id":"estimating-delay-distributions","chapter":"1 Epidemic modeling","heading":"1.3.2.1 Estimating delay distributions","text":"delay distributions required run EpiNow2 depend data \r\n. Essentially, need able describe delay date \r\ninfection date event want use estimate Rt. \r\nusing dates onset, simply incubation period\r\ndistribution. using dates reporting, require \r\ndelay infection reporting. distribution unlikely known\r\ndirectly, EpiNow2 lets chain multiple delay distributions together; \r\ncase, delay infection symptom onset (e.g. incubation\r\nperiod, likely known) symptom onset reporting (\r\ncan often estimate data).dates onset cases example linelist, \r\nrequire incubation period distribution link data (e.g. dates \r\nsymptom onset) date infection. can either estimate distribution\r\ndata use values literature.literature estimate incubation period Ebola (taken\r\npaper) \r\nmean 9.1, standard deviation 7.3 maximum value 30 \r\nspecified follows:Note EpiNow2 requires delay distributions provided log\r\nscale, hence log call around value (except max parameter ,\r\nconfusingly, provided natural scale). mean_sd sd_sd\r\ndefine standard deviation mean standard deviation estimates. \r\nknown case, choose fairly arbitrary value 0.1.analysis, instead estimate incubation period distribution\r\nlinelist using function bootstrapped_dist_fit, \r\nfit lognormal distribution observed delays infection onset\r\nlinelist.distribution require generation time. data \r\ninfection times transmission links, can estimate \r\ndistribution linelist calculating delay infection times\r\ninfector-infectee pairs. , use handy get_pairwise function\r\npackage epicontacts, allows us calculate pairwise\r\ndifferences linelist properties transmission pairs. first create \r\nepicontacts object (see Transmission chains chapter \r\ndetails):fit difference infection times transmission pairs,\r\ncalculated using get_pairwise, gamma distribution:","code":"\nincubation_period_lit <- list(\n  mean = log(9.1),\n  mean_sd = log(0.1),\n  sd = log(7.3),\n  sd_sd = log(0.1),\n  max = 30\n)\n## estimate incubation period\nincubation_period <- bootstrapped_dist_fit(\n  linelist$date_onset - linelist$date_infection,\n  dist = \"lognormal\",\n  max_value = 100,\n  bootstraps = 1\n)\n## generate contacts\ncontacts <- linelist %>%\n  transmute(\n    from = infector,\n    to = case_id\n  ) %>%\n  drop_na()\n\n## generate epicontacts object\nepic <- make_epicontacts(\n  linelist = linelist,\n  contacts = contacts, \n  directed = TRUE\n)\n## estimate gamma generation time\ngeneration_time <- bootstrapped_dist_fit(\n  get_pairwise(epic, \"date_infection\"),\n  dist = \"gamma\",\n  max_value = 20,\n  bootstraps = 1\n)"},{"path":"epidemicmodels.html","id":"running-epinow2","chapter":"1 Epidemic modeling","heading":"1.3.2.2 Running EpiNow2","text":"Now just need calculate daily incidence linelist, can \r\neasily dplyr functions group_by() n(). Note\r\nEpiNow2 requires column names date confirm.can estimate Rt using epinow function. notes \r\ninputs:can provide number ‘chained’ delay distributions delays\r\nargument; simply insert alongside incubation_period object\r\nwithin delay_opts function.return_output ensures output returned within R just saved \r\nfile.verbose specifies want readout progress.horizon indicates many days want project future incidence .pass additional options stan argument specify long\r\nwant run inference . Increasing samples chains give\r\naccurate estimate better characterises uncertainty, however\r\ntake longer run.","code":"\n## get incidence from onset dates\ncases <- linelist %>%\n  group_by(date = date_onset) %>%\n  summarise(confirm = n())\n## run epinow\nepinow_res <- epinow(\n  reported_cases = cases,\n  generation_time = generation_time,\n  delays = delay_opts(incubation_period),\n  return_output = TRUE,\n  verbose = TRUE,\n  horizon = 21,\n  stan = stan_opts(samples = 750, chains = 4)\n)"},{"path":"epidemicmodels.html","id":"analysing-outputs","chapter":"1 Epidemic modeling","heading":"1.3.2.3 Analysing outputs","text":"code finished running, can plot summary easily follows:can also look various summary statistics:analyses custom plotting, can access summarised daily\r\nestimates via $estimates$summarised. convert default\r\ndata.table tibble ease use dplyr.example, let’s make plot doubling time Rt. \r\nlook first months outbreak Rt well\r\none, avoid plotting extremely high doublings times.use formula log(2)/growth_rate calculate doubling time \r\nestimated growth rate.","code":"\n## plot summary figure\nplot(epinow_res)\n## summary table\nepinow_res$summary##                                  measure                  estimate   numeric_estimate\r\n## 1: New confirmed cases by infection date                4 (2 -- 6)  <data.table[1x9]>\r\n## 2:        Expected change in daily cases                    Unsure 0.5600000000000001\r\n## 3:            Effective reproduction no.        0.88 (0.73 -- 1.1)  <data.table[1x9]>\r\n## 4:                        Rate of growth -0.012 (-0.028 -- 0.0052)  <data.table[1x9]>\r\n## 5:          Doubling/halving time (days)          -60 (130 -- -25)  <data.table[1x9]>\n## extract summary and convert to tibble\nestimates <- as_tibble(epinow_res$estimates$summarised)\nestimates\n## make wide df for median plotting\ndf_wide <- estimates %>%\n  filter(\n    variable %in% c(\"growth_rate\", \"R\"),\n    date < as.Date(\"2014-09-01\")\n  ) %>%\n  ## convert growth rates to doubling times\n  mutate(\n    across(\n      c(median, lower_90:upper_90),\n      ~ case_when(\n        variable == \"growth_rate\" ~ log(2)/.x,\n        TRUE ~ .x\n      )\n    ),\n    ## rename variable to reflect transformation\n    variable = replace(variable, variable == \"growth_rate\", \"doubling_time\")\n  )\n\n## make long df for quantile plotting\ndf_long <- df_wide %>%\n  ## here we match matching quantiles (e.g. lower_90 to upper_90)\n  pivot_longer(\n    lower_90:upper_90,\n    names_to = c(\".value\", \"quantile\"),\n    names_pattern = \"(.+)_(.+)\"\n  )\n\n## make plot\nggplot() +\n  geom_ribbon(\n    data = df_long,\n    aes(x = date, ymin = lower, ymax = upper, alpha = quantile),\n    color = NA\n  ) +\n  geom_line(\n    data = df_wide,\n    aes(x = date, y = median)\n  ) +\n  ## use label_parsed to allow subscript label\n  facet_wrap(\n    ~ variable,\n    ncol = 1,\n    scales = \"free_y\",\n    labeller = as_labeller(c(R = \"R[t]\", doubling_time = \"Doubling~time\"), label_parsed),\n    strip.position = 'left'\n  ) +\n  ## manually define quantile transparency\n  scale_alpha_manual(\n    values = c(`20` = 0.7, `50` = 0.4, `90` = 0.2),\n    labels = function(x) paste0(x, \"%\")\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    alpha = \"Credibel\\ninterval\"\n  ) +\n  scale_x_date(\n    date_breaks = \"1 month\",\n    date_labels = \"%b %d\\n%Y\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    strip.background = element_blank(),\n    strip.placement = 'outside'\n  )"},{"path":"epidemicmodels.html","id":"epiestim","chapter":"1 Epidemic modeling","heading":"1.3.3 EpiEstim","text":"run EpiEstim, need provide data daily incidence specify \r\nserial interval (.e. distribution delays symptom onset \r\nprimary secondary cases).Incidence data can provided vector, dataframe incidence\r\nobject incidence package, can even distinguish imports\r\nlocally acquired infections; see documentation ?estimate_R \r\ndetails. create incidence object:package provides several options specifying serial interval, \r\ndetails provided documentation ?estimate_R. \r\ncover two .","code":"\n## get incidence from onset date\ncases <- incidence(linelist$date_onset)"},{"path":"epidemicmodels.html","id":"using-serial-interval-estimates-from-the-literature","chapter":"1 Epidemic modeling","heading":"1.3.3.1 Using serial interval estimates from the literature","text":"Using option method = \"parametric_si\", can manually specify mean \r\nstandard deviation serial interval config object created using \r\nfunction make_config. use mean standard deviation 12.0 5.2, respectively, defined \r\npaper:can estimate Rt estimate_R function:plot summary outputs:","code":"\n## make config\nconfig_lit <- make_config(\n  mean_si = 12.0,\n  std_si = 5.2\n)\nepiestim_res_lit <- estimate_R(\n  incid = cases,\n  method = \"parametric_si\",\n  config = config_lit\n)## Default config will estimate R on weekly sliding windows.\r\n##     To change this change the t_start and t_end arguments.\nplot(epiestim_res_lit)"},{"path":"epidemicmodels.html","id":"using-serial-interval-estimates-from-the-data","chapter":"1 Epidemic modeling","heading":"1.3.3.2 Using serial interval estimates from the data","text":"data dates symptom onset transmission links, can\r\nalso estimate serial interval linelist calculating delay\r\nonset dates infector-infectee pairs. EpiNow2\r\nsection, use get_pairwise function epicontacts\r\npackage, allows us calculate pairwise differences linelist\r\nproperties transmission pairs. first create epicontacts object\r\n(see Transmission chains chapter details):fit difference onset dates transmission pairs, calculated\r\nusing get_pairwise, gamma distribution. use handy fit_disc_gamma\r\nepitrix package fitting procedure, require \r\ndiscretised distribution.pass information config object, run EpiEstim\r\nplot results:","code":"\n## generate contacts\ncontacts <- linelist %>%\n  transmute(\n    from = infector,\n    to = case_id\n  ) %>%\n  drop_na()\n\n## generate epicontacts object\nepic <- make_epicontacts(\n  linelist = linelist,\n  contacts = contacts, \n  directed = TRUE\n)\n## estimate gamma serial interval\nserial_interval <- fit_disc_gamma(get_pairwise(epic, \"date_onset\"))\n## make config\nconfig_emp <- make_config(\n  mean_si = serial_interval$mu,\n  std_si = serial_interval$sd\n)\n\n## run epiestim\nepiestim_res_emp <- estimate_R(\n  incid = cases,\n  method = \"parametric_si\",\n  config = config_emp\n)## Default config will estimate R on weekly sliding windows.\r\n##     To change this change the t_start and t_end arguments.\n## plot outputs\nplot(epiestim_res_emp)"},{"path":"epidemicmodels.html","id":"specifying-estimation-time-windows","chapter":"1 Epidemic modeling","heading":"1.3.3.3 Specifying estimation time windows","text":"default options provide weekly sliding estimate might \r\nwarning estimating Rt early outbreak \r\nprecise estimate. can change setting later start date \r\nestimation shown . Unfortunately, EpiEstim provides \r\nclunky way specifying estimations times, provide \r\nvector integers referring start end dates time\r\nwindow.Now re-run EpiEstim can see estimates start June:","code":"\n## define a vector of dates starting on June 1st\nstart_dates <- seq.Date(\n  as.Date(\"2014-06-01\"),\n  max(cases$dates) - 7,\n  by = 1\n) %>%\n  ## subtract the starting date to convert to numeric\n  `-`(min(cases$dates)) %>%\n  ## convert to integer\n  as.integer()\n\n## add six days for a one week sliding window\nend_dates <- start_dates + 6\n  \n## make config\nconfig_partial <- make_config(\n  mean_si = 12.0,\n  std_si = 5.2,\n  t_start = start_dates,\n  t_end = end_dates\n)\n## run epiestim\nepiestim_res_partial <- estimate_R(\n  incid = cases,\n  method = \"parametric_si\",\n  config = config_partial\n)\n\n## plot outputs\nplot(epiestim_res_partial)"},{"path":"epidemicmodels.html","id":"analysing-outputs-1","chapter":"1 Epidemic modeling","heading":"1.3.3.4 Analysing outputs","text":"main outputs can access via $R. example, create plot \r\nRt measure “transmission potential” given product \r\nRt number cases reported day; represents \r\nexpected number cases next generation infection.","code":"\n## make wide dataframe for median\ndf_wide <- epiestim_res_lit$R %>%\n  rename_all(clean_labels) %>%\n  rename(\n    lower_95_r = quantile_0_025_r,\n    lower_90_r = quantile_0_05_r,\n    lower_50_r = quantile_0_25_r,\n    upper_50_r = quantile_0_75_r,\n    upper_90_r = quantile_0_95_r,\n    upper_95_r = quantile_0_975_r,\n    ) %>%\n  mutate(\n    ## extract the median date from t_start and t_end\n    dates = epiestim_res_emp$dates[round(map2_dbl(t_start, t_end, median))],\n    var = \"R[t]\"\n  ) %>%\n  ## merge in daily incidence data\n  left_join(as.data.frame(cases), \"dates\") %>%\n  ## calculate risk across all r estimates\n  mutate(\n    across(\n      lower_95_r:upper_95_r,\n      ~ .x*counts,\n      .names = \"{str_replace(.col, '_r', '_risk')}\"\n    )\n  ) %>%\n  ## seperate r estimates and risk estimates\n  pivot_longer(\n    contains(\"median\"),\n    names_to = c(\".value\", \"variable\"),\n    names_pattern = \"(.+)_(.+)\"\n  ) %>%\n  ## assign factor levels\n  mutate(variable = factor(variable, c(\"risk\", \"r\")))\n\n## make long dataframe from quantiles\ndf_long <- df_wide %>%\n  select(-variable, -median) %>%\n  ## seperate r/risk estimates and quantile levels\n  pivot_longer(\n    contains(c(\"lower\", \"upper\")),\n    names_to = c(\".value\", \"quantile\", \"variable\"),\n    names_pattern = \"(.+)_(.+)_(.+)\"\n  ) %>%\n  mutate(variable = factor(variable, c(\"risk\", \"r\")))\n\n## make plot\nggplot() +\n  geom_ribbon(\n    data = df_long,\n    aes(x = dates, ymin = lower, ymax = upper, alpha = quantile),\n    color = NA\n  ) +\n  geom_line(\n    data = df_wide,\n    aes(x = dates, y = median),\n    alpha = 0.2\n  ) +\n  ## use label_parsed to allow subscript label\n  facet_wrap(\n    ~ variable,\n    ncol = 1,\n    scales = \"free_y\",\n    labeller = as_labeller(c(r = \"R[t]\", risk = \"Transmission~potential\"), label_parsed),\n    strip.position = 'left'\n  ) +\n  ## manually define quantile transparency\n  scale_alpha_manual(\n    values = c(`50` = 0.7, `90` = 0.4, `95` = 0.2),\n    labels = function(x) paste0(x, \"%\")\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    alpha = \"Credible\\ninterval\"\n  ) +\n  scale_x_date(\n    date_breaks = \"1 month\",\n    date_labels = \"%b %d\\n%Y\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    strip.background = element_blank(),\n    strip.placement = 'outside'\n  )"},{"path":"epidemicmodels.html","id":"projecting-incidence","chapter":"1 Epidemic modeling","heading":"1.4 Projecting incidence","text":"","code":""},{"path":"epidemicmodels.html","id":"epinow2-1","chapter":"1 Epidemic modeling","heading":"1.4.1 EpiNow2","text":"Besides estimating Rt, EpiNow2 also supports forecasting \r\nRt projections case numbers integration \r\nEpiSoon package hood. need specify horizon\r\nargument epinow function call, indicating many days want \r\nproject future; see EpiNow2 section “Estimating\r\nRt” details get EpiNow2 running. \r\nsection, just plot outputs analysis, stored \r\nepinow_res object.","code":"\n## define minimum date for plot\nmin_date <- as.Date(\"2015-03-01\")\n\n## extract summarised estimates\nestimates <-  as_tibble(epinow_res$estimates$summarised)\n\n## extract raw data on case incidence\nobservations <- as_tibble(epinow_res$estimates$observations) %>%\n  filter(date > min_date)\n\n## extract forecasted estimates of case numbers\ndf_wide <- estimates %>%\n  filter(\n    variable == \"reported_cases\",\n    type == \"forecast\",\n    date > min_date\n  )\n\n## convert to even longer format for quantile plotting\ndf_long <- df_wide %>%\n  ## here we match matching quantiles (e.g. lower_90 to upper_90)\n  pivot_longer(\n    lower_90:upper_90,\n    names_to = c(\".value\", \"quantile\"),\n    names_pattern = \"(.+)_(.+)\"\n  )\n\n## make plot\nggplot() +\n  geom_histogram(\n    data = observations,\n    aes(x = date, y = confirm),\n    stat = 'identity',\n    binwidth = 1\n  ) +\n  geom_ribbon(\n    data = df_long,\n    aes(x = date, ymin = lower, ymax = upper, alpha = quantile),\n    color = NA\n  ) +\n  geom_line(\n    data = df_wide,\n    aes(x = date, y = median)\n  ) +\n  geom_vline(xintercept = min(df_long$date), linetype = 2) +\n  ## manually define quantile transparency\n  scale_alpha_manual(\n    values = c(`20` = 0.7, `50` = 0.4, `90` = 0.2),\n    labels = function(x) paste0(x, \"%\")\n  ) +\n  labs(\n    x = NULL,\n    y = \"Daily reported cases\",\n    alpha = \"Credible\\ninterval\"\n  ) +\n  scale_x_date(\n    date_breaks = \"1 month\",\n    date_labels = \"%b %d\\n%Y\"\n  ) +\n  theme_minimal(base_size = 14)"},{"path":"epidemicmodels.html","id":"projections","chapter":"1 Epidemic modeling","heading":"1.4.2 projections","text":"projections package developed RECON makes easy make short\r\nterm incidence forecasts, requiring knowledge effective reproduction\r\nnumber Rt serial interval. cover use\r\nserial interval estimates literature use estimates\r\nlinelist.","code":""},{"path":"epidemicmodels.html","id":"using-serial-interval-estimates-from-the-literature-1","chapter":"1 Epidemic modeling","heading":"1.4.2.1 Using serial interval estimates from the literature","text":"projections requires discretised serial interval distribution class\r\ndistcrete package distcrete. use gamma distribution\r\nmean 12.0 standard deviation 5.2 defined \r\npaper. \r\nconvert values shape scale parameters required gamma\r\ndistribution, use function gamma_mucv2shapescale \r\nepitrix package.quick check make sure serial interval looks correct. \r\naccess density gamma distribution just defined $d, \r\nequivalent calling dgamma:","code":"\n## get shape and scale parameters from the mean mu and the coefficient of\n## variation (e.g. the ratio of the standard deviation to the mean)\nshapescale <- epitrix::gamma_mucv2shapescale(mu = 12.0, cv = 5.2/12)\n\n## make distcrete object\nserial_interval_lit <- distcrete::distcrete(\n  name = \"gamma\",\n  interval = 1,\n  shape = shapescale$shape,\n  scale = shapescale$scale\n)\n## check to make sure the serial interval looks correct\nqplot(\n  x = 0:50, y = serial_interval_lit$d(0:50), geom = \"area\",\n  xlab = \"Serial interval\", ylab = \"Density\"\n)"},{"path":"epidemicmodels.html","id":"using-serial-interval-estimates-from-the-data-1","chapter":"1 Epidemic modeling","heading":"1.4.2.2 Using serial interval estimates from the data","text":"data dates symptom onset transmission links, can\r\nalso estimate serial interval linelist calculating delay\r\nonset dates infector-infectee pairs. EpiNow2\r\nsection, use get_pairwise function epicontacts\r\npackage, allows us calculate pairwise differences linelist\r\nproperties transmission pairs. first create epicontacts object\r\n(see Transmission chains chapter details):fit difference onset dates transmission pairs, calculated\r\nusing get_pairwise, gamma distribution. use handy fit_disc_gamma\r\nepitrix package fitting procedure, require \r\ndiscretised distribution.","code":"\n## generate contacts\ncontacts <- linelist %>%\n  transmute(\n    from = infector,\n    to = case_id\n  ) %>%\n  drop_na()\n\n## generate epicontacts object\nepic <- make_epicontacts(\n  linelist = linelist,\n  contacts = contacts, \n  directed = TRUE\n)\n## estimate gamma serial interval\nserial_interval <- fit_disc_gamma(get_pairwise(epic, \"date_onset\"))\n\n## inspect estimate\nserial_interval[c(\"mu\", \"sd\")]## $mu\r\n## [1] 11.42459611835102\r\n## \r\n## $sd\r\n## [1] 7.619218456174097"},{"path":"epidemicmodels.html","id":"projecting-incidence-1","chapter":"1 Epidemic modeling","heading":"1.4.2.3 Projecting incidence","text":"project future incidence, still need provide historical incidence \r\nform incidence object, well sample plausible\r\nRt values. generate values using Rt\r\nestimates generated EpiEstim previous section (“Estimating\r\nRt”) stored epiestim_res_emp object. code ,\r\nextract mean standard deviation estimates Rt \r\nlast time window outbreak (using tail function access last\r\nelement vector), simulate 1000 values gamma distribution using\r\nrgamma. can also provide vector Rt values \r\nwant use forward projections.use project function make actual forecast. specify \r\nmany days want project via n_days arguments, specify \r\nnumber simulations using n_sim argument.can handily plot incidence projections using plot \r\nadd_projections functions. can easily subset incidence object \r\nshow recent cases using square bracket operator.can also easily extract raw estimates daily case numbers \r\nconverting output dataframe.","code":"\n## create incidence object from dates of onset\ninc <- incidence::incidence(linelist$date_onset)\n\n## extract plausible r values from most recent estimate\nmean_r <- tail(epiestim_res_emp$R$`Mean(R)`, 1)\nsd_r <- tail(epiestim_res_emp$R$`Std(R)`, 1)\nshapescale <- gamma_mucv2shapescale(mu = mean_r, cv = sd_r/mean_r)\nplausible_r <- rgamma(1000, shape = shapescale$shape, scale = shapescale$scale)\n\n## check distribution\nqplot(x = plausible_r, geom = \"histogram\", xlab = expression(R[t]), ylab = \"Counts\")## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n## make projection\nproj <- project(\n  x = inc,\n  R = plausible_r,\n  si = serial_interval$distribution,\n  n_days = 21,\n  n_sim = 1000\n)\n## plot incidence and projections\nplot(inc[inc$dates > as.Date(\"2015-03-01\")]) %>%\n  add_projections(proj)## Scale for 'x' is already present. Adding another scale for 'x', which will replace the existing scale.\n## convert to data frame for raw data\nproj_df <- as.data.frame(proj)\nproj_df"},{"path":"epidemicmodels.html","id":"resources","chapter":"1 Epidemic modeling","heading":"1.5 Resources","text":"paper describing\r\nmethodology implemented EpiEstim.paper describing\r\nmethodology implemented EpiNow2.paper describing\r\nvarious methodological practical considerations estimating Rt.","code":""}]
