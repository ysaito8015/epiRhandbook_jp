[{"path":"index.html","id":"welcome---this-is-a-draft","chapter":"Welcome - THIS IS A DRAFT","heading":"Welcome - THIS IS A DRAFT","text":"","code":""},{"path":"index.html","id":"about-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"About this handbook","text":"free open-access R reference book applied epidemiologists public health practitioners.book strives :Serve quick reference guide - textbookAddress common epidemiological problems via task-centered examplesBe accessible settings limited technical support low internet-connectivity (link downloadable version)Contain clear simple language, step--step instructions helpful code annotationBe living document, growing adapting new best practicesWhat gaps book address?Many epidemiologists lack formal R training transitioning SAS, STATA, statistical software.R universe changes frequently - place best practice code catered toward common epidemiologist user.Epidemiologists often search dozens online forums answers, epidemiology-oriented.epidemiologists work low internet-connectivity environments limited technical support.different R books?handbook written epidemiologists, epidemiologists. approved product specific organization. Examples techniques adapted authors lived experience local, national, academic, emergency settings.book offered download-able format settings unreliable internet.addition core R skills book uses epidemiology-centered examples cover tasks like epidemic curves, transmission chains epidemic modeling, age sex pyramids, age sex standardization, probabilistic matching records, outbreak detection methods, survey analysis, causal diagrams, survival analysis, GIS basics, phylogenetic trees, missing data imputation, automated routine reports Rmarkdown, etc…","code":""},{"path":"index.html","id":"how-to-read-this-handbook","chapter":"Welcome - THIS IS A DRAFT","heading":"How to read this handbook","text":"Search via search box Table ContentsClick “clipboard” “copy” icon copy codeSee “Resources” section page links trainingClick download offline versionIf use handbook suggestions, let us know SURVEY LINK!","code":""},{"path":"index.html","id":"edit-or-contribute","chapter":"Welcome - THIS IS A DRAFT","heading":"Edit or contribute","text":"suggestions want contribute content, please post issue submit pull request github repository.","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome - THIS IS A DRAFT","heading":"Acknowledgements","text":"","code":""},{"path":"index.html","id":"contributors","chapter":"Welcome - THIS IS A DRAFT","heading":"Contributors","text":"handbook collaborative team production. conceived, written, edited epidemiologists public health practitioners around world, drawn upon experiences within constellation organizations including local/state/provincial/national health departments ministries, World Health Organization (), MSF (Medecins sans frontiers / Doctors without Borders), UNHCR, WFP, hospital systems, academic institutions.team members:Editor--Chief: Neale BatraEditorial core team: Alex Spina, Amrish Baidjoe, Henry Laurenson-Schafer, Finlay Campbell, Pat KeatingAuthors (order contributions): Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Daniel Molling, Liza Coyer, Jonny Polonski, Yurie Izawa, Sara HollisReviewers: …(list)…Advisers …(list)…","code":""},{"path":"index.html","id":"funding-and-programmatic-support","chapter":"Welcome - THIS IS A DRAFT","heading":"Funding and programmatic support","text":"handbook received funding via COVID-19 emergency capacity-building grant Training Programs Epidemiology Public Health Interventions Network (TEPHINET).Programmatic support provided EPIET Alumni Network (EAN).","code":""},{"path":"index.html","id":"inspiration","chapter":"Welcome - THIS IS A DRAFT","heading":"Inspiration","text":"multitude tutorials vignettes provided foundational knowledge development handbook content credited within respective pages.generally, following sources provided inspiration laid groundwork handbook:“R4Epis” project (collaboration MSF RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify hosts website","code":""},{"path":"index.html","id":"image-credits","chapter":"Welcome - THIS IS A DRAFT","heading":"Image credits","text":"Logo: CDC Public Health Image library, R Graph Gallery2013 Yemen looking mosquito breeding sitesEbola virusSurvey RajasthanNetwork","code":""},{"path":"index.html","id":"license-and-terms-of-use","chapter":"Welcome - THIS IS A DRAFT","heading":"License and Terms of Use","text":"handbook approved product specific organization.Although strive accuracy, provide guarantee content book.book licensed Creative Commons license TBD…","code":""},{"path":"epidemic-curves.html","id":"epidemic-curves","chapter":"1 Epidemic curves","heading":"1 Epidemic curves","text":"","code":""},{"path":"epidemic-curves.html","id":"overview","chapter":"1 Epidemic curves","heading":"Overview","text":"","code":""},{"path":"epidemic-curves.html","id":"preparation","chapter":"1 Epidemic curves","heading":"1.1 Preparation","text":"","code":""},{"path":"epidemic-curves.html","id":"packages","chapter":"1 Epidemic curves","heading":"Packages","text":"code chunk shows loading packages required analyses.","code":"\npacman::p_load(rio,          # file import/export\n               here,         # relative filepaths \n               lubridate,    # working with dates/epiweeks\n               aweek,        # alternative package for working with dates/epiweeks\n               incidence,    # epicurves of linelist data\n               stringr,      # search and manipulate character strings\n               forcats,      # working with factors\n               RColorBrewer, # Color palettes from colorbrewer2.org\n               tidyverse     # data management + ggplot2 graphics\n) "},{"path":"epidemic-curves.html","id":"load-data","chapter":"1 Epidemic curves","heading":"Load data","text":"Two example datasets used section:Linelist individual cases simulated epidemicAggregated counts hospital simulated epidemicThe dataset imported using import() function rio package. See page [Import export] various ways import data. linelist aggregated versions data displayed .document, linelist dataset used. aggregated counts dataset used end.Review two datasets notice differencesCase linelistThe first 50 rows displayedCase counts aggregated hospitalThe first 50 rows displayed","code":"\nlinelist <- rio::import(\"linelist_cleaned.xlsx\")"},{"path":"epidemic-curves.html","id":"set-parameters","chapter":"1 Epidemic curves","heading":"Set parameters","text":"may want set editable parameters production report, date data current (“data date”).\r\ncan reference data_date code applying filters captions auto-update.","code":"\n## set the report date for the report\n## note: can be set to Sys.Date() for the current date\ndata_date <- as.Date(\"2015-05-15\")"},{"path":"epidemic-curves.html","id":"verify-dates","chapter":"1 Epidemic curves","heading":"Verify dates","text":"Verify relevant date column class Date appropriate range values.can one--one using hist() histograms, range() na.rm=TRUE. alternative use loop print histogram pre-defined date column.","code":"\n# create character vector of column names \nDateCols <- as.character(tidyselect::vars_select(names(linelist), matches(\"date|Date|dt\")))\n\n# Produce histogram of each date column\nfor (Col in DateCols) {     # open loop. iterate for each name in vector DateCols\n  hist(linelist[, Col],     # print histogram of the column in linelist dataframe\n       breaks = 50,         # number of breaks for the histogram\n       xlab = Col)          # x-axis label is the name of the column\n  }                         # close the loop"},{"path":"epidemic-curves.html","id":"epicurves-with-incidence-package","chapter":"1 Epidemic curves","heading":"1.2 Epicurves with incidence package","text":"tabs making quick epicurves using incidence packageCAUTION: incidence expects data “linelist” format one row per case (aggregated). data aggregated counts, read section aggregated data using ggplot2.TIP: documentation plotting incidence object can accessed entering ?plot.incidence R console.information see incidence package vignette.","code":""},{"path":"epidemic-curves.html","id":"simple-example","chapter":"1 Epidemic curves","heading":"Simple example","text":"2 steps requires plot epicurve incidence package:Create incidence object (using function incidence())\r\nProvide case linelist\r\nSpecify time interval cases aggregated (daily, weekly, monthly..)\r\nSpecify sub-groups\r\nProvide case linelistSpecify time interval cases aggregated (daily, weekly, monthly..)Specify sub-groupsPlot incidence object\r\nSpecify labels, aesthetic themes, etc.\r\nSpecify labels, aesthetic themes, etc.simple example - epicurve daily cases:","code":"\n# load incidence package\npacman::p_load(incidence)\n\n# create the incidence object aggregating case-rows by day\nepi_day   <- incidence(linelist$date_onset,  # the linelist date column of interest\n                       interval = \"day\")     # the time interval\n\n# plot the incidence object\nplot(epi_day)"},{"path":"epidemic-curves.html","id":"change-time-interval-of-case-aggregation","chapter":"1 Epidemic curves","heading":"Change time interval of case aggregation","text":"interval argument defines observations grouped vertical bars. options listed (full list originates package aweek):“week” (Monday start day default)“2 weeks” (3, 4, 5…)“Sunday week”“2 Sunday weeks” (3, 4, 5…)“MMWRweek” (starts Sunday - see US CDC)“month” (1st month)“quarter” (1st month quarter)“2 months” (3, 4, 5…)“year” (1st day calendar year)examples different intervals look applied linelist.\r\nFormat frequency date labels x-axis defaults specified interval.","code":"\n# Create the incidence objects (with different intervals)\n##############################\n# Weekly (Monday week by default)\nepi_wk      <- incidence(linelist$date_onset, interval = \"Monday week\")\n\n# Sunday week\nepi_Sun_wk  <- incidence(linelist$date_onset, interval = \"Sunday week\")\n\n# Three weeks (Monday weeks by default)\nepi_3wk     <- incidence(linelist$date_onset, interval = \"3 weeks\")\n\n# Monthly\nepi_month   <- incidence(linelist$date_onset, interval = \"month\")\n\n\n# Plot the incidence objects (+ titles for clarity)\n############################\nplot(epi_wk)+     labs(title = \"Monday weeks\")\nplot(epi_Sun_wk)+ labs(title = \"Sunday weeks\")\nplot(epi_3wk)+    labs(title = \"Every 3 Monday weeks\")\nplot(epi_month)+  labs(title = \"Months\")"},{"path":"epidemic-curves.html","id":"filtered-data","chapter":"1 Epidemic curves","heading":"Filtered data","text":"plot epicurve subset data:Filter linelist dataFeed filtered data incidence() commandPlot incidence objectThe example uses data filtered show cases Central Hospital.","code":"\n# filter the linelist\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\")\n\n# create incidence object using filtered data\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"week\")\n\n# plot the incidence object\nplot(central_outbreak) + labs(title = \"Weekly case incidence at Central Hospital\")"},{"path":"epidemic-curves.html","id":"modifications-with-plot","chapter":"1 Epidemic curves","heading":"Modifications with plot()","text":"incidence plot can modified via arguments within plot() function.show_cases = - TRUE, case shows box. Best smaller outbreaks.color = - Color case bars/boxesborder = - Color line around boxes, show_cases = TRUEalpha = - Transparency case bars/boxes (1 fully opaque, 0 fully transparent)xlab = - Title x-axis (axis labels can also applied using labs() ggplot)ylab = - Title y-axis; defaults user-defined incidence time intervallabels_week = - Logical, indicate whether x-axis labels week date format, absent modificationsn_breaks = - Number x-axis label breaks, absent modificationsfirst_date & last_date - Dates used limit date axis plotType ?plot.incidence R console details . example using arguments.\r\nadjust aesthetics, see section using ggplot() apply theme() arguments incidence plot.","code":"\n# filter the linelist\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\")\n\n# create incidence object using filtered data\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"week\")\n\n# plot incidence object\nplot(central_outbreak,\n     xlab = \"Week of onset\",\n     ylab = \"Week of onset\",\n     show_cases = TRUE,\n     alpha = 0.5,\n     color = \"darkblue\",\n     border = \"white\")"},{"path":"epidemic-curves.html","id":"ggplot2-modifictions","chapter":"1 Epidemic curves","heading":"ggplot2 modifictions","text":"can add traditional ggplot2 modifications incidence plot adding + close incidence plot() function, demonstrated :","code":"\n# filter the linelist\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\")\n\n# create incidence object using filtered data\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"week\")\n\n# plot\nplot(central_outbreak,         # plot with incidence package and arguments\n     xlab = \"Week of onset\",\n     ylab = \"Weekly case incidence\",\n     show_cases = TRUE,\n     alpha = 0.5,\n     color = \"darkblue\",\n     border = \"black\")+\n  \n  # Add some modifications using ggplot() functions\n  scale_x_date(\n    expand = c(0,0))+      # remove excess space on left and right\n  scale_y_continuous(\n    expand = c(0,0))+      # remove excess space below 0 on y-axis\n  labs(\n    title = \"Incidence plot with ggplot() modifications\",\n    caption = \"This is the caption for this plot\")+\n  theme_classic()+         # simplify background\n  theme(\n    axis.title = element_text(size = 12,         # axis titles larger and bold\n                              face = \"bold\"),\n    axis.text = element_text(size = 10,          # axis test bold\n                             face = \"bold\"),\n    plot.caption = element_text(hjust = 0)       # move caption to left\n  )"},{"path":"epidemic-curves.html","id":"change-colors-and-legend","chapter":"1 Epidemic curves","heading":"Change colors and legend","text":"","code":""},{"path":"epidemic-curves.html","id":"to-change-the-legend","chapter":"1 Epidemic curves","heading":"To change the legend","text":"Add ggplot2 commands incidence plot, :theme(legend.position = \"top\") (“bottom”, “left”, “right”)theme(legend.direction = \"horizontal\")theme(legend.title = element_blank()) titleguides(fill = guide_legend(reverse = TRUE)) reverse order legendSee page [ggplot tips] details working legends.","code":""},{"path":"epidemic-curves.html","id":"to-change-colors","chapter":"1 Epidemic curves","heading":"To change colors","text":"specify colors manually, provide name color character vector colors argument color =. number colors listed must equal number groups (aware missing values group)change color palette\r\nUse argument col_pal plot() change color palette one default base R palettes (put name palette quotes).Alternatively, adjust palette ggplot2 scales - see [ggplot tips] page details.","code":"\n# weekly outbreak by hospital\nhosp_outbreak <- incidence(linelist$date_onset, \n                               interval = \"week\", \n                               groups = linelist$hospital,\n                               na_as_group = FALSE)   # Missing values not assigned their own group\n# default colors\nplot(hosp_outbreak)\n\n# manual colors\nplot(hosp_outbreak, color = c(\"darkgreen\", \"darkblue\", \"purple\", \"grey\", \"yellow\", \"orange\"))\n# Create incidence object, with data grouped by age category\nage_outbreak <- incidence(linelist$date_onset,            # date of onset for x-axis\n                               interval = \"week\",         # weekly aggregation of cases\n                               groups = linelist$age_cat, # color by age_cat value\n                               na_as_group = TRUE)        # missing values assigned their own group\n\n# plot the epicurve with default palette\nplot(age_outbreak)\n\n# plot with different color palette\nplot(age_outbreak, col_pal = rainbow)"},{"path":"epidemic-curves.html","id":"show-individual-cases","chapter":"1 Epidemic curves","heading":"Show individual cases","text":"show boxes around individual case, use argument show_cases = TRUE plot() function.Boxes around case can reader-friendly, outbreak small size. Boxes can applied interval days, weeks, time period. code creates weekly epicurve smaller outbreak (cases Central Hospital), boxes around case.epicurve showing individual cases, aesthetic modifications using ggplot2:","code":"\n# create filtered dataset for Central Hospital\ncentral_data  <- linelist %>% \n  filter(hospital == \"Central Hospital\")\n\n# create incidence object (weekly)\ncentral_outbreak <- incidence(central_data$date_onset, interval = \"Monday week\")\n\n# plot outbreak\nplot(central_outbreak,\n     show_cases = T)                 # show boxes around individual cases\n# add plot() arguments and ggplot() commands\nplot(central_outbreak,\n     show_cases = T,                 # show boxes around each individual case\n     color = \"lightblue\",            # color inside boxes\n     border = \"darkblue\",            # color of border around boxes\n     alpha = 0.5)+                   # transparency\n  \n  ### ggplot() commands added to the plot\n  \n  # scale modifications\n  scale_x_date(\n    expand            = c(0,0),         # remove excess x-axis space below and after case bars\n    date_breaks       = \"4 weeks\",      # labels appear every 4 Monday weeks\n    date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n    date_labels       = \"%d\\n%b'%y\")+   # date labels format \n  \n  scale_y_continuous(\n    expand = c(0,0))+             # remove excess space under 0 on y-axis\n\n  # aesthetic themes\n  theme_minimal()+                # simplify background\n  \n  theme(\n    axis.title = element_text(size = 12, face = \"bold\"),       # axis title format\n    plot.caption = element_text(face = \"italic\", hjust = 0))+  # caption format and left-align\n  \n  # plot labels\n  labs(x = \"Week of symptom onset (Monday weeks)\", \n       y = \"Weekly reported cases\", \n       title = \"Weekly case incidence at Central Hospital\",\n       #subtitle = \"\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"group-and-color-by-values","chapter":"1 Epidemic curves","heading":"Group and color by values","text":"color cases value, provide column groups = argument incidence() command.example cases colored age category. Note use incidence() argument na_as_group =. TRUE (default), missing values (NA) form group.adjust legend title, add ggplot2 function labs() shown , specifying label fill =.","code":"\n# Create incidence object, with data grouped by age category\nage_outbreak <- incidence(linelist$date_onset,            # date of onset for x-axis\n                               interval = \"week\",         # Monday weekly aggregation of cases\n                               groups = linelist$age_cat, # color by age_cat value\n                               na_as_group = TRUE)        # missing values assigned their own group\n\n\n# plot the grouped incidence object\nplot(age_outbreak) \n# plot the grouped incidence object\nplot(age_outbreak)+\n  labs(fill = \"Age category\")"},{"path":"epidemic-curves.html","id":"adjust-level-order","chapter":"1 Epidemic curves","heading":"Adjust level order","text":"adjust order group appearance (plot legend), grouping column must class Factor. See page [Factors] information.epicurve gender, objective show Missing top, Male middle, Female bottom - Legend reverse order Missing bottom.First, dataset defined gender re-defined factorThe order levels gender defined NA first, appears top barsMore appropriate labels defined factor level - appear legendThe argument exclude = NULL factor() necessary adjust order NA, excluded default.Title legend adjusted using fill = labs()","code":"\n# ORIGINAL - \n\n# create weekly incidence object, grouped by hospital\nhospital_outbreak <- incidence(\n  linelist$date_onset, \n  interval = \"week\", \n  groups = linelist$hospital)\n\n# plot\nplot(hospital_outbreak,\n     show_cases = FALSE)+\n  labs(title = \"ORIGINAL - hospital not a factor\")\n\n\n\n# MODIFIED - hospital as factor\n###############################\n\n# load forcats package for working with factors\npacman::p_load(forcats)\n\n# Convert hospital column to factor and adjust levels\nplot_data <- linelist %>% \n  mutate(hospital = factor(hospital)) %>%                       # define as factor\n  mutate(hospital = fct_explicit_na(hospital, \"Missing\")) %>%   # convert NA to \"Missing\" \n  mutate(hospital = fct_lump(hospital, n = 3)) %>%              # Keep 3 most frequent hospitals, with remaining combined into \"Other\" \n  mutate(hospital = fct_relevel(hospital, c(\"Other\", \"Missing\"))) # Set \"Other\" and \"Missing\" as top levels\n\n\n# Create weekly incidence object, grouped by hospital\nhospital_outbreak_mod <- incidence(\n  plot_data$date_onset, \n  interval = \"week\", \n  groups = plot_data$hospital)\n\n# plot\nplot(hospital_outbreak_mod,\n     show_cases = FALSE)+                       # do NOT show box around each case\n  \n  \n  # ggplot modifications     \n  guides(\n    fill = guide_legend(reverse = TRUE))+       # reverse order of legend only   \n\n  # labels added via ggplot\n  labs(\n      title = \"MODIFIED - hospital as factor\",   # plot title\n      subtitle = \"Other & Missing at top of epicurve and bottom of legend\",\n      y = \"Weekly case incidence\",               # y axis title  \n      x = \"Week of symptom onset\",               # x axis title\n      fill = \"Hospital\")                         # title of legend     "},{"path":"epidemic-curves.html","id":"date-axis-labelsgridlines","chapter":"1 Epidemic curves","heading":"Date-axis labels/gridlines","text":"TIP: Remember date-axis labels independent aggregation data bars","code":""},{"path":"epidemic-curves.html","id":"modify-the-bars","chapter":"1 Epidemic curves","heading":"Modify the bars","text":"aggregation data bars occurs set interval = creating incidence object. options interval come package aweek include options like “day”, “Monday week”, “Sunday week”, “month”, “2 weeks”, etc, described earlier section.","code":""},{"path":"epidemic-curves.html","id":"modify-date-axis-labels-frequency-format","chapter":"1 Epidemic curves","heading":"Modify date-axis labels (frequency & format)","text":"working incidence package, several options make modifications date-axis labels:Use incidence package functions scale_x_date() make_breaks()Use ggplot2 function scale_x_date() argument date_breaks date_labels`Use combination ","code":""},{"path":"epidemic-curves.html","id":"option-1-add-scale_x_incidence-only","chapter":"1 Epidemic curves","heading":"Option 1: Add scale_x_incidence() only","text":"Add scale_x_incidence() incidence package:Advantages: Short code. Auto-adjusts weekly labels interval incidence object (Monday, Sunday weeks, etc.)Disadvantages: make fine adjustments label format, minor vertical grid-lines labelsSyntax: provide name incidence object ensure labels align specified interval (e.g. Sunday Monday weeks)Optional arguments:Use n_breaks = specify number date labels, start interval first case\r\nTip: breaks every nth week, use n_breaks = nrow()/n (“” incidence object name “n” number)\r\nTip: breaks every nth week, use n_breaks = nrow()/n (“” incidence object name “n” number)Use labels_week = adjust whether labels formatted weeks (YYYY-Www) dates (YYYY-MM-DD)\r\nOne vertical gridline appear per date label\r\nOne vertical gridline appear per date labelOther notes:interval “month”, n_breaks labels_week behave differentlyAdding ggplot2’s scale_x_date() plot remove labels created scale_x_incidenceNote plot first label 27 April 2014, Sunday first case (May 1) (aligns Sunday weeks incidence object)Type ?scale_x_incidence R console see information.","code":"\n# create weekly incidence object (Sunday weeks)\noutbreak <- incidence(central_data$date_onset, interval = \"Sunday week\")\n\n# plot with scale_x_incidence()\nplot(outbreak)+\n  scale_x_incidence(outbreak,             # name of incidence object\n                    labels_week = FALSE,  # show dates instead of weeks\n                    n_breaks = nrow(outbreak)/8) # breaks every 8 weeks from Sunday before first case"},{"path":"epidemic-curves.html","id":"option-2-scale_x_date-and-make_breaks","chapter":"1 Epidemic curves","heading":"Option 2: scale_x_date() and make_breaks()","text":"Add scale_x_date() ggplot2, also leverage make_breaks() incidence:\r\n* Advantages: Best worlds: weekly labels auto-aligned incidence interval, can make detailed adjustments label format\r\n* Disadvantages: minor grid-lines Sunday-week date labels desired, auto-alignedSyntax: creating incidence object, use make_breaks() define date label breaks. make_breaks() similar scale_x_incidence() (described ). Provide incidence object name optionally n_breaks described .Lastly, add scale_x_date() incidence plot use following arguments:\r\n+ breaks = provide breaks vector created make_breaks(), accessing $breaks vector (see example )\r\n+ date_labels = can make fine adjustments date label format (e.g. “%d %b”) (use “” new line)\r\n+ date_minor_breaks = can set weeks ","code":"\n# Break modification using scale_x_date() and make_breaks()\n###########################################################\n# make incidence object\noutbreak <- incidence(central_data$date_onset, interval = \"Monday week\")\n\n# make breaks\nmy_labels <-  make_breaks(outbreak, n_breaks = nrow(outbreak)/6) # breaks every 6 weeks\n\n# plot\nplot(outbreak)+\n  scale_x_date(breaks      = my_labels$breaks, # use $breaks from the make_breaks() output\n               date_labels = \"%d %b\\n%Y\",      # detailed adjustment to date label format\n               date_minor_breaks = \"weeks\")    # vertical lines for each week (only works for Monday week incidence objects)  "},{"path":"epidemic-curves.html","id":"option-3-use-scale_x_date-only","chapter":"1 Epidemic curves","heading":"Option 3: Use scale_x_date() only","text":"Add scale_x_date() ggplot2 incidence plot:Advantages: Complete control breaks, labels, gridlines, plot widthDisadvantages: code required, opportunity make mistakesSyntax:\r\nincidence intervals days Monday weeks, (easy!):Provide interval date labels date_breaks = (e.g. “day”, “week”, “2 weeks”, “month”, “year”)Provide interval date_minor_breaks = vertical lines primary date labelsIf incidence intervals Sunday weeks, complex - see Sunday week exampleProvide sequence Sunday dates breaks = minor_breaks =Use date_labels = formatting (see Dates page tips)Add argument expand = c(0,0) start labels first incidence bar. Otherwise, first label shift depending specified label interval.","code":"\n# Date break modification using scale_x_date() only\n###################################################\n\n# make incidence object\noutbreak <- incidence(central_data$date_onset, interval = \"Monday week\")\n\n# plot\nplot(outbreak)+\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"3 weeks\",      # date labels appear every 3 Monday weeks\n               date_minor_breaks = \"week\",         # minor vertical lines appear every Monday week\n               date_labels       = \"%d\\n%b\\n'%y\")  # date labels format "},{"path":"epidemic-curves.html","id":"a-sunday-week-example","chapter":"1 Epidemic curves","heading":"A Sunday week example","text":"want plot Sunday weeks also finely-adjusted label formats, might find code example helpful.\r\nexample producing weekly epicurve using incidence Sunday weeks, finely-adjusted date labels scale_x_date():Miscellaneous notes cautions:DANGER: cautious static y-axis scale (e.g. 0 30 5: seq(0, 30, 5)). Static numbers can cut-data data changes!.Note: using aggregated counts (example epiweek x-axis) x-axis may Date class may require use scale_x_discrete() instead scale_x_date() - see section aggregated data epicurves details.","code":"\n# load packages\npacman::p_load(tidyverse,  # for ggplot\n               incidence,  # for epicurve\n               lubridate)  # for floor_date() and ceiling_date()\n\n# create incidence object (specifying SUNDAY weeks)\ncentral_outbreak <- incidence(central_data$date_onset,\n                              interval = \"Sunday week\") # equivalent to \"MMWRweek\" (see US CDC)\n\n# plot() the incidence object\nplot(central_outbreak)+                  \n  \n  ### ggplot() commands added to the plot\n  \n  # Date-axis \n  scale_x_date(\n    \n    # remove excess x-axis space below and after case bars\n    expand = c(0,0),                 \n    \n    # date labels every 3 weeks, from Sunday before first case to Sunday after last case\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"3 weeks\"),\n    \n    # grid-lines every week, from Sunday before first case to Sunday after last case\n    minor_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                            to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                            by   = \"7 days\"),\n    # date labels format\n    date_labels = \"%d\\n%b\\n'%y\")+       \n  \n  # Y-axis\n  scale_y_continuous(\n    expand = c(0,0))+                  # remove excess space under x-axis\n  \n  # Aesthetic themes\n  theme_minimal()+                    # simplify background\n  \n  theme(\n    axis.title = element_text(size = 12, face = \"bold\"),       # axis titles formatting\n    plot.caption = element_text(face = \"italic\", hjust = 0))+  # caption formatting, left-aligned\n  \n  # Plot labels\n  labs(x = \"Week of symptom onset (Sunday weeks)\", \n       y = \"Weekly case incidence\", \n       title = \"Weekly case incidence at Central Hospital (Sunday weeks)\",\n       #subtitle = \"\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"facetssmall-multiples","chapter":"1 Epidemic curves","heading":"Facets/small multiples","text":"facet plot variable (make “small multiples”), see tab epicurves ggplot()","code":""},{"path":"epidemic-curves.html","id":"epicurves-with-ggplot2","chapter":"1 Epidemic curves","heading":"1.3 Epicurves with ggplot2","text":"Using ggplot2 package alone create epicurve also possible. can offer customizeable plots, can also involve code potential error:Unlike using incidence package, must manually control aggregation data (weeks, months, etc) labels date axis. carefully managed, can lead headaches.examples use subset linelist dataset - cases Central Hospital.","code":"\ncentral_data <- linelist %>% \n  filter(hospital == \"Central Hospital\")"},{"path":"epidemic-curves.html","id":"examples","chapter":"1 Epidemic curves","heading":"Examples","text":"produce epicurve ggplot() three main elements:histogram, aggregate linelisted cases “bins” display bars counts per bin (potentially grouped values)Scales axes associated labels (see tab modifications)Aesthetic themes plot, including titles, labels, captions, etc.perhaps simple code produce daily weekly epicurves. Axis scales labels use default options.CAUTION: Using binwidth = 7 starts first bin first case, day week! create specific Monday Sunday weeks, see guidance .create weekly epicurves bins begin specific day week (e.g. Monday Sunday), specify histogram breaks = manually (binwidth). can done creating sequence dates using seq.Date() function base R, expects , , arguments. can start/end sequence specific date (.Date(\"YYYY-MM-DD\"), write flexible code begin sequence specific day week first case. example creating weekly breaks :Let’s unpack rather daunting code :“” value (earliest date sequence) created follows: minimum date value (min() na.rm=TRUE) column date_onset fed floor_date() lubridate package. floor_date() uses specified arguments return start date “week”, given start week Monday (week_start = 1).Likewise, “” value (end date sequence) created using inverse function ceiling_date() return Monday last case.“” argument can set length days, weeks, months.Similar sequence dates can supplied create histogram breaks (edges bars), also breaks date labels. Read date labels later sections. Defining breaks like necessary weekly bins Monday weeks.detailed example code produce weekly epicurves Monday weeks Sunday weeks. See section date axis modifications learn nuances date-axis label management.","code":"\n# daily \nggplot(data = central_data, aes(x = date_onset)) +  # x column must be class Date\n  geom_histogram(binwidth = 1)+                     # date values binned by 1 day \n  labs(title = \"Daily\")\n\n# weekly\nggplot(data = central_data, aes(x = date_onset)) +  \n  geom_histogram(binwidth = 7)+                     # date values binned each 7 days (arbitrary 7 days!) \n  labs(title = \"Weekly\")\n# Sequence of dates from the Monday before the first case to the Monday after the last case, by week\nseq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n         to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n         by   = \"7 days\")##  [1] \"2014-04-28\" \"2014-05-05\" \"2014-05-12\" \"2014-05-19\" \"2014-05-26\" \"2014-06-02\" \"2014-06-09\" \"2014-06-16\" \"2014-06-23\"\r\n## [10] \"2014-06-30\" \"2014-07-07\" \"2014-07-14\" \"2014-07-21\" \"2014-07-28\" \"2014-08-04\" \"2014-08-11\" \"2014-08-18\" \"2014-08-25\"\r\n## [19] \"2014-09-01\" \"2014-09-08\" \"2014-09-15\" \"2014-09-22\" \"2014-09-29\" \"2014-10-06\" \"2014-10-13\" \"2014-10-20\" \"2014-10-27\"\r\n## [28] \"2014-11-03\" \"2014-11-10\" \"2014-11-17\" \"2014-11-24\" \"2014-12-01\" \"2014-12-08\" \"2014-12-15\" \"2014-12-22\" \"2014-12-29\"\r\n## [37] \"2015-01-05\" \"2015-01-12\" \"2015-01-19\" \"2015-01-26\" \"2015-02-02\" \"2015-02-09\" \"2015-02-16\" \"2015-02-23\" \"2015-03-02\"\r\n## [46] \"2015-03-09\" \"2015-03-16\" \"2015-03-23\" \"2015-03-30\" \"2015-04-06\" \"2015-04-13\" \"2015-04-20\" \"2015-04-27\" \"2015-05-04\""},{"path":"epidemic-curves.html","id":"monday-weeks-example","chapter":"1 Epidemic curves","heading":"Monday weeks example","text":"note:break points histogram bins specified manually begin Monday (week_start = 1) earliest case end Monday last case (see explanation ).breaks date labels x-axis easy use date_breaks = within scale_x_date() want Monday weeks. Sunday weeks, use different method.Minor vertical gridlines date labels made using date_minor_breaks = within scale_x_date(), plot Monday weeks. Sunday weeks use different method.Adding expand = c(0,0) x y scales removes excess space side axes, also ensures date labels begin first bar.Color fill bars defined geom_histogram()","code":"\n# TOTAL MONDAY WEEK ALIGNMENT\n#############################\nggplot(central_data, aes(x = date_onset)) + \n  \n  # make histogram: specify bin break points: starts the Monday before first case, end Monday after last case\n  geom_histogram(\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"), # bins are 7-days\n    color = \"darkblue\",   # color of lines around bars\n    fill = \"lightblue\") + # color of fill within bars\n  \n  # x-axis labels\n  scale_x_date(\n    expand            = c(0,0),         # remove excess x-axis space before and after case bars\n    date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n    date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n    date_labels       = \"%d\\n%b\\n'%y\")+ # date labels format\n  \n  # y-axis\n  scale_y_continuous(\n    expand = c(0,0))+             # remove excess y-axis space below 0\n  \n  # aesthetic themes\n  theme_minimal()+                # simplify plot background\n  \n  theme(\n    plot.caption = element_text(face = \"italic\", # caption on left side in italics\n                                hjust = 0), \n    axis.title = element_text(face = \"bold\"))+   # axis titles in bold\n  \n  # labels\n  labs(\n    title    = \"Weekly incidence of cases (Monday weeks)\",\n    subtitle = \"Subtitle: Note alignment of bars, vertical lines, and axis labels on Mondays\",\n    x        = \"Week of symptom onset\",\n    y        = \"Weekly incident cases reported\",\n    caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"sunday-weeks-example","chapter":"1 Epidemic curves","heading":"Sunday weeks example","text":"code achieves epicurve uses Sunday weeks. note:break points histogram bins specified manually begin Sunday (week_start = 7) earliest case end Sunday last case (see explanation ).bins Monday weeks, breaks date labels x-axis vertical gridlines must manually specified vectors dates, generated seq.Date(). date break vectors given breaks = minor_breaks = within scale_x_date(). Unlike Monday weeks, use scale_x_date() arguments date_breaks date_minor_breaks.Adding expand = c(0,0) x y scales removes excess space side axes, also ensures labels begin first bar.Color fill defined geom_histogram()","code":"\n# TOTAL SUNDAY WEEK ALIGNMENT\n#############################\nggplot(central_data, aes(x = date_onset)) + \n  \n  # Histogram -\n  geom_histogram(                    \n    \n    # manually specify bin break points: starts the Sunday before first case, end Sunday after last case\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n      by   = \"7 days\"), # bins are 7-days\n    color = \"darkblue\",   # color of lines around bars\n    fill = \"lightblue\") + # color of fill within bars\n  \n  # The labels on the x-axis\n  scale_x_date(\n    expand = c(0,0),\n    \n    # manually specify label breaks: starts the Sunday before first case, end Sunday after last case\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n      by   = \"3 weeks\"),\n    \n    # manually specify vertical gridline breaks: starts the Sunday before first case, end Sunday after last case\n    minor_breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n      by   = \"7 days\"),\n   \n    # date label format\n    date_labels = \"%d\\n%b\\n'%y\")+         # day, above month abbrev., above 2-digit year\n  \n  # y-axis\n  scale_y_continuous(\n    expand = c(0,0))+                     # removes excess y-axis space below 0\n  \n  # aesthetic themes\n  theme_minimal()+                               # a set of themes to simplify plot\n  \n  theme(\n    plot.caption = element_text(face = \"italic\", # caption on left side in italics\n                                hjust = 0), \n    axis.title = element_text(face = \"bold\"))+   # axis titles in bold\n  \n  # labels\n  labs(\n    title    = \"Weekly incidence of cases (Sunday weeks)\",\n    subtitle = \"Subtitle: Note alignment of bars, vertical lines, and axis labels on Sundays\",\n    x        = \"Week of symptom onset\",\n    y        = \"Weekly incident cases reported\",\n    caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"groupcolor-by-value","chapter":"1 Epidemic curves","heading":"Group/color by value","text":"designate column containing groups, make following changes. See [ggplot tips] page details.Add aesthetics argument aes() within geom_histogram() (don’t forget comma afterward)Within aes(), provide grouping column name group = fill = (quotes needed). group necessary, fill sets color bar group.Remove fill = argument outside aes(), override one insideArguments inside aes() apply group, whereas outside apply bars (e.g. may want color = outside, bar color border)","code":"\ngeom_histogram(\n    aes(group = gender, fill = gender))"},{"path":"epidemic-curves.html","id":"adjust-colors","chapter":"1 Epidemic curves","heading":"Adjust colors","text":"adjust colors via pre-defined color scale, see page [ggplot tips].manually set fill color group, use scale_fill_manual() (note scale_color_manual() different!).\r\nUse values = argument apply vector colors.\r\nUse na.value = specify color missing values.\r\n! can use labels = argument scale_fill_manual() change legend labels - easy accidentally give labels incorrect order incorrect legend! , recommended instead convert group column class Factor adjust labels described [Factors] page.\r\nUse values = argument apply vector colors.Use na.value = specify color missing values.! can use labels = argument scale_fill_manual() change legend labels - easy accidentally give labels incorrect order incorrect legend! , recommended instead convert group column class Factor adjust labels described [Factors] page.","code":""},{"path":"epidemic-curves.html","id":"adjust-level-order-1","chapter":"1 Epidemic curves","heading":"Adjust level order","text":"Stacking order, labels group legend, best adjusted classifying group column class Factor. can designate levels labels, order (reflected stack order). See page [Factors] [ggplot tips] details. One example given :Step 1: making ggplot, convert grouping column class Factor using factor() base R.","code":"\nplot_data <- linelist %>% \n  mutate(hospital = factor(hospital))\n# load forcats package for working with factors\npacman::p_load(forcats)\n\n# Convert hospital column to factor and adjust levels\nplot_data <- linelist %>% \n  mutate(hospital = factor(hospital)) %>%                       # define as factor\n  mutate(hospital = fct_explicit_na(hospital, \"Missing\")) %>%   # convert NA to \"Missing\" \n  mutate(hospital = fct_lump(hospital, n = 3)) %>%              # Keep 3 most frequent hospitals, with remaining combined into \"Other\" \n  mutate(hospital = fct_relevel(hospital, c(\"Other\", \"Missing\"))) # Set \"Other\" and \"Missing\" as top levels\nggplot(plot_data,\n       aes(x = date_onset,\n           group = hospital,\n           fill = hospital)) + \n  \n  # make histogram: specify bin break points: starts the Monday before first case, end Monday after last case\n  geom_histogram(\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"black\")+  \n    \n  # x-axis labels\n  scale_x_date(\n    expand            = c(0,0),         # remove excess x-axis space before and after case bars\n    date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n    date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n    date_labels       = \"%d\\n%b\\n'%y\")+ # date labels format\n  \n  # y-axis\n  scale_y_continuous(\n    expand = c(0,0))+             # remove excess y-axis space below 0\n  \n  # manual specification of colors\n  scale_fill_manual(\n    values = c(\"grey\", \"black\", \"orange\", \"purple\"))+ # specify fill colors (\"values\") - attention to order!\n  \n  guides(fill = guide_legend(reverse = TRUE))+  # reverse order of legend only\n  \n  # aesthetic themes\n  theme_minimal()+                # simplify plot background\n  \n  theme(\n    plot.caption = element_text(face = \"italic\", # caption on left side in italics\n                                hjust = 0), \n    axis.title = element_text(face = \"bold\"))+   # axis titles in bold\n  \n  # labels\n  labs(\n    title    = \"Weekly incidence of cases by hospital\",\n    subtitle = \"3 most frequent values shown individually, plus 'Other'\",\n    x        = \"Week of symptom onset\",\n    y        = \"Weekly incident cases reported\",\n    fill     = \"Hospital\")   # title of legend"},{"path":"epidemic-curves.html","id":"adjust-legend","chapter":"1 Epidemic curves","heading":"Adjust legend","text":"Read legends [ggplot tips] page. highlights:theme(legend.position = \"top\") (“bottom”, “left”, “right”)theme(legend.direction = \"horizontal\")theme(legend.title = element_blank()) titleguides(fill = guide_legend(reverse = TRUE)) reverse order legend","code":""},{"path":"epidemic-curves.html","id":"bars-side-by-side","chapter":"1 Epidemic curves","heading":"Bars side-by-side","text":"Side--side display group bars (opposed stacked) specified within geom_histogram() position = \"dodge\" (outside aes()).two value groups, can become difficult read. Consider instead using faceted plot (small multiples). improve readability example, missing gender values removed Central Hospital cases shown.","code":"\n########################\n# bin break points for histogram defined here for clarity\n# starts the Monday before first case, end Monday after last case\nbin_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n                      by   = \"7 days\") # bins are 7-days\n\n# New dataset without rows missing gender\ncentral_data_dodge <- linelist %>% \n  filter(hospital == \"Central Hospital\") %>%      # Only rows from Central Hospital, for clarity\n  filter(!is.na(gender)) %>%                      # remove rows missing gender\n  mutate(gender = factor(gender),                 # Set Gender as factor and adjust value labels\n         gender = fct_recode(gender,\n                            \"Female\" = \"f\",\n                            \"Male\" = \"m\")) \n\n# make plot\n###########\nggplot(central_data_dodge, aes(x = date_onset)) + \n    geom_histogram(\n        aes(group = gender, fill = gender),    # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks,                   # see breaks defined above\n        position = \"dodge\")+                   # side-by-side bars\n                      \n  \n  # The labels on the x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"3 weeks\",      # labels appear every 3 Monday weeks\n               date_minor_breaks = \"week\",         # vertical lines appear every Monday week\n               date_labels       = \"%d\\n%b\\n'%y\")+ # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  #scale of colors and legend labels\n  scale_fill_manual(values = c(\"brown\", \"orange\"))+     # specify fill colors (\"values\") - attention to order!\n\n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"))+               # axis titles in bold\n  \n  # labels\n  labs(title    = \"Weekly incidence of cases, by gender\",\n       subtitle = \"Subtitle\",\n       fill     = \"Gender\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\")"},{"path":"epidemic-curves.html","id":"date-axis-labelsgridlines-1","chapter":"1 Epidemic curves","heading":"Date-axis labels/gridlines","text":"TIP: Remember date-axis labels independent aggregation data barsTo modify aggregation data bins/bars, one following:Specify binwidth = within geom_histogram() - column class Date, given number interpreted daysSpecify breaks = sequence bin break-point datesGroup rows aggregated counts (week, month, etc.) prior plotting feed aggregated counts ggplot() (see later section aggregated data).modify date labels, use scale_x_date() one ways:histogram bins days, Monday weeks, months, years:\r\nUse date_breaks = specify label frequency (e.g. “day”, “week”, “3 weeks”, “month”, “year”)\r\nUse date_minor_breaks = specify frequency minor vertical gridlines date labels\r\nAdd expand = c(0,0) begin labels first bar (otherwise, first label shift forward depending specified frequency)\r\nUse date_labels = specify format date labels - see Dates page tips (use \\n new line)\r\nUse date_breaks = specify label frequency (e.g. “day”, “week”, “3 weeks”, “month”, “year”)Use date_minor_breaks = specify frequency minor vertical gridlines date labelsAdd expand = c(0,0) begin labels first bar (otherwise, first label shift forward depending specified frequency)Use date_labels = specify format date labels - see Dates page tips (use \\n new line)histogram bins Sunday weeks:\r\nUse breaks = minor_breaks = providing sequence date breaks \r\ncan still use date_labels = expand formatting described \r\nUse breaks = minor_breaks = providing sequence date breaks eachYou can still use date_labels = expand formatting described aboveTo create sequence dates\r\ncan use seq.Date() base R. can start/end sequence specific date (.Date(\"YYYY-MM-DD\"), write flexible code begin sequence specific day week first case. example creating flexible breaks .See opening ggplot2 section detailed explanation.using aggregated counts (example epiweek x-axis) x-axis may Date class may require use scale_x_discrete() instead scale_x_date() - see ggplot tips page details.Set maximum minimum date values using limits = c() within scale_x_date(). E.g. scale_x_date(limits = c(.Date(\"2014-04-01), NA)) sets minimum leaves maximum open.CAUTION: Caution using limits! remove data outside limits, can impact y-axis max/min, modeling, statistics. Strongly consider instead using limits adding coord_cartesian() plot, acts “zoom” without removing data. DANGER: cautious setting y-axis scale breaks (e.g. 0 30 5: seq(0, 30, 5)). Static numbers can cut-data data changes!.See page [Working dates] page tips creating date labels.demonstration plots bins plot labels/gridlines aligned aligned:\r\nClick “Code” see code","code":"\nseq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n         to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n         by   = \"7 days\")\n# 7-day binwidth defaults\n#################\nggplot(central_data, aes(x = date_onset)) + # x column must be class Date\n  geom_histogram(\n    binwidth = 7,                       # 7 days per bin (! starts at first case!)\n    color = \"darkblue\",                 # color of lines around bars\n    fill = \"lightblue\") +               # color of bar fill\n  \n  labs(\n    title = \"MISALIGNED\",\n    subtitle = \"!CAUTION: 7-day bars start Thursdays with first case\\ndefault axis labels/ticks not aligned\")\n\n\n# 7-day bins + Monday labels\n#############################\nggplot(central_data, aes(x = date_onset)) +\n  geom_histogram(\n    binwidth = 7,                 # 7-day bins with start at first case\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n  \n  scale_x_date(\n    expand = c(0,0),               # remove excess x-axis space below and after case bars\n    date_breaks = \"3 weeks\",       # Monday every 3 weeks\n    date_minor_breaks = \"week\",    # Monday weeks\n    date_labels = \"%d\\n%b\\n'%y\")+  # label format\n  \n  scale_y_continuous(\n    expand = c(0,0))+              # remove excess space under x-axis, make flush with labels\n  \n  labs(\n    title = \"MISALIGNED\",\n    subtitle = \"!CAUTION: 7-day bars start Thursdays with first case\\nDate labels and gridlines on Mondays\")\n\n\n\n# 7-day bins + Months\n#####################\nggplot(central_data, aes(x = date_onset)) +\n  geom_histogram(\n    binwidth = 7,\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n  \n  scale_x_date(\n    expand = c(0,0),                 # remove excess x-axis space below and after case bars\n    date_breaks = \"months\",          # 1st of month\n    date_minor_breaks = \"week\",      # Monday weeks\n    date_labels = \"%d\\n%b\\n'%y\")+    # label format\n  \n  scale_y_continuous(\n    expand = c(0,0))+                # remove excess space under x-axis, make flush with labels\n  \n  labs(\n    title = \"MISALIGNED\",\n    subtitle = \"!CAUTION: 7-day bars start Thursdays with first case\\nGridlines at 1st of each month (with labels) and weekly on Mondays\\nLabels on 1st of each month\")\n\n\n# TOTAL MONDAY ALIGNMENT: specify manual bin breaks to be mondays\n#################################################################\nggplot(central_data, aes(x = date_onset)) + \n  geom_histogram(\n    # histogram breaks set to 7 days beginning Monday before first case\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") + \n  \n  scale_x_date(\n    expand = c(0,0),                   # remove excess x-axis space below and after case bars\n    date_breaks = \"3 weeks\",           # Monday every 3 weeks\n    date_minor_breaks = \"week\",        # Monday weeks \n    date_labels = \"%d\\n%b\\n'%y\")+      # label format\n  \n  labs(\n    title = \"ALIGNED Mondays\",\n    subtitle = \"7-day bins manually set to begin Monday before first case (28 Apr)\\nDate labels and gridlines on Mondays as well\")\n\n\n# TOTAL SUNDAY ALIGNMENT: specify manual bin breaks AND labels to be Sundays\n############################################################################\nggplot(central_data, aes(x = date_onset)) + \n  geom_histogram(\n    # histogram breaks set to 7 days beginning Sunday before first case\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") + \n  \n  scale_x_date(\n    expand = c(0,0),\n    # date label breaks set to every 3 weeks beginning Sunday before first case\n    breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                      by   = \"3 weeks\"),\n    # gridlines set to weekly beginning Sunday before first case\n    minor_breaks = seq.Date(from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 7)),\n                            to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 7)),\n                            by   = \"7 days\"),\n    date_labels = \"%d\\n%b\\n'%y\")+  # label format\n  \n  labs(title = \"ALIGNED Sundays\",\n       subtitle = \"7-day bins manually set to begin Sunday before first case (27 Apr)\\nDate labels and gridlines manually set to Sundays as well\")\n\n\n\n# Check values of bars by creating dataframe of grouped values\n# central_tab <- central_data %>% \n#   mutate(week = aweek::date2week(date_onset, floor_day = TRUE, factor = TRUE)) %>% \n#   group_by(week, .drop=F) %>%\n#   summarize(n = n()) %>% \n#   mutate(groups_3wk = 1:(nrow(central_tab)+1) %/% 3) %>% \n#   group_by(groups_3wk) %>% \n#   summarize(n = n())"},{"path":"epidemic-curves.html","id":"facetingsmall-multiples","chapter":"1 Epidemic curves","heading":"1.4 Faceting/small-multiples","text":"ggplots, can create facetted plots (“small multiples”). explained [ggplot tips] page handbook, can use either:facet_wrap()facet_grid()epicurves, facet_wrap() typically easiest likely need facet one column. general syntax facet_wrap(rows ~ cols), left tilde (~) name column spread across “rows” facetted plot, right tilde name column spread across “columns” facetted plot.simply, just use one column name, right tilde: facet_wrap(~age_cat).Free axes\r\nneed decide whether scales (scales =) axes facet “fixed” dimensions (default), “free” (meaning change based data within facet). can also specify “free_x” “free_y” release one dimension.Number cols rows facets\r\ncan specified ncol = nrow = within facet_wrap().Order panels\r\nchange order appearance, change underlying order levels factor column used create facets.Aesthetics\r\nFont size face, strip color, etc. can modified theme() arguments like:strip.text = element_text() (size, colour, face, angle…)strip.background = element_rect() (e.g. element_rect(fill=“red”))strip.position = (position strip “bottom”, “top”, “left”, “right”)Strip labels\r\nLabels facet plots can modified “labels” column factor, use “labeller”.Make labeller like , using function as_labeller() ggplot2:example facetted plot - facetted column age_cat.See link information labellers.","code":"\nmy_labels <- as_labeller(c(\n     \"0-4\"   = \"Ages 0-4\",\n     \"5-9\"   = \"Ages 5-9\",\n     \"10-14\" = \"Ages 10-14\",\n     \"15-19\" = \"Ages 15-19\",\n     \"20-29\" = \"Ages 20-29\",\n     \"30-49\" = \"Ages 30-49\",\n     \"50-69\" = \"Ages 50-69\",\n     \"70+\"   = \"Over age 70\"))\n# make plot\n###########\nggplot(central_data, aes(x = date_onset)) + \n  \n  geom_histogram(\n        aes(group = age_cat, fill = age_cat),    # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks)+                  # see breaks defined above\n                      \n    \n  \n  # The labels on the x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"2 months\",     # labels appear every 2 months\n               date_minor_breaks = \"1 month\",      # vertical lines appear every 1 month \n               date_labels       = \"%b\\n'%y\")+     # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\",\n        strip.text = element_text(face = \"bold\", size = 10),\n        strip.background = element_rect(fill = \"grey\"))+               # axis titles in bold\n  \n  # create facets\n  facet_wrap(~age_cat,\n             ncol = 4,\n             strip.position = \"top\",\n             labeller = my_labels)+             \n  \n  # labels\n  labs(title    = \"Weekly incidence of cases, by age category\",\n       subtitle = \"Subtitle\",\n       fill     = \"Age category\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"total-epidemic-in-facet-background","chapter":"1 Epidemic curves","heading":"Total epidemic in facet background","text":"Add separate geom_histogram() command current one. Specify data used data without column used faceting (use select()). , specify color like “grey” degree transparency make appear background.Note y-axis maximum now based height entire epidemic.","code":"geom_histogram(data = select(central_data, -age_cat), color = \"grey\", alpha = 0.5)+\nggplot(central_data, aes(x = date_onset)) + \n  \n  # for background shadow of whole outbreak\n  geom_histogram(\n    data = select(central_data, -age_cat),\n    color = \"grey\",\n    alpha = 0.5)+\n\n  # actual epicurves by group\n  geom_histogram(\n    aes(group = age_cat, fill = age_cat),  # arguments inside aes() apply by group\n    color = \"black\",                       # arguments outside aes() apply to all data\n    breaks = bin_breaks)+                  # see breaks defined above\n                      \n  # Labels on x-axis\n  scale_x_date(\n    expand            = c(0,0),         # remove excess x-axis space below and after case bars\n    date_breaks       = \"2 months\",     # labels appear every 2 months\n    date_minor_breaks = \"1 month\",      # vertical lines appear every 1 month \n    date_labels       = \"%b\\n'%y\")+     # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+  # removes excess y-axis space below 0\n  \n  # aesthetic themes\n  theme_minimal()+                                           # a set of themes to simplify plot\n  theme(\n    plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n    axis.title = element_text(face = \"bold\"),\n    legend.position = \"bottom\",\n    strip.text = element_text(face = \"bold\", size = 10),\n    strip.background = element_rect(fill = \"white\"))+        # axis titles in bold\n  \n  # create facets\n  facet_wrap(\n    ~age_cat,                          # each plot is one value of age_cat\n    ncol = 4,                          # number of columns\n    strip.position = \"top\",            # position of the facet title/strip\n    labeller = my_labels)+             # labeller defines above\n  \n  # labels\n  labs(\n    title    = \"Weekly incidence of cases, by age category\",\n    subtitle = \"Subtitle\",\n    fill     = \"Age category\",                                      # provide new title for legend\n    x        = \"Week of symptom onset\",\n    y        = \"Weekly incident cases reported\",\n    caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"one-facet-box-with-all-data","chapter":"1 Epidemic curves","heading":"One facet box with ALL data","text":", duplicate data (double number rows dataset) faceted column new value (e.g. “”) indicates duplicated rows. helper function enables :Notable changes ggplot() command :data used now central_data2 (double rows, new column “facet”)Labeller need updated, usedTo achieve vertically stacked facets: facet column moved rows side equation right replaced “.” (facet_wrap(facet~.)), ncol = 1. may also need adjust width height saved png plot image (see ggsave() [ggplot tips]).","code":"\n# Define helper function\nCreateAllFacet <- function(df, col){\n     df$facet <- df[[col]]\n     temp <- df\n     temp$facet <- \"all\"\n     merged <-rbind(temp, df)\n     \n     # ensure the facet value is a factor\n     merged[[col]] <- as.factor(merged[[col]])\n     \n     return(merged)\n}\n\n# Create dataset that is duplicated, to show \"all zones\" as another facet level\ncentral_data2 <- CreateAllFacet(central_data, col = \"age_cat\") %>%\n  mutate(facet = factor(facet,\n                        levels = c(\"all\", \"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-29\", \"30-49\", \"50-69\", \"70+\")))\n\n# check\ntable(central_data2$facet, useNA = \"always\")## \r\n##   all   0-4   5-9 10-14 15-19 20-29 30-49 50-69   70+  <NA> \r\n##   454    92    55    82    62    79    64    12     0     8\nggplot(central_data2, aes(x = date_onset)) + \n  \n  # actual epicurves by group\n  geom_histogram(\n        aes(group = age_cat, fill = age_cat),  # arguments inside aes() apply by group\n        color = \"black\",                       # arguments outside aes() apply to all data\n        breaks = bin_breaks)+                  # see breaks defined above\n                      \n  # Labels on x-axis\n  scale_x_date(expand            = c(0,0),         # remove excess x-axis space below and after case bars\n               date_breaks       = \"2 months\",     # labels appear every 2 months\n               date_minor_breaks = \"1 month\",      # vertical lines appear every 1 month \n               date_labels       = \"%b\\n'%y\")+     # date labels format\n  \n  # y-axis\n  scale_y_continuous(expand = c(0,0))+                   # removes excess y-axis space between bottom of bars and the labels\n  \n  # aesthetic themes\n  theme_minimal()+                                               # a set of themes to simplify plot\n  theme(plot.caption = element_text(face = \"italic\", hjust = 0), # caption on left side in italics\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\")+               \n  \n  # create facets\n  facet_wrap(facet~. ,                            # each plot is one value of facet\n             ncol = 1)+            \n\n  # labels\n  labs(title    = \"Weekly incidence of cases, by age category\",\n       subtitle = \"Subtitle\",\n       fill     = \"Age category\",                                      # provide new title for legend\n       x        = \"Week of symptom onset\",\n       y        = \"Weekly incident cases reported\",\n       caption  = stringr::str_glue(\"n = {nrow(central_data)} from Central Hospital; Case onsets range from {format(min(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')} to {format(max(central_data$date_onset, na.rm=T), format = '%a %d %b %Y')}\\n{nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown\"))"},{"path":"epidemic-curves.html","id":"moving-averages","chapter":"1 Epidemic curves","heading":"1.5 Moving averages","text":"Add moving averages ggplot() epicurve one two ways:Plot pre-calculated moving average:\r\nAggregate data necessary (daily, weekly, etc.)\r\nCalculate moving average\r\nAdd moving average ggplot (e.g. geom_line())\r\nAggregate data necessary (daily, weekly, etc.)Calculate moving averageAdd moving average ggplot (e.g. geom_line())Calculate --fly within ggplot() commandSee page Moving averages details. Brief examples provided .","code":""},{"path":"epidemic-curves.html","id":"using-slider","chapter":"1 Epidemic curves","heading":"1.5.1 Using slider","text":"approach, moving average calculated dataset prior plotting:Within mutate(), new column created hold average. slide_index() slider package used shown .ggplot(), geom_line() added histogram, reflecting moving average.See helpful online vignette slider package","code":"\n# load package\npacman::p_load(slider)  # slider used to calculate rolling averages\n\n# make dataset of daily counts and 7-day moving average\n#######################################################\nll_counts_7day <- linelist %>% \n  ## count cases by date\n  count(date_onset,\n        name = \"new_cases\") %>%   # name of new column\n  filter(!is.na(date_onset)) %>%  # remove cases with missing date_onset\n  \n  ## calculate the average number of cases in the preceding 7 days\n  mutate(\n    avg_7day = slider::slide_index(    # create new column\n      new_cases,                       # calculate based on value in new_cases column\n      .i = date_onset,                 # index is date_onset col, so non-present dates are included in window \n      .f = ~mean(.x, na.rm = TRUE),    # function is mean() with missing values removed\n      .before = 6,                     # window is the day and 6-days before\n      .complete = FALSE),              # must be FALSE for unlist() to work in next step\n    avg_7day = unlist(avg_7day))\n\n\n# plot\n######\nggplot(data = ll_counts_7day, aes(x = date_onset)) +\n    geom_histogram(aes(y = new_cases),\n                   fill=\"#92a8d1\",\n                   stat = \"identity\",\n                   position = \"stack\",\n                   colour = \"#92a8d1\")+ \n    geom_line(aes(y = avg_7day, lty = \"7-day \\nrolling avg\"),\n              color=\"red\",\n              size = 1) + \n    scale_x_date(date_breaks = \"1 month\",\n                 date_labels = '%d/%m',\n                 expand = c(0,0)) +\n    scale_y_continuous(expand = c(0,0),\n                       limits = c(0, NA)) + \n    labs(x=\"\",\n         y =\"Number of confirmed cases\",\n         fill = \"Legend\")+ \n    theme_minimal()+\n    theme(legend.title = element_blank())  # removes title of legend"},{"path":"epidemic-curves.html","id":"using-tidyquant","chapter":"1 Epidemic curves","heading":"1.5.1.0.1 Using tidyquant","text":"Using tidyquant package calculate moving average --fly (within ggplot()).option difficult modify pre-calculating moving average. default,geom_ma() uses Simple Moving Average (SMA) (TRR::SMA()). See documentation entering ?SMA R console. Calculates arithmetic mean past n observations. Also note moving average begin early previous example.","code":"\n# load package\npacman::p_load(tidyquant)\n\n# make daily count data\n#######################\nll_counts_7day <- linelist %>% \n  count(date_onset, name = \"daily_cases\")\n\n\n# plot\n######\nggplot(data = ll_counts_7day,   # use daily count data\n       aes(x = date_onset,      # date x-axis\n           y = daily_cases))+   # counts\n  \n  # histogram in the background\n  geom_histogram(stat = \"identity\",    # height = value in the cell, not number of rows\n                 color = \"#92a8d1\",    # color of lines within histogram\n                 fill = \"#92a8d1\")+    # color of histogram\n  \n  # moving average line\n  tidyquant::geom_ma(n = 7,            # window width\n                     size = 2,         # line size\n                     color = \"black\",  # line color\n                     lty = \"solid\"     # line type ()\n                     )+\n     \n  # labels for x-axis\n  scale_x_date(date_breaks = \"2 months\",      # labels every 2 months \n               date_minor_breaks = \"1 month\", # gridlines every month\n               date_labels = '%b\\n%Y')+       #labeled by month with year below\n     \n  # Choose color palette (uses RColorBrewer package)\n  scale_fill_brewer(palette = \"Pastel2\")+ \n  \n  theme_minimal()+\n  \n  labs(x = \"Date of onset\", \n       y = \"Daily case incidence\",\n       title = \"Daily case incidence, with 7-day moving average\")"},{"path":"epidemic-curves.html","id":"tentative-data","chapter":"1 Epidemic curves","heading":"1.6 Tentative data","text":"recent data shown epicurves often marked tentative, subject reporting delays. can done adding vertical line /rectangle specified number days. two options:Use annotate():\r\nPros: Transparency rectangle easy. Cons: Items appear legend.\r\nline use annotate(geom = \"segment\"). Provide x, xend, y, yend. Adjust size, linetype (lty), color.\r\nrectangle use annotate(geom = \"rect\"). Provide xmin/xmax/ymin/ymax. Adjust color alpha.\r\nPros: Transparency rectangle easy. Cons: Items appear legend.line use annotate(geom = \"segment\"). Provide x, xend, y, yend. Adjust size, linetype (lty), color.rectangle use annotate(geom = \"rect\"). Provide xmin/xmax/ymin/ymax. Adjust color alpha.Use geom_segment() geom_rect():\r\nPros: Items can easily appear legend. Cons: Difficult achieve semi-transparency rectangle.\r\nProvide x/y arguments noted annotate()\r\nPros: Items can easily appear legend. Cons: Difficult achieve semi-transparency rectangle.Provide x/y arguments noted annotate()CAUTION: can use geom_rect() draw rectangle, adjusting transparency (alpha) work linelist context. function overlays rectangle observation/row!. Try low alpha (e.g. 0.01), use annotate(geom = \"rect\") shown. ","code":""},{"path":"epidemic-curves.html","id":"using-annotate","chapter":"1 Epidemic curves","heading":"Using annotate()","text":"Within annotate(geom = \"rect\"), xmin xmax arguments must given inputs class Date.Note data aggregated weekly bars, last bar extends Monday last data point, shaded region may appear cover 4 weeksHere annotate() online exampleThe black vertical line can achieved code , using geom_vline() lose ability control height:","code":"\nggplot(central_data, aes(x = date_onset)) + \n  \n  # histogram\n  geom_histogram(\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n\n  # scales\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_date(\n    expand = c(0,0),                   # remove excess x-axis space below and after case bars\n    date_breaks = \"1 month\",           # 1st of month\n    date_minor_breaks = \"1 month\",     # 1st of month\n    date_labels = \"%b\\n'%y\")+          # label format\n  \n  # labels and theme\n  labs(title = \"Using annotate()\\nRectangle and line showing that data from last 21-days are tentative\",\n    x = \"Week of symptom onset\",\n    y = \"Weekly case indicence\")+ \n  theme_minimal()+\n  \n  # add semi-transparent red rectangle to tentative data\n  annotate(\"rect\",\n           xmin  = as.Date(max(central_data$date_onset, na.rm = T) - 21), # note must be wrapped in as.Date()\n           xmax  = as.Date(Inf),                                          # note must be wrapped in as.Date()\n           ymin  = 0,\n           ymax  = Inf,\n           alpha = 0.2,          # alpha easy and intuitive to adjust using annotate()\n           fill  = \"red\")+\n  \n  # add black vertical line on top of other layers\n  annotate(\"segment\",\n           x     = max(central_data$date_onset, na.rm = T) - 21, # 21 days before last data\n           xend  = max(central_data$date_onset, na.rm = T) - 21, \n           y     = 0,         # line begins at y = 0\n           yend  = Inf,       # line to top of plot\n           size  = 2,         # line size\n           color = \"black\",\n           lty   = \"solid\")+   # linetype e.g. \"solid\", \"dashed\"\n\n  # add text in rectangle\n  annotate(\"text\",\n           x = max(central_data$date_onset, na.rm = T) - 15,\n           y = 15,\n           label = \"Subject to reporting delays\",\n           angle = 90)\ngeom_vline(xintercept = max(central_data$date_onset, na.rm = T) - 21,\n           size = 2,\n           color = \"black\")"},{"path":"epidemic-curves.html","id":"using-geom_segment-and-geom_rect","chapter":"1 Epidemic curves","heading":"Using geom_segment() and geom_rect()","text":"alternative method, red color explained legend.","code":"\nggplot(central_data, aes(x = date_onset)) + \n  \n  # histogram\n  geom_histogram(\n    breaks = seq.Date(\n      from = as.Date(floor_date(min(central_data$date_onset, na.rm=T),   \"week\", week_start = 1)),\n      to   = as.Date(ceiling_date(max(central_data$date_onset, na.rm=T), \"week\", week_start = 1)),\n      by   = \"7 days\"),\n    color = \"darkblue\",\n    fill = \"lightblue\") +\n\n  # scales\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_date(\n    expand = c(0,0),                   # remove excess x-axis space below and after case bars\n    date_breaks = \"3 weeks\",           # Monday every 3 weeks\n    date_minor_breaks = \"week\",        # Monday weeks \n    date_labels = \"%d\\n%b\\n'%y\")+      # label format\n  \n  # labels and theme\n  labs(title = \"Using geom_segment() and geom_rect()\\nRectangle and line showing that data from last 21-days are tentative\",\n    subtitle = \"\")+ \n  theme_minimal()+\n  \n  # make rectangle covering last 21 days\n  geom_rect(aes(\n              xmin  = as.Date(max(central_data$date_onset, na.rm = T) - 21), # note must be wrapped in as.Date()\n              xmax  = as.Date(Inf),                                          # note must be wrapped in as.Date()\n              ymin  = 0,\n              ymax  = Inf,\n              color = \"Reporting delays\\npossible\"),    # sets label for legend (note: is within aes())\n              alpha = .002,                             # !!! Difficult to adjust transparency with this option\n              fill  = \"red\")+\n  \n  # make vertical line\n  geom_segment(aes(x = max(central_data$date_onset, na.rm = T) - 21,\n                   xend = max(central_data$date_onset, na.rm = T) - 21,\n                   y = 0,\n                   yend = Inf),\n               color = \"black\",\n               lty = \"solid\",\n               size = 2)+\n  theme(legend.title = element_blank())                 # remove title of legend"},{"path":"epidemic-curves.html","id":"multi-level-date-labels","chapter":"1 Epidemic curves","heading":"1.7 Multi-level date labels","text":"want multi-level date labels (e.g. month year) without duplicating lower label levels, consider one approaches :Remember - can can use tools like \\n within date_labels labels arguments put parts label new line . However, code helps take years months (example) lower line .notes code :Case counts aggregated weeks aesthetic reasons. See Epicurves page (aggregated data tab) details.line used instead histogram, faceting approach work well histograms.Aggregate weekly countsMake plotsThe techniques adapted post stackoverflow.com.","code":"\n# Create dataset of case counts by week\n#######################################\ncentral_weekly <- linelist %>%\n  filter(hospital == \"Central Hospital\") %>%           # filter linelist\n  mutate(week = lubridate::floor_date(date_onset, unit = \"weeks\")) %>%  \n  count(week, .drop=F) %>%                             # summarize weekly case counts\n  filter(!is.na(week)) %>%                             # remove cases with missing onset_date\n  complete(week = seq.Date(from = min(week),           # fill-in all weeks with no cases reported\n                           to   = max(week),\n                           by   = \"week\"))\n# plot with box border on year\n##############################\nggplot(central_weekly) +\n  geom_line(aes(x = week, y = n),    # make line, specify x and y\n            stat = \"identity\") +             # because line height is count number\n  scale_x_date(date_labels=\"%b\",             # date label format show month \n               date_breaks=\"month\",          # date labels on 1st of each month\n               expand=c(0,0)) +              # remove excess space\n  facet_grid(~lubridate::year(week), # facet on year (of Date class column)\n             space=\"free_x\",                \n             scales=\"free_x\",                # x-axes adapt to data range (not \"fixed\")\n             switch=\"x\") +                   # facet labels (year) on bottom\n  theme_bw() +\n  theme(strip.placement = \"outside\",         # facet labels placement\n        strip.background = element_rect(fill = NA, # facet labels no fill grey border\n                                        colour = \"grey50\"),\n        panel.spacing = unit(0, \"cm\"))+      # no space between facet panels\n  labs(title = \"Nested year labels, grey label border\")\n# plot with no box border on year\n#################################\nggplot(central_weekly,\n       aes(x = week, y = n)) +              # establish x and y for entire plot\n  geom_line(stat = \"identity\",              # make line, line height is count number\n            color = \"#69b3a2\") +            # line color\n  geom_point(size=1, color=\"#69b3a2\") +     # make points at the weekly data points\n  geom_area(fill = \"#69b3a2\",               # fill area below line\n            alpha = 0.4)+                   # fill transparency\n  scale_x_date(date_labels=\"%b\",            # date label format show month \n               date_breaks=\"month\",         # date labels on 1st of each month\n               expand=c(0,0)) +             # remove excess space\n  facet_grid(~lubridate::year(week),   # facet on year (of Date class column)\n             space=\"free_x\",                \n             scales=\"free_x\",               # x-axes adapt to data range (not \"fixed\")\n             switch=\"x\") +                  # facet labels (year) on bottom\n  theme_bw() +\n  theme(strip.placement = \"outside\",                     # facet label placement\n          strip.background = element_blank(),            # no facet lable background\n          panel.grid.minor.x = element_blank(),          \n          panel.border = element_rect(colour=\"grey40\"),  # grey border to facet PANEL\n          panel.spacing=unit(0,\"cm\"))+                   # No space between facet panels\n  labs(title = \"Nested year labels - points, shaded, no label border\")"},{"path":"epidemic-curves.html","id":"aggregated-data","chapter":"1 Epidemic curves","heading":"1.8 Aggregated data","text":"","code":""},{"path":"epidemic-curves.html","id":"aggregating-linelist-data","chapter":"1 Epidemic curves","heading":"Aggregating linelist data","text":"learn generally group aggregate data, see page [Grouping data].circumstance, demonstrate aggregating weeks, months, days.","code":""},{"path":"epidemic-curves.html","id":"aggregating-into-weeks","chapter":"1 Epidemic curves","heading":"Aggregating into weeks","text":"Create new column weeks, use group_by() summarize() get weekly case counts.aggregate weeks show weeks (even ones cases), :Create new ‘week’ column within mutate(), using floor_date() lubridate package:\r\nuse unit = set desired time unit, e.g. \"week`\r\nuse week_start = set weekday start week (7 = Sunday, 1 = Monday)\r\nuse unit = set desired time unit, e.g. \"week`use week_start = set weekday start week (7 = Sunday, 1 = Monday)Follow complete() ensure weeks appear - even cases.example:first 50 rows resulting dataframe:Alternatively, can use aweek package’s date2week() function. shown , set week_start = “Sunday”, “Monday”, etc. Set floor_date = TRUE output YYYY-Www. Set factor = TRUE possible weeks included, even cases (replaces complete() step lubridate approach ). can also use numeric = TRUE want week number (note distinguish years).","code":"\n# Make dataset of weekly case counts\nweekly_counts <- linelist %>% \n  mutate(\n    week = lubridate::floor_date(date_onset,\n                                 unit = \"week\")) %>%  # new column of week of onset\n  count(week) %>%                                     # group data by week and count rows per group\n  filter(!is.na(week)) %>%                            # remove entries for cases missing date_onset\n  complete(week = seq.Date(from = min(week),          # fill-in all weeks with no cases reported\n                           to = max(week),\n                           by=\"week\")) %>% \n  ungroup()                                           # deactivate grouping\n# Make dataset of weekly case counts\nweekly_counts <- linelist %>% \n  mutate(week = aweek::date2week(date_onset,          # new column of week of onset\n                                 floor_day = T,       # show as weeks without weekday\n                                 factor = TRUE)) %>%  # include all possible weeks\n  count(week) %>% \n  ungroup()                                           # deactivate grouping\n\n# Optional: add column of start DATE for each week - e.g. for ggplot() when date x-axis is expected\n# note: add this step AFTER the above code, to ensure all weeks are present\nweekly_counts <- weekly_counts %>% \n  mutate(week_as_date = aweek::week2date(week, week_start = \"Monday\")) # output is Monday date of each week"},{"path":"epidemic-curves.html","id":"aggregating-into-months","chapter":"1 Epidemic curves","heading":"Aggregating into months","text":"aggregate cases months, use floor_date() lubridate package, argument unit = \"months\". rounds date 1st month. output class Date.Note complete() step also use “months”","code":"\n# Make dataset of weekly case counts\nmonthly_counts <- linelist %>% \n  mutate(month = lubridate::floor_date(date_onset, unit = \"months\")) %>%   # new column, 1st of month of onset\n  count(month) %>% \n  filter(!is.na(month)) %>% \n  complete(month = seq.Date(min(month),     # fill-in all months with no cases reported\n                            max(month),\n                            by=\"month\"))    "},{"path":"epidemic-curves.html","id":"aggregating-into-days","chapter":"1 Epidemic curves","heading":"Aggregating into days","text":"aggregate linelist days, use approach need create new column. Use group_by() date column (e.g. date_onset).plotting histogram, missing days data problem long column class Date. However, may important types plots tables possible days apear data. done : tidyr::complete()","code":"\n# Make dataset of weekly case counts\ndaily_counts <- linelist %>% \n  count(date_onset) %>%                           # count number of rows per unique date\n  filter(!is.na(date_onset)) %>%                  # remove aggregation of rows that were missing date_onset\n  complete(date_onset = seq.Date(min(date_onset), # ensure all days appear\n                                 max(date_onset),\n                                 by=\"day\"))  "},{"path":"epidemic-curves.html","id":"plotting-aggregated-data","chapter":"1 Epidemic curves","heading":"Plotting aggregated data","text":"Often instead linelist, begin aggregated counts facilities, districts, etc. can make epicurve ggplot() code slightly different. incidence package currently support plotting aggregated data.section utilize count_data dataset imported earlier, data preparation section. linelist aggregated day-hospital counts. first 50 rows displayed ., must ensure date variables correctly classified.","code":"\n# Convert Date variable to Date class\nclass(count_data$date_hospitalisation)## [1] \"Date\""},{"path":"epidemic-curves.html","id":"plotting-daily-counts","chapter":"1 Epidemic curves","heading":"Plotting daily counts","text":"can plot daily epicurve daily counts. differences:Specify y = counts column within primary aesthetics aes()Use stat = \"identity\" within geom_histogram() indicates y-values counts y = column aes()","code":"\nggplot(data = count_data, aes(x = as.Date(date_hospitalisation), y = n_cases))+\n     geom_histogram(stat = \"identity\")+\n     labs(x = \"Date of report\", \n          y = \"Number of cases\",\n          Title = \"Daily case incidence, from daily count data\")"},{"path":"epidemic-curves.html","id":"plotting-weekly-counts","chapter":"1 Epidemic curves","heading":"Plotting weekly counts","text":"aggregated daily counts weekly counts, use package lubridate function floor_date(), described . Note use group_by() summarize() place count() need sum() case counts instead just counting number rows per group.first 50 rows count_data_weekly displayed . can see counts aggregated weeks. week displayed first day week (Monday default).also specify factor level order hospitalNow plot epiweek.","code":"\n# Create weekly dataset with epiweek column\ncount_data_weekly <- count_data %>%\n  mutate(epiweek = lubridate::floor_date(date_hospitalisation, \"week\")) %>% \n  group_by(hospital, epiweek, .drop=F) %>% \n  summarize(n_cases_weekly = sum(n_cases, na.rm=T))   \ncount_data_weekly <- count_data_weekly %>% \n  mutate(hospital = factor(hospital),\n         hospital = fct_relevel(hospital,\n                                c(\"Missing\", \"Port Hospital\",\n                                  \"Military Hospital\", \"Central Hospital\",\n                                  \"St. Mark's Maternity Hospital (SMMH)\",\n                                  \"Other\")))\nggplot(data = count_data_weekly,\n       aes(x = epiweek,\n           y = n_cases_weekly,\n           group = hospital,\n           fill = hospital))+\n  \n  geom_histogram(stat = \"identity\")+\n     \n  # labels for x-axis\n  scale_x_date(date_breaks = \"2 months\",      # labels every 2 months \n               date_minor_breaks = \"1 month\", # gridlines every month\n               date_labels = '%b\\n%Y')+       #labeled by month with year below\n     \n  # Choose color palette (uses RColorBrewer package)\n  scale_fill_brewer(palette = \"Pastel2\")+ \n  \n  theme_minimal()+\n  \n  labs(x = \"Week of onset\", \n       y = \"Weekly case incidence\",\n       fill = \"Hospital\",\n       title = \"Weekly case incidence, from aggregated count data by hospital\")"},{"path":"epidemic-curves.html","id":"dual-axis","chapter":"1 Epidemic curves","heading":"1.9 Dual-axis","text":"Although fierce discussions validity dual axes within data visualization community, many epi supervisors want see epicurve similar chart percent overlaid second axis.See handbook page [ggplot tips] details make second axis.","code":""},{"path":"epidemic-curves.html","id":"cumulative-incidence","chapter":"1 Epidemic curves","heading":"1.10 Cumulative Incidence","text":"beginning case linelist, create new column containing cumulative number cases per day outbreak using cumsum() base R:first 10 rows shown :cumulative column can plotted date_onset, using geom_line():can also overlaid onto epicurve, dual-axis using cowplot method described [ggplot tips] page:Now use cowplot overlay two plots. Attention paid x-axis alignment, side y-axis, use theme_cowplot().","code":"\ncumulative_case_counts <- linelist %>% \n  count(date_onset) %>%                # count of rows per day (returned in column \"n\")   \n  mutate(                         \n    cumulative_cases = cumsum(n)       # new column of the cumulative number of rows at each date\n    )\nplot_cumulative <- ggplot()+\n  geom_line(\n    data = cumulative_case_counts,\n    aes(x = date_onset, y = cumulative_cases),\n    size = 2,\n    color = \"blue\")\n\nplot_cumulative\n#load package\npacman::p_load(cowplot)\n\n# Make first plot of epicurve histogram\nplot_cases <- ggplot()+\n  geom_histogram(          \n    data = linelist,\n    aes(x = date_onset),\n    binwidth = 1)+\n  labs(\n    y = \"Daily cases\",\n    x = \"Date of symptom onset\"\n  )+\n  theme_cowplot()\n\n# make second plot of cumulative cases line\nplot_cumulative <- ggplot()+\n  geom_line(\n    data = cumulative_case_counts,\n    aes(x = date_onset, y = cumulative_cases),\n    size = 2,\n    color = \"blue\")+\n  scale_y_continuous(\n    position = \"right\")+\n  labs(x = \"\",\n       y = \"Cumulative cases\")+\n  theme_cowplot()+\n  theme(\n    axis.line.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks = element_blank())\naligned_plots <- align_plots(plot_cases, plot_cumulative, align=\"hv\", axis=\"tblr\")\nggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])"},{"path":"epidemic-curves.html","id":"resources","chapter":"1 Epidemic curves","heading":"1.11 Resources","text":"Links online tutorials resources.","code":""}]
